/* eslint-disable */

import { AllTypesProps, ReturnTypes } from './const';
type ZEUS_INTERFACES = never;
type ZEUS_UNIONS = never;

export type ValueTypes = {
  /** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
  ['Boolean_comparison_exp']: {
    _eq?: boolean | null;
    _gt?: boolean | null;
    _gte?: boolean | null;
    _in?: boolean[];
    _is_null?: boolean | null;
    _lt?: boolean | null;
    _lte?: boolean | null;
    _neq?: boolean | null;
    _nin?: boolean[];
  };
  ['CadastrarClienteOutput']: AliasType<{
    Id?: true;
    __typename?: true;
  }>;
  ['CadastrarColaboradorOutput']: AliasType<{
    Id?: true;
    __typename?: true;
  }>;
  ['CadastrarFornecedorOutput']: AliasType<{
    Id?: true;
    __typename?: true;
  }>;
  ['CadastrarRepresentanteOutput']: AliasType<{
    Id?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos']: AliasType<{
    Id?: true;
    Nome?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_aggregate']: AliasType<{
    aggregate?: ValueTypes['CategoriasDeVeiculos_aggregate_fields'];
    nodes?: ValueTypes['CategoriasDeVeiculos'];
    __typename?: true;
  }>;
  /** aggregate fields of "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['CategoriasDeVeiculos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['CategoriasDeVeiculos_max_fields'];
    min?: ValueTypes['CategoriasDeVeiculos_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "CategoriasDeVeiculos". All fields are combined with a logical 'AND'. */
  ['CategoriasDeVeiculos_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['CategoriasDeVeiculos_bool_exp'][];
    _not?: ValueTypes['CategoriasDeVeiculos_bool_exp'] | null;
    _or?: ValueTypes['CategoriasDeVeiculos_bool_exp'][];
  };
  /** unique or primary key constraints on table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_constraint']: CategoriasDeVeiculos_constraint;
  /** input type for inserting data into table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
  };
  /** aggregate max on columns */
  ['CategoriasDeVeiculos_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['CategoriasDeVeiculos_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['CategoriasDeVeiculos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_on_conflict']: {
    constraint: ValueTypes['CategoriasDeVeiculos_constraint'];
    update_columns: ValueTypes['CategoriasDeVeiculos_update_column'][];
    where?: ValueTypes['CategoriasDeVeiculos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "CategoriasDeVeiculos". */
  ['CategoriasDeVeiculos_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: CategoriasDeVeiculos */
  ['CategoriasDeVeiculos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_select_column']: CategoriasDeVeiculos_select_column;
  /** input type for updating data in table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
  };
  /** update columns of table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_update_column']: CategoriasDeVeiculos_update_column;
  /** columns and relationships of "EstadosEMunicipios" */
  ['EstadosEMunicipios']: AliasType<{
    Cidades?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['EstadosEMunicipios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['EstadosEMunicipios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
      },
      ValueTypes['EstadosEMunicipios']
    ];
    Cidades_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['EstadosEMunicipios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['EstadosEMunicipios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
      },
      ValueTypes['EstadosEMunicipios_aggregate']
    ];
    CodigoIbge?: true;
    /** An object relationship */
    Estado?: ValueTypes['EstadosEMunicipios'];
    Id?: true;
    Nome?: true;
    Pai_Id?: true;
    Sigla?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "EstadosEMunicipios" */
  ['EstadosEMunicipios_aggregate']: AliasType<{
    aggregate?: ValueTypes['EstadosEMunicipios_aggregate_fields'];
    nodes?: ValueTypes['EstadosEMunicipios'];
    __typename?: true;
  }>;
  /** aggregate fields of "EstadosEMunicipios" */
  ['EstadosEMunicipios_aggregate_fields']: AliasType<{
    avg?: ValueTypes['EstadosEMunicipios_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['EstadosEMunicipios_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['EstadosEMunicipios_max_fields'];
    min?: ValueTypes['EstadosEMunicipios_min_fields'];
    stddev?: ValueTypes['EstadosEMunicipios_stddev_fields'];
    stddev_pop?: ValueTypes['EstadosEMunicipios_stddev_pop_fields'];
    stddev_samp?: ValueTypes['EstadosEMunicipios_stddev_samp_fields'];
    sum?: ValueTypes['EstadosEMunicipios_sum_fields'];
    var_pop?: ValueTypes['EstadosEMunicipios_var_pop_fields'];
    var_samp?: ValueTypes['EstadosEMunicipios_var_samp_fields'];
    variance?: ValueTypes['EstadosEMunicipios_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_aggregate_order_by']: {
    avg?: ValueTypes['EstadosEMunicipios_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['EstadosEMunicipios_max_order_by'] | null;
    min?: ValueTypes['EstadosEMunicipios_min_order_by'] | null;
    stddev?: ValueTypes['EstadosEMunicipios_stddev_order_by'] | null;
    stddev_pop?: ValueTypes['EstadosEMunicipios_stddev_pop_order_by'] | null;
    stddev_samp?: ValueTypes['EstadosEMunicipios_stddev_samp_order_by'] | null;
    sum?: ValueTypes['EstadosEMunicipios_sum_order_by'] | null;
    var_pop?: ValueTypes['EstadosEMunicipios_var_pop_order_by'] | null;
    var_samp?: ValueTypes['EstadosEMunicipios_var_samp_order_by'] | null;
    variance?: ValueTypes['EstadosEMunicipios_variance_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "EstadosEMunicipios" */
  ['EstadosEMunicipios_arr_rel_insert_input']: {
    data: ValueTypes['EstadosEMunicipios_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['EstadosEMunicipios_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['EstadosEMunicipios_avg_fields']: AliasType<{
    CodigoIbge?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_avg_order_by']: {
    CodigoIbge?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "EstadosEMunicipios". All fields are combined with a logical 'AND'. */
  ['EstadosEMunicipios_bool_exp']: {
    Cidades?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
    CodigoIbge?: ValueTypes['bigint_comparison_exp'] | null;
    Estado?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Pai_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Sigla?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['EstadosEMunicipios_bool_exp'][];
    _not?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
    _or?: ValueTypes['EstadosEMunicipios_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "EstadosEMunicipios" */
  ['EstadosEMunicipios_constraint']: EstadosEMunicipios_constraint;
  /** input type for incrementing numeric columns in table "EstadosEMunicipios" */
  ['EstadosEMunicipios_inc_input']: {
    CodigoIbge?: ValueTypes['bigint'] | null;
  };
  /** input type for inserting data into table "EstadosEMunicipios" */
  ['EstadosEMunicipios_insert_input']: {
    Cidades?: ValueTypes['EstadosEMunicipios_arr_rel_insert_input'] | null;
    CodigoIbge?: ValueTypes['bigint'] | null;
    Estado?: ValueTypes['EstadosEMunicipios_obj_rel_insert_input'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Pai_Id?: ValueTypes['uuid'] | null;
    Sigla?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['EstadosEMunicipios_max_fields']: AliasType<{
    CodigoIbge?: true;
    Id?: true;
    Nome?: true;
    Pai_Id?: true;
    Sigla?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_max_order_by']: {
    CodigoIbge?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Pai_Id?: ValueTypes['order_by'] | null;
    Sigla?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['EstadosEMunicipios_min_fields']: AliasType<{
    CodigoIbge?: true;
    Id?: true;
    Nome?: true;
    Pai_Id?: true;
    Sigla?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_min_order_by']: {
    CodigoIbge?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Pai_Id?: ValueTypes['order_by'] | null;
    Sigla?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "EstadosEMunicipios" */
  ['EstadosEMunicipios_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['EstadosEMunicipios'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "EstadosEMunicipios" */
  ['EstadosEMunicipios_obj_rel_insert_input']: {
    data: ValueTypes['EstadosEMunicipios_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['EstadosEMunicipios_on_conflict'] | null;
  };
  /** on conflict condition type for table "EstadosEMunicipios" */
  ['EstadosEMunicipios_on_conflict']: {
    constraint: ValueTypes['EstadosEMunicipios_constraint'];
    update_columns: ValueTypes['EstadosEMunicipios_update_column'][];
    where?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "EstadosEMunicipios". */
  ['EstadosEMunicipios_order_by']: {
    Cidades_aggregate?:
      | ValueTypes['EstadosEMunicipios_aggregate_order_by']
      | null;
    CodigoIbge?: ValueTypes['order_by'] | null;
    Estado?: ValueTypes['EstadosEMunicipios_order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Pai_Id?: ValueTypes['order_by'] | null;
    Sigla?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: EstadosEMunicipios */
  ['EstadosEMunicipios_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_select_column']: EstadosEMunicipios_select_column;
  /** input type for updating data in table "EstadosEMunicipios" */
  ['EstadosEMunicipios_set_input']: {
    CodigoIbge?: ValueTypes['bigint'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Pai_Id?: ValueTypes['uuid'] | null;
    Sigla?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['EstadosEMunicipios_stddev_fields']: AliasType<{
    CodigoIbge?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_stddev_order_by']: {
    CodigoIbge?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['EstadosEMunicipios_stddev_pop_fields']: AliasType<{
    CodigoIbge?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_stddev_pop_order_by']: {
    CodigoIbge?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['EstadosEMunicipios_stddev_samp_fields']: AliasType<{
    CodigoIbge?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_stddev_samp_order_by']: {
    CodigoIbge?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['EstadosEMunicipios_sum_fields']: AliasType<{
    CodigoIbge?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_sum_order_by']: {
    CodigoIbge?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_update_column']: EstadosEMunicipios_update_column;
  /** aggregate var_pop on columns */
  ['EstadosEMunicipios_var_pop_fields']: AliasType<{
    CodigoIbge?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_var_pop_order_by']: {
    CodigoIbge?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['EstadosEMunicipios_var_samp_fields']: AliasType<{
    CodigoIbge?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_var_samp_order_by']: {
    CodigoIbge?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['EstadosEMunicipios_variance_fields']: AliasType<{
    CodigoIbge?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_variance_order_by']: {
    CodigoIbge?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
  ['Int_comparison_exp']: {
    _eq?: number | null;
    _gt?: number | null;
    _gte?: number | null;
    _in?: number[];
    _is_null?: boolean | null;
    _lt?: number | null;
    _lte?: number | null;
    _neq?: number | null;
    _nin?: number[];
  };
  /** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
  ['String_comparison_exp']: {
    _eq?: string | null;
    _gt?: string | null;
    _gte?: string | null;
    /** does the column match the given case-insensitive pattern */
    _ilike?: string | null;
    _in?: string[];
    /** does the column match the given POSIX regular expression, case insensitive */
    _iregex?: string | null;
    _is_null?: boolean | null;
    /** does the column match the given pattern */
    _like?: string | null;
    _lt?: string | null;
    _lte?: string | null;
    _neq?: string | null;
    /** does the column NOT match the given case-insensitive pattern */
    _nilike?: string | null;
    _nin?: string[];
    /** does the column NOT match the given POSIX regular expression, case insensitive */
    _niregex?: string | null;
    /** does the column NOT match the given pattern */
    _nlike?: string | null;
    /** does the column NOT match the given POSIX regular expression, case sensitive */
    _nregex?: string | null;
    /** does the column NOT match the given SQL regular expression */
    _nsimilar?: string | null;
    /** does the column match the given POSIX regular expression, case sensitive */
    _regex?: string | null;
    /** does the column match the given SQL regular expression */
    _similar?: string | null;
  };
  /** columns and relationships of "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos']: AliasType<{
    /** An object relationship */
    Fluxo?: ValueTypes['atendimentos_Fluxos'];
    Fluxo_Id?: true;
    Id?: true;
    Nome?: true;
    Posicao?: true;
    Tickets?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Tickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Tickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Tickets']
    ];
    Tickets_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Tickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Tickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Tickets_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_aggregate']: AliasType<{
    aggregate?: ValueTypes['atendimentos_EtapasDosFluxos_aggregate_fields'];
    nodes?: ValueTypes['atendimentos_EtapasDosFluxos'];
    __typename?: true;
  }>;
  /** aggregate fields of "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['atendimentos_EtapasDosFluxos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['atendimentos_EtapasDosFluxos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['atendimentos_EtapasDosFluxos_max_fields'];
    min?: ValueTypes['atendimentos_EtapasDosFluxos_min_fields'];
    stddev?: ValueTypes['atendimentos_EtapasDosFluxos_stddev_fields'];
    stddev_pop?: ValueTypes['atendimentos_EtapasDosFluxos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['atendimentos_EtapasDosFluxos_stddev_samp_fields'];
    sum?: ValueTypes['atendimentos_EtapasDosFluxos_sum_fields'];
    var_pop?: ValueTypes['atendimentos_EtapasDosFluxos_var_pop_fields'];
    var_samp?: ValueTypes['atendimentos_EtapasDosFluxos_var_samp_fields'];
    variance?: ValueTypes['atendimentos_EtapasDosFluxos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_aggregate_order_by']: {
    avg?: ValueTypes['atendimentos_EtapasDosFluxos_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['atendimentos_EtapasDosFluxos_max_order_by'] | null;
    min?: ValueTypes['atendimentos_EtapasDosFluxos_min_order_by'] | null;
    stddev?: ValueTypes['atendimentos_EtapasDosFluxos_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['atendimentos_EtapasDosFluxos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['atendimentos_EtapasDosFluxos_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['atendimentos_EtapasDosFluxos_sum_order_by'] | null;
    var_pop?:
      | ValueTypes['atendimentos_EtapasDosFluxos_var_pop_order_by']
      | null;
    var_samp?:
      | ValueTypes['atendimentos_EtapasDosFluxos_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['atendimentos_EtapasDosFluxos_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_arr_rel_insert_input']: {
    data: ValueTypes['atendimentos_EtapasDosFluxos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['atendimentos_EtapasDosFluxos_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['atendimentos_EtapasDosFluxos_avg_fields']: AliasType<{
    Posicao?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_avg_order_by']: {
    Posicao?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "atendimentos.EtapasDosFluxos". All fields are combined with a logical 'AND'. */
  ['atendimentos_EtapasDosFluxos_bool_exp']: {
    Fluxo?: ValueTypes['atendimentos_Fluxos_bool_exp'] | null;
    Fluxo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Posicao?: ValueTypes['Int_comparison_exp'] | null;
    Tickets?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
    _and?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'][];
    _not?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'] | null;
    _or?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_constraint']: atendimentos_EtapasDosFluxos_constraint;
  /** input type for incrementing numeric columns in table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_inc_input']: {
    Posicao?: number | null;
  };
  /** input type for inserting data into table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_insert_input']: {
    Fluxo?: ValueTypes['atendimentos_Fluxos_obj_rel_insert_input'] | null;
    Fluxo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Posicao?: number | null;
    Tickets?: ValueTypes['atendimentos_Tickets_arr_rel_insert_input'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['atendimentos_EtapasDosFluxos_max_fields']: AliasType<{
    Fluxo_Id?: true;
    Id?: true;
    Nome?: true;
    Posicao?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_max_order_by']: {
    Fluxo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Posicao?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['atendimentos_EtapasDosFluxos_min_fields']: AliasType<{
    Fluxo_Id?: true;
    Id?: true;
    Nome?: true;
    Posicao?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_min_order_by']: {
    Fluxo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Posicao?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['atendimentos_EtapasDosFluxos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_obj_rel_insert_input']: {
    data: ValueTypes['atendimentos_EtapasDosFluxos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['atendimentos_EtapasDosFluxos_on_conflict'] | null;
  };
  /** on conflict condition type for table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_on_conflict']: {
    constraint: ValueTypes['atendimentos_EtapasDosFluxos_constraint'];
    update_columns: ValueTypes['atendimentos_EtapasDosFluxos_update_column'][];
    where?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "atendimentos.EtapasDosFluxos". */
  ['atendimentos_EtapasDosFluxos_order_by']: {
    Fluxo?: ValueTypes['atendimentos_Fluxos_order_by'] | null;
    Fluxo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Posicao?: ValueTypes['order_by'] | null;
    Tickets_aggregate?:
      | ValueTypes['atendimentos_Tickets_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: atendimentos_EtapasDosFluxos */
  ['atendimentos_EtapasDosFluxos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_select_column']: atendimentos_EtapasDosFluxos_select_column;
  /** input type for updating data in table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_set_input']: {
    Fluxo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Posicao?: number | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['atendimentos_EtapasDosFluxos_stddev_fields']: AliasType<{
    Posicao?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_stddev_order_by']: {
    Posicao?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['atendimentos_EtapasDosFluxos_stddev_pop_fields']: AliasType<{
    Posicao?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_stddev_pop_order_by']: {
    Posicao?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['atendimentos_EtapasDosFluxos_stddev_samp_fields']: AliasType<{
    Posicao?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_stddev_samp_order_by']: {
    Posicao?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['atendimentos_EtapasDosFluxos_sum_fields']: AliasType<{
    Posicao?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_sum_order_by']: {
    Posicao?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_update_column']: atendimentos_EtapasDosFluxos_update_column;
  /** aggregate var_pop on columns */
  ['atendimentos_EtapasDosFluxos_var_pop_fields']: AliasType<{
    Posicao?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_var_pop_order_by']: {
    Posicao?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['atendimentos_EtapasDosFluxos_var_samp_fields']: AliasType<{
    Posicao?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_var_samp_order_by']: {
    Posicao?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['atendimentos_EtapasDosFluxos_variance_fields']: AliasType<{
    Posicao?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_variance_order_by']: {
    Posicao?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "atendimentos.Fluxos" */
  ['atendimentos_Fluxos']: AliasType<{
    Etapas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_EtapasDosFluxos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_EtapasDosFluxos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'] | null;
      },
      ValueTypes['atendimentos_EtapasDosFluxos']
    ];
    Etapas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_EtapasDosFluxos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_EtapasDosFluxos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'] | null;
      },
      ValueTypes['atendimentos_EtapasDosFluxos_aggregate']
    ];
    Id?: true;
    Nome?: true;
    Tickets?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Tickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Tickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Tickets']
    ];
    Tickets_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Tickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Tickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Tickets_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_aggregate']: AliasType<{
    aggregate?: ValueTypes['atendimentos_Fluxos_aggregate_fields'];
    nodes?: ValueTypes['atendimentos_Fluxos'];
    __typename?: true;
  }>;
  /** aggregate fields of "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['atendimentos_Fluxos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['atendimentos_Fluxos_max_fields'];
    min?: ValueTypes['atendimentos_Fluxos_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "atendimentos.Fluxos". All fields are combined with a logical 'AND'. */
  ['atendimentos_Fluxos_bool_exp']: {
    Etapas?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Tickets?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
    _and?: ValueTypes['atendimentos_Fluxos_bool_exp'][];
    _not?: ValueTypes['atendimentos_Fluxos_bool_exp'] | null;
    _or?: ValueTypes['atendimentos_Fluxos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_constraint']: atendimentos_Fluxos_constraint;
  /** input type for inserting data into table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_insert_input']: {
    Etapas?:
      | ValueTypes['atendimentos_EtapasDosFluxos_arr_rel_insert_input']
      | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Tickets?: ValueTypes['atendimentos_Tickets_arr_rel_insert_input'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['atendimentos_Fluxos_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['atendimentos_Fluxos_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['atendimentos_Fluxos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_obj_rel_insert_input']: {
    data: ValueTypes['atendimentos_Fluxos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['atendimentos_Fluxos_on_conflict'] | null;
  };
  /** on conflict condition type for table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_on_conflict']: {
    constraint: ValueTypes['atendimentos_Fluxos_constraint'];
    update_columns: ValueTypes['atendimentos_Fluxos_update_column'][];
    where?: ValueTypes['atendimentos_Fluxos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "atendimentos.Fluxos". */
  ['atendimentos_Fluxos_order_by']: {
    Etapas_aggregate?:
      | ValueTypes['atendimentos_EtapasDosFluxos_aggregate_order_by']
      | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Tickets_aggregate?:
      | ValueTypes['atendimentos_Tickets_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: atendimentos_Fluxos */
  ['atendimentos_Fluxos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_select_column']: atendimentos_Fluxos_select_column;
  /** input type for updating data in table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_update_column']: atendimentos_Fluxos_update_column;
  /** columns and relationships of "atendimentos.Tickets" */
  ['atendimentos_Tickets']: AliasType<{
    Cliente_Id?: true;
    CodigoReferencia?: true;
    /** An object relationship */
    Etapa?: ValueTypes['atendimentos_EtapasDosFluxos'];
    Etapa_Id?: true;
    /** An object relationship */
    Fluxo?: ValueTypes['atendimentos_Fluxos'];
    Fluxo_Id?: true;
    Id?: true;
    Lead_Id?: true;
    /** An object relationship */
    Tipo?: ValueTypes['atendimentos_TiposDeTickets'];
    Tipo_Id?: true;
    Usuario_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "atendimentos.Tickets" */
  ['atendimentos_Tickets_aggregate']: AliasType<{
    aggregate?: ValueTypes['atendimentos_Tickets_aggregate_fields'];
    nodes?: ValueTypes['atendimentos_Tickets'];
    __typename?: true;
  }>;
  /** aggregate fields of "atendimentos.Tickets" */
  ['atendimentos_Tickets_aggregate_fields']: AliasType<{
    avg?: ValueTypes['atendimentos_Tickets_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['atendimentos_Tickets_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['atendimentos_Tickets_max_fields'];
    min?: ValueTypes['atendimentos_Tickets_min_fields'];
    stddev?: ValueTypes['atendimentos_Tickets_stddev_fields'];
    stddev_pop?: ValueTypes['atendimentos_Tickets_stddev_pop_fields'];
    stddev_samp?: ValueTypes['atendimentos_Tickets_stddev_samp_fields'];
    sum?: ValueTypes['atendimentos_Tickets_sum_fields'];
    var_pop?: ValueTypes['atendimentos_Tickets_var_pop_fields'];
    var_samp?: ValueTypes['atendimentos_Tickets_var_samp_fields'];
    variance?: ValueTypes['atendimentos_Tickets_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_aggregate_order_by']: {
    avg?: ValueTypes['atendimentos_Tickets_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['atendimentos_Tickets_max_order_by'] | null;
    min?: ValueTypes['atendimentos_Tickets_min_order_by'] | null;
    stddev?: ValueTypes['atendimentos_Tickets_stddev_order_by'] | null;
    stddev_pop?: ValueTypes['atendimentos_Tickets_stddev_pop_order_by'] | null;
    stddev_samp?:
      | ValueTypes['atendimentos_Tickets_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['atendimentos_Tickets_sum_order_by'] | null;
    var_pop?: ValueTypes['atendimentos_Tickets_var_pop_order_by'] | null;
    var_samp?: ValueTypes['atendimentos_Tickets_var_samp_order_by'] | null;
    variance?: ValueTypes['atendimentos_Tickets_variance_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "atendimentos.Tickets" */
  ['atendimentos_Tickets_arr_rel_insert_input']: {
    data: ValueTypes['atendimentos_Tickets_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['atendimentos_Tickets_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['atendimentos_Tickets_avg_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_avg_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "atendimentos.Tickets". All fields are combined with a logical 'AND'. */
  ['atendimentos_Tickets_bool_exp']: {
    Cliente_Id?: ValueTypes['uuid_comparison_exp'] | null;
    CodigoReferencia?: ValueTypes['Int_comparison_exp'] | null;
    Etapa?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'] | null;
    Etapa_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Fluxo?: ValueTypes['atendimentos_Fluxos_bool_exp'] | null;
    Fluxo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Lead_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Tipo?: ValueTypes['atendimentos_TiposDeTickets_bool_exp'] | null;
    Tipo_Id?:
      | ValueTypes['atendimentos_TiposDeTickets_enum_comparison_exp']
      | null;
    Usuario_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['atendimentos_Tickets_bool_exp'][];
    _not?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
    _or?: ValueTypes['atendimentos_Tickets_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "atendimentos.Tickets" */
  ['atendimentos_Tickets_constraint']: atendimentos_Tickets_constraint;
  /** input type for incrementing numeric columns in table "atendimentos.Tickets" */
  ['atendimentos_Tickets_inc_input']: {
    CodigoReferencia?: number | null;
  };
  /** input type for inserting data into table "atendimentos.Tickets" */
  ['atendimentos_Tickets_insert_input']: {
    Cliente_Id?: ValueTypes['uuid'] | null;
    CodigoReferencia?: number | null;
    Etapa?:
      | ValueTypes['atendimentos_EtapasDosFluxos_obj_rel_insert_input']
      | null;
    Etapa_Id?: ValueTypes['uuid'] | null;
    Fluxo?: ValueTypes['atendimentos_Fluxos_obj_rel_insert_input'] | null;
    Fluxo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Lead_Id?: ValueTypes['uuid'] | null;
    Tipo?:
      | ValueTypes['atendimentos_TiposDeTickets_obj_rel_insert_input']
      | null;
    Tipo_Id?: ValueTypes['atendimentos_TiposDeTickets_enum'] | null;
    Usuario_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['atendimentos_Tickets_max_fields']: AliasType<{
    Cliente_Id?: true;
    CodigoReferencia?: true;
    Etapa_Id?: true;
    Fluxo_Id?: true;
    Id?: true;
    Lead_Id?: true;
    Usuario_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_max_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    CodigoReferencia?: ValueTypes['order_by'] | null;
    Etapa_Id?: ValueTypes['order_by'] | null;
    Fluxo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Lead_Id?: ValueTypes['order_by'] | null;
    Usuario_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['atendimentos_Tickets_min_fields']: AliasType<{
    Cliente_Id?: true;
    CodigoReferencia?: true;
    Etapa_Id?: true;
    Fluxo_Id?: true;
    Id?: true;
    Lead_Id?: true;
    Usuario_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_min_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    CodigoReferencia?: ValueTypes['order_by'] | null;
    Etapa_Id?: ValueTypes['order_by'] | null;
    Fluxo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Lead_Id?: ValueTypes['order_by'] | null;
    Usuario_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "atendimentos.Tickets" */
  ['atendimentos_Tickets_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['atendimentos_Tickets'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "atendimentos.Tickets" */
  ['atendimentos_Tickets_on_conflict']: {
    constraint: ValueTypes['atendimentos_Tickets_constraint'];
    update_columns: ValueTypes['atendimentos_Tickets_update_column'][];
    where?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "atendimentos.Tickets". */
  ['atendimentos_Tickets_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    CodigoReferencia?: ValueTypes['order_by'] | null;
    Etapa?: ValueTypes['atendimentos_EtapasDosFluxos_order_by'] | null;
    Etapa_Id?: ValueTypes['order_by'] | null;
    Fluxo?: ValueTypes['atendimentos_Fluxos_order_by'] | null;
    Fluxo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Lead_Id?: ValueTypes['order_by'] | null;
    Tipo?: ValueTypes['atendimentos_TiposDeTickets_order_by'] | null;
    Tipo_Id?: ValueTypes['order_by'] | null;
    Usuario_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: atendimentos_Tickets */
  ['atendimentos_Tickets_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_select_column']: atendimentos_Tickets_select_column;
  /** input type for updating data in table "atendimentos.Tickets" */
  ['atendimentos_Tickets_set_input']: {
    Cliente_Id?: ValueTypes['uuid'] | null;
    CodigoReferencia?: number | null;
    Etapa_Id?: ValueTypes['uuid'] | null;
    Fluxo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Lead_Id?: ValueTypes['uuid'] | null;
    Tipo_Id?: ValueTypes['atendimentos_TiposDeTickets_enum'] | null;
    Usuario_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['atendimentos_Tickets_stddev_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_stddev_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['atendimentos_Tickets_stddev_pop_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_stddev_pop_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['atendimentos_Tickets_stddev_samp_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_stddev_samp_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['atendimentos_Tickets_sum_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_sum_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_update_column']: atendimentos_Tickets_update_column;
  /** aggregate var_pop on columns */
  ['atendimentos_Tickets_var_pop_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_var_pop_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['atendimentos_Tickets_var_samp_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_var_samp_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['atendimentos_Tickets_variance_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_variance_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets']: AliasType<{
    Comentario?: true;
    Tickets?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Tickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Tickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Tickets']
    ];
    Tickets_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Tickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Tickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Tickets_aggregate']
    ];
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_aggregate']: AliasType<{
    aggregate?: ValueTypes['atendimentos_TiposDeTickets_aggregate_fields'];
    nodes?: ValueTypes['atendimentos_TiposDeTickets'];
    __typename?: true;
  }>;
  /** aggregate fields of "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['atendimentos_TiposDeTickets_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['atendimentos_TiposDeTickets_max_fields'];
    min?: ValueTypes['atendimentos_TiposDeTickets_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "atendimentos.TiposDeTickets". All fields are combined with a logical 'AND'. */
  ['atendimentos_TiposDeTickets_bool_exp']: {
    Comentario?: ValueTypes['String_comparison_exp'] | null;
    Tickets?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
    Valor?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['atendimentos_TiposDeTickets_bool_exp'][];
    _not?: ValueTypes['atendimentos_TiposDeTickets_bool_exp'] | null;
    _or?: ValueTypes['atendimentos_TiposDeTickets_bool_exp'][];
  };
  /** unique or primary key constraints on table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_constraint']: atendimentos_TiposDeTickets_constraint;
  ['atendimentos_TiposDeTickets_enum']: atendimentos_TiposDeTickets_enum;
  /** Boolean expression to compare columns of type "atendimentos_TiposDeTickets_enum". All fields are combined with logical 'AND'. */
  ['atendimentos_TiposDeTickets_enum_comparison_exp']: {
    _eq?: ValueTypes['atendimentos_TiposDeTickets_enum'] | null;
    _in?: ValueTypes['atendimentos_TiposDeTickets_enum'][];
    _is_null?: boolean | null;
    _neq?: ValueTypes['atendimentos_TiposDeTickets_enum'] | null;
    _nin?: ValueTypes['atendimentos_TiposDeTickets_enum'][];
  };
  /** input type for inserting data into table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_insert_input']: {
    Comentario?: string | null;
    Tickets?: ValueTypes['atendimentos_Tickets_arr_rel_insert_input'] | null;
    Valor?: string | null;
  };
  /** aggregate max on columns */
  ['atendimentos_TiposDeTickets_max_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['atendimentos_TiposDeTickets_min_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['atendimentos_TiposDeTickets'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_obj_rel_insert_input']: {
    data: ValueTypes['atendimentos_TiposDeTickets_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['atendimentos_TiposDeTickets_on_conflict'] | null;
  };
  /** on conflict condition type for table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_on_conflict']: {
    constraint: ValueTypes['atendimentos_TiposDeTickets_constraint'];
    update_columns: ValueTypes['atendimentos_TiposDeTickets_update_column'][];
    where?: ValueTypes['atendimentos_TiposDeTickets_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "atendimentos.TiposDeTickets". */
  ['atendimentos_TiposDeTickets_order_by']: {
    Comentario?: ValueTypes['order_by'] | null;
    Tickets_aggregate?:
      | ValueTypes['atendimentos_Tickets_aggregate_order_by']
      | null;
    Valor?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: atendimentos_TiposDeTickets */
  ['atendimentos_TiposDeTickets_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_select_column']: atendimentos_TiposDeTickets_select_column;
  /** input type for updating data in table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_set_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** update columns of table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_update_column']: atendimentos_TiposDeTickets_update_column;
  /** columns and relationships of "autenticacao.Atendentes" */
  ['autenticacao_Atendentes']: AliasType<{
    Id?: true;
    /** An object relationship */
    Usuario?: ValueTypes['autenticacao_Usuarios'];
    Usuario_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_aggregate']: AliasType<{
    aggregate?: ValueTypes['autenticacao_Atendentes_aggregate_fields'];
    nodes?: ValueTypes['autenticacao_Atendentes'];
    __typename?: true;
  }>;
  /** aggregate fields of "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['autenticacao_Atendentes_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['autenticacao_Atendentes_max_fields'];
    min?: ValueTypes['autenticacao_Atendentes_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "autenticacao.Atendentes". All fields are combined with a logical 'AND'. */
  ['autenticacao_Atendentes_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Usuario?: ValueTypes['autenticacao_Usuarios_bool_exp'] | null;
    Usuario_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['autenticacao_Atendentes_bool_exp'][];
    _not?: ValueTypes['autenticacao_Atendentes_bool_exp'] | null;
    _or?: ValueTypes['autenticacao_Atendentes_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_constraint']: autenticacao_Atendentes_constraint;
  /** input type for inserting data into table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Usuario?: ValueTypes['autenticacao_Usuarios_obj_rel_insert_input'] | null;
    Usuario_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['autenticacao_Atendentes_max_fields']: AliasType<{
    Id?: true;
    Usuario_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['autenticacao_Atendentes_min_fields']: AliasType<{
    Id?: true;
    Usuario_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['autenticacao_Atendentes'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_obj_rel_insert_input']: {
    data: ValueTypes['autenticacao_Atendentes_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['autenticacao_Atendentes_on_conflict'] | null;
  };
  /** on conflict condition type for table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_on_conflict']: {
    constraint: ValueTypes['autenticacao_Atendentes_constraint'];
    update_columns: ValueTypes['autenticacao_Atendentes_update_column'][];
    where?: ValueTypes['autenticacao_Atendentes_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "autenticacao.Atendentes". */
  ['autenticacao_Atendentes_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Usuario?: ValueTypes['autenticacao_Usuarios_order_by'] | null;
    Usuario_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: autenticacao_Atendentes */
  ['autenticacao_Atendentes_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_select_column']: autenticacao_Atendentes_select_column;
  /** input type for updating data in table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Usuario_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_update_column']: autenticacao_Atendentes_update_column;
  /** columns and relationships of "autenticacao.Usuarios" */
  ['autenticacao_Usuarios']: AliasType<{
    /** An object relationship */
    Atendente?: ValueTypes['autenticacao_Atendentes'];
    /** An object relationship */
    Cliente?: ValueTypes['identidades_Clientes'];
    Cliente_Id?: true;
    /** An object relationship */
    Colaborador?: ValueTypes['identidades_Colaboradores'];
    Colaborador_Id?: true;
    Email?: true;
    Id?: true;
    Senha?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_aggregate']: AliasType<{
    aggregate?: ValueTypes['autenticacao_Usuarios_aggregate_fields'];
    nodes?: ValueTypes['autenticacao_Usuarios'];
    __typename?: true;
  }>;
  /** aggregate fields of "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['autenticacao_Usuarios_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['autenticacao_Usuarios_max_fields'];
    min?: ValueTypes['autenticacao_Usuarios_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['autenticacao_Usuarios_max_order_by'] | null;
    min?: ValueTypes['autenticacao_Usuarios_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_arr_rel_insert_input']: {
    data: ValueTypes['autenticacao_Usuarios_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['autenticacao_Usuarios_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "autenticacao.Usuarios". All fields are combined with a logical 'AND'. */
  ['autenticacao_Usuarios_bool_exp']: {
    Atendente?: ValueTypes['autenticacao_Atendentes_bool_exp'] | null;
    Cliente?: ValueTypes['identidades_Clientes_bool_exp'] | null;
    Cliente_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Colaborador?: ValueTypes['identidades_Colaboradores_bool_exp'] | null;
    Colaborador_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Email?: ValueTypes['String_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Senha?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['autenticacao_Usuarios_bool_exp'][];
    _not?: ValueTypes['autenticacao_Usuarios_bool_exp'] | null;
    _or?: ValueTypes['autenticacao_Usuarios_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_constraint']: autenticacao_Usuarios_constraint;
  /** input type for inserting data into table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_insert_input']: {
    Atendente?:
      | ValueTypes['autenticacao_Atendentes_obj_rel_insert_input']
      | null;
    Cliente?: ValueTypes['identidades_Clientes_obj_rel_insert_input'] | null;
    Cliente_Id?: ValueTypes['uuid'] | null;
    Colaborador?:
      | ValueTypes['identidades_Colaboradores_obj_rel_insert_input']
      | null;
    Colaborador_Id?: ValueTypes['uuid'] | null;
    Email?: string | null;
    Id?: ValueTypes['uuid'] | null;
    Senha?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['autenticacao_Usuarios_max_fields']: AliasType<{
    Cliente_Id?: true;
    Colaborador_Id?: true;
    Email?: true;
    Id?: true;
    Senha?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_max_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    Colaborador_Id?: ValueTypes['order_by'] | null;
    Email?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Senha?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['autenticacao_Usuarios_min_fields']: AliasType<{
    Cliente_Id?: true;
    Colaborador_Id?: true;
    Email?: true;
    Id?: true;
    Senha?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_min_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    Colaborador_Id?: ValueTypes['order_by'] | null;
    Email?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Senha?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['autenticacao_Usuarios'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_obj_rel_insert_input']: {
    data: ValueTypes['autenticacao_Usuarios_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['autenticacao_Usuarios_on_conflict'] | null;
  };
  /** on conflict condition type for table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_on_conflict']: {
    constraint: ValueTypes['autenticacao_Usuarios_constraint'];
    update_columns: ValueTypes['autenticacao_Usuarios_update_column'][];
    where?: ValueTypes['autenticacao_Usuarios_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "autenticacao.Usuarios". */
  ['autenticacao_Usuarios_order_by']: {
    Atendente?: ValueTypes['autenticacao_Atendentes_order_by'] | null;
    Cliente?: ValueTypes['identidades_Clientes_order_by'] | null;
    Cliente_Id?: ValueTypes['order_by'] | null;
    Colaborador?: ValueTypes['identidades_Colaboradores_order_by'] | null;
    Colaborador_Id?: ValueTypes['order_by'] | null;
    Email?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Senha?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: autenticacao_Usuarios */
  ['autenticacao_Usuarios_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_select_column']: autenticacao_Usuarios_select_column;
  /** input type for updating data in table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_set_input']: {
    Cliente_Id?: ValueTypes['uuid'] | null;
    Colaborador_Id?: ValueTypes['uuid'] | null;
    Email?: string | null;
    Id?: ValueTypes['uuid'] | null;
    Senha?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_update_column']: autenticacao_Usuarios_update_column;
  ['bigint']: unknown;
  /** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
  ['bigint_comparison_exp']: {
    _eq?: ValueTypes['bigint'] | null;
    _gt?: ValueTypes['bigint'] | null;
    _gte?: ValueTypes['bigint'] | null;
    _in?: ValueTypes['bigint'][];
    _is_null?: boolean | null;
    _lt?: ValueTypes['bigint'] | null;
    _lte?: ValueTypes['bigint'] | null;
    _neq?: ValueTypes['bigint'] | null;
    _nin?: ValueTypes['bigint'][];
  };
  /** columns and relationships of "clientes.Leads" */
  ['clientes_Leads']: AliasType<{
    /** An object relationship */
    Cliente?: ValueTypes['identidades_Clientes'];
    Cliente_Id?: true;
    Email?: true;
    Id?: true;
    Nome?: true;
    PerfisComerciais?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_PerfisComerciais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_PerfisComerciais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_PerfisComerciais_bool_exp'] | null;
      },
      ValueTypes['clientes_PerfisComerciais']
    ];
    PerfisComerciais_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_PerfisComerciais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_PerfisComerciais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_PerfisComerciais_bool_exp'] | null;
      },
      ValueTypes['clientes_PerfisComerciais_aggregate']
    ];
    Telefone?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "clientes.Leads" */
  ['clientes_Leads_aggregate']: AliasType<{
    aggregate?: ValueTypes['clientes_Leads_aggregate_fields'];
    nodes?: ValueTypes['clientes_Leads'];
    __typename?: true;
  }>;
  /** aggregate fields of "clientes.Leads" */
  ['clientes_Leads_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['clientes_Leads_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['clientes_Leads_max_fields'];
    min?: ValueTypes['clientes_Leads_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "clientes.Leads" */
  ['clientes_Leads_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['clientes_Leads_max_order_by'] | null;
    min?: ValueTypes['clientes_Leads_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "clientes.Leads" */
  ['clientes_Leads_arr_rel_insert_input']: {
    data: ValueTypes['clientes_Leads_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['clientes_Leads_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "clientes.Leads". All fields are combined with a logical 'AND'. */
  ['clientes_Leads_bool_exp']: {
    Cliente?: ValueTypes['identidades_Clientes_bool_exp'] | null;
    Cliente_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Email?: ValueTypes['String_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    PerfisComerciais?: ValueTypes['clientes_PerfisComerciais_bool_exp'] | null;
    Telefone?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['clientes_Leads_bool_exp'][];
    _not?: ValueTypes['clientes_Leads_bool_exp'] | null;
    _or?: ValueTypes['clientes_Leads_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "clientes.Leads" */
  ['clientes_Leads_constraint']: clientes_Leads_constraint;
  /** input type for inserting data into table "clientes.Leads" */
  ['clientes_Leads_insert_input']: {
    Cliente?: ValueTypes['identidades_Clientes_obj_rel_insert_input'] | null;
    Cliente_Id?: ValueTypes['uuid'] | null;
    Email?: string | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    PerfisComerciais?:
      | ValueTypes['clientes_PerfisComerciais_arr_rel_insert_input']
      | null;
    Telefone?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['clientes_Leads_max_fields']: AliasType<{
    Cliente_Id?: true;
    Email?: true;
    Id?: true;
    Nome?: true;
    Telefone?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "clientes.Leads" */
  ['clientes_Leads_max_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    Email?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Telefone?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['clientes_Leads_min_fields']: AliasType<{
    Cliente_Id?: true;
    Email?: true;
    Id?: true;
    Nome?: true;
    Telefone?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "clientes.Leads" */
  ['clientes_Leads_min_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    Email?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Telefone?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "clientes.Leads" */
  ['clientes_Leads_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['clientes_Leads'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "clientes.Leads" */
  ['clientes_Leads_obj_rel_insert_input']: {
    data: ValueTypes['clientes_Leads_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['clientes_Leads_on_conflict'] | null;
  };
  /** on conflict condition type for table "clientes.Leads" */
  ['clientes_Leads_on_conflict']: {
    constraint: ValueTypes['clientes_Leads_constraint'];
    update_columns: ValueTypes['clientes_Leads_update_column'][];
    where?: ValueTypes['clientes_Leads_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "clientes.Leads". */
  ['clientes_Leads_order_by']: {
    Cliente?: ValueTypes['identidades_Clientes_order_by'] | null;
    Cliente_Id?: ValueTypes['order_by'] | null;
    Email?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    PerfisComerciais_aggregate?:
      | ValueTypes['clientes_PerfisComerciais_aggregate_order_by']
      | null;
    Telefone?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: clientes_Leads */
  ['clientes_Leads_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "clientes.Leads" */
  ['clientes_Leads_select_column']: clientes_Leads_select_column;
  /** input type for updating data in table "clientes.Leads" */
  ['clientes_Leads_set_input']: {
    Cliente_Id?: ValueTypes['uuid'] | null;
    Email?: string | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Telefone?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "clientes.Leads" */
  ['clientes_Leads_update_column']: clientes_Leads_update_column;
  /** columns and relationships of "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais']: AliasType<{
    Grupo_Id?: true;
    Id?: true;
    /** An object relationship */
    Lead?: ValueTypes['clientes_Leads'];
    Lead_Id?: true;
    Pergunta_Id?: true;
    Resposta?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_aggregate']: AliasType<{
    aggregate?: ValueTypes['clientes_PerfisComerciais_aggregate_fields'];
    nodes?: ValueTypes['clientes_PerfisComerciais'];
    __typename?: true;
  }>;
  /** aggregate fields of "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['clientes_PerfisComerciais_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['clientes_PerfisComerciais_max_fields'];
    min?: ValueTypes['clientes_PerfisComerciais_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['clientes_PerfisComerciais_max_order_by'] | null;
    min?: ValueTypes['clientes_PerfisComerciais_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_arr_rel_insert_input']: {
    data: ValueTypes['clientes_PerfisComerciais_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['clientes_PerfisComerciais_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "clientes.PerfisComerciais". All fields are combined with a logical 'AND'. */
  ['clientes_PerfisComerciais_bool_exp']: {
    Grupo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Lead?: ValueTypes['clientes_Leads_bool_exp'] | null;
    Lead_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Pergunta_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Resposta?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['clientes_PerfisComerciais_bool_exp'][];
    _not?: ValueTypes['clientes_PerfisComerciais_bool_exp'] | null;
    _or?: ValueTypes['clientes_PerfisComerciais_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_constraint']: clientes_PerfisComerciais_constraint;
  /** input type for inserting data into table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_insert_input']: {
    Grupo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Lead?: ValueTypes['clientes_Leads_obj_rel_insert_input'] | null;
    Lead_Id?: ValueTypes['uuid'] | null;
    Pergunta_Id?: ValueTypes['uuid'] | null;
    Resposta?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['clientes_PerfisComerciais_max_fields']: AliasType<{
    Grupo_Id?: true;
    Id?: true;
    Lead_Id?: true;
    Pergunta_Id?: true;
    Resposta?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_max_order_by']: {
    Grupo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Lead_Id?: ValueTypes['order_by'] | null;
    Pergunta_Id?: ValueTypes['order_by'] | null;
    Resposta?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['clientes_PerfisComerciais_min_fields']: AliasType<{
    Grupo_Id?: true;
    Id?: true;
    Lead_Id?: true;
    Pergunta_Id?: true;
    Resposta?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_min_order_by']: {
    Grupo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Lead_Id?: ValueTypes['order_by'] | null;
    Pergunta_Id?: ValueTypes['order_by'] | null;
    Resposta?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['clientes_PerfisComerciais'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_on_conflict']: {
    constraint: ValueTypes['clientes_PerfisComerciais_constraint'];
    update_columns: ValueTypes['clientes_PerfisComerciais_update_column'][];
    where?: ValueTypes['clientes_PerfisComerciais_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "clientes.PerfisComerciais". */
  ['clientes_PerfisComerciais_order_by']: {
    Grupo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Lead?: ValueTypes['clientes_Leads_order_by'] | null;
    Lead_Id?: ValueTypes['order_by'] | null;
    Pergunta_Id?: ValueTypes['order_by'] | null;
    Resposta?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: clientes_PerfisComerciais */
  ['clientes_PerfisComerciais_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_select_column']: clientes_PerfisComerciais_select_column;
  /** input type for updating data in table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_set_input']: {
    Grupo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Lead_Id?: ValueTypes['uuid'] | null;
    Pergunta_Id?: ValueTypes['uuid'] | null;
    Resposta?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_update_column']: clientes_PerfisComerciais_update_column;
  /** columns and relationships of "clientes.Veiculos" */
  ['clientes_Veiculos']: AliasType<{
    Apelido?: true;
    Categoria_Id?: true;
    /** An object relationship */
    Cliente?: ValueTypes['identidades_Clientes'];
    Cliente_Id?: true;
    DadosDaApi?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Id?: true;
    NumeroDoChassi?: true;
    Placa?: true;
    VeiculosAtivos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos']
    ];
    VeiculosAtivos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos']: AliasType<{
    Beneficios?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Beneficios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Beneficios_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['clientes_VeiculosAtivos_Beneficios_bool_exp']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Beneficios']
    ];
    Beneficios_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Beneficios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Beneficios_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['clientes_VeiculosAtivos_Beneficios_bool_exp']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Beneficios_aggregate']
    ];
    /** An object relationship */
    Cliente?: ValueTypes['identidades_Clientes'];
    Cliente_Id?: true;
    Franquia_Id?: true;
    Id?: true;
    OS_Id?: true;
    Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_Produtos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Produtos']
    ];
    Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_Produtos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Produtos_aggregate']
    ];
    Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_Servicos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Servicos']
    ];
    Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_Servicos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Servicos_aggregate']
    ];
    /** An object relationship */
    Situacao?: ValueTypes['clientes_VeiculosAtivos_Situacao'];
    Situacao_Id?: true;
    /** An object relationship */
    Veiculo?: ValueTypes['clientes_Veiculos'];
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios']: AliasType<{
    Ativo?: true;
    Id?: true;
    PortfolioPreco_Id?: true;
    Portfolio_Id?: true;
    TipoPortfolio?: true;
    /** An object relationship */
    VeiculoAtivo?: ValueTypes['clientes_VeiculosAtivos'];
    VeiculoAtivo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_aggregate']: AliasType<{
    aggregate?: ValueTypes['clientes_VeiculosAtivos_Beneficios_aggregate_fields'];
    nodes?: ValueTypes['clientes_VeiculosAtivos_Beneficios'];
    __typename?: true;
  }>;
  /** aggregate fields of "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['clientes_VeiculosAtivos_Beneficios_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['clientes_VeiculosAtivos_Beneficios_max_fields'];
    min?: ValueTypes['clientes_VeiculosAtivos_Beneficios_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['clientes_VeiculosAtivos_Beneficios_max_order_by'] | null;
    min?: ValueTypes['clientes_VeiculosAtivos_Beneficios_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_arr_rel_insert_input']: {
    data: ValueTypes['clientes_VeiculosAtivos_Beneficios_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['clientes_VeiculosAtivos_Beneficios_on_conflict']
      | null;
  };
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Beneficios". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Beneficios_bool_exp']: {
    Ativo?: ValueTypes['Boolean_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    PortfolioPreco_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Portfolio_Id?: ValueTypes['uuid_comparison_exp'] | null;
    TipoPortfolio?: ValueTypes['String_comparison_exp'] | null;
    VeiculoAtivo?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
    VeiculoAtivo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['clientes_VeiculosAtivos_Beneficios_bool_exp'][];
    _not?: ValueTypes['clientes_VeiculosAtivos_Beneficios_bool_exp'] | null;
    _or?: ValueTypes['clientes_VeiculosAtivos_Beneficios_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_constraint']: clientes_VeiculosAtivos_Beneficios_constraint;
  /** input type for inserting data into table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_insert_input']: {
    Ativo?: boolean | null;
    Id?: ValueTypes['uuid'] | null;
    PortfolioPreco_Id?: ValueTypes['uuid'] | null;
    Portfolio_Id?: ValueTypes['uuid'] | null;
    TipoPortfolio?: string | null;
    VeiculoAtivo?:
      | ValueTypes['clientes_VeiculosAtivos_obj_rel_insert_input']
      | null;
    VeiculoAtivo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Beneficios_max_fields']: AliasType<{
    Id?: true;
    PortfolioPreco_Id?: true;
    Portfolio_Id?: true;
    TipoPortfolio?: true;
    VeiculoAtivo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    PortfolioPreco_Id?: ValueTypes['order_by'] | null;
    Portfolio_Id?: ValueTypes['order_by'] | null;
    TipoPortfolio?: ValueTypes['order_by'] | null;
    VeiculoAtivo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Beneficios_min_fields']: AliasType<{
    Id?: true;
    PortfolioPreco_Id?: true;
    Portfolio_Id?: true;
    TipoPortfolio?: true;
    VeiculoAtivo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    PortfolioPreco_Id?: ValueTypes['order_by'] | null;
    Portfolio_Id?: ValueTypes['order_by'] | null;
    TipoPortfolio?: ValueTypes['order_by'] | null;
    VeiculoAtivo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['clientes_VeiculosAtivos_Beneficios'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_on_conflict']: {
    constraint: ValueTypes['clientes_VeiculosAtivos_Beneficios_constraint'];
    update_columns: ValueTypes['clientes_VeiculosAtivos_Beneficios_update_column'][];
    where?: ValueTypes['clientes_VeiculosAtivos_Beneficios_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Beneficios". */
  ['clientes_VeiculosAtivos_Beneficios_order_by']: {
    Ativo?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    PortfolioPreco_Id?: ValueTypes['order_by'] | null;
    Portfolio_Id?: ValueTypes['order_by'] | null;
    TipoPortfolio?: ValueTypes['order_by'] | null;
    VeiculoAtivo?: ValueTypes['clientes_VeiculosAtivos_order_by'] | null;
    VeiculoAtivo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: clientes_VeiculosAtivos_Beneficios */
  ['clientes_VeiculosAtivos_Beneficios_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_select_column']: clientes_VeiculosAtivos_Beneficios_select_column;
  /** input type for updating data in table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_set_input']: {
    Ativo?: boolean | null;
    Id?: ValueTypes['uuid'] | null;
    PortfolioPreco_Id?: ValueTypes['uuid'] | null;
    Portfolio_Id?: ValueTypes['uuid'] | null;
    TipoPortfolio?: string | null;
    VeiculoAtivo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_update_column']: clientes_VeiculosAtivos_Beneficios_update_column;
  /** columns and relationships of "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos']: AliasType<{
    Ativo?: true;
    Id?: true;
    ProdutoPreco_Id?: true;
    Produto_Id?: true;
    VeiculoAtivo_Id?: true;
    /** An object relationship */
    VeiculosAtivo?: ValueTypes['clientes_VeiculosAtivos'];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_aggregate']: AliasType<{
    aggregate?: ValueTypes['clientes_VeiculosAtivos_Produtos_aggregate_fields'];
    nodes?: ValueTypes['clientes_VeiculosAtivos_Produtos'];
    __typename?: true;
  }>;
  /** aggregate fields of "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['clientes_VeiculosAtivos_Produtos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['clientes_VeiculosAtivos_Produtos_max_fields'];
    min?: ValueTypes['clientes_VeiculosAtivos_Produtos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['clientes_VeiculosAtivos_Produtos_max_order_by'] | null;
    min?: ValueTypes['clientes_VeiculosAtivos_Produtos_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_arr_rel_insert_input']: {
    data: ValueTypes['clientes_VeiculosAtivos_Produtos_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['clientes_VeiculosAtivos_Produtos_on_conflict']
      | null;
  };
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Produtos". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Produtos_bool_exp']: {
    Ativo?: ValueTypes['Boolean_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    ProdutoPreco_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Produto_Id?: ValueTypes['uuid_comparison_exp'] | null;
    VeiculoAtivo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    VeiculosAtivo?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
    _and?: ValueTypes['clientes_VeiculosAtivos_Produtos_bool_exp'][];
    _not?: ValueTypes['clientes_VeiculosAtivos_Produtos_bool_exp'] | null;
    _or?: ValueTypes['clientes_VeiculosAtivos_Produtos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_constraint']: clientes_VeiculosAtivos_Produtos_constraint;
  /** input type for inserting data into table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_insert_input']: {
    Ativo?: boolean | null;
    Id?: ValueTypes['uuid'] | null;
    ProdutoPreco_Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    VeiculoAtivo_Id?: ValueTypes['uuid'] | null;
    VeiculosAtivo?:
      | ValueTypes['clientes_VeiculosAtivos_obj_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Produtos_max_fields']: AliasType<{
    Id?: true;
    ProdutoPreco_Id?: true;
    Produto_Id?: true;
    VeiculoAtivo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    ProdutoPreco_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    VeiculoAtivo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Produtos_min_fields']: AliasType<{
    Id?: true;
    ProdutoPreco_Id?: true;
    Produto_Id?: true;
    VeiculoAtivo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    ProdutoPreco_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    VeiculoAtivo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['clientes_VeiculosAtivos_Produtos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_on_conflict']: {
    constraint: ValueTypes['clientes_VeiculosAtivos_Produtos_constraint'];
    update_columns: ValueTypes['clientes_VeiculosAtivos_Produtos_update_column'][];
    where?: ValueTypes['clientes_VeiculosAtivos_Produtos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Produtos". */
  ['clientes_VeiculosAtivos_Produtos_order_by']: {
    Ativo?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    ProdutoPreco_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    VeiculoAtivo_Id?: ValueTypes['order_by'] | null;
    VeiculosAtivo?: ValueTypes['clientes_VeiculosAtivos_order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: clientes_VeiculosAtivos_Produtos */
  ['clientes_VeiculosAtivos_Produtos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_select_column']: clientes_VeiculosAtivos_Produtos_select_column;
  /** input type for updating data in table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_set_input']: {
    Ativo?: boolean | null;
    Id?: ValueTypes['uuid'] | null;
    ProdutoPreco_Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    VeiculoAtivo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_update_column']: clientes_VeiculosAtivos_Produtos_update_column;
  /** columns and relationships of "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos']: AliasType<{
    Ativo?: true;
    Id?: true;
    ServicoPreco_Id?: true;
    Servico_Id?: true;
    VeiculoAtivo_Id?: true;
    /** An object relationship */
    VeiculosAtivo?: ValueTypes['clientes_VeiculosAtivos'];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_aggregate']: AliasType<{
    aggregate?: ValueTypes['clientes_VeiculosAtivos_Servicos_aggregate_fields'];
    nodes?: ValueTypes['clientes_VeiculosAtivos_Servicos'];
    __typename?: true;
  }>;
  /** aggregate fields of "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['clientes_VeiculosAtivos_Servicos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['clientes_VeiculosAtivos_Servicos_max_fields'];
    min?: ValueTypes['clientes_VeiculosAtivos_Servicos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['clientes_VeiculosAtivos_Servicos_max_order_by'] | null;
    min?: ValueTypes['clientes_VeiculosAtivos_Servicos_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_arr_rel_insert_input']: {
    data: ValueTypes['clientes_VeiculosAtivos_Servicos_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['clientes_VeiculosAtivos_Servicos_on_conflict']
      | null;
  };
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Servicos". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Servicos_bool_exp']: {
    Ativo?: ValueTypes['Boolean_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    ServicoPreco_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    VeiculoAtivo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    VeiculosAtivo?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
    _and?: ValueTypes['clientes_VeiculosAtivos_Servicos_bool_exp'][];
    _not?: ValueTypes['clientes_VeiculosAtivos_Servicos_bool_exp'] | null;
    _or?: ValueTypes['clientes_VeiculosAtivos_Servicos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_constraint']: clientes_VeiculosAtivos_Servicos_constraint;
  /** input type for inserting data into table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_insert_input']: {
    Ativo?: boolean | null;
    Id?: ValueTypes['uuid'] | null;
    ServicoPreco_Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    VeiculoAtivo_Id?: ValueTypes['uuid'] | null;
    VeiculosAtivo?:
      | ValueTypes['clientes_VeiculosAtivos_obj_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Servicos_max_fields']: AliasType<{
    Id?: true;
    ServicoPreco_Id?: true;
    Servico_Id?: true;
    VeiculoAtivo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    ServicoPreco_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    VeiculoAtivo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Servicos_min_fields']: AliasType<{
    Id?: true;
    ServicoPreco_Id?: true;
    Servico_Id?: true;
    VeiculoAtivo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    ServicoPreco_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    VeiculoAtivo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['clientes_VeiculosAtivos_Servicos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_on_conflict']: {
    constraint: ValueTypes['clientes_VeiculosAtivos_Servicos_constraint'];
    update_columns: ValueTypes['clientes_VeiculosAtivos_Servicos_update_column'][];
    where?: ValueTypes['clientes_VeiculosAtivos_Servicos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Servicos". */
  ['clientes_VeiculosAtivos_Servicos_order_by']: {
    Ativo?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    ServicoPreco_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    VeiculoAtivo_Id?: ValueTypes['order_by'] | null;
    VeiculosAtivo?: ValueTypes['clientes_VeiculosAtivos_order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: clientes_VeiculosAtivos_Servicos */
  ['clientes_VeiculosAtivos_Servicos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_select_column']: clientes_VeiculosAtivos_Servicos_select_column;
  /** input type for updating data in table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_set_input']: {
    Ativo?: boolean | null;
    Id?: ValueTypes['uuid'] | null;
    ServicoPreco_Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    VeiculoAtivo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_update_column']: clientes_VeiculosAtivos_Servicos_update_column;
  /** columns and relationships of "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao']: AliasType<{
    Comentario?: true;
    Valor?: true;
    VeiculosAtivos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos']
    ];
    VeiculosAtivos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_aggregate']
    ];
    __typename?: true;
  }>;
  /** aggregated selection of "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_aggregate']: AliasType<{
    aggregate?: ValueTypes['clientes_VeiculosAtivos_Situacao_aggregate_fields'];
    nodes?: ValueTypes['clientes_VeiculosAtivos_Situacao'];
    __typename?: true;
  }>;
  /** aggregate fields of "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['clientes_VeiculosAtivos_Situacao_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['clientes_VeiculosAtivos_Situacao_max_fields'];
    min?: ValueTypes['clientes_VeiculosAtivos_Situacao_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Situacao". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Situacao_bool_exp']: {
    Comentario?: ValueTypes['String_comparison_exp'] | null;
    Valor?: ValueTypes['String_comparison_exp'] | null;
    VeiculosAtivos?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
    _and?: ValueTypes['clientes_VeiculosAtivos_Situacao_bool_exp'][];
    _not?: ValueTypes['clientes_VeiculosAtivos_Situacao_bool_exp'] | null;
    _or?: ValueTypes['clientes_VeiculosAtivos_Situacao_bool_exp'][];
  };
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_constraint']: clientes_VeiculosAtivos_Situacao_constraint;
  ['clientes_VeiculosAtivos_Situacao_enum']: clientes_VeiculosAtivos_Situacao_enum;
  /** Boolean expression to compare columns of type "clientes_VeiculosAtivos_Situacao_enum". All fields are combined with logical 'AND'. */
  ['clientes_VeiculosAtivos_Situacao_enum_comparison_exp']: {
    _eq?: ValueTypes['clientes_VeiculosAtivos_Situacao_enum'] | null;
    _in?: ValueTypes['clientes_VeiculosAtivos_Situacao_enum'][];
    _is_null?: boolean | null;
    _neq?: ValueTypes['clientes_VeiculosAtivos_Situacao_enum'] | null;
    _nin?: ValueTypes['clientes_VeiculosAtivos_Situacao_enum'][];
  };
  /** input type for inserting data into table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_insert_input']: {
    Comentario?: string | null;
    Valor?: string | null;
    VeiculosAtivos?:
      | ValueTypes['clientes_VeiculosAtivos_arr_rel_insert_input']
      | null;
  };
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Situacao_max_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Situacao_min_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['clientes_VeiculosAtivos_Situacao'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_obj_rel_insert_input']: {
    data: ValueTypes['clientes_VeiculosAtivos_Situacao_insert_input'];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['clientes_VeiculosAtivos_Situacao_on_conflict']
      | null;
  };
  /** on conflict condition type for table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_on_conflict']: {
    constraint: ValueTypes['clientes_VeiculosAtivos_Situacao_constraint'];
    update_columns: ValueTypes['clientes_VeiculosAtivos_Situacao_update_column'][];
    where?: ValueTypes['clientes_VeiculosAtivos_Situacao_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Situacao". */
  ['clientes_VeiculosAtivos_Situacao_order_by']: {
    Comentario?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    VeiculosAtivos_aggregate?:
      | ValueTypes['clientes_VeiculosAtivos_aggregate_order_by']
      | null;
  };
  /** primary key columns input for table: clientes_VeiculosAtivos_Situacao */
  ['clientes_VeiculosAtivos_Situacao_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_select_column']: clientes_VeiculosAtivos_Situacao_select_column;
  /** input type for updating data in table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_set_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** update columns of table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_update_column']: clientes_VeiculosAtivos_Situacao_update_column;
  /** aggregated selection of "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_aggregate']: AliasType<{
    aggregate?: ValueTypes['clientes_VeiculosAtivos_aggregate_fields'];
    nodes?: ValueTypes['clientes_VeiculosAtivos'];
    __typename?: true;
  }>;
  /** aggregate fields of "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['clientes_VeiculosAtivos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['clientes_VeiculosAtivos_max_fields'];
    min?: ValueTypes['clientes_VeiculosAtivos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['clientes_VeiculosAtivos_max_order_by'] | null;
    min?: ValueTypes['clientes_VeiculosAtivos_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_arr_rel_insert_input']: {
    data: ValueTypes['clientes_VeiculosAtivos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['clientes_VeiculosAtivos_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_bool_exp']: {
    Beneficios?:
      | ValueTypes['clientes_VeiculosAtivos_Beneficios_bool_exp']
      | null;
    Cliente?: ValueTypes['identidades_Clientes_bool_exp'] | null;
    Cliente_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Franquia_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    OS_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Produtos?: ValueTypes['clientes_VeiculosAtivos_Produtos_bool_exp'] | null;
    Servicos?: ValueTypes['clientes_VeiculosAtivos_Servicos_bool_exp'] | null;
    Situacao?: ValueTypes['clientes_VeiculosAtivos_Situacao_bool_exp'] | null;
    Situacao_Id?:
      | ValueTypes['clientes_VeiculosAtivos_Situacao_enum_comparison_exp']
      | null;
    Veiculo?: ValueTypes['clientes_Veiculos_bool_exp'] | null;
    Veiculo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['clientes_VeiculosAtivos_bool_exp'][];
    _not?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
    _or?: ValueTypes['clientes_VeiculosAtivos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_constraint']: clientes_VeiculosAtivos_constraint;
  /** input type for inserting data into table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_insert_input']: {
    Beneficios?:
      | ValueTypes['clientes_VeiculosAtivos_Beneficios_arr_rel_insert_input']
      | null;
    Cliente?: ValueTypes['identidades_Clientes_obj_rel_insert_input'] | null;
    Cliente_Id?: ValueTypes['uuid'] | null;
    Franquia_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    OS_Id?: ValueTypes['uuid'] | null;
    Produtos?:
      | ValueTypes['clientes_VeiculosAtivos_Produtos_arr_rel_insert_input']
      | null;
    Servicos?:
      | ValueTypes['clientes_VeiculosAtivos_Servicos_arr_rel_insert_input']
      | null;
    Situacao?:
      | ValueTypes['clientes_VeiculosAtivos_Situacao_obj_rel_insert_input']
      | null;
    Situacao_Id?: ValueTypes['clientes_VeiculosAtivos_Situacao_enum'] | null;
    Veiculo?: ValueTypes['clientes_Veiculos_obj_rel_insert_input'] | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_max_fields']: AliasType<{
    Cliente_Id?: true;
    Franquia_Id?: true;
    Id?: true;
    OS_Id?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_max_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    Franquia_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    OS_Id?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_min_fields']: AliasType<{
    Cliente_Id?: true;
    Franquia_Id?: true;
    Id?: true;
    OS_Id?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_min_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    Franquia_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    OS_Id?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['clientes_VeiculosAtivos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_obj_rel_insert_input']: {
    data: ValueTypes['clientes_VeiculosAtivos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['clientes_VeiculosAtivos_on_conflict'] | null;
  };
  /** on conflict condition type for table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_on_conflict']: {
    constraint: ValueTypes['clientes_VeiculosAtivos_constraint'];
    update_columns: ValueTypes['clientes_VeiculosAtivos_update_column'][];
    where?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "clientes.VeiculosAtivos". */
  ['clientes_VeiculosAtivos_order_by']: {
    Beneficios_aggregate?:
      | ValueTypes['clientes_VeiculosAtivos_Beneficios_aggregate_order_by']
      | null;
    Cliente?: ValueTypes['identidades_Clientes_order_by'] | null;
    Cliente_Id?: ValueTypes['order_by'] | null;
    Franquia_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    OS_Id?: ValueTypes['order_by'] | null;
    Produtos_aggregate?:
      | ValueTypes['clientes_VeiculosAtivos_Produtos_aggregate_order_by']
      | null;
    Servicos_aggregate?:
      | ValueTypes['clientes_VeiculosAtivos_Servicos_aggregate_order_by']
      | null;
    Situacao?: ValueTypes['clientes_VeiculosAtivos_Situacao_order_by'] | null;
    Situacao_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['clientes_Veiculos_order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: clientes_VeiculosAtivos */
  ['clientes_VeiculosAtivos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_select_column']: clientes_VeiculosAtivos_select_column;
  /** input type for updating data in table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_set_input']: {
    Cliente_Id?: ValueTypes['uuid'] | null;
    Franquia_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    OS_Id?: ValueTypes['uuid'] | null;
    Situacao_Id?: ValueTypes['clientes_VeiculosAtivos_Situacao_enum'] | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_update_column']: clientes_VeiculosAtivos_update_column;
  /** aggregated selection of "clientes.Veiculos" */
  ['clientes_Veiculos_aggregate']: AliasType<{
    aggregate?: ValueTypes['clientes_Veiculos_aggregate_fields'];
    nodes?: ValueTypes['clientes_Veiculos'];
    __typename?: true;
  }>;
  /** aggregate fields of "clientes.Veiculos" */
  ['clientes_Veiculos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['clientes_Veiculos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['clientes_Veiculos_max_fields'];
    min?: ValueTypes['clientes_Veiculos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "clientes.Veiculos" */
  ['clientes_Veiculos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['clientes_Veiculos_max_order_by'] | null;
    min?: ValueTypes['clientes_Veiculos_min_order_by'] | null;
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['clientes_Veiculos_append_input']: {
    DadosDaApi?: ValueTypes['jsonb'] | null;
  };
  /** input type for inserting array relation for remote table "clientes.Veiculos" */
  ['clientes_Veiculos_arr_rel_insert_input']: {
    data: ValueTypes['clientes_Veiculos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['clientes_Veiculos_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "clientes.Veiculos". All fields are combined with a logical 'AND'. */
  ['clientes_Veiculos_bool_exp']: {
    Apelido?: ValueTypes['String_comparison_exp'] | null;
    Categoria_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Cliente?: ValueTypes['identidades_Clientes_bool_exp'] | null;
    Cliente_Id?: ValueTypes['uuid_comparison_exp'] | null;
    DadosDaApi?: ValueTypes['jsonb_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    NumeroDoChassi?: ValueTypes['String_comparison_exp'] | null;
    Placa?: ValueTypes['String_comparison_exp'] | null;
    VeiculosAtivos?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
    _and?: ValueTypes['clientes_Veiculos_bool_exp'][];
    _not?: ValueTypes['clientes_Veiculos_bool_exp'] | null;
    _or?: ValueTypes['clientes_Veiculos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "clientes.Veiculos" */
  ['clientes_Veiculos_constraint']: clientes_Veiculos_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['clientes_Veiculos_delete_at_path_input']: {
    DadosDaApi?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['clientes_Veiculos_delete_elem_input']: {
    DadosDaApi?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['clientes_Veiculos_delete_key_input']: {
    DadosDaApi?: string | null;
  };
  /** input type for inserting data into table "clientes.Veiculos" */
  ['clientes_Veiculos_insert_input']: {
    Apelido?: string | null;
    Categoria_Id?: ValueTypes['uuid'] | null;
    Cliente?: ValueTypes['identidades_Clientes_obj_rel_insert_input'] | null;
    Cliente_Id?: ValueTypes['uuid'] | null;
    DadosDaApi?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    NumeroDoChassi?: string | null;
    Placa?: string | null;
    VeiculosAtivos?:
      | ValueTypes['clientes_VeiculosAtivos_arr_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['clientes_Veiculos_max_fields']: AliasType<{
    Apelido?: true;
    Categoria_Id?: true;
    Cliente_Id?: true;
    Id?: true;
    NumeroDoChassi?: true;
    Placa?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_max_order_by']: {
    Apelido?: ValueTypes['order_by'] | null;
    Categoria_Id?: ValueTypes['order_by'] | null;
    Cliente_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    NumeroDoChassi?: ValueTypes['order_by'] | null;
    Placa?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['clientes_Veiculos_min_fields']: AliasType<{
    Apelido?: true;
    Categoria_Id?: true;
    Cliente_Id?: true;
    Id?: true;
    NumeroDoChassi?: true;
    Placa?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_min_order_by']: {
    Apelido?: ValueTypes['order_by'] | null;
    Categoria_Id?: ValueTypes['order_by'] | null;
    Cliente_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    NumeroDoChassi?: ValueTypes['order_by'] | null;
    Placa?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "clientes.Veiculos" */
  ['clientes_Veiculos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['clientes_Veiculos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "clientes.Veiculos" */
  ['clientes_Veiculos_obj_rel_insert_input']: {
    data: ValueTypes['clientes_Veiculos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['clientes_Veiculos_on_conflict'] | null;
  };
  /** on conflict condition type for table "clientes.Veiculos" */
  ['clientes_Veiculos_on_conflict']: {
    constraint: ValueTypes['clientes_Veiculos_constraint'];
    update_columns: ValueTypes['clientes_Veiculos_update_column'][];
    where?: ValueTypes['clientes_Veiculos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "clientes.Veiculos". */
  ['clientes_Veiculos_order_by']: {
    Apelido?: ValueTypes['order_by'] | null;
    Categoria_Id?: ValueTypes['order_by'] | null;
    Cliente?: ValueTypes['identidades_Clientes_order_by'] | null;
    Cliente_Id?: ValueTypes['order_by'] | null;
    DadosDaApi?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    NumeroDoChassi?: ValueTypes['order_by'] | null;
    Placa?: ValueTypes['order_by'] | null;
    VeiculosAtivos_aggregate?:
      | ValueTypes['clientes_VeiculosAtivos_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: clientes_Veiculos */
  ['clientes_Veiculos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['clientes_Veiculos_prepend_input']: {
    DadosDaApi?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_select_column']: clientes_Veiculos_select_column;
  /** input type for updating data in table "clientes.Veiculos" */
  ['clientes_Veiculos_set_input']: {
    Apelido?: string | null;
    Categoria_Id?: ValueTypes['uuid'] | null;
    Cliente_Id?: ValueTypes['uuid'] | null;
    DadosDaApi?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    NumeroDoChassi?: string | null;
    Placa?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_update_column']: clientes_Veiculos_update_column;
  /** columns and relationships of "comercial.Acoes" */
  ['comercial_Acoes']: AliasType<{
    Etapas_Id?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Id?: true;
    Titulo?: true;
    Url?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Acoes" */
  ['comercial_Acoes_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Acoes_aggregate_fields'];
    nodes?: ValueTypes['comercial_Acoes'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Acoes" */
  ['comercial_Acoes_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Acoes_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Acoes_max_fields'];
    min?: ValueTypes['comercial_Acoes_min_fields'];
    __typename?: true;
  }>;
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Acoes_append_input']: {
    Etapas_Id?: ValueTypes['jsonb'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Acoes". All fields are combined with a logical 'AND'. */
  ['comercial_Acoes_bool_exp']: {
    Etapas_Id?: ValueTypes['jsonb_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Titulo?: ValueTypes['String_comparison_exp'] | null;
    Url?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Acoes_bool_exp'][];
    _not?: ValueTypes['comercial_Acoes_bool_exp'] | null;
    _or?: ValueTypes['comercial_Acoes_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Acoes" */
  ['comercial_Acoes_constraint']: comercial_Acoes_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['comercial_Acoes_delete_at_path_input']: {
    Etapas_Id?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['comercial_Acoes_delete_elem_input']: {
    Etapas_Id?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['comercial_Acoes_delete_key_input']: {
    Etapas_Id?: string | null;
  };
  /** input type for inserting data into table "comercial.Acoes" */
  ['comercial_Acoes_insert_input']: {
    Etapas_Id?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    Titulo?: string | null;
    Url?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Acoes_max_fields']: AliasType<{
    Id?: true;
    Titulo?: true;
    Url?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['comercial_Acoes_min_fields']: AliasType<{
    Id?: true;
    Titulo?: true;
    Url?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "comercial.Acoes" */
  ['comercial_Acoes_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Acoes'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Acoes" */
  ['comercial_Acoes_on_conflict']: {
    constraint: ValueTypes['comercial_Acoes_constraint'];
    update_columns: ValueTypes['comercial_Acoes_update_column'][];
    where?: ValueTypes['comercial_Acoes_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Acoes". */
  ['comercial_Acoes_order_by']: {
    Etapas_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Titulo?: ValueTypes['order_by'] | null;
    Url?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Acoes */
  ['comercial_Acoes_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Acoes_prepend_input']: {
    Etapas_Id?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "comercial.Acoes" */
  ['comercial_Acoes_select_column']: comercial_Acoes_select_column;
  /** input type for updating data in table "comercial.Acoes" */
  ['comercial_Acoes_set_input']: {
    Etapas_Id?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    Titulo?: string | null;
    Url?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Acoes" */
  ['comercial_Acoes_update_column']: comercial_Acoes_update_column;
  /** columns and relationships of "comercial.Atributos" */
  ['comercial_Atributos']: AliasType<{
    Id?: true;
    Nome?: true;
    Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Atributos']
    ];
    Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Atributos_aggregate']
    ];
    Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Atributos']
    ];
    Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Atributos_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Atributos" */
  ['comercial_Atributos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Atributos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Atributos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Atributos" */
  ['comercial_Atributos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Atributos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Atributos_max_fields'];
    min?: ValueTypes['comercial_Atributos_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "comercial.Atributos". All fields are combined with a logical 'AND'. */
  ['comercial_Atributos_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Produtos?: ValueTypes['comercial_Produtos_Atributos_bool_exp'] | null;
    Servicos?: ValueTypes['comercial_Servicos_Atributos_bool_exp'] | null;
    _and?: ValueTypes['comercial_Atributos_bool_exp'][];
    _not?: ValueTypes['comercial_Atributos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Atributos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Atributos" */
  ['comercial_Atributos_constraint']: comercial_Atributos_constraint;
  /** input type for inserting data into table "comercial.Atributos" */
  ['comercial_Atributos_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Produtos?:
      | ValueTypes['comercial_Produtos_Atributos_arr_rel_insert_input']
      | null;
    Servicos?:
      | ValueTypes['comercial_Servicos_Atributos_arr_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Atributos_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['comercial_Atributos_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "comercial.Atributos" */
  ['comercial_Atributos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Atributos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Atributos" */
  ['comercial_Atributos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Atributos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Atributos_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.Atributos" */
  ['comercial_Atributos_on_conflict']: {
    constraint: ValueTypes['comercial_Atributos_constraint'];
    update_columns: ValueTypes['comercial_Atributos_update_column'][];
    where?: ValueTypes['comercial_Atributos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Atributos". */
  ['comercial_Atributos_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Produtos_aggregate?:
      | ValueTypes['comercial_Produtos_Atributos_aggregate_order_by']
      | null;
    Servicos_aggregate?:
      | ValueTypes['comercial_Servicos_Atributos_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Atributos */
  ['comercial_Atributos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Atributos" */
  ['comercial_Atributos_select_column']: comercial_Atributos_select_column;
  /** input type for updating data in table "comercial.Atributos" */
  ['comercial_Atributos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Atributos" */
  ['comercial_Atributos_update_column']: comercial_Atributos_update_column;
  /** columns and relationships of "comercial.Coberturas" */
  ['comercial_Coberturas']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Coberturas" */
  ['comercial_Coberturas_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Coberturas_aggregate_fields'];
    nodes?: ValueTypes['comercial_Coberturas'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Coberturas" */
  ['comercial_Coberturas_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Coberturas_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Coberturas_max_fields'];
    min?: ValueTypes['comercial_Coberturas_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "comercial.Coberturas". All fields are combined with a logical 'AND'. */
  ['comercial_Coberturas_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Coberturas_bool_exp'][];
    _not?: ValueTypes['comercial_Coberturas_bool_exp'] | null;
    _or?: ValueTypes['comercial_Coberturas_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Coberturas" */
  ['comercial_Coberturas_constraint']: comercial_Coberturas_constraint;
  /** input type for inserting data into table "comercial.Coberturas" */
  ['comercial_Coberturas_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Coberturas_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['comercial_Coberturas_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "comercial.Coberturas" */
  ['comercial_Coberturas_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Coberturas'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Coberturas" */
  ['comercial_Coberturas_on_conflict']: {
    constraint: ValueTypes['comercial_Coberturas_constraint'];
    update_columns: ValueTypes['comercial_Coberturas_update_column'][];
    where?: ValueTypes['comercial_Coberturas_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Coberturas". */
  ['comercial_Coberturas_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Coberturas */
  ['comercial_Coberturas_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Coberturas" */
  ['comercial_Coberturas_select_column']: comercial_Coberturas_select_column;
  /** input type for updating data in table "comercial.Coberturas" */
  ['comercial_Coberturas_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Coberturas" */
  ['comercial_Coberturas_update_column']: comercial_Coberturas_update_column;
  /** columns and relationships of "comercial.Combos" */
  ['comercial_Combos']: AliasType<{
    ComboPai?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Combos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Combos']
    ];
    ComboPai_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Combos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Combos_aggregate']
    ];
    Combos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Combos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Combos']
    ];
    Combos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Combos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Combos_aggregate']
    ];
    Id?: true;
    Nome?: true;
    OportunidadesDeProdutos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Oportunidades']
    ];
    OportunidadesDeProdutos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Oportunidades_aggregate']
    ];
    OportunidadesDeServicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Oportunidades']
    ];
    OportunidadesDeServicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Oportunidades_aggregate']
    ];
    Planos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Planos']
    ];
    Planos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Planos_aggregate']
    ];
    Precos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Precos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Precos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Precos']
    ];
    Precos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Precos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Precos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Precos_aggregate']
    ];
    Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Produtos']
    ];
    Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Produtos_aggregate']
    ];
    Propostas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Combos']
    ];
    Propostas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Combos_aggregate']
    ];
    Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Servicos']
    ];
    Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Servicos_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "comercial.Combos_Combos" */
  ['comercial_Combos_Combos']: AliasType<{
    /** An object relationship */
    Combo?: ValueTypes['comercial_Combos'];
    /** An object relationship */
    ComboPertencente?: ValueTypes['comercial_Combos'];
    ComboPertencente_Id?: true;
    Combo_Id?: true;
    Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Combos_Combos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Combos_Combos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_Combos_Combos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_Combos_Combos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Combos_Combos_max_fields'];
    min?: ValueTypes['comercial_Combos_Combos_min_fields'];
    stddev?: ValueTypes['comercial_Combos_Combos_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_Combos_Combos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_Combos_Combos_stddev_samp_fields'];
    sum?: ValueTypes['comercial_Combos_Combos_sum_fields'];
    var_pop?: ValueTypes['comercial_Combos_Combos_var_pop_fields'];
    var_samp?: ValueTypes['comercial_Combos_Combos_var_samp_fields'];
    variance?: ValueTypes['comercial_Combos_Combos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_aggregate_order_by']: {
    avg?: ValueTypes['comercial_Combos_Combos_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Combos_Combos_max_order_by'] | null;
    min?: ValueTypes['comercial_Combos_Combos_min_order_by'] | null;
    stddev?: ValueTypes['comercial_Combos_Combos_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['comercial_Combos_Combos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_Combos_Combos_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['comercial_Combos_Combos_sum_order_by'] | null;
    var_pop?: ValueTypes['comercial_Combos_Combos_var_pop_order_by'] | null;
    var_samp?: ValueTypes['comercial_Combos_Combos_var_samp_order_by'] | null;
    variance?: ValueTypes['comercial_Combos_Combos_variance_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Combos_Combos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Combos_Combos_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['comercial_Combos_Combos_avg_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_avg_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Combos_Combos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Combos_bool_exp']: {
    Combo?: ValueTypes['comercial_Combos_bool_exp'] | null;
    ComboPertencente?: ValueTypes['comercial_Combos_bool_exp'] | null;
    ComboPertencente_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Combo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Valor?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Combos_Combos_bool_exp'][];
    _not?: ValueTypes['comercial_Combos_Combos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Combos_Combos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_constraint']: comercial_Combos_Combos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_inc_input']: {
    Valor?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_insert_input']: {
    Combo?: ValueTypes['comercial_Combos_obj_rel_insert_input'] | null;
    ComboPertencente?:
      | ValueTypes['comercial_Combos_obj_rel_insert_input']
      | null;
    ComboPertencente_Id?: ValueTypes['uuid'] | null;
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Combos_Combos_max_fields']: AliasType<{
    ComboPertencente_Id?: true;
    Combo_Id?: true;
    Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_max_order_by']: {
    ComboPertencente_Id?: ValueTypes['order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Combos_Combos_min_fields']: AliasType<{
    ComboPertencente_Id?: true;
    Combo_Id?: true;
    Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_min_order_by']: {
    ComboPertencente_Id?: ValueTypes['order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Combos_Combos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_on_conflict']: {
    constraint: ValueTypes['comercial_Combos_Combos_constraint'];
    update_columns: ValueTypes['comercial_Combos_Combos_update_column'][];
    where?: ValueTypes['comercial_Combos_Combos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Combos_Combos". */
  ['comercial_Combos_Combos_order_by']: {
    Combo?: ValueTypes['comercial_Combos_order_by'] | null;
    ComboPertencente?: ValueTypes['comercial_Combos_order_by'] | null;
    ComboPertencente_Id?: ValueTypes['order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Combos_Combos */
  ['comercial_Combos_Combos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_select_column']: comercial_Combos_Combos_select_column;
  /** input type for updating data in table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_set_input']: {
    ComboPertencente_Id?: ValueTypes['uuid'] | null;
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_Combos_Combos_stddev_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_stddev_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Combos_stddev_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_stddev_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Combos_stddev_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_stddev_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_Combos_Combos_sum_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_sum_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_update_column']: comercial_Combos_Combos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Combos_Combos_var_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_var_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_Combos_Combos_var_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_var_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_Combos_Combos_variance_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_variance_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "comercial.Combos_Planos" */
  ['comercial_Combos_Planos']: AliasType<{
    /** An object relationship */
    Combo?: ValueTypes['comercial_Combos'];
    Combo_Id?: true;
    Id?: true;
    /** An object relationship */
    Plano?: ValueTypes['comercial_Planos'];
    /** An object relationship */
    PlanoPreco?: ValueTypes['comercial_Planos_Precos'];
    PlanoPreco_Id?: true;
    Plano_Id?: true;
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Combos_Planos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Combos_Planos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_Combos_Planos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_Combos_Planos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Combos_Planos_max_fields'];
    min?: ValueTypes['comercial_Combos_Planos_min_fields'];
    stddev?: ValueTypes['comercial_Combos_Planos_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_Combos_Planos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_Combos_Planos_stddev_samp_fields'];
    sum?: ValueTypes['comercial_Combos_Planos_sum_fields'];
    var_pop?: ValueTypes['comercial_Combos_Planos_var_pop_fields'];
    var_samp?: ValueTypes['comercial_Combos_Planos_var_samp_fields'];
    variance?: ValueTypes['comercial_Combos_Planos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_aggregate_order_by']: {
    avg?: ValueTypes['comercial_Combos_Planos_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Combos_Planos_max_order_by'] | null;
    min?: ValueTypes['comercial_Combos_Planos_min_order_by'] | null;
    stddev?: ValueTypes['comercial_Combos_Planos_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['comercial_Combos_Planos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_Combos_Planos_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['comercial_Combos_Planos_sum_order_by'] | null;
    var_pop?: ValueTypes['comercial_Combos_Planos_var_pop_order_by'] | null;
    var_samp?: ValueTypes['comercial_Combos_Planos_var_samp_order_by'] | null;
    variance?: ValueTypes['comercial_Combos_Planos_variance_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Combos_Planos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Combos_Planos_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['comercial_Combos_Planos_avg_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_avg_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Combos_Planos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Planos_bool_exp']: {
    Combo?: ValueTypes['comercial_Combos_bool_exp'] | null;
    Combo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Plano?: ValueTypes['comercial_Planos_bool_exp'] | null;
    PlanoPreco?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
    PlanoPreco_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Plano_Id?: ValueTypes['uuid_comparison_exp'] | null;
    ValorPraticado?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Combos_Planos_bool_exp'][];
    _not?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Combos_Planos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_constraint']: comercial_Combos_Planos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_inc_input']: {
    ValorPraticado?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_insert_input']: {
    Combo?: ValueTypes['comercial_Combos_obj_rel_insert_input'] | null;
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Plano?: ValueTypes['comercial_Planos_obj_rel_insert_input'] | null;
    PlanoPreco?:
      | ValueTypes['comercial_Planos_Precos_obj_rel_insert_input']
      | null;
    PlanoPreco_Id?: ValueTypes['uuid'] | null;
    Plano_Id?: ValueTypes['uuid'] | null;
    ValorPraticado?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Combos_Planos_max_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    PlanoPreco_Id?: true;
    Plano_Id?: true;
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_max_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    PlanoPreco_Id?: ValueTypes['order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Combos_Planos_min_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    PlanoPreco_Id?: true;
    Plano_Id?: true;
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_min_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    PlanoPreco_Id?: ValueTypes['order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Combos_Planos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_on_conflict']: {
    constraint: ValueTypes['comercial_Combos_Planos_constraint'];
    update_columns: ValueTypes['comercial_Combos_Planos_update_column'][];
    where?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Combos_Planos". */
  ['comercial_Combos_Planos_order_by']: {
    Combo?: ValueTypes['comercial_Combos_order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Plano?: ValueTypes['comercial_Planos_order_by'] | null;
    PlanoPreco?: ValueTypes['comercial_Planos_Precos_order_by'] | null;
    PlanoPreco_Id?: ValueTypes['order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Combos_Planos */
  ['comercial_Combos_Planos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_select_column']: comercial_Combos_Planos_select_column;
  /** input type for updating data in table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_set_input']: {
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    PlanoPreco_Id?: ValueTypes['uuid'] | null;
    Plano_Id?: ValueTypes['uuid'] | null;
    ValorPraticado?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_Combos_Planos_stddev_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_stddev_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Planos_stddev_pop_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_stddev_pop_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Planos_stddev_samp_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_stddev_samp_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_Combos_Planos_sum_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_sum_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_update_column']: comercial_Combos_Planos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Combos_Planos_var_pop_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_var_pop_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_Combos_Planos_var_samp_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_var_samp_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_Combos_Planos_variance_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_variance_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "comercial.Combos_Precos" */
  ['comercial_Combos_Precos']: AliasType<{
    /** An object relationship */
    Combo?: ValueTypes['comercial_Combos'];
    Combo_Id?: true;
    Id?: true;
    PropostasCombos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Combos']
    ];
    PropostasCombos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Combos_aggregate']
    ];
    ValorBase?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Combos_Precos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Combos_Precos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_Combos_Precos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_Combos_Precos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Combos_Precos_max_fields'];
    min?: ValueTypes['comercial_Combos_Precos_min_fields'];
    stddev?: ValueTypes['comercial_Combos_Precos_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_Combos_Precos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_Combos_Precos_stddev_samp_fields'];
    sum?: ValueTypes['comercial_Combos_Precos_sum_fields'];
    var_pop?: ValueTypes['comercial_Combos_Precos_var_pop_fields'];
    var_samp?: ValueTypes['comercial_Combos_Precos_var_samp_fields'];
    variance?: ValueTypes['comercial_Combos_Precos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_aggregate_order_by']: {
    avg?: ValueTypes['comercial_Combos_Precos_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Combos_Precos_max_order_by'] | null;
    min?: ValueTypes['comercial_Combos_Precos_min_order_by'] | null;
    stddev?: ValueTypes['comercial_Combos_Precos_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['comercial_Combos_Precos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_Combos_Precos_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['comercial_Combos_Precos_sum_order_by'] | null;
    var_pop?: ValueTypes['comercial_Combos_Precos_var_pop_order_by'] | null;
    var_samp?: ValueTypes['comercial_Combos_Precos_var_samp_order_by'] | null;
    variance?: ValueTypes['comercial_Combos_Precos_variance_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Combos_Precos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Combos_Precos_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['comercial_Combos_Precos_avg_fields']: AliasType<{
    ValorBase?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_avg_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Combos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Precos_bool_exp']: {
    Combo?: ValueTypes['comercial_Combos_bool_exp'] | null;
    Combo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    PropostasCombos?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
    ValorBase?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Combos_Precos_bool_exp'][];
    _not?: ValueTypes['comercial_Combos_Precos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Combos_Precos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_constraint']: comercial_Combos_Precos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_inc_input']: {
    ValorBase?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_insert_input']: {
    Combo?: ValueTypes['comercial_Combos_obj_rel_insert_input'] | null;
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    PropostasCombos?:
      | ValueTypes['propostas_Propostas_Combos_arr_rel_insert_input']
      | null;
    ValorBase?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Combos_Precos_max_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    ValorBase?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_max_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    ValorBase?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Combos_Precos_min_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    ValorBase?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_min_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    ValorBase?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Combos_Precos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Combos_Precos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Combos_Precos_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_on_conflict']: {
    constraint: ValueTypes['comercial_Combos_Precos_constraint'];
    update_columns: ValueTypes['comercial_Combos_Precos_update_column'][];
    where?: ValueTypes['comercial_Combos_Precos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Combos_Precos". */
  ['comercial_Combos_Precos_order_by']: {
    Combo?: ValueTypes['comercial_Combos_order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    PropostasCombos_aggregate?:
      | ValueTypes['propostas_Propostas_Combos_aggregate_order_by']
      | null;
    ValorBase?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Combos_Precos */
  ['comercial_Combos_Precos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_select_column']: comercial_Combos_Precos_select_column;
  /** input type for updating data in table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_set_input']: {
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    ValorBase?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_Combos_Precos_stddev_fields']: AliasType<{
    ValorBase?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_stddev_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Precos_stddev_pop_fields']: AliasType<{
    ValorBase?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_stddev_pop_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Precos_stddev_samp_fields']: AliasType<{
    ValorBase?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_stddev_samp_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_Combos_Precos_sum_fields']: AliasType<{
    ValorBase?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_sum_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_update_column']: comercial_Combos_Precos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Combos_Precos_var_pop_fields']: AliasType<{
    ValorBase?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_var_pop_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_Combos_Precos_var_samp_fields']: AliasType<{
    ValorBase?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_var_samp_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_Combos_Precos_variance_fields']: AliasType<{
    ValorBase?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_variance_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos']: AliasType<{
    /** An object relationship */
    Combo?: ValueTypes['comercial_Combos'];
    Combo_Id?: true;
    Id?: true;
    /** An object relationship */
    Produto?: ValueTypes['comercial_Produtos'];
    /** An object relationship */
    ProdutoPreco?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    ProdutoPreco_Id?: true;
    Produto_Id?: true;
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Combos_Produtos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Combos_Produtos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_Combos_Produtos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_Combos_Produtos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Combos_Produtos_max_fields'];
    min?: ValueTypes['comercial_Combos_Produtos_min_fields'];
    stddev?: ValueTypes['comercial_Combos_Produtos_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_Combos_Produtos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_Combos_Produtos_stddev_samp_fields'];
    sum?: ValueTypes['comercial_Combos_Produtos_sum_fields'];
    var_pop?: ValueTypes['comercial_Combos_Produtos_var_pop_fields'];
    var_samp?: ValueTypes['comercial_Combos_Produtos_var_samp_fields'];
    variance?: ValueTypes['comercial_Combos_Produtos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_aggregate_order_by']: {
    avg?: ValueTypes['comercial_Combos_Produtos_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Combos_Produtos_max_order_by'] | null;
    min?: ValueTypes['comercial_Combos_Produtos_min_order_by'] | null;
    stddev?: ValueTypes['comercial_Combos_Produtos_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['comercial_Combos_Produtos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_Combos_Produtos_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['comercial_Combos_Produtos_sum_order_by'] | null;
    var_pop?: ValueTypes['comercial_Combos_Produtos_var_pop_order_by'] | null;
    var_samp?: ValueTypes['comercial_Combos_Produtos_var_samp_order_by'] | null;
    variance?: ValueTypes['comercial_Combos_Produtos_variance_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Combos_Produtos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Combos_Produtos_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['comercial_Combos_Produtos_avg_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_avg_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Combos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Produtos_bool_exp']: {
    Combo?: ValueTypes['comercial_Combos_bool_exp'] | null;
    Combo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Produto?: ValueTypes['comercial_Produtos_bool_exp'] | null;
    ProdutoPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
      | null;
    ProdutoPreco_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Produto_Id?: ValueTypes['uuid_comparison_exp'] | null;
    ValorPraticado?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Combos_Produtos_bool_exp'][];
    _not?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Combos_Produtos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_constraint']: comercial_Combos_Produtos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_inc_input']: {
    ValorPraticado?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_insert_input']: {
    Combo?: ValueTypes['comercial_Combos_obj_rel_insert_input'] | null;
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Produto?: ValueTypes['comercial_Produtos_obj_rel_insert_input'] | null;
    ProdutoPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_obj_rel_insert_input']
      | null;
    ProdutoPreco_Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    ValorPraticado?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Combos_Produtos_max_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    ProdutoPreco_Id?: true;
    Produto_Id?: true;
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_max_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    ProdutoPreco_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Combos_Produtos_min_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    ProdutoPreco_Id?: true;
    Produto_Id?: true;
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_min_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    ProdutoPreco_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Combos_Produtos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_on_conflict']: {
    constraint: ValueTypes['comercial_Combos_Produtos_constraint'];
    update_columns: ValueTypes['comercial_Combos_Produtos_update_column'][];
    where?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Combos_Produtos". */
  ['comercial_Combos_Produtos_order_by']: {
    Combo?: ValueTypes['comercial_Combos_order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Produto?: ValueTypes['comercial_Produtos_order_by'] | null;
    ProdutoPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_order_by']
      | null;
    ProdutoPreco_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Combos_Produtos */
  ['comercial_Combos_Produtos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_select_column']: comercial_Combos_Produtos_select_column;
  /** input type for updating data in table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_set_input']: {
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    ProdutoPreco_Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    ValorPraticado?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_Combos_Produtos_stddev_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_stddev_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Produtos_stddev_pop_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_stddev_pop_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Produtos_stddev_samp_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_stddev_samp_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_Combos_Produtos_sum_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_sum_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_update_column']: comercial_Combos_Produtos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Combos_Produtos_var_pop_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_var_pop_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_Combos_Produtos_var_samp_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_var_samp_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_Combos_Produtos_variance_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_variance_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos']: AliasType<{
    /** An object relationship */
    Combo?: ValueTypes['comercial_Combos'];
    Combo_Id?: true;
    Id?: true;
    /** An object relationship */
    Servico?: ValueTypes['comercial_Servicos'];
    ServicoPreco_Id?: true;
    Servico_Id?: true;
    /** An object relationship */
    ServicosPreco?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Combos_Servicos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Combos_Servicos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_Combos_Servicos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_Combos_Servicos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Combos_Servicos_max_fields'];
    min?: ValueTypes['comercial_Combos_Servicos_min_fields'];
    stddev?: ValueTypes['comercial_Combos_Servicos_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_Combos_Servicos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_Combos_Servicos_stddev_samp_fields'];
    sum?: ValueTypes['comercial_Combos_Servicos_sum_fields'];
    var_pop?: ValueTypes['comercial_Combos_Servicos_var_pop_fields'];
    var_samp?: ValueTypes['comercial_Combos_Servicos_var_samp_fields'];
    variance?: ValueTypes['comercial_Combos_Servicos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_aggregate_order_by']: {
    avg?: ValueTypes['comercial_Combos_Servicos_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Combos_Servicos_max_order_by'] | null;
    min?: ValueTypes['comercial_Combos_Servicos_min_order_by'] | null;
    stddev?: ValueTypes['comercial_Combos_Servicos_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['comercial_Combos_Servicos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_Combos_Servicos_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['comercial_Combos_Servicos_sum_order_by'] | null;
    var_pop?: ValueTypes['comercial_Combos_Servicos_var_pop_order_by'] | null;
    var_samp?: ValueTypes['comercial_Combos_Servicos_var_samp_order_by'] | null;
    variance?: ValueTypes['comercial_Combos_Servicos_variance_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Combos_Servicos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Combos_Servicos_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['comercial_Combos_Servicos_avg_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_avg_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Combos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Servicos_bool_exp']: {
    Combo?: ValueTypes['comercial_Combos_bool_exp'] | null;
    Combo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servico?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    ServicoPreco_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    ServicosPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
      | null;
    ValorPraticado?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Combos_Servicos_bool_exp'][];
    _not?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Combos_Servicos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_constraint']: comercial_Combos_Servicos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_inc_input']: {
    ValorPraticado?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_insert_input']: {
    Combo?: ValueTypes['comercial_Combos_obj_rel_insert_input'] | null;
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Servico?: ValueTypes['comercial_Servicos_obj_rel_insert_input'] | null;
    ServicoPreco_Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    ServicosPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_obj_rel_insert_input']
      | null;
    ValorPraticado?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Combos_Servicos_max_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    ServicoPreco_Id?: true;
    Servico_Id?: true;
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_max_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    ServicoPreco_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Combos_Servicos_min_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    ServicoPreco_Id?: true;
    Servico_Id?: true;
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_min_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    ServicoPreco_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Combos_Servicos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_on_conflict']: {
    constraint: ValueTypes['comercial_Combos_Servicos_constraint'];
    update_columns: ValueTypes['comercial_Combos_Servicos_update_column'][];
    where?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Combos_Servicos". */
  ['comercial_Combos_Servicos_order_by']: {
    Combo?: ValueTypes['comercial_Combos_order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Servico?: ValueTypes['comercial_Servicos_order_by'] | null;
    ServicoPreco_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    ServicosPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by']
      | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Combos_Servicos */
  ['comercial_Combos_Servicos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_select_column']: comercial_Combos_Servicos_select_column;
  /** input type for updating data in table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_set_input']: {
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    ServicoPreco_Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    ValorPraticado?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_Combos_Servicos_stddev_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_stddev_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Servicos_stddev_pop_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_stddev_pop_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Servicos_stddev_samp_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_stddev_samp_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_Combos_Servicos_sum_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_sum_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_update_column']: comercial_Combos_Servicos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Combos_Servicos_var_pop_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_var_pop_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_Combos_Servicos_var_samp_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_var_samp_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_Combos_Servicos_variance_fields']: AliasType<{
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_variance_order_by']: {
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregated selection of "comercial.Combos" */
  ['comercial_Combos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Combos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Combos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Combos" */
  ['comercial_Combos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Combos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Combos_max_fields'];
    min?: ValueTypes['comercial_Combos_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "comercial.Combos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_bool_exp']: {
    ComboPai?: ValueTypes['comercial_Combos_Combos_bool_exp'] | null;
    Combos?: ValueTypes['comercial_Combos_Combos_bool_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    OportunidadesDeProdutos?:
      | ValueTypes['comercial_Produtos_Oportunidades_bool_exp']
      | null;
    OportunidadesDeServicos?:
      | ValueTypes['comercial_Servicos_Oportunidades_bool_exp']
      | null;
    Planos?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
    Precos?: ValueTypes['comercial_Combos_Precos_bool_exp'] | null;
    Produtos?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
    Propostas?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
    Servicos?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
    _and?: ValueTypes['comercial_Combos_bool_exp'][];
    _not?: ValueTypes['comercial_Combos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Combos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Combos" */
  ['comercial_Combos_constraint']: comercial_Combos_constraint;
  /** input type for inserting data into table "comercial.Combos" */
  ['comercial_Combos_insert_input']: {
    ComboPai?:
      | ValueTypes['comercial_Combos_Combos_arr_rel_insert_input']
      | null;
    Combos?: ValueTypes['comercial_Combos_Combos_arr_rel_insert_input'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    OportunidadesDeProdutos?:
      | ValueTypes['comercial_Produtos_Oportunidades_arr_rel_insert_input']
      | null;
    OportunidadesDeServicos?:
      | ValueTypes['comercial_Servicos_Oportunidades_arr_rel_insert_input']
      | null;
    Planos?: ValueTypes['comercial_Combos_Planos_arr_rel_insert_input'] | null;
    Precos?: ValueTypes['comercial_Combos_Precos_arr_rel_insert_input'] | null;
    Produtos?:
      | ValueTypes['comercial_Combos_Produtos_arr_rel_insert_input']
      | null;
    Propostas?:
      | ValueTypes['propostas_Propostas_Combos_arr_rel_insert_input']
      | null;
    Servicos?:
      | ValueTypes['comercial_Combos_Servicos_arr_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Combos_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['comercial_Combos_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "comercial.Combos" */
  ['comercial_Combos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Combos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Combos" */
  ['comercial_Combos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Combos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Combos_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.Combos" */
  ['comercial_Combos_on_conflict']: {
    constraint: ValueTypes['comercial_Combos_constraint'];
    update_columns: ValueTypes['comercial_Combos_update_column'][];
    where?: ValueTypes['comercial_Combos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Combos". */
  ['comercial_Combos_order_by']: {
    ComboPai_aggregate?:
      | ValueTypes['comercial_Combos_Combos_aggregate_order_by']
      | null;
    Combos_aggregate?:
      | ValueTypes['comercial_Combos_Combos_aggregate_order_by']
      | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    OportunidadesDeProdutos_aggregate?:
      | ValueTypes['comercial_Produtos_Oportunidades_aggregate_order_by']
      | null;
    OportunidadesDeServicos_aggregate?:
      | ValueTypes['comercial_Servicos_Oportunidades_aggregate_order_by']
      | null;
    Planos_aggregate?:
      | ValueTypes['comercial_Combos_Planos_aggregate_order_by']
      | null;
    Precos_aggregate?:
      | ValueTypes['comercial_Combos_Precos_aggregate_order_by']
      | null;
    Produtos_aggregate?:
      | ValueTypes['comercial_Combos_Produtos_aggregate_order_by']
      | null;
    Propostas_aggregate?:
      | ValueTypes['propostas_Propostas_Combos_aggregate_order_by']
      | null;
    Servicos_aggregate?:
      | ValueTypes['comercial_Combos_Servicos_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Combos */
  ['comercial_Combos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Combos" */
  ['comercial_Combos_select_column']: comercial_Combos_select_column;
  /** input type for updating data in table "comercial.Combos" */
  ['comercial_Combos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Combos" */
  ['comercial_Combos_update_column']: comercial_Combos_update_column;
  /** columns and relationships of "comercial.Condicionais" */
  ['comercial_Condicionais']: AliasType<{
    Id?: true;
    Nome?: true;
    Planos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Condicionais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Condicionais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Condicionais_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Condicionais']
    ];
    Planos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Condicionais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Condicionais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Condicionais_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Condicionais_aggregate']
    ];
    /** An object relationship */
    Situacao?: ValueTypes['comercial_CondicionaisSituacoes'];
    Situacao_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes']: AliasType<{
    Comentario?: true;
    Condicionais?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Condicionais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Condicionais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Condicionais_bool_exp'] | null;
      },
      ValueTypes['comercial_Condicionais']
    ];
    Condicionais_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Condicionais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Condicionais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Condicionais_bool_exp'] | null;
      },
      ValueTypes['comercial_Condicionais_aggregate']
    ];
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_CondicionaisSituacoes_aggregate_fields'];
    nodes?: ValueTypes['comercial_CondicionaisSituacoes'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_CondicionaisSituacoes_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_CondicionaisSituacoes_max_fields'];
    min?: ValueTypes['comercial_CondicionaisSituacoes_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "comercial.CondicionaisSituacoes". All fields are combined with a logical 'AND'. */
  ['comercial_CondicionaisSituacoes_bool_exp']: {
    Comentario?: ValueTypes['String_comparison_exp'] | null;
    Condicionais?: ValueTypes['comercial_Condicionais_bool_exp'] | null;
    Valor?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['comercial_CondicionaisSituacoes_bool_exp'][];
    _not?: ValueTypes['comercial_CondicionaisSituacoes_bool_exp'] | null;
    _or?: ValueTypes['comercial_CondicionaisSituacoes_bool_exp'][];
  };
  /** unique or primary key constraints on table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_constraint']: comercial_CondicionaisSituacoes_constraint;
  ['comercial_CondicionaisSituacoes_enum']: comercial_CondicionaisSituacoes_enum;
  /** Boolean expression to compare columns of type "comercial_CondicionaisSituacoes_enum". All fields are combined with logical 'AND'. */
  ['comercial_CondicionaisSituacoes_enum_comparison_exp']: {
    _eq?: ValueTypes['comercial_CondicionaisSituacoes_enum'] | null;
    _in?: ValueTypes['comercial_CondicionaisSituacoes_enum'][];
    _is_null?: boolean | null;
    _neq?: ValueTypes['comercial_CondicionaisSituacoes_enum'] | null;
    _nin?: ValueTypes['comercial_CondicionaisSituacoes_enum'][];
  };
  /** input type for inserting data into table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_insert_input']: {
    Comentario?: string | null;
    Condicionais?:
      | ValueTypes['comercial_Condicionais_arr_rel_insert_input']
      | null;
    Valor?: string | null;
  };
  /** aggregate max on columns */
  ['comercial_CondicionaisSituacoes_max_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['comercial_CondicionaisSituacoes_min_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_CondicionaisSituacoes'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_obj_rel_insert_input']: {
    data: ValueTypes['comercial_CondicionaisSituacoes_insert_input'];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_CondicionaisSituacoes_on_conflict']
      | null;
  };
  /** on conflict condition type for table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_on_conflict']: {
    constraint: ValueTypes['comercial_CondicionaisSituacoes_constraint'];
    update_columns: ValueTypes['comercial_CondicionaisSituacoes_update_column'][];
    where?: ValueTypes['comercial_CondicionaisSituacoes_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.CondicionaisSituacoes". */
  ['comercial_CondicionaisSituacoes_order_by']: {
    Comentario?: ValueTypes['order_by'] | null;
    Condicionais_aggregate?:
      | ValueTypes['comercial_Condicionais_aggregate_order_by']
      | null;
    Valor?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_CondicionaisSituacoes */
  ['comercial_CondicionaisSituacoes_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_select_column']: comercial_CondicionaisSituacoes_select_column;
  /** input type for updating data in table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_set_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** update columns of table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_update_column']: comercial_CondicionaisSituacoes_update_column;
  /** aggregated selection of "comercial.Condicionais" */
  ['comercial_Condicionais_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Condicionais_aggregate_fields'];
    nodes?: ValueTypes['comercial_Condicionais'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Condicionais" */
  ['comercial_Condicionais_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Condicionais_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Condicionais_max_fields'];
    min?: ValueTypes['comercial_Condicionais_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Condicionais" */
  ['comercial_Condicionais_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Condicionais_max_order_by'] | null;
    min?: ValueTypes['comercial_Condicionais_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Condicionais" */
  ['comercial_Condicionais_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Condicionais_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Condicionais_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Condicionais". All fields are combined with a logical 'AND'. */
  ['comercial_Condicionais_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Planos?: ValueTypes['comercial_Planos_Condicionais_bool_exp'] | null;
    Situacao?: ValueTypes['comercial_CondicionaisSituacoes_bool_exp'] | null;
    Situacao_Id?:
      | ValueTypes['comercial_CondicionaisSituacoes_enum_comparison_exp']
      | null;
    _and?: ValueTypes['comercial_Condicionais_bool_exp'][];
    _not?: ValueTypes['comercial_Condicionais_bool_exp'] | null;
    _or?: ValueTypes['comercial_Condicionais_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Condicionais" */
  ['comercial_Condicionais_constraint']: comercial_Condicionais_constraint;
  /** input type for inserting data into table "comercial.Condicionais" */
  ['comercial_Condicionais_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Planos?:
      | ValueTypes['comercial_Planos_Condicionais_arr_rel_insert_input']
      | null;
    Situacao?:
      | ValueTypes['comercial_CondicionaisSituacoes_obj_rel_insert_input']
      | null;
    Situacao_Id?: ValueTypes['comercial_CondicionaisSituacoes_enum'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Condicionais_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Condicionais_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Condicionais" */
  ['comercial_Condicionais_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Condicionais'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Condicionais" */
  ['comercial_Condicionais_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Condicionais_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Condicionais_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.Condicionais" */
  ['comercial_Condicionais_on_conflict']: {
    constraint: ValueTypes['comercial_Condicionais_constraint'];
    update_columns: ValueTypes['comercial_Condicionais_update_column'][];
    where?: ValueTypes['comercial_Condicionais_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Condicionais". */
  ['comercial_Condicionais_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Planos_aggregate?:
      | ValueTypes['comercial_Planos_Condicionais_aggregate_order_by']
      | null;
    Situacao?: ValueTypes['comercial_CondicionaisSituacoes_order_by'] | null;
    Situacao_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Condicionais */
  ['comercial_Condicionais_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_select_column']: comercial_Condicionais_select_column;
  /** input type for updating data in table "comercial.Condicionais" */
  ['comercial_Condicionais_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Situacao_Id?: ValueTypes['comercial_CondicionaisSituacoes_enum'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_update_column']: comercial_Condicionais_update_column;
  /** columns and relationships of "comercial.ContratosBase" */
  ['comercial_ContratosBase']: AliasType<{
    CodigoReferencia?: true;
    Id?: true;
    Nome?: true;
    Parceiro_Id?: true;
    /** An object relationship */
    PrestadorDeServico?: ValueTypes['comercial_PrestadoresDeServicos'];
    Versoes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_ContratosBase_Versoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_ContratosBase_Versoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_ContratosBase_Versoes_bool_exp'] | null;
      },
      ValueTypes['comercial_ContratosBase_Versoes']
    ];
    Versoes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_ContratosBase_Versoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_ContratosBase_Versoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_ContratosBase_Versoes_bool_exp'] | null;
      },
      ValueTypes['comercial_ContratosBase_Versoes_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes']: AliasType<{
    /** An object relationship */
    ContratoBase?: ValueTypes['comercial_ContratosBase'];
    ContratoBase_Id?: true;
    Id?: true;
    Versao?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_ContratosBase_Versoes_aggregate_fields'];
    nodes?: ValueTypes['comercial_ContratosBase_Versoes'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_ContratosBase_Versoes_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_ContratosBase_Versoes_max_fields'];
    min?: ValueTypes['comercial_ContratosBase_Versoes_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_ContratosBase_Versoes_max_order_by'] | null;
    min?: ValueTypes['comercial_ContratosBase_Versoes_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_arr_rel_insert_input']: {
    data: ValueTypes['comercial_ContratosBase_Versoes_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_ContratosBase_Versoes_on_conflict']
      | null;
  };
  /** Boolean expression to filter rows from the table "comercial.ContratosBase_Versoes". All fields are combined with a logical 'AND'. */
  ['comercial_ContratosBase_Versoes_bool_exp']: {
    ContratoBase?: ValueTypes['comercial_ContratosBase_bool_exp'] | null;
    ContratoBase_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Versao?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['comercial_ContratosBase_Versoes_bool_exp'][];
    _not?: ValueTypes['comercial_ContratosBase_Versoes_bool_exp'] | null;
    _or?: ValueTypes['comercial_ContratosBase_Versoes_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_constraint']: comercial_ContratosBase_Versoes_constraint;
  /** input type for inserting data into table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_insert_input']: {
    ContratoBase?:
      | ValueTypes['comercial_ContratosBase_obj_rel_insert_input']
      | null;
    ContratoBase_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Versao?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_ContratosBase_Versoes_max_fields']: AliasType<{
    ContratoBase_Id?: true;
    Id?: true;
    Versao?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_max_order_by']: {
    ContratoBase_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Versao?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_ContratosBase_Versoes_min_fields']: AliasType<{
    ContratoBase_Id?: true;
    Id?: true;
    Versao?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_min_order_by']: {
    ContratoBase_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Versao?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_ContratosBase_Versoes'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_on_conflict']: {
    constraint: ValueTypes['comercial_ContratosBase_Versoes_constraint'];
    update_columns: ValueTypes['comercial_ContratosBase_Versoes_update_column'][];
    where?: ValueTypes['comercial_ContratosBase_Versoes_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.ContratosBase_Versoes". */
  ['comercial_ContratosBase_Versoes_order_by']: {
    ContratoBase?: ValueTypes['comercial_ContratosBase_order_by'] | null;
    ContratoBase_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Versao?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_ContratosBase_Versoes */
  ['comercial_ContratosBase_Versoes_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_select_column']: comercial_ContratosBase_Versoes_select_column;
  /** input type for updating data in table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_set_input']: {
    ContratoBase_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Versao?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_update_column']: comercial_ContratosBase_Versoes_update_column;
  /** aggregated selection of "comercial.ContratosBase" */
  ['comercial_ContratosBase_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_ContratosBase_aggregate_fields'];
    nodes?: ValueTypes['comercial_ContratosBase'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.ContratosBase" */
  ['comercial_ContratosBase_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_ContratosBase_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_ContratosBase_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_ContratosBase_max_fields'];
    min?: ValueTypes['comercial_ContratosBase_min_fields'];
    stddev?: ValueTypes['comercial_ContratosBase_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_ContratosBase_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_ContratosBase_stddev_samp_fields'];
    sum?: ValueTypes['comercial_ContratosBase_sum_fields'];
    var_pop?: ValueTypes['comercial_ContratosBase_var_pop_fields'];
    var_samp?: ValueTypes['comercial_ContratosBase_var_samp_fields'];
    variance?: ValueTypes['comercial_ContratosBase_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_aggregate_order_by']: {
    avg?: ValueTypes['comercial_ContratosBase_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_ContratosBase_max_order_by'] | null;
    min?: ValueTypes['comercial_ContratosBase_min_order_by'] | null;
    stddev?: ValueTypes['comercial_ContratosBase_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['comercial_ContratosBase_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_ContratosBase_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['comercial_ContratosBase_sum_order_by'] | null;
    var_pop?: ValueTypes['comercial_ContratosBase_var_pop_order_by'] | null;
    var_samp?: ValueTypes['comercial_ContratosBase_var_samp_order_by'] | null;
    variance?: ValueTypes['comercial_ContratosBase_variance_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.ContratosBase" */
  ['comercial_ContratosBase_arr_rel_insert_input']: {
    data: ValueTypes['comercial_ContratosBase_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_ContratosBase_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['comercial_ContratosBase_avg_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_avg_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.ContratosBase". All fields are combined with a logical 'AND'. */
  ['comercial_ContratosBase_bool_exp']: {
    CodigoReferencia?: ValueTypes['Int_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Parceiro_Id?: ValueTypes['uuid_comparison_exp'] | null;
    PrestadorDeServico?:
      | ValueTypes['comercial_PrestadoresDeServicos_bool_exp']
      | null;
    Versoes?: ValueTypes['comercial_ContratosBase_Versoes_bool_exp'] | null;
    _and?: ValueTypes['comercial_ContratosBase_bool_exp'][];
    _not?: ValueTypes['comercial_ContratosBase_bool_exp'] | null;
    _or?: ValueTypes['comercial_ContratosBase_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.ContratosBase" */
  ['comercial_ContratosBase_constraint']: comercial_ContratosBase_constraint;
  /** input type for incrementing numeric columns in table "comercial.ContratosBase" */
  ['comercial_ContratosBase_inc_input']: {
    CodigoReferencia?: number | null;
  };
  /** input type for inserting data into table "comercial.ContratosBase" */
  ['comercial_ContratosBase_insert_input']: {
    CodigoReferencia?: number | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Parceiro_Id?: ValueTypes['uuid'] | null;
    PrestadorDeServico?:
      | ValueTypes['comercial_PrestadoresDeServicos_obj_rel_insert_input']
      | null;
    Versoes?:
      | ValueTypes['comercial_ContratosBase_Versoes_arr_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_ContratosBase_max_fields']: AliasType<{
    CodigoReferencia?: true;
    Id?: true;
    Nome?: true;
    Parceiro_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_max_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Parceiro_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_ContratosBase_min_fields']: AliasType<{
    CodigoReferencia?: true;
    Id?: true;
    Nome?: true;
    Parceiro_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_min_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Parceiro_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.ContratosBase" */
  ['comercial_ContratosBase_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_ContratosBase'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.ContratosBase" */
  ['comercial_ContratosBase_obj_rel_insert_input']: {
    data: ValueTypes['comercial_ContratosBase_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_ContratosBase_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.ContratosBase" */
  ['comercial_ContratosBase_on_conflict']: {
    constraint: ValueTypes['comercial_ContratosBase_constraint'];
    update_columns: ValueTypes['comercial_ContratosBase_update_column'][];
    where?: ValueTypes['comercial_ContratosBase_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.ContratosBase". */
  ['comercial_ContratosBase_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Parceiro_Id?: ValueTypes['order_by'] | null;
    PrestadorDeServico?:
      | ValueTypes['comercial_PrestadoresDeServicos_order_by']
      | null;
    Versoes_aggregate?:
      | ValueTypes['comercial_ContratosBase_Versoes_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_ContratosBase */
  ['comercial_ContratosBase_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_select_column']: comercial_ContratosBase_select_column;
  /** input type for updating data in table "comercial.ContratosBase" */
  ['comercial_ContratosBase_set_input']: {
    CodigoReferencia?: number | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Parceiro_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_ContratosBase_stddev_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_stddev_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_ContratosBase_stddev_pop_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_stddev_pop_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_ContratosBase_stddev_samp_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_stddev_samp_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_ContratosBase_sum_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_sum_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_update_column']: comercial_ContratosBase_update_column;
  /** aggregate var_pop on columns */
  ['comercial_ContratosBase_var_pop_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_var_pop_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_ContratosBase_var_samp_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_var_samp_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_ContratosBase_variance_fields']: AliasType<{
    CodigoReferencia?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_variance_order_by']: {
    CodigoReferencia?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "comercial.Planos" */
  ['comercial_Planos']: AliasType<{
    Combos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Planos']
    ];
    Combos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Planos_aggregate']
    ];
    Condicionais?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Condicionais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Condicionais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Condicionais_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Condicionais']
    ];
    Condicionais_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Condicionais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Condicionais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Condicionais_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Condicionais_aggregate']
    ];
    Id?: true;
    Nome?: true;
    Precos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Precos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Precos']
    ];
    Precos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Precos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Precos_aggregate']
    ];
    Propostas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Planos']
    ];
    Propostas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Planos_aggregate']
    ];
    /** An object relationship */
    Servico?: ValueTypes['comercial_Servicos'];
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais']: AliasType<{
    /** An object relationship */
    Condicional?: ValueTypes['comercial_Condicionais'];
    Condicional_Id?: true;
    Id?: true;
    /** An object relationship */
    Plano?: ValueTypes['comercial_Planos'];
    Plano_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Planos_Condicionais_aggregate_fields'];
    nodes?: ValueTypes['comercial_Planos_Condicionais'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_Planos_Condicionais_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_Planos_Condicionais_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Planos_Condicionais_max_fields'];
    min?: ValueTypes['comercial_Planos_Condicionais_min_fields'];
    stddev?: ValueTypes['comercial_Planos_Condicionais_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_Planos_Condicionais_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_Planos_Condicionais_stddev_samp_fields'];
    sum?: ValueTypes['comercial_Planos_Condicionais_sum_fields'];
    var_pop?: ValueTypes['comercial_Planos_Condicionais_var_pop_fields'];
    var_samp?: ValueTypes['comercial_Planos_Condicionais_var_samp_fields'];
    variance?: ValueTypes['comercial_Planos_Condicionais_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_aggregate_order_by']: {
    avg?: ValueTypes['comercial_Planos_Condicionais_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Planos_Condicionais_max_order_by'] | null;
    min?: ValueTypes['comercial_Planos_Condicionais_min_order_by'] | null;
    stddev?: ValueTypes['comercial_Planos_Condicionais_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['comercial_Planos_Condicionais_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_Planos_Condicionais_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['comercial_Planos_Condicionais_sum_order_by'] | null;
    var_pop?:
      | ValueTypes['comercial_Planos_Condicionais_var_pop_order_by']
      | null;
    var_samp?:
      | ValueTypes['comercial_Planos_Condicionais_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['comercial_Planos_Condicionais_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Planos_Condicionais_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_Planos_Condicionais_on_conflict']
      | null;
  };
  /** aggregate avg on columns */
  ['comercial_Planos_Condicionais_avg_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_avg_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Planos_Condicionais". All fields are combined with a logical 'AND'. */
  ['comercial_Planos_Condicionais_bool_exp']: {
    Condicional?: ValueTypes['comercial_Condicionais_bool_exp'] | null;
    Condicional_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Plano?: ValueTypes['comercial_Planos_bool_exp'] | null;
    Plano_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Valor?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Planos_Condicionais_bool_exp'][];
    _not?: ValueTypes['comercial_Planos_Condicionais_bool_exp'] | null;
    _or?: ValueTypes['comercial_Planos_Condicionais_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_constraint']: comercial_Planos_Condicionais_constraint;
  /** input type for incrementing numeric columns in table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_inc_input']: {
    Valor?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_insert_input']: {
    Condicional?:
      | ValueTypes['comercial_Condicionais_obj_rel_insert_input']
      | null;
    Condicional_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Plano?: ValueTypes['comercial_Planos_obj_rel_insert_input'] | null;
    Plano_Id?: ValueTypes['uuid'] | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Planos_Condicionais_max_fields']: AliasType<{
    Condicional_Id?: true;
    Id?: true;
    Plano_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_max_order_by']: {
    Condicional_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Planos_Condicionais_min_fields']: AliasType<{
    Condicional_Id?: true;
    Id?: true;
    Plano_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_min_order_by']: {
    Condicional_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Planos_Condicionais'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_on_conflict']: {
    constraint: ValueTypes['comercial_Planos_Condicionais_constraint'];
    update_columns: ValueTypes['comercial_Planos_Condicionais_update_column'][];
    where?: ValueTypes['comercial_Planos_Condicionais_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Planos_Condicionais". */
  ['comercial_Planos_Condicionais_order_by']: {
    Condicional?: ValueTypes['comercial_Condicionais_order_by'] | null;
    Condicional_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Plano?: ValueTypes['comercial_Planos_order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Planos_Condicionais */
  ['comercial_Planos_Condicionais_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_select_column']: comercial_Planos_Condicionais_select_column;
  /** input type for updating data in table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_set_input']: {
    Condicional_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Plano_Id?: ValueTypes['uuid'] | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_Planos_Condicionais_stddev_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_stddev_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Planos_Condicionais_stddev_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_stddev_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Planos_Condicionais_stddev_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_stddev_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_Planos_Condicionais_sum_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_sum_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_update_column']: comercial_Planos_Condicionais_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Planos_Condicionais_var_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_var_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_Planos_Condicionais_var_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_var_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_Planos_Condicionais_variance_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_variance_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "comercial.Planos_Precos" */
  ['comercial_Planos_Precos']: AliasType<{
    CombosPlanos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Planos']
    ];
    CombosPlanos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Planos_aggregate']
    ];
    Id?: true;
    /** An object relationship */
    Plano?: ValueTypes['comercial_Planos'];
    Plano_Id?: true;
    PropostasPlanos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Planos']
    ];
    PropostasPlanos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Planos_aggregate']
    ];
    /** An object relationship */
    ServicoPreco?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    ServicoPreco_Id?: true;
    ValorBase?: true;
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Planos_Precos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Planos_Precos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_Planos_Precos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_Planos_Precos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Planos_Precos_max_fields'];
    min?: ValueTypes['comercial_Planos_Precos_min_fields'];
    stddev?: ValueTypes['comercial_Planos_Precos_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_Planos_Precos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_Planos_Precos_stddev_samp_fields'];
    sum?: ValueTypes['comercial_Planos_Precos_sum_fields'];
    var_pop?: ValueTypes['comercial_Planos_Precos_var_pop_fields'];
    var_samp?: ValueTypes['comercial_Planos_Precos_var_samp_fields'];
    variance?: ValueTypes['comercial_Planos_Precos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_aggregate_order_by']: {
    avg?: ValueTypes['comercial_Planos_Precos_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Planos_Precos_max_order_by'] | null;
    min?: ValueTypes['comercial_Planos_Precos_min_order_by'] | null;
    stddev?: ValueTypes['comercial_Planos_Precos_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['comercial_Planos_Precos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_Planos_Precos_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['comercial_Planos_Precos_sum_order_by'] | null;
    var_pop?: ValueTypes['comercial_Planos_Precos_var_pop_order_by'] | null;
    var_samp?: ValueTypes['comercial_Planos_Precos_var_samp_order_by'] | null;
    variance?: ValueTypes['comercial_Planos_Precos_variance_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Planos_Precos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Planos_Precos_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['comercial_Planos_Precos_avg_fields']: AliasType<{
    ValorBase?: true;
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_avg_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Planos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_Planos_Precos_bool_exp']: {
    CombosPlanos?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Plano?: ValueTypes['comercial_Planos_bool_exp'] | null;
    Plano_Id?: ValueTypes['uuid_comparison_exp'] | null;
    PropostasPlanos?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
    ServicoPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
      | null;
    ServicoPreco_Id?: ValueTypes['uuid_comparison_exp'] | null;
    ValorBase?: ValueTypes['float8_comparison_exp'] | null;
    ValorPraticado?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Planos_Precos_bool_exp'][];
    _not?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Planos_Precos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_constraint']: comercial_Planos_Precos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_inc_input']: {
    ValorBase?: ValueTypes['float8'] | null;
    ValorPraticado?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_insert_input']: {
    CombosPlanos?:
      | ValueTypes['comercial_Combos_Planos_arr_rel_insert_input']
      | null;
    Id?: ValueTypes['uuid'] | null;
    Plano?: ValueTypes['comercial_Planos_obj_rel_insert_input'] | null;
    Plano_Id?: ValueTypes['uuid'] | null;
    PropostasPlanos?:
      | ValueTypes['propostas_Propostas_Planos_arr_rel_insert_input']
      | null;
    ServicoPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_obj_rel_insert_input']
      | null;
    ServicoPreco_Id?: ValueTypes['uuid'] | null;
    ValorBase?: ValueTypes['float8'] | null;
    ValorPraticado?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Planos_Precos_max_fields']: AliasType<{
    Id?: true;
    Plano_Id?: true;
    ServicoPreco_Id?: true;
    ValorBase?: true;
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    ServicoPreco_Id?: ValueTypes['order_by'] | null;
    ValorBase?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Planos_Precos_min_fields']: AliasType<{
    Id?: true;
    Plano_Id?: true;
    ServicoPreco_Id?: true;
    ValorBase?: true;
    ValorPraticado?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    ServicoPreco_Id?: ValueTypes['order_by'] | null;
    ValorBase?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Planos_Precos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Planos_Precos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Planos_Precos_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_on_conflict']: {
    constraint: ValueTypes['comercial_Planos_Precos_constraint'];
    update_columns: ValueTypes['comercial_Planos_Precos_update_column'][];
    where?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Planos_Precos". */
  ['comercial_Planos_Precos_order_by']: {
    CombosPlanos_aggregate?:
      | ValueTypes['comercial_Combos_Planos_aggregate_order_by']
      | null;
    Id?: ValueTypes['order_by'] | null;
    Plano?: ValueTypes['comercial_Planos_order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    PropostasPlanos_aggregate?:
      | ValueTypes['propostas_Propostas_Planos_aggregate_order_by']
      | null;
    ServicoPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by']
      | null;
    ServicoPreco_Id?: ValueTypes['order_by'] | null;
    ValorBase?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Planos_Precos */
  ['comercial_Planos_Precos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_select_column']: comercial_Planos_Precos_select_column;
  /** input type for updating data in table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Plano_Id?: ValueTypes['uuid'] | null;
    ServicoPreco_Id?: ValueTypes['uuid'] | null;
    ValorBase?: ValueTypes['float8'] | null;
    ValorPraticado?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_Planos_Precos_stddev_fields']: AliasType<{
    ValorBase?: true;
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_stddev_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Planos_Precos_stddev_pop_fields']: AliasType<{
    ValorBase?: true;
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_stddev_pop_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Planos_Precos_stddev_samp_fields']: AliasType<{
    ValorBase?: true;
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_stddev_samp_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_Planos_Precos_sum_fields']: AliasType<{
    ValorBase?: true;
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_sum_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_update_column']: comercial_Planos_Precos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Planos_Precos_var_pop_fields']: AliasType<{
    ValorBase?: true;
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_var_pop_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_Planos_Precos_var_samp_fields']: AliasType<{
    ValorBase?: true;
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_var_samp_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_Planos_Precos_variance_fields']: AliasType<{
    ValorBase?: true;
    ValorPraticado?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_variance_order_by']: {
    ValorBase?: ValueTypes['order_by'] | null;
    ValorPraticado?: ValueTypes['order_by'] | null;
  };
  /** aggregated selection of "comercial.Planos" */
  ['comercial_Planos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Planos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Planos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Planos" */
  ['comercial_Planos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Planos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Planos_max_fields'];
    min?: ValueTypes['comercial_Planos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Planos" */
  ['comercial_Planos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Planos_max_order_by'] | null;
    min?: ValueTypes['comercial_Planos_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Planos" */
  ['comercial_Planos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Planos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Planos_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Planos". All fields are combined with a logical 'AND'. */
  ['comercial_Planos_bool_exp']: {
    Combos?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
    Condicionais?: ValueTypes['comercial_Planos_Condicionais_bool_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Precos?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
    Propostas?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
    Servico?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Planos_bool_exp'][];
    _not?: ValueTypes['comercial_Planos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Planos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Planos" */
  ['comercial_Planos_constraint']: comercial_Planos_constraint;
  /** input type for inserting data into table "comercial.Planos" */
  ['comercial_Planos_insert_input']: {
    Combos?: ValueTypes['comercial_Combos_Planos_arr_rel_insert_input'] | null;
    Condicionais?:
      | ValueTypes['comercial_Planos_Condicionais_arr_rel_insert_input']
      | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Precos?: ValueTypes['comercial_Planos_Precos_arr_rel_insert_input'] | null;
    Propostas?:
      | ValueTypes['propostas_Propostas_Planos_arr_rel_insert_input']
      | null;
    Servico?: ValueTypes['comercial_Servicos_obj_rel_insert_input'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Planos_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Planos" */
  ['comercial_Planos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Planos_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Planos" */
  ['comercial_Planos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Planos" */
  ['comercial_Planos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Planos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Planos" */
  ['comercial_Planos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Planos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Planos_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.Planos" */
  ['comercial_Planos_on_conflict']: {
    constraint: ValueTypes['comercial_Planos_constraint'];
    update_columns: ValueTypes['comercial_Planos_update_column'][];
    where?: ValueTypes['comercial_Planos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Planos". */
  ['comercial_Planos_order_by']: {
    Combos_aggregate?:
      | ValueTypes['comercial_Combos_Planos_aggregate_order_by']
      | null;
    Condicionais_aggregate?:
      | ValueTypes['comercial_Planos_Condicionais_aggregate_order_by']
      | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Precos_aggregate?:
      | ValueTypes['comercial_Planos_Precos_aggregate_order_by']
      | null;
    Propostas_aggregate?:
      | ValueTypes['propostas_Propostas_Planos_aggregate_order_by']
      | null;
    Servico?: ValueTypes['comercial_Servicos_order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Planos */
  ['comercial_Planos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Planos" */
  ['comercial_Planos_select_column']: comercial_Planos_select_column;
  /** input type for updating data in table "comercial.Planos" */
  ['comercial_Planos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Planos" */
  ['comercial_Planos_update_column']: comercial_Planos_update_column;
  /** columns and relationships of "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos']: AliasType<{
    ContratosBases?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_ContratosBase_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_ContratosBase_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_ContratosBase_bool_exp'] | null;
      },
      ValueTypes['comercial_ContratosBase']
    ];
    ContratosBases_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_ContratosBase_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_ContratosBase_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_ContratosBase_bool_exp'] | null;
      },
      ValueTypes['comercial_ContratosBase_aggregate']
    ];
    Id?: true;
    Nome?: true;
    Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos']
    ];
    Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_aggregate']
    ];
    Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos']
    ];
    Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos']: AliasType<{
    Fornecedor_Id?: true;
    Id?: true;
    Itens?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens']
    ];
    Itens_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate']
    ];
    Precos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    ];
    Precos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate']
    ];
    /** An object relationship */
    PrestadorDeServico?: ValueTypes['comercial_PrestadoresDeServicos'];
    /** An object relationship */
    Produto?: ValueTypes['comercial_Produtos'];
    Produto_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens']: AliasType<{
    Id?: true;
    Item_Id?: true;
    /** An object relationship */
    PrestadoresDeServicos_Produto?: ValueTypes['comercial_PrestadoresDeServicos_Produtos'];
    PrestadoresDeServicos_Produtos_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_fields'];
    nodes?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_max_fields'];
    min?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_max_order_by']
      | null;
    min?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_min_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_arr_rel_insert_input']: {
    data: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_on_conflict']
      | null;
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Produtos_Itens". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Item_Id?: ValueTypes['uuid_comparison_exp'] | null;
    PrestadoresDeServicos_Produto?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
      | null;
    PrestadoresDeServicos_Produtos_Id?:
      | ValueTypes['uuid_comparison_exp']
      | null;
    _and?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp'][];
    _not?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']
      | null;
    _or?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_constraint']: comercial_PrestadoresDeServicos_Produtos_Itens_constraint;
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Item_Id?: ValueTypes['uuid'] | null;
    PrestadoresDeServicos_Produto?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_obj_rel_insert_input']
      | null;
    PrestadoresDeServicos_Produtos_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_max_fields']: AliasType<{
    Id?: true;
    Item_Id?: true;
    PrestadoresDeServicos_Produtos_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Item_Id?: ValueTypes['order_by'] | null;
    PrestadoresDeServicos_Produtos_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_min_fields']: AliasType<{
    Id?: true;
    Item_Id?: true;
    PrestadoresDeServicos_Produtos_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Item_Id?: ValueTypes['order_by'] | null;
    PrestadoresDeServicos_Produtos_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_on_conflict']: {
    constraint: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_constraint'];
    update_columns: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_update_column'][];
    where?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']
      | null;
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Produtos_Itens". */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Item_Id?: ValueTypes['order_by'] | null;
    PrestadoresDeServicos_Produto?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_order_by']
      | null;
    PrestadoresDeServicos_Produtos_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Produtos_Itens */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_select_column']: comercial_PrestadoresDeServicos_Produtos_Itens_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Item_Id?: ValueTypes['uuid'] | null;
    PrestadoresDeServicos_Produtos_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_update_column']: comercial_PrestadoresDeServicos_Produtos_Itens_update_column;
  /** columns and relationships of "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos']: AliasType<{
    CombosProdutos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Produtos']
    ];
    CombosProdutos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Produtos_aggregate']
    ];
    Fornecedor_Produto_Id?: true;
    Id?: true;
    /** An object relationship */
    PrestadorDeServico_Produto?: ValueTypes['comercial_PrestadoresDeServicos_Produtos'];
    PropostasProdutos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Produtos']
    ];
    PropostasProdutos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Produtos_aggregate']
    ];
    /** An object relationship */
    TipoDePreco?: ValueTypes['vendas_TiposDePrecos'];
    TipoDePreco_Id?: true;
    TipoDeRecorrencia_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_fields'];
    nodes?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_max_fields'];
    min?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_min_fields'];
    stddev?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_fields'];
    sum?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_sum_fields'];
    var_pop?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_fields'];
    var_samp?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_fields'];
    variance?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_order_by']: {
    avg?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_avg_order_by']
      | null;
    count?: ValueTypes['order_by'] | null;
    max?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_max_order_by']
      | null;
    min?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_min_order_by']
      | null;
    stddev?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_order_by']
      | null;
    stddev_pop?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_order_by']
      | null;
    sum?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_sum_order_by']
      | null;
    var_pop?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_order_by']
      | null;
    var_samp?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_on_conflict']
      | null;
  };
  /** aggregate avg on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_avg_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_avg_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Produtos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']: {
    CombosProdutos?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
    Fornecedor_Produto_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    PrestadorDeServico_Produto?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
      | null;
    PropostasProdutos?:
      | ValueTypes['propostas_Propostas_Produtos_bool_exp']
      | null;
    TipoDePreco?: ValueTypes['vendas_TiposDePrecos_bool_exp'] | null;
    TipoDePreco_Id?:
      | ValueTypes['vendas_TiposDePrecos_enum_comparison_exp']
      | null;
    TipoDeRecorrencia_Id?: ValueTypes['String_comparison_exp'] | null;
    Valor?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp'][];
    _not?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
      | null;
    _or?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_constraint']: comercial_PrestadoresDeServicos_Produtos_Precos_constraint;
  /** input type for incrementing numeric columns in table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_inc_input']: {
    Valor?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_insert_input']: {
    CombosProdutos?:
      | ValueTypes['comercial_Combos_Produtos_arr_rel_insert_input']
      | null;
    Fornecedor_Produto_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    PrestadorDeServico_Produto?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_obj_rel_insert_input']
      | null;
    PropostasProdutos?:
      | ValueTypes['propostas_Propostas_Produtos_arr_rel_insert_input']
      | null;
    TipoDePreco?:
      | ValueTypes['vendas_TiposDePrecos_obj_rel_insert_input']
      | null;
    TipoDePreco_Id?: ValueTypes['vendas_TiposDePrecos_enum'] | null;
    TipoDeRecorrencia_Id?: string | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_max_fields']: AliasType<{
    Fornecedor_Produto_Id?: true;
    Id?: true;
    TipoDeRecorrencia_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_max_order_by']: {
    Fornecedor_Produto_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    TipoDeRecorrencia_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_min_fields']: AliasType<{
    Fornecedor_Produto_Id?: true;
    Id?: true;
    TipoDeRecorrencia_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_min_order_by']: {
    Fornecedor_Produto_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    TipoDeRecorrencia_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_insert_input'];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_on_conflict']
      | null;
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_on_conflict']: {
    constraint: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_constraint'];
    update_columns: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_update_column'][];
    where?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
      | null;
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Produtos_Precos". */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_order_by']: {
    CombosProdutos_aggregate?:
      | ValueTypes['comercial_Combos_Produtos_aggregate_order_by']
      | null;
    Fornecedor_Produto_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    PrestadorDeServico_Produto?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_order_by']
      | null;
    PropostasProdutos_aggregate?:
      | ValueTypes['propostas_Propostas_Produtos_aggregate_order_by']
      | null;
    TipoDePreco?: ValueTypes['vendas_TiposDePrecos_order_by'] | null;
    TipoDePreco_Id?: ValueTypes['order_by'] | null;
    TipoDeRecorrencia_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Produtos_Precos */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_select_column']: comercial_PrestadoresDeServicos_Produtos_Precos_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_set_input']: {
    Fornecedor_Produto_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    TipoDePreco_Id?: ValueTypes['vendas_TiposDePrecos_enum'] | null;
    TipoDeRecorrencia_Id?: string | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_sum_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_sum_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_update_column']: comercial_PrestadoresDeServicos_Produtos_Precos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_variance_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_variance_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_aggregate_fields'];
    nodes?: ValueTypes['comercial_PrestadoresDeServicos_Produtos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_max_fields'];
    min?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_max_order_by']
      | null;
    min?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_min_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_PrestadoresDeServicos_Produtos_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_on_conflict']
      | null;
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Produtos_bool_exp']: {
    Fornecedor_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Itens?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']
      | null;
    Precos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
      | null;
    PrestadorDeServico?:
      | ValueTypes['comercial_PrestadoresDeServicos_bool_exp']
      | null;
    Produto?: ValueTypes['comercial_Produtos_bool_exp'] | null;
    Produto_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp'][];
    _not?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
      | null;
    _or?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_constraint']: comercial_PrestadoresDeServicos_Produtos_constraint;
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_insert_input']: {
    Fornecedor_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Itens?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_arr_rel_insert_input']
      | null;
    Precos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_arr_rel_insert_input']
      | null;
    PrestadorDeServico?:
      | ValueTypes['comercial_PrestadoresDeServicos_obj_rel_insert_input']
      | null;
    Produto?: ValueTypes['comercial_Produtos_obj_rel_insert_input'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Produtos_max_fields']: AliasType<{
    Fornecedor_Id?: true;
    Id?: true;
    Produto_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_max_order_by']: {
    Fornecedor_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Produtos_min_fields']: AliasType<{
    Fornecedor_Id?: true;
    Id?: true;
    Produto_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_min_order_by']: {
    Fornecedor_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_PrestadoresDeServicos_Produtos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_PrestadoresDeServicos_Produtos_insert_input'];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_on_conflict']
      | null;
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_on_conflict']: {
    constraint: ValueTypes['comercial_PrestadoresDeServicos_Produtos_constraint'];
    update_columns: ValueTypes['comercial_PrestadoresDeServicos_Produtos_update_column'][];
    where?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
      | null;
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Produtos". */
  ['comercial_PrestadoresDeServicos_Produtos_order_by']: {
    Fornecedor_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Itens_aggregate?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_order_by']
      | null;
    Precos_aggregate?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_order_by']
      | null;
    PrestadorDeServico?:
      | ValueTypes['comercial_PrestadoresDeServicos_order_by']
      | null;
    Produto?: ValueTypes['comercial_Produtos_order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Produtos */
  ['comercial_PrestadoresDeServicos_Produtos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_select_column']: comercial_PrestadoresDeServicos_Produtos_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_set_input']: {
    Fornecedor_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_update_column']: comercial_PrestadoresDeServicos_Produtos_update_column;
  /** columns and relationships of "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos']: AliasType<{
    Id?: true;
    Precos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    ];
    Precos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate']
    ];
    /** An object relationship */
    PrestadorDeServico?: ValueTypes['comercial_PrestadoresDeServicos'];
    Prestador_Id?: true;
    /** An object relationship */
    Servico?: ValueTypes['comercial_Servicos'];
    Servico_Id?: true;
    Tarifas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    ];
    Tarifas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos']: AliasType<{
    CombosServicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Servicos']
    ];
    CombosServicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Servicos_aggregate']
    ];
    Fornecedor_Servico_Id?: true;
    Id?: true;
    PlanosPrecos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Precos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Precos']
    ];
    PlanosPrecos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Precos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Precos_aggregate']
    ];
    /** An object relationship */
    PrestadorDeServico_Servico?: ValueTypes['comercial_PrestadoresDeServicos_Servicos'];
    PropostasServicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Servicos']
    ];
    PropostasServicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Servicos_aggregate']
    ];
    /** An object relationship */
    TipoDePreco?: ValueTypes['vendas_TiposDePrecos'];
    TipoDePreco_Id?: true;
    TipoDeRecorrencia_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_fields'];
    nodes?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_max_fields'];
    min?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_min_fields'];
    stddev?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_fields'];
    sum?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_sum_fields'];
    var_pop?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_fields'];
    var_samp?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_fields'];
    variance?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_order_by']: {
    avg?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_avg_order_by']
      | null;
    count?: ValueTypes['order_by'] | null;
    max?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_max_order_by']
      | null;
    min?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_min_order_by']
      | null;
    stddev?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_order_by']
      | null;
    stddev_pop?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_order_by']
      | null;
    sum?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_sum_order_by']
      | null;
    var_pop?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_order_by']
      | null;
    var_samp?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_on_conflict']
      | null;
  };
  /** aggregate avg on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_avg_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_avg_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Servicos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']: {
    CombosServicos?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
    Fornecedor_Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    PlanosPrecos?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
    PrestadorDeServico_Servico?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
      | null;
    PropostasServicos?:
      | ValueTypes['propostas_Propostas_Servicos_bool_exp']
      | null;
    TipoDePreco?: ValueTypes['vendas_TiposDePrecos_bool_exp'] | null;
    TipoDePreco_Id?:
      | ValueTypes['vendas_TiposDePrecos_enum_comparison_exp']
      | null;
    TipoDeRecorrencia_Id?: ValueTypes['String_comparison_exp'] | null;
    Valor?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'][];
    _not?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
      | null;
    _or?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_constraint']: comercial_PrestadoresDeServicos_Servicos_Precos_constraint;
  /** input type for incrementing numeric columns in table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_inc_input']: {
    Valor?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_insert_input']: {
    CombosServicos?:
      | ValueTypes['comercial_Combos_Servicos_arr_rel_insert_input']
      | null;
    Fornecedor_Servico_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    PlanosPrecos?:
      | ValueTypes['comercial_Planos_Precos_arr_rel_insert_input']
      | null;
    PrestadorDeServico_Servico?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_obj_rel_insert_input']
      | null;
    PropostasServicos?:
      | ValueTypes['propostas_Propostas_Servicos_arr_rel_insert_input']
      | null;
    TipoDePreco?:
      | ValueTypes['vendas_TiposDePrecos_obj_rel_insert_input']
      | null;
    TipoDePreco_Id?: ValueTypes['vendas_TiposDePrecos_enum'] | null;
    TipoDeRecorrencia_Id?: string | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_max_fields']: AliasType<{
    Fornecedor_Servico_Id?: true;
    Id?: true;
    TipoDeRecorrencia_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_max_order_by']: {
    Fornecedor_Servico_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    TipoDeRecorrencia_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_min_fields']: AliasType<{
    Fornecedor_Servico_Id?: true;
    Id?: true;
    TipoDeRecorrencia_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_min_order_by']: {
    Fornecedor_Servico_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    TipoDeRecorrencia_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_insert_input'];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_on_conflict']
      | null;
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_on_conflict']: {
    constraint: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_constraint'];
    update_columns: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_update_column'][];
    where?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
      | null;
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Servicos_Precos". */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_order_by']: {
    CombosServicos_aggregate?:
      | ValueTypes['comercial_Combos_Servicos_aggregate_order_by']
      | null;
    Fornecedor_Servico_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    PlanosPrecos_aggregate?:
      | ValueTypes['comercial_Planos_Precos_aggregate_order_by']
      | null;
    PrestadorDeServico_Servico?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_order_by']
      | null;
    PropostasServicos_aggregate?:
      | ValueTypes['propostas_Propostas_Servicos_aggregate_order_by']
      | null;
    TipoDePreco?: ValueTypes['vendas_TiposDePrecos_order_by'] | null;
    TipoDePreco_Id?: ValueTypes['order_by'] | null;
    TipoDeRecorrencia_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Servicos_Precos */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_select_column']: comercial_PrestadoresDeServicos_Servicos_Precos_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_set_input']: {
    Fornecedor_Servico_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    TipoDePreco_Id?: ValueTypes['vendas_TiposDePrecos_enum'] | null;
    TipoDeRecorrencia_Id?: string | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_sum_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_sum_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_update_column']: comercial_PrestadoresDeServicos_Servicos_Precos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_variance_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_variance_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas']: AliasType<{
    Fornecedor_Servico_Id?: true;
    Id?: true;
    /** An object relationship */
    PrestadorDeServico_Servico?: ValueTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** An object relationship */
    Tarifa?: ValueTypes['comercial_Tarifas'];
    Tarifa_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_fields'];
    nodes?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_fields'];
    min?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_fields'];
    stddev?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_fields'];
    sum?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_fields'];
    var_pop?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_fields'];
    var_samp?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_fields'];
    variance?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_order_by']: {
    avg?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_order_by']
      | null;
    count?: ValueTypes['order_by'] | null;
    max?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_order_by']
      | null;
    min?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_order_by']
      | null;
    stddev?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_order_by']
      | null;
    stddev_pop?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_order_by']
      | null;
    sum?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_order_by']
      | null;
    var_pop?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_order_by']
      | null;
    var_samp?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_arr_rel_insert_input']: {
    data: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_on_conflict']
      | null;
  };
  /** aggregate avg on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Servicos_Tarifas". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']: {
    Fornecedor_Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    PrestadorDeServico_Servico?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
      | null;
    Tarifa?: ValueTypes['comercial_Tarifas_bool_exp'] | null;
    Tarifa_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Valor?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp'][];
    _not?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
      | null;
    _or?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_constraint']: comercial_PrestadoresDeServicos_Servicos_Tarifas_constraint;
  /** input type for incrementing numeric columns in table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_inc_input']: {
    Valor?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_insert_input']: {
    Fornecedor_Servico_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    PrestadorDeServico_Servico?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_obj_rel_insert_input']
      | null;
    Tarifa?: ValueTypes['comercial_Tarifas_obj_rel_insert_input'] | null;
    Tarifa_Id?: ValueTypes['uuid'] | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_fields']: AliasType<{
    Fornecedor_Servico_Id?: true;
    Id?: true;
    Tarifa_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_order_by']: {
    Fornecedor_Servico_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Tarifa_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_fields']: AliasType<{
    Fornecedor_Servico_Id?: true;
    Id?: true;
    Tarifa_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_order_by']: {
    Fornecedor_Servico_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Tarifa_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_on_conflict']: {
    constraint: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_constraint'];
    update_columns: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_update_column'][];
    where?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
      | null;
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Servicos_Tarifas". */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_order_by']: {
    Fornecedor_Servico_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    PrestadorDeServico_Servico?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_order_by']
      | null;
    Tarifa?: ValueTypes['comercial_Tarifas_order_by'] | null;
    Tarifa_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Servicos_Tarifas */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column']: comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_set_input']: {
    Fornecedor_Servico_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Tarifa_Id?: ValueTypes['uuid'] | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_update_column']: comercial_PrestadoresDeServicos_Servicos_Tarifas_update_column;
  /** aggregate var_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_aggregate_fields'];
    nodes?: ValueTypes['comercial_PrestadoresDeServicos_Servicos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_max_fields'];
    min?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_max_order_by']
      | null;
    min?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_min_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_PrestadoresDeServicos_Servicos_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_on_conflict']
      | null;
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Servicos_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Precos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
      | null;
    PrestadorDeServico?:
      | ValueTypes['comercial_PrestadoresDeServicos_bool_exp']
      | null;
    Prestador_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servico?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Tarifas?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
      | null;
    _and?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp'][];
    _not?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
      | null;
    _or?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_constraint']: comercial_PrestadoresDeServicos_Servicos_constraint;
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Precos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_arr_rel_insert_input']
      | null;
    PrestadorDeServico?:
      | ValueTypes['comercial_PrestadoresDeServicos_obj_rel_insert_input']
      | null;
    Prestador_Id?: ValueTypes['uuid'] | null;
    Servico?: ValueTypes['comercial_Servicos_obj_rel_insert_input'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    Tarifas?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_arr_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Servicos_max_fields']: AliasType<{
    Id?: true;
    Prestador_Id?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Prestador_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Servicos_min_fields']: AliasType<{
    Id?: true;
    Prestador_Id?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Prestador_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_PrestadoresDeServicos_Servicos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_PrestadoresDeServicos_Servicos_insert_input'];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_on_conflict']
      | null;
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_on_conflict']: {
    constraint: ValueTypes['comercial_PrestadoresDeServicos_Servicos_constraint'];
    update_columns: ValueTypes['comercial_PrestadoresDeServicos_Servicos_update_column'][];
    where?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
      | null;
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Servicos". */
  ['comercial_PrestadoresDeServicos_Servicos_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Precos_aggregate?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_order_by']
      | null;
    PrestadorDeServico?:
      | ValueTypes['comercial_PrestadoresDeServicos_order_by']
      | null;
    Prestador_Id?: ValueTypes['order_by'] | null;
    Servico?: ValueTypes['comercial_Servicos_order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    Tarifas_aggregate?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Servicos */
  ['comercial_PrestadoresDeServicos_Servicos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_select_column']: comercial_PrestadoresDeServicos_Servicos_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Prestador_Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_update_column']: comercial_PrestadoresDeServicos_Servicos_update_column;
  /** aggregated selection of "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_PrestadoresDeServicos_aggregate_fields'];
    nodes?: ValueTypes['comercial_PrestadoresDeServicos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_PrestadoresDeServicos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_PrestadoresDeServicos_max_fields'];
    min?: ValueTypes['comercial_PrestadoresDeServicos_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_bool_exp']: {
    ContratosBases?: ValueTypes['comercial_ContratosBase_bool_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Produtos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
      | null;
    Servicos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
      | null;
    _and?: ValueTypes['comercial_PrestadoresDeServicos_bool_exp'][];
    _not?: ValueTypes['comercial_PrestadoresDeServicos_bool_exp'] | null;
    _or?: ValueTypes['comercial_PrestadoresDeServicos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_constraint']: comercial_PrestadoresDeServicos_constraint;
  /** input type for inserting data into table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_insert_input']: {
    ContratosBases?:
      | ValueTypes['comercial_ContratosBase_arr_rel_insert_input']
      | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Produtos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_arr_rel_insert_input']
      | null;
    Servicos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_arr_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_PrestadoresDeServicos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_PrestadoresDeServicos_insert_input'];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_PrestadoresDeServicos_on_conflict']
      | null;
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_on_conflict']: {
    constraint: ValueTypes['comercial_PrestadoresDeServicos_constraint'];
    update_columns: ValueTypes['comercial_PrestadoresDeServicos_update_column'][];
    where?: ValueTypes['comercial_PrestadoresDeServicos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos". */
  ['comercial_PrestadoresDeServicos_order_by']: {
    ContratosBases_aggregate?:
      | ValueTypes['comercial_ContratosBase_aggregate_order_by']
      | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Produtos_aggregate?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_aggregate_order_by']
      | null;
    Servicos_aggregate?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos */
  ['comercial_PrestadoresDeServicos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_select_column']: comercial_PrestadoresDeServicos_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_update_column']: comercial_PrestadoresDeServicos_update_column;
  /** columns and relationships of "comercial.Produtos" */
  ['comercial_Produtos']: AliasType<{
    Atributos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Atributos']
    ];
    Atributos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Atributos_aggregate']
    ];
    Categorias?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Combos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Produtos']
    ];
    Combos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Produtos_aggregate']
    ];
    Fornecedores?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos']
    ];
    Fornecedores_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_aggregate']
    ];
    Id?: true;
    Nome?: true;
    Oportunidades?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Oportunidades']
    ];
    Oportunidades_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Oportunidades_aggregate']
    ];
    ProdutosDependentes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Produtos']
    ];
    ProdutosDependentes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Produtos_aggregate']
    ];
    ProdutosQueDependo?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Produtos']
    ];
    ProdutosQueDependo_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Produtos_aggregate']
    ];
    Propostas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Produtos']
    ];
    Propostas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Produtos_aggregate']
    ];
    /** An object relationship */
    ServicoDeDesinstalacao?: ValueTypes['comercial_Servicos'];
    ServicoDeDesinstalacao_Id?: true;
    /** An object relationship */
    ServicoDeInstalacao?: ValueTypes['comercial_Servicos'];
    ServicoDeInstalacao_Id?: true;
    Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Servicos']
    ];
    Servicos_Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Produtos']
    ];
    Servicos_Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Produtos_aggregate']
    ];
    Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Servicos_aggregate']
    ];
    /** An object relationship */
    Tipo?: ValueTypes['comercial_Produtos_Tipos'];
    Tipo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos']: AliasType<{
    /** An object relationship */
    Atributo?: ValueTypes['comercial_Atributos'];
    Atributo_Id?: true;
    Id?: true;
    /** An object relationship */
    Produto?: ValueTypes['comercial_Produtos'];
    Produto_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Produtos_Atributos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Produtos_Atributos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Produtos_Atributos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Produtos_Atributos_max_fields'];
    min?: ValueTypes['comercial_Produtos_Atributos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Produtos_Atributos_max_order_by'] | null;
    min?: ValueTypes['comercial_Produtos_Atributos_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Produtos_Atributos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Produtos_Atributos_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos_Atributos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Atributos_bool_exp']: {
    Atributo?: ValueTypes['comercial_Atributos_bool_exp'] | null;
    Atributo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Produto?: ValueTypes['comercial_Produtos_bool_exp'] | null;
    Produto_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Produtos_Atributos_bool_exp'][];
    _not?: ValueTypes['comercial_Produtos_Atributos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Produtos_Atributos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_constraint']: comercial_Produtos_Atributos_constraint;
  /** input type for inserting data into table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_insert_input']: {
    Atributo?: ValueTypes['comercial_Atributos_obj_rel_insert_input'] | null;
    Atributo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Produto?: ValueTypes['comercial_Produtos_obj_rel_insert_input'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Produtos_Atributos_max_fields']: AliasType<{
    Atributo_Id?: true;
    Id?: true;
    Produto_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_max_order_by']: {
    Atributo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Produtos_Atributos_min_fields']: AliasType<{
    Atributo_Id?: true;
    Id?: true;
    Produto_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_min_order_by']: {
    Atributo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Produtos_Atributos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_on_conflict']: {
    constraint: ValueTypes['comercial_Produtos_Atributos_constraint'];
    update_columns: ValueTypes['comercial_Produtos_Atributos_update_column'][];
    where?: ValueTypes['comercial_Produtos_Atributos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Produtos_Atributos". */
  ['comercial_Produtos_Atributos_order_by']: {
    Atributo?: ValueTypes['comercial_Atributos_order_by'] | null;
    Atributo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Produto?: ValueTypes['comercial_Produtos_order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Produtos_Atributos */
  ['comercial_Produtos_Atributos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_select_column']: comercial_Produtos_Atributos_select_column;
  /** input type for updating data in table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_set_input']: {
    Atributo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_update_column']: comercial_Produtos_Atributos_update_column;
  /** columns and relationships of "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades']: AliasType<{
    /** An object relationship */
    Combo?: ValueTypes['comercial_Combos'];
    Combo_Id?: true;
    Id?: true;
    Nome?: true;
    OportunidadesDePropostas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Oportunidades']
    ];
    OportunidadesDePropostas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Oportunidades_aggregate']
    ];
    /** An object relationship */
    Produto?: ValueTypes['comercial_Produtos'];
    Produto_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Produtos_Oportunidades_aggregate_fields'];
    nodes?: ValueTypes['comercial_Produtos_Oportunidades'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_Produtos_Oportunidades_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_Produtos_Oportunidades_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Produtos_Oportunidades_max_fields'];
    min?: ValueTypes['comercial_Produtos_Oportunidades_min_fields'];
    stddev?: ValueTypes['comercial_Produtos_Oportunidades_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_Produtos_Oportunidades_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_Produtos_Oportunidades_stddev_samp_fields'];
    sum?: ValueTypes['comercial_Produtos_Oportunidades_sum_fields'];
    var_pop?: ValueTypes['comercial_Produtos_Oportunidades_var_pop_fields'];
    var_samp?: ValueTypes['comercial_Produtos_Oportunidades_var_samp_fields'];
    variance?: ValueTypes['comercial_Produtos_Oportunidades_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_aggregate_order_by']: {
    avg?: ValueTypes['comercial_Produtos_Oportunidades_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Produtos_Oportunidades_max_order_by'] | null;
    min?: ValueTypes['comercial_Produtos_Oportunidades_min_order_by'] | null;
    stddev?:
      | ValueTypes['comercial_Produtos_Oportunidades_stddev_order_by']
      | null;
    stddev_pop?:
      | ValueTypes['comercial_Produtos_Oportunidades_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_Produtos_Oportunidades_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['comercial_Produtos_Oportunidades_sum_order_by'] | null;
    var_pop?:
      | ValueTypes['comercial_Produtos_Oportunidades_var_pop_order_by']
      | null;
    var_samp?:
      | ValueTypes['comercial_Produtos_Oportunidades_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['comercial_Produtos_Oportunidades_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Produtos_Oportunidades_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_Produtos_Oportunidades_on_conflict']
      | null;
  };
  /** aggregate avg on columns */
  ['comercial_Produtos_Oportunidades_avg_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_avg_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos_Oportunidades". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Oportunidades_bool_exp']: {
    Combo?: ValueTypes['comercial_Combos_bool_exp'] | null;
    Combo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    OportunidadesDePropostas?:
      | ValueTypes['propostas_Propostas_Oportunidades_bool_exp']
      | null;
    Produto?: ValueTypes['comercial_Produtos_bool_exp'] | null;
    Produto_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Valor?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'][];
    _not?: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'] | null;
    _or?: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_constraint']: comercial_Produtos_Oportunidades_constraint;
  /** input type for incrementing numeric columns in table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_inc_input']: {
    Valor?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_insert_input']: {
    Combo?: ValueTypes['comercial_Combos_obj_rel_insert_input'] | null;
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    OportunidadesDePropostas?:
      | ValueTypes['propostas_Propostas_Oportunidades_arr_rel_insert_input']
      | null;
    Produto?: ValueTypes['comercial_Produtos_obj_rel_insert_input'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Produtos_Oportunidades_max_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    Nome?: true;
    Produto_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_max_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Produtos_Oportunidades_min_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    Nome?: true;
    Produto_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_min_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Produtos_Oportunidades'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Produtos_Oportunidades_insert_input'];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_Produtos_Oportunidades_on_conflict']
      | null;
  };
  /** on conflict condition type for table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_on_conflict']: {
    constraint: ValueTypes['comercial_Produtos_Oportunidades_constraint'];
    update_columns: ValueTypes['comercial_Produtos_Oportunidades_update_column'][];
    where?: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Produtos_Oportunidades". */
  ['comercial_Produtos_Oportunidades_order_by']: {
    Combo?: ValueTypes['comercial_Combos_order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    OportunidadesDePropostas_aggregate?:
      | ValueTypes['propostas_Propostas_Oportunidades_aggregate_order_by']
      | null;
    Produto?: ValueTypes['comercial_Produtos_order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Produtos_Oportunidades */
  ['comercial_Produtos_Oportunidades_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_select_column']: comercial_Produtos_Oportunidades_select_column;
  /** input type for updating data in table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_set_input']: {
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_Produtos_Oportunidades_stddev_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_stddev_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Produtos_Oportunidades_stddev_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_stddev_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Produtos_Oportunidades_stddev_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_stddev_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_Produtos_Oportunidades_sum_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_sum_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_update_column']: comercial_Produtos_Oportunidades_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Produtos_Oportunidades_var_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_var_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_Produtos_Oportunidades_var_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_var_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_Produtos_Oportunidades_variance_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_variance_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos']: AliasType<{
    Id?: true;
    /** An object relationship */
    Produto?: ValueTypes['comercial_Produtos'];
    /** An object relationship */
    ProdutoDependente?: ValueTypes['comercial_Produtos'];
    ProdutoDependente_Id?: true;
    Produto_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Produtos_Produtos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Produtos_Produtos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Produtos_Produtos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Produtos_Produtos_max_fields'];
    min?: ValueTypes['comercial_Produtos_Produtos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Produtos_Produtos_max_order_by'] | null;
    min?: ValueTypes['comercial_Produtos_Produtos_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Produtos_Produtos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Produtos_Produtos_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Produtos_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Produto?: ValueTypes['comercial_Produtos_bool_exp'] | null;
    ProdutoDependente?: ValueTypes['comercial_Produtos_bool_exp'] | null;
    ProdutoDependente_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Produto_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Produtos_Produtos_bool_exp'][];
    _not?: ValueTypes['comercial_Produtos_Produtos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Produtos_Produtos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_constraint']: comercial_Produtos_Produtos_constraint;
  /** input type for inserting data into table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Produto?: ValueTypes['comercial_Produtos_obj_rel_insert_input'] | null;
    ProdutoDependente?:
      | ValueTypes['comercial_Produtos_obj_rel_insert_input']
      | null;
    ProdutoDependente_Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Produtos_Produtos_max_fields']: AliasType<{
    Id?: true;
    ProdutoDependente_Id?: true;
    Produto_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    ProdutoDependente_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Produtos_Produtos_min_fields']: AliasType<{
    Id?: true;
    ProdutoDependente_Id?: true;
    Produto_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    ProdutoDependente_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Produtos_Produtos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_on_conflict']: {
    constraint: ValueTypes['comercial_Produtos_Produtos_constraint'];
    update_columns: ValueTypes['comercial_Produtos_Produtos_update_column'][];
    where?: ValueTypes['comercial_Produtos_Produtos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Produtos_Produtos". */
  ['comercial_Produtos_Produtos_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Produto?: ValueTypes['comercial_Produtos_order_by'] | null;
    ProdutoDependente?: ValueTypes['comercial_Produtos_order_by'] | null;
    ProdutoDependente_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Produtos_Produtos */
  ['comercial_Produtos_Produtos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_select_column']: comercial_Produtos_Produtos_select_column;
  /** input type for updating data in table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    ProdutoDependente_Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_update_column']: comercial_Produtos_Produtos_update_column;
  /** columns and relationships of "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos']: AliasType<{
    Id?: true;
    /** An object relationship */
    Produto?: ValueTypes['comercial_Produtos'];
    Produto_Id?: true;
    /** An object relationship */
    Servico?: ValueTypes['comercial_Servicos'];
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Produtos_Servicos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Produtos_Servicos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Produtos_Servicos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Produtos_Servicos_max_fields'];
    min?: ValueTypes['comercial_Produtos_Servicos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Produtos_Servicos_max_order_by'] | null;
    min?: ValueTypes['comercial_Produtos_Servicos_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Produtos_Servicos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Produtos_Servicos_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Servicos_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Produto?: ValueTypes['comercial_Produtos_bool_exp'] | null;
    Produto_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servico?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Produtos_Servicos_bool_exp'][];
    _not?: ValueTypes['comercial_Produtos_Servicos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Produtos_Servicos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_constraint']: comercial_Produtos_Servicos_constraint;
  /** input type for inserting data into table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Produto?: ValueTypes['comercial_Produtos_obj_rel_insert_input'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    Servico?: ValueTypes['comercial_Servicos_obj_rel_insert_input'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Produtos_Servicos_max_fields']: AliasType<{
    Id?: true;
    Produto_Id?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Produtos_Servicos_min_fields']: AliasType<{
    Id?: true;
    Produto_Id?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Produtos_Servicos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_on_conflict']: {
    constraint: ValueTypes['comercial_Produtos_Servicos_constraint'];
    update_columns: ValueTypes['comercial_Produtos_Servicos_update_column'][];
    where?: ValueTypes['comercial_Produtos_Servicos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Produtos_Servicos". */
  ['comercial_Produtos_Servicos_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Produto?: ValueTypes['comercial_Produtos_order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Servico?: ValueTypes['comercial_Servicos_order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Produtos_Servicos */
  ['comercial_Produtos_Servicos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_select_column']: comercial_Produtos_Servicos_select_column;
  /** input type for updating data in table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_update_column']: comercial_Produtos_Servicos_update_column;
  /** columns and relationships of "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos']: AliasType<{
    Comentario?: true;
    Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos']
    ];
    Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_aggregate']
    ];
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Produtos_Tipos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Produtos_Tipos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Produtos_Tipos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Produtos_Tipos_max_fields'];
    min?: ValueTypes['comercial_Produtos_Tipos_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "comercial.Produtos_Tipos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Tipos_bool_exp']: {
    Comentario?: ValueTypes['String_comparison_exp'] | null;
    Produtos?: ValueTypes['comercial_Produtos_bool_exp'] | null;
    Valor?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Produtos_Tipos_bool_exp'][];
    _not?: ValueTypes['comercial_Produtos_Tipos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Produtos_Tipos_bool_exp'][];
  };
  /** unique or primary key constraints on table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_constraint']: comercial_Produtos_Tipos_constraint;
  ['comercial_Produtos_Tipos_enum']: comercial_Produtos_Tipos_enum;
  /** Boolean expression to compare columns of type "comercial_Produtos_Tipos_enum". All fields are combined with logical 'AND'. */
  ['comercial_Produtos_Tipos_enum_comparison_exp']: {
    _eq?: ValueTypes['comercial_Produtos_Tipos_enum'] | null;
    _in?: ValueTypes['comercial_Produtos_Tipos_enum'][];
    _is_null?: boolean | null;
    _neq?: ValueTypes['comercial_Produtos_Tipos_enum'] | null;
    _nin?: ValueTypes['comercial_Produtos_Tipos_enum'][];
  };
  /** input type for inserting data into table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_insert_input']: {
    Comentario?: string | null;
    Produtos?: ValueTypes['comercial_Produtos_arr_rel_insert_input'] | null;
    Valor?: string | null;
  };
  /** aggregate max on columns */
  ['comercial_Produtos_Tipos_max_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['comercial_Produtos_Tipos_min_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Produtos_Tipos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Produtos_Tipos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Produtos_Tipos_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_on_conflict']: {
    constraint: ValueTypes['comercial_Produtos_Tipos_constraint'];
    update_columns: ValueTypes['comercial_Produtos_Tipos_update_column'][];
    where?: ValueTypes['comercial_Produtos_Tipos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Produtos_Tipos". */
  ['comercial_Produtos_Tipos_order_by']: {
    Comentario?: ValueTypes['order_by'] | null;
    Produtos_aggregate?:
      | ValueTypes['comercial_Produtos_aggregate_order_by']
      | null;
    Valor?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Produtos_Tipos */
  ['comercial_Produtos_Tipos_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_select_column']: comercial_Produtos_Tipos_select_column;
  /** input type for updating data in table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_set_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** update columns of table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_update_column']: comercial_Produtos_Tipos_update_column;
  /** aggregated selection of "comercial.Produtos" */
  ['comercial_Produtos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Produtos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Produtos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Produtos" */
  ['comercial_Produtos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Produtos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Produtos_max_fields'];
    min?: ValueTypes['comercial_Produtos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Produtos" */
  ['comercial_Produtos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Produtos_max_order_by'] | null;
    min?: ValueTypes['comercial_Produtos_min_order_by'] | null;
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Produtos_append_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Produtos" */
  ['comercial_Produtos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Produtos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Produtos_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_bool_exp']: {
    Atributos?: ValueTypes['comercial_Produtos_Atributos_bool_exp'] | null;
    Categorias?: ValueTypes['jsonb_comparison_exp'] | null;
    Combos?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
    Fornecedores?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
      | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Oportunidades?:
      | ValueTypes['comercial_Produtos_Oportunidades_bool_exp']
      | null;
    ProdutosDependentes?:
      | ValueTypes['comercial_Produtos_Produtos_bool_exp']
      | null;
    ProdutosQueDependo?:
      | ValueTypes['comercial_Produtos_Produtos_bool_exp']
      | null;
    Propostas?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
    ServicoDeDesinstalacao?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    ServicoDeDesinstalacao_Id?: ValueTypes['uuid_comparison_exp'] | null;
    ServicoDeInstalacao?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    ServicoDeInstalacao_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servicos?: ValueTypes['comercial_Produtos_Servicos_bool_exp'] | null;
    Servicos_Produtos?:
      | ValueTypes['comercial_Servicos_Produtos_bool_exp']
      | null;
    Tipo?: ValueTypes['comercial_Produtos_Tipos_bool_exp'] | null;
    Tipo_Id?: ValueTypes['comercial_Produtos_Tipos_enum_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Produtos_bool_exp'][];
    _not?: ValueTypes['comercial_Produtos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Produtos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Produtos" */
  ['comercial_Produtos_constraint']: comercial_Produtos_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['comercial_Produtos_delete_at_path_input']: {
    Categorias?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['comercial_Produtos_delete_elem_input']: {
    Categorias?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['comercial_Produtos_delete_key_input']: {
    Categorias?: string | null;
  };
  /** input type for inserting data into table "comercial.Produtos" */
  ['comercial_Produtos_insert_input']: {
    Atributos?:
      | ValueTypes['comercial_Produtos_Atributos_arr_rel_insert_input']
      | null;
    Categorias?: ValueTypes['jsonb'] | null;
    Combos?:
      | ValueTypes['comercial_Combos_Produtos_arr_rel_insert_input']
      | null;
    Fornecedores?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_arr_rel_insert_input']
      | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Oportunidades?:
      | ValueTypes['comercial_Produtos_Oportunidades_arr_rel_insert_input']
      | null;
    ProdutosDependentes?:
      | ValueTypes['comercial_Produtos_Produtos_arr_rel_insert_input']
      | null;
    ProdutosQueDependo?:
      | ValueTypes['comercial_Produtos_Produtos_arr_rel_insert_input']
      | null;
    Propostas?:
      | ValueTypes['propostas_Propostas_Produtos_arr_rel_insert_input']
      | null;
    ServicoDeDesinstalacao?:
      | ValueTypes['comercial_Servicos_obj_rel_insert_input']
      | null;
    ServicoDeDesinstalacao_Id?: ValueTypes['uuid'] | null;
    ServicoDeInstalacao?:
      | ValueTypes['comercial_Servicos_obj_rel_insert_input']
      | null;
    ServicoDeInstalacao_Id?: ValueTypes['uuid'] | null;
    Servicos?:
      | ValueTypes['comercial_Produtos_Servicos_arr_rel_insert_input']
      | null;
    Servicos_Produtos?:
      | ValueTypes['comercial_Servicos_Produtos_arr_rel_insert_input']
      | null;
    Tipo?: ValueTypes['comercial_Produtos_Tipos_obj_rel_insert_input'] | null;
    Tipo_Id?: ValueTypes['comercial_Produtos_Tipos_enum'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Produtos_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    ServicoDeDesinstalacao_Id?: true;
    ServicoDeInstalacao_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Produtos" */
  ['comercial_Produtos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    ServicoDeDesinstalacao_Id?: ValueTypes['order_by'] | null;
    ServicoDeInstalacao_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Produtos_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    ServicoDeDesinstalacao_Id?: true;
    ServicoDeInstalacao_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Produtos" */
  ['comercial_Produtos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    ServicoDeDesinstalacao_Id?: ValueTypes['order_by'] | null;
    ServicoDeInstalacao_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Produtos" */
  ['comercial_Produtos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Produtos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Produtos" */
  ['comercial_Produtos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Produtos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Produtos_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.Produtos" */
  ['comercial_Produtos_on_conflict']: {
    constraint: ValueTypes['comercial_Produtos_constraint'];
    update_columns: ValueTypes['comercial_Produtos_update_column'][];
    where?: ValueTypes['comercial_Produtos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Produtos". */
  ['comercial_Produtos_order_by']: {
    Atributos_aggregate?:
      | ValueTypes['comercial_Produtos_Atributos_aggregate_order_by']
      | null;
    Categorias?: ValueTypes['order_by'] | null;
    Combos_aggregate?:
      | ValueTypes['comercial_Combos_Produtos_aggregate_order_by']
      | null;
    Fornecedores_aggregate?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_aggregate_order_by']
      | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Oportunidades_aggregate?:
      | ValueTypes['comercial_Produtos_Oportunidades_aggregate_order_by']
      | null;
    ProdutosDependentes_aggregate?:
      | ValueTypes['comercial_Produtos_Produtos_aggregate_order_by']
      | null;
    ProdutosQueDependo_aggregate?:
      | ValueTypes['comercial_Produtos_Produtos_aggregate_order_by']
      | null;
    Propostas_aggregate?:
      | ValueTypes['propostas_Propostas_Produtos_aggregate_order_by']
      | null;
    ServicoDeDesinstalacao?: ValueTypes['comercial_Servicos_order_by'] | null;
    ServicoDeDesinstalacao_Id?: ValueTypes['order_by'] | null;
    ServicoDeInstalacao?: ValueTypes['comercial_Servicos_order_by'] | null;
    ServicoDeInstalacao_Id?: ValueTypes['order_by'] | null;
    Servicos_Produtos_aggregate?:
      | ValueTypes['comercial_Servicos_Produtos_aggregate_order_by']
      | null;
    Servicos_aggregate?:
      | ValueTypes['comercial_Produtos_Servicos_aggregate_order_by']
      | null;
    Tipo?: ValueTypes['comercial_Produtos_Tipos_order_by'] | null;
    Tipo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Produtos */
  ['comercial_Produtos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Produtos_prepend_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "comercial.Produtos" */
  ['comercial_Produtos_select_column']: comercial_Produtos_select_column;
  /** input type for updating data in table "comercial.Produtos" */
  ['comercial_Produtos_set_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    ServicoDeDesinstalacao_Id?: ValueTypes['uuid'] | null;
    ServicoDeInstalacao_Id?: ValueTypes['uuid'] | null;
    Tipo_Id?: ValueTypes['comercial_Produtos_Tipos_enum'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Produtos" */
  ['comercial_Produtos_update_column']: comercial_Produtos_update_column;
  /** columns and relationships of "comercial.Servicos" */
  ['comercial_Servicos']: AliasType<{
    Atributos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Atributos']
    ];
    Atributos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Atributos_aggregate']
    ];
    Categorias?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Combos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Servicos']
    ];
    Combos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Servicos_aggregate']
    ];
    GeraOS?: true;
    Id?: true;
    Nome?: true;
    Oportunidades?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Oportunidades']
    ];
    Oportunidades_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Oportunidades_aggregate']
    ];
    Planos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos']
    ];
    Planos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_aggregate']
    ];
    PrestadoresDeServicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos']
    ];
    PrestadoresDeServicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_aggregate']
    ];
    Produtos_Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Servicos']
    ];
    Produtos_Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Servicos_aggregate']
    ];
    Propostas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Servicos']
    ];
    Propostas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Servicos_aggregate']
    ];
    Servicos_Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Produtos']
    ];
    Servicos_Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Produtos_aggregate']
    ];
    Servicos_ServicosDependente?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Servicos']
    ];
    Servicos_ServicosDependente_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Servicos_aggregate']
    ];
    Tarifas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Tarifas']
    ];
    Tarifas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Tarifas_aggregate']
    ];
    /** An object relationship */
    Tipo?: ValueTypes['comercial_Servicos_Tipos'];
    Tipo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    servicosServicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Servicos']
    ];
    servicosServicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Servicos_aggregate']
    ];
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos']: AliasType<{
    /** An object relationship */
    Atributo?: ValueTypes['comercial_Atributos'];
    Atributo_Id?: true;
    Id?: true;
    /** An object relationship */
    Servico?: ValueTypes['comercial_Servicos'];
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Servicos_Atributos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Servicos_Atributos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Servicos_Atributos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Servicos_Atributos_max_fields'];
    min?: ValueTypes['comercial_Servicos_Atributos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Servicos_Atributos_max_order_by'] | null;
    min?: ValueTypes['comercial_Servicos_Atributos_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Servicos_Atributos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Servicos_Atributos_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Atributos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Atributos_bool_exp']: {
    Atributo?: ValueTypes['comercial_Atributos_bool_exp'] | null;
    Atributo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servico?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Servicos_Atributos_bool_exp'][];
    _not?: ValueTypes['comercial_Servicos_Atributos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Servicos_Atributos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_constraint']: comercial_Servicos_Atributos_constraint;
  /** input type for inserting data into table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_insert_input']: {
    Atributo?: ValueTypes['comercial_Atributos_obj_rel_insert_input'] | null;
    Atributo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Servico?: ValueTypes['comercial_Servicos_obj_rel_insert_input'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Atributos_max_fields']: AliasType<{
    Atributo_Id?: true;
    Id?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_max_order_by']: {
    Atributo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Atributos_min_fields']: AliasType<{
    Atributo_Id?: true;
    Id?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_min_order_by']: {
    Atributo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Servicos_Atributos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_on_conflict']: {
    constraint: ValueTypes['comercial_Servicos_Atributos_constraint'];
    update_columns: ValueTypes['comercial_Servicos_Atributos_update_column'][];
    where?: ValueTypes['comercial_Servicos_Atributos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Servicos_Atributos". */
  ['comercial_Servicos_Atributos_order_by']: {
    Atributo?: ValueTypes['comercial_Atributos_order_by'] | null;
    Atributo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Servico?: ValueTypes['comercial_Servicos_order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Servicos_Atributos */
  ['comercial_Servicos_Atributos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_select_column']: comercial_Servicos_Atributos_select_column;
  /** input type for updating data in table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_set_input']: {
    Atributo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_update_column']: comercial_Servicos_Atributos_update_column;
  /** columns and relationships of "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades']: AliasType<{
    /** An object relationship */
    Combo?: ValueTypes['comercial_Combos'];
    Combo_Id?: true;
    Id?: true;
    Nome?: true;
    OportunidadesDePropostas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Oportunidades']
    ];
    OportunidadesDePropostas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Oportunidades_aggregate']
    ];
    /** An object relationship */
    Servico?: ValueTypes['comercial_Servicos'];
    Servico_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Servicos_Oportunidades_aggregate_fields'];
    nodes?: ValueTypes['comercial_Servicos_Oportunidades'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_aggregate_fields']: AliasType<{
    avg?: ValueTypes['comercial_Servicos_Oportunidades_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['comercial_Servicos_Oportunidades_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Servicos_Oportunidades_max_fields'];
    min?: ValueTypes['comercial_Servicos_Oportunidades_min_fields'];
    stddev?: ValueTypes['comercial_Servicos_Oportunidades_stddev_fields'];
    stddev_pop?: ValueTypes['comercial_Servicos_Oportunidades_stddev_pop_fields'];
    stddev_samp?: ValueTypes['comercial_Servicos_Oportunidades_stddev_samp_fields'];
    sum?: ValueTypes['comercial_Servicos_Oportunidades_sum_fields'];
    var_pop?: ValueTypes['comercial_Servicos_Oportunidades_var_pop_fields'];
    var_samp?: ValueTypes['comercial_Servicos_Oportunidades_var_samp_fields'];
    variance?: ValueTypes['comercial_Servicos_Oportunidades_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_aggregate_order_by']: {
    avg?: ValueTypes['comercial_Servicos_Oportunidades_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Servicos_Oportunidades_max_order_by'] | null;
    min?: ValueTypes['comercial_Servicos_Oportunidades_min_order_by'] | null;
    stddev?:
      | ValueTypes['comercial_Servicos_Oportunidades_stddev_order_by']
      | null;
    stddev_pop?:
      | ValueTypes['comercial_Servicos_Oportunidades_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['comercial_Servicos_Oportunidades_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['comercial_Servicos_Oportunidades_sum_order_by'] | null;
    var_pop?:
      | ValueTypes['comercial_Servicos_Oportunidades_var_pop_order_by']
      | null;
    var_samp?:
      | ValueTypes['comercial_Servicos_Oportunidades_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['comercial_Servicos_Oportunidades_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Servicos_Oportunidades_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_Servicos_Oportunidades_on_conflict']
      | null;
  };
  /** aggregate avg on columns */
  ['comercial_Servicos_Oportunidades_avg_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_avg_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Oportunidades". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Oportunidades_bool_exp']: {
    Combo?: ValueTypes['comercial_Combos_bool_exp'] | null;
    Combo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    OportunidadesDePropostas?:
      | ValueTypes['propostas_Propostas_Oportunidades_bool_exp']
      | null;
    Servico?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Valor?: ValueTypes['float8_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'][];
    _not?: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'] | null;
    _or?: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_constraint']: comercial_Servicos_Oportunidades_constraint;
  /** input type for incrementing numeric columns in table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_inc_input']: {
    Valor?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_insert_input']: {
    Combo?: ValueTypes['comercial_Combos_obj_rel_insert_input'] | null;
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    OportunidadesDePropostas?:
      | ValueTypes['propostas_Propostas_Oportunidades_arr_rel_insert_input']
      | null;
    Servico?: ValueTypes['comercial_Servicos_obj_rel_insert_input'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Oportunidades_max_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    Nome?: true;
    Servico_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_max_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Oportunidades_min_fields']: AliasType<{
    Combo_Id?: true;
    Id?: true;
    Nome?: true;
    Servico_Id?: true;
    Valor?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_min_order_by']: {
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Servicos_Oportunidades'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Servicos_Oportunidades_insert_input'];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['comercial_Servicos_Oportunidades_on_conflict']
      | null;
  };
  /** on conflict condition type for table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_on_conflict']: {
    constraint: ValueTypes['comercial_Servicos_Oportunidades_constraint'];
    update_columns: ValueTypes['comercial_Servicos_Oportunidades_update_column'][];
    where?: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Servicos_Oportunidades". */
  ['comercial_Servicos_Oportunidades_order_by']: {
    Combo?: ValueTypes['comercial_Combos_order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    OportunidadesDePropostas_aggregate?:
      | ValueTypes['propostas_Propostas_Oportunidades_aggregate_order_by']
      | null;
    Servico?: ValueTypes['comercial_Servicos_order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Servicos_Oportunidades */
  ['comercial_Servicos_Oportunidades_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_select_column']: comercial_Servicos_Oportunidades_select_column;
  /** input type for updating data in table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_set_input']: {
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    Valor?: ValueTypes['float8'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['comercial_Servicos_Oportunidades_stddev_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_stddev_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Servicos_Oportunidades_stddev_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_stddev_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Servicos_Oportunidades_stddev_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_stddev_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['comercial_Servicos_Oportunidades_sum_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_sum_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_update_column']: comercial_Servicos_Oportunidades_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Servicos_Oportunidades_var_pop_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_var_pop_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['comercial_Servicos_Oportunidades_var_samp_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_var_samp_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['comercial_Servicos_Oportunidades_variance_fields']: AliasType<{
    Valor?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_variance_order_by']: {
    Valor?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos']: AliasType<{
    Id?: true;
    /** An object relationship */
    Produto?: ValueTypes['comercial_Produtos'];
    Produto_Id?: true;
    /** An object relationship */
    Servico?: ValueTypes['comercial_Servicos'];
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Servicos_Produtos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Servicos_Produtos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Servicos_Produtos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Servicos_Produtos_max_fields'];
    min?: ValueTypes['comercial_Servicos_Produtos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Servicos_Produtos_max_order_by'] | null;
    min?: ValueTypes['comercial_Servicos_Produtos_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Servicos_Produtos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Servicos_Produtos_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Produtos_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Produto?: ValueTypes['comercial_Produtos_bool_exp'] | null;
    Produto_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servico?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Servicos_Produtos_bool_exp'][];
    _not?: ValueTypes['comercial_Servicos_Produtos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Servicos_Produtos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_constraint']: comercial_Servicos_Produtos_constraint;
  /** input type for inserting data into table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Produto?: ValueTypes['comercial_Produtos_obj_rel_insert_input'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    Servico?: ValueTypes['comercial_Servicos_obj_rel_insert_input'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Produtos_max_fields']: AliasType<{
    Id?: true;
    Produto_Id?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Produtos_min_fields']: AliasType<{
    Id?: true;
    Produto_Id?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Servicos_Produtos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_on_conflict']: {
    constraint: ValueTypes['comercial_Servicos_Produtos_constraint'];
    update_columns: ValueTypes['comercial_Servicos_Produtos_update_column'][];
    where?: ValueTypes['comercial_Servicos_Produtos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Servicos_Produtos". */
  ['comercial_Servicos_Produtos_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Produto?: ValueTypes['comercial_Produtos_order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Servico?: ValueTypes['comercial_Servicos_order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Servicos_Produtos */
  ['comercial_Servicos_Produtos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_select_column']: comercial_Servicos_Produtos_select_column;
  /** input type for updating data in table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_update_column']: comercial_Servicos_Produtos_update_column;
  /** columns and relationships of "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos']: AliasType<{
    Id?: true;
    /** An object relationship */
    Servico?: ValueTypes['comercial_Servicos'];
    /** An object relationship */
    ServicoDependente?: ValueTypes['comercial_Servicos'];
    ServicoDependente_Id?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Servicos_Servicos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Servicos_Servicos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Servicos_Servicos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Servicos_Servicos_max_fields'];
    min?: ValueTypes['comercial_Servicos_Servicos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Servicos_Servicos_max_order_by'] | null;
    min?: ValueTypes['comercial_Servicos_Servicos_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Servicos_Servicos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Servicos_Servicos_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Servicos_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servico?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    ServicoDependente?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    ServicoDependente_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Servicos_Servicos_bool_exp'][];
    _not?: ValueTypes['comercial_Servicos_Servicos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Servicos_Servicos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_constraint']: comercial_Servicos_Servicos_constraint;
  /** input type for inserting data into table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Servico?: ValueTypes['comercial_Servicos_obj_rel_insert_input'] | null;
    ServicoDependente?:
      | ValueTypes['comercial_Servicos_obj_rel_insert_input']
      | null;
    ServicoDependente_Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Servicos_max_fields']: AliasType<{
    Id?: true;
    ServicoDependente_Id?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    ServicoDependente_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Servicos_min_fields']: AliasType<{
    Id?: true;
    ServicoDependente_Id?: true;
    Servico_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    ServicoDependente_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Servicos_Servicos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_on_conflict']: {
    constraint: ValueTypes['comercial_Servicos_Servicos_constraint'];
    update_columns: ValueTypes['comercial_Servicos_Servicos_update_column'][];
    where?: ValueTypes['comercial_Servicos_Servicos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Servicos_Servicos". */
  ['comercial_Servicos_Servicos_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Servico?: ValueTypes['comercial_Servicos_order_by'] | null;
    ServicoDependente?: ValueTypes['comercial_Servicos_order_by'] | null;
    ServicoDependente_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Servicos_Servicos */
  ['comercial_Servicos_Servicos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_select_column']: comercial_Servicos_Servicos_select_column;
  /** input type for updating data in table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    ServicoDependente_Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_update_column']: comercial_Servicos_Servicos_update_column;
  /** columns and relationships of "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas']: AliasType<{
    Id?: true;
    /** An object relationship */
    Servico?: ValueTypes['comercial_Servicos'];
    Servico_Id?: true;
    /** An object relationship */
    Tarifa?: ValueTypes['comercial_Tarifas'];
    Tarifa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Servicos_Tarifas_aggregate_fields'];
    nodes?: ValueTypes['comercial_Servicos_Tarifas'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Servicos_Tarifas_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Servicos_Tarifas_max_fields'];
    min?: ValueTypes['comercial_Servicos_Tarifas_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Servicos_Tarifas_max_order_by'] | null;
    min?: ValueTypes['comercial_Servicos_Tarifas_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Servicos_Tarifas_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Servicos_Tarifas_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Tarifas". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Tarifas_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servico?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Tarifa?: ValueTypes['comercial_Tarifas_bool_exp'] | null;
    Tarifa_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'][];
    _not?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'] | null;
    _or?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_constraint']: comercial_Servicos_Tarifas_constraint;
  /** input type for inserting data into table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Servico?: ValueTypes['comercial_Servicos_obj_rel_insert_input'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    Tarifa?: ValueTypes['comercial_Tarifas_obj_rel_insert_input'] | null;
    Tarifa_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Tarifas_max_fields']: AliasType<{
    Id?: true;
    Servico_Id?: true;
    Tarifa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    Tarifa_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Tarifas_min_fields']: AliasType<{
    Id?: true;
    Servico_Id?: true;
    Tarifa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    Tarifa_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Servicos_Tarifas'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_on_conflict']: {
    constraint: ValueTypes['comercial_Servicos_Tarifas_constraint'];
    update_columns: ValueTypes['comercial_Servicos_Tarifas_update_column'][];
    where?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Servicos_Tarifas". */
  ['comercial_Servicos_Tarifas_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Servico?: ValueTypes['comercial_Servicos_order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    Tarifa?: ValueTypes['comercial_Tarifas_order_by'] | null;
    Tarifa_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Servicos_Tarifas */
  ['comercial_Servicos_Tarifas_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_select_column']: comercial_Servicos_Tarifas_select_column;
  /** input type for updating data in table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    Tarifa_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_update_column']: comercial_Servicos_Tarifas_update_column;
  /** columns and relationships of "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos']: AliasType<{
    Comentario?: true;
    Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos']
    ];
    Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_aggregate']
    ];
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Servicos_Tipos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Servicos_Tipos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Servicos_Tipos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Servicos_Tipos_max_fields'];
    min?: ValueTypes['comercial_Servicos_Tipos_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "comercial.Servicos_Tipos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Tipos_bool_exp']: {
    Comentario?: ValueTypes['String_comparison_exp'] | null;
    Servicos?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    Valor?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Servicos_Tipos_bool_exp'][];
    _not?: ValueTypes['comercial_Servicos_Tipos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Servicos_Tipos_bool_exp'][];
  };
  /** unique or primary key constraints on table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_constraint']: comercial_Servicos_Tipos_constraint;
  ['comercial_Servicos_Tipos_enum']: comercial_Servicos_Tipos_enum;
  /** Boolean expression to compare columns of type "comercial_Servicos_Tipos_enum". All fields are combined with logical 'AND'. */
  ['comercial_Servicos_Tipos_enum_comparison_exp']: {
    _eq?: ValueTypes['comercial_Servicos_Tipos_enum'] | null;
    _in?: ValueTypes['comercial_Servicos_Tipos_enum'][];
    _is_null?: boolean | null;
    _neq?: ValueTypes['comercial_Servicos_Tipos_enum'] | null;
    _nin?: ValueTypes['comercial_Servicos_Tipos_enum'][];
  };
  /** input type for inserting data into table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_insert_input']: {
    Comentario?: string | null;
    Servicos?: ValueTypes['comercial_Servicos_arr_rel_insert_input'] | null;
    Valor?: string | null;
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Tipos_max_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['comercial_Servicos_Tipos_min_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Servicos_Tipos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Servicos_Tipos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Servicos_Tipos_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_on_conflict']: {
    constraint: ValueTypes['comercial_Servicos_Tipos_constraint'];
    update_columns: ValueTypes['comercial_Servicos_Tipos_update_column'][];
    where?: ValueTypes['comercial_Servicos_Tipos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Servicos_Tipos". */
  ['comercial_Servicos_Tipos_order_by']: {
    Comentario?: ValueTypes['order_by'] | null;
    Servicos_aggregate?:
      | ValueTypes['comercial_Servicos_aggregate_order_by']
      | null;
    Valor?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Servicos_Tipos */
  ['comercial_Servicos_Tipos_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_select_column']: comercial_Servicos_Tipos_select_column;
  /** input type for updating data in table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_set_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** update columns of table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_update_column']: comercial_Servicos_Tipos_update_column;
  /** aggregated selection of "comercial.Servicos" */
  ['comercial_Servicos_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Servicos_aggregate_fields'];
    nodes?: ValueTypes['comercial_Servicos'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Servicos" */
  ['comercial_Servicos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Servicos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Servicos_max_fields'];
    min?: ValueTypes['comercial_Servicos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "comercial.Servicos" */
  ['comercial_Servicos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['comercial_Servicos_max_order_by'] | null;
    min?: ValueTypes['comercial_Servicos_min_order_by'] | null;
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Servicos_append_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
  };
  /** input type for inserting array relation for remote table "comercial.Servicos" */
  ['comercial_Servicos_arr_rel_insert_input']: {
    data: ValueTypes['comercial_Servicos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Servicos_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_bool_exp']: {
    Atributos?: ValueTypes['comercial_Servicos_Atributos_bool_exp'] | null;
    Categorias?: ValueTypes['jsonb_comparison_exp'] | null;
    Combos?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
    GeraOS?: ValueTypes['Boolean_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Oportunidades?:
      | ValueTypes['comercial_Servicos_Oportunidades_bool_exp']
      | null;
    Planos?: ValueTypes['comercial_Planos_bool_exp'] | null;
    PrestadoresDeServicos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
      | null;
    Produtos_Servicos?:
      | ValueTypes['comercial_Produtos_Servicos_bool_exp']
      | null;
    Propostas?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
    Servicos_Produtos?:
      | ValueTypes['comercial_Servicos_Produtos_bool_exp']
      | null;
    Servicos_ServicosDependente?:
      | ValueTypes['comercial_Servicos_Servicos_bool_exp']
      | null;
    Tarifas?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'] | null;
    Tipo?: ValueTypes['comercial_Servicos_Tipos_bool_exp'] | null;
    Tipo_Id?: ValueTypes['comercial_Servicos_Tipos_enum_comparison_exp'] | null;
    _and?: ValueTypes['comercial_Servicos_bool_exp'][];
    _not?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    _or?: ValueTypes['comercial_Servicos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    servicosServicos?:
      | ValueTypes['comercial_Servicos_Servicos_bool_exp']
      | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Servicos" */
  ['comercial_Servicos_constraint']: comercial_Servicos_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['comercial_Servicos_delete_at_path_input']: {
    Categorias?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['comercial_Servicos_delete_elem_input']: {
    Categorias?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['comercial_Servicos_delete_key_input']: {
    Categorias?: string | null;
  };
  /** input type for inserting data into table "comercial.Servicos" */
  ['comercial_Servicos_insert_input']: {
    Atributos?:
      | ValueTypes['comercial_Servicos_Atributos_arr_rel_insert_input']
      | null;
    Categorias?: ValueTypes['jsonb'] | null;
    Combos?:
      | ValueTypes['comercial_Combos_Servicos_arr_rel_insert_input']
      | null;
    GeraOS?: boolean | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Oportunidades?:
      | ValueTypes['comercial_Servicos_Oportunidades_arr_rel_insert_input']
      | null;
    Planos?: ValueTypes['comercial_Planos_arr_rel_insert_input'] | null;
    PrestadoresDeServicos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_arr_rel_insert_input']
      | null;
    Produtos_Servicos?:
      | ValueTypes['comercial_Produtos_Servicos_arr_rel_insert_input']
      | null;
    Propostas?:
      | ValueTypes['propostas_Propostas_Servicos_arr_rel_insert_input']
      | null;
    Servicos_Produtos?:
      | ValueTypes['comercial_Servicos_Produtos_arr_rel_insert_input']
      | null;
    Servicos_ServicosDependente?:
      | ValueTypes['comercial_Servicos_Servicos_arr_rel_insert_input']
      | null;
    Tarifas?:
      | ValueTypes['comercial_Servicos_Tarifas_arr_rel_insert_input']
      | null;
    Tipo?: ValueTypes['comercial_Servicos_Tipos_obj_rel_insert_input'] | null;
    Tipo_Id?: ValueTypes['comercial_Servicos_Tipos_enum'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    servicosServicos?:
      | ValueTypes['comercial_Servicos_Servicos_arr_rel_insert_input']
      | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Servicos_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "comercial.Servicos" */
  ['comercial_Servicos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['comercial_Servicos_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "comercial.Servicos" */
  ['comercial_Servicos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "comercial.Servicos" */
  ['comercial_Servicos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Servicos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Servicos" */
  ['comercial_Servicos_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Servicos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Servicos_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.Servicos" */
  ['comercial_Servicos_on_conflict']: {
    constraint: ValueTypes['comercial_Servicos_constraint'];
    update_columns: ValueTypes['comercial_Servicos_update_column'][];
    where?: ValueTypes['comercial_Servicos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Servicos". */
  ['comercial_Servicos_order_by']: {
    Atributos_aggregate?:
      | ValueTypes['comercial_Servicos_Atributos_aggregate_order_by']
      | null;
    Categorias?: ValueTypes['order_by'] | null;
    Combos_aggregate?:
      | ValueTypes['comercial_Combos_Servicos_aggregate_order_by']
      | null;
    GeraOS?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Oportunidades_aggregate?:
      | ValueTypes['comercial_Servicos_Oportunidades_aggregate_order_by']
      | null;
    Planos_aggregate?: ValueTypes['comercial_Planos_aggregate_order_by'] | null;
    PrestadoresDeServicos_aggregate?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_aggregate_order_by']
      | null;
    Produtos_Servicos_aggregate?:
      | ValueTypes['comercial_Produtos_Servicos_aggregate_order_by']
      | null;
    Propostas_aggregate?:
      | ValueTypes['propostas_Propostas_Servicos_aggregate_order_by']
      | null;
    Servicos_Produtos_aggregate?:
      | ValueTypes['comercial_Servicos_Produtos_aggregate_order_by']
      | null;
    Servicos_ServicosDependente_aggregate?:
      | ValueTypes['comercial_Servicos_Servicos_aggregate_order_by']
      | null;
    Tarifas_aggregate?:
      | ValueTypes['comercial_Servicos_Tarifas_aggregate_order_by']
      | null;
    Tipo?: ValueTypes['comercial_Servicos_Tipos_order_by'] | null;
    Tipo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    servicosServicos_aggregate?:
      | ValueTypes['comercial_Servicos_Servicos_aggregate_order_by']
      | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Servicos */
  ['comercial_Servicos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Servicos_prepend_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "comercial.Servicos" */
  ['comercial_Servicos_select_column']: comercial_Servicos_select_column;
  /** input type for updating data in table "comercial.Servicos" */
  ['comercial_Servicos_set_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    GeraOS?: boolean | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Tipo_Id?: ValueTypes['comercial_Servicos_Tipos_enum'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Servicos" */
  ['comercial_Servicos_update_column']: comercial_Servicos_update_column;
  /** columns and relationships of "comercial.Tarifas" */
  ['comercial_Tarifas']: AliasType<{
    Fornecedores_Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    ];
    Fornecedores_Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate']
    ];
    Id?: true;
    Nome?: true;
    Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Tarifas']
    ];
    Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Tarifas_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "comercial.Tarifas" */
  ['comercial_Tarifas_aggregate']: AliasType<{
    aggregate?: ValueTypes['comercial_Tarifas_aggregate_fields'];
    nodes?: ValueTypes['comercial_Tarifas'];
    __typename?: true;
  }>;
  /** aggregate fields of "comercial.Tarifas" */
  ['comercial_Tarifas_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['comercial_Tarifas_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['comercial_Tarifas_max_fields'];
    min?: ValueTypes['comercial_Tarifas_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "comercial.Tarifas". All fields are combined with a logical 'AND'. */
  ['comercial_Tarifas_bool_exp']: {
    Fornecedores_Servicos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
      | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Servicos?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'] | null;
    _and?: ValueTypes['comercial_Tarifas_bool_exp'][];
    _not?: ValueTypes['comercial_Tarifas_bool_exp'] | null;
    _or?: ValueTypes['comercial_Tarifas_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "comercial.Tarifas" */
  ['comercial_Tarifas_constraint']: comercial_Tarifas_constraint;
  /** input type for inserting data into table "comercial.Tarifas" */
  ['comercial_Tarifas_insert_input']: {
    Fornecedores_Servicos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_arr_rel_insert_input']
      | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Servicos?:
      | ValueTypes['comercial_Servicos_Tarifas_arr_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['comercial_Tarifas_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['comercial_Tarifas_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "comercial.Tarifas" */
  ['comercial_Tarifas_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['comercial_Tarifas'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "comercial.Tarifas" */
  ['comercial_Tarifas_obj_rel_insert_input']: {
    data: ValueTypes['comercial_Tarifas_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['comercial_Tarifas_on_conflict'] | null;
  };
  /** on conflict condition type for table "comercial.Tarifas" */
  ['comercial_Tarifas_on_conflict']: {
    constraint: ValueTypes['comercial_Tarifas_constraint'];
    update_columns: ValueTypes['comercial_Tarifas_update_column'][];
    where?: ValueTypes['comercial_Tarifas_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "comercial.Tarifas". */
  ['comercial_Tarifas_order_by']: {
    Fornecedores_Servicos_aggregate?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_order_by']
      | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Servicos_aggregate?:
      | ValueTypes['comercial_Servicos_Tarifas_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: comercial_Tarifas */
  ['comercial_Tarifas_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "comercial.Tarifas" */
  ['comercial_Tarifas_select_column']: comercial_Tarifas_select_column;
  /** input type for updating data in table "comercial.Tarifas" */
  ['comercial_Tarifas_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "comercial.Tarifas" */
  ['comercial_Tarifas_update_column']: comercial_Tarifas_update_column;
  /** columns and relationships of "contatos.Emails" */
  ['contatos_Emails']: AliasType<{
    Categorias?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Email?: true;
    Id?: true;
    Identidades?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    NomeDoResponsavel?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "contatos.Emails" */
  ['contatos_Emails_aggregate']: AliasType<{
    aggregate?: ValueTypes['contatos_Emails_aggregate_fields'];
    nodes?: ValueTypes['contatos_Emails'];
    __typename?: true;
  }>;
  /** aggregate fields of "contatos.Emails" */
  ['contatos_Emails_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['contatos_Emails_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['contatos_Emails_max_fields'];
    min?: ValueTypes['contatos_Emails_min_fields'];
    __typename?: true;
  }>;
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Emails_append_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
  };
  /** Boolean expression to filter rows from the table "contatos.Emails". All fields are combined with a logical 'AND'. */
  ['contatos_Emails_bool_exp']: {
    Categorias?: ValueTypes['jsonb_comparison_exp'] | null;
    Email?: ValueTypes['String_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Identidades?: ValueTypes['jsonb_comparison_exp'] | null;
    NomeDoResponsavel?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['contatos_Emails_bool_exp'][];
    _not?: ValueTypes['contatos_Emails_bool_exp'] | null;
    _or?: ValueTypes['contatos_Emails_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "contatos.Emails" */
  ['contatos_Emails_constraint']: contatos_Emails_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Emails_delete_at_path_input']: {
    Categorias?: string[];
    Identidades?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Emails_delete_elem_input']: {
    Categorias?: number | null;
    Identidades?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Emails_delete_key_input']: {
    Categorias?: string | null;
    Identidades?: string | null;
  };
  /** input type for inserting data into table "contatos.Emails" */
  ['contatos_Emails_insert_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    Email?: string | null;
    Id?: ValueTypes['uuid'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
    NomeDoResponsavel?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['contatos_Emails_max_fields']: AliasType<{
    Email?: true;
    Id?: true;
    NomeDoResponsavel?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['contatos_Emails_min_fields']: AliasType<{
    Email?: true;
    Id?: true;
    NomeDoResponsavel?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "contatos.Emails" */
  ['contatos_Emails_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['contatos_Emails'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "contatos.Emails" */
  ['contatos_Emails_on_conflict']: {
    constraint: ValueTypes['contatos_Emails_constraint'];
    update_columns: ValueTypes['contatos_Emails_update_column'][];
    where?: ValueTypes['contatos_Emails_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "contatos.Emails". */
  ['contatos_Emails_order_by']: {
    Categorias?: ValueTypes['order_by'] | null;
    Email?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Identidades?: ValueTypes['order_by'] | null;
    NomeDoResponsavel?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: contatos_Emails */
  ['contatos_Emails_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Emails_prepend_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "contatos.Emails" */
  ['contatos_Emails_select_column']: contatos_Emails_select_column;
  /** input type for updating data in table "contatos.Emails" */
  ['contatos_Emails_set_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    Email?: string | null;
    Id?: ValueTypes['uuid'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
    NomeDoResponsavel?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "contatos.Emails" */
  ['contatos_Emails_update_column']: contatos_Emails_update_column;
  /** columns and relationships of "contatos.Enderecos" */
  ['contatos_Enderecos']: AliasType<{
    Bairro?: true;
    Categorias?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Cep?: true;
    /** An object relationship */
    Cidade?: ValueTypes['EstadosEMunicipios'];
    Cidade_Id?: true;
    Complemento?: true;
    /** An object relationship */
    Estado?: ValueTypes['EstadosEMunicipios'];
    Estado_Id?: true;
    Id?: true;
    Identidades?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Logradouro?: true;
    Numero?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "contatos.Enderecos" */
  ['contatos_Enderecos_aggregate']: AliasType<{
    aggregate?: ValueTypes['contatos_Enderecos_aggregate_fields'];
    nodes?: ValueTypes['contatos_Enderecos'];
    __typename?: true;
  }>;
  /** aggregate fields of "contatos.Enderecos" */
  ['contatos_Enderecos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['contatos_Enderecos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['contatos_Enderecos_max_fields'];
    min?: ValueTypes['contatos_Enderecos_min_fields'];
    __typename?: true;
  }>;
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Enderecos_append_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
  };
  /** Boolean expression to filter rows from the table "contatos.Enderecos". All fields are combined with a logical 'AND'. */
  ['contatos_Enderecos_bool_exp']: {
    Bairro?: ValueTypes['String_comparison_exp'] | null;
    Categorias?: ValueTypes['jsonb_comparison_exp'] | null;
    Cep?: ValueTypes['String_comparison_exp'] | null;
    Cidade?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
    Cidade_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Complemento?: ValueTypes['String_comparison_exp'] | null;
    Estado?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
    Estado_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Identidades?: ValueTypes['jsonb_comparison_exp'] | null;
    Logradouro?: ValueTypes['String_comparison_exp'] | null;
    Numero?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['contatos_Enderecos_bool_exp'][];
    _not?: ValueTypes['contatos_Enderecos_bool_exp'] | null;
    _or?: ValueTypes['contatos_Enderecos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "contatos.Enderecos" */
  ['contatos_Enderecos_constraint']: contatos_Enderecos_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Enderecos_delete_at_path_input']: {
    Categorias?: string[];
    Identidades?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Enderecos_delete_elem_input']: {
    Categorias?: number | null;
    Identidades?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Enderecos_delete_key_input']: {
    Categorias?: string | null;
    Identidades?: string | null;
  };
  /** input type for inserting data into table "contatos.Enderecos" */
  ['contatos_Enderecos_insert_input']: {
    Bairro?: string | null;
    Categorias?: ValueTypes['jsonb'] | null;
    Cep?: string | null;
    Cidade?: ValueTypes['EstadosEMunicipios_obj_rel_insert_input'] | null;
    Cidade_Id?: ValueTypes['uuid'] | null;
    Complemento?: string | null;
    Estado?: ValueTypes['EstadosEMunicipios_obj_rel_insert_input'] | null;
    Estado_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
    Logradouro?: string | null;
    Numero?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['contatos_Enderecos_max_fields']: AliasType<{
    Bairro?: true;
    Cep?: true;
    Cidade_Id?: true;
    Complemento?: true;
    Estado_Id?: true;
    Id?: true;
    Logradouro?: true;
    Numero?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['contatos_Enderecos_min_fields']: AliasType<{
    Bairro?: true;
    Cep?: true;
    Cidade_Id?: true;
    Complemento?: true;
    Estado_Id?: true;
    Id?: true;
    Logradouro?: true;
    Numero?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "contatos.Enderecos" */
  ['contatos_Enderecos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['contatos_Enderecos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "contatos.Enderecos" */
  ['contatos_Enderecos_on_conflict']: {
    constraint: ValueTypes['contatos_Enderecos_constraint'];
    update_columns: ValueTypes['contatos_Enderecos_update_column'][];
    where?: ValueTypes['contatos_Enderecos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "contatos.Enderecos". */
  ['contatos_Enderecos_order_by']: {
    Bairro?: ValueTypes['order_by'] | null;
    Categorias?: ValueTypes['order_by'] | null;
    Cep?: ValueTypes['order_by'] | null;
    Cidade?: ValueTypes['EstadosEMunicipios_order_by'] | null;
    Cidade_Id?: ValueTypes['order_by'] | null;
    Complemento?: ValueTypes['order_by'] | null;
    Estado?: ValueTypes['EstadosEMunicipios_order_by'] | null;
    Estado_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Identidades?: ValueTypes['order_by'] | null;
    Logradouro?: ValueTypes['order_by'] | null;
    Numero?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: contatos_Enderecos */
  ['contatos_Enderecos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Enderecos_prepend_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "contatos.Enderecos" */
  ['contatos_Enderecos_select_column']: contatos_Enderecos_select_column;
  /** input type for updating data in table "contatos.Enderecos" */
  ['contatos_Enderecos_set_input']: {
    Bairro?: string | null;
    Categorias?: ValueTypes['jsonb'] | null;
    Cep?: string | null;
    Cidade_Id?: ValueTypes['uuid'] | null;
    Complemento?: string | null;
    Estado_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
    Logradouro?: string | null;
    Numero?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "contatos.Enderecos" */
  ['contatos_Enderecos_update_column']: contatos_Enderecos_update_column;
  /** columns and relationships of "contatos.Logs" */
  ['contatos_Logs']: AliasType<{
    DadosAntigos?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    DadosNovos?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Id?: true;
    Operacao?: true;
    Tipo?: true;
    Tipo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "contatos.Logs" */
  ['contatos_Logs_aggregate']: AliasType<{
    aggregate?: ValueTypes['contatos_Logs_aggregate_fields'];
    nodes?: ValueTypes['contatos_Logs'];
    __typename?: true;
  }>;
  /** aggregate fields of "contatos.Logs" */
  ['contatos_Logs_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['contatos_Logs_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['contatos_Logs_max_fields'];
    min?: ValueTypes['contatos_Logs_min_fields'];
    __typename?: true;
  }>;
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Logs_append_input']: {
    DadosAntigos?: ValueTypes['jsonb'] | null;
    DadosNovos?: ValueTypes['jsonb'] | null;
  };
  /** Boolean expression to filter rows from the table "contatos.Logs". All fields are combined with a logical 'AND'. */
  ['contatos_Logs_bool_exp']: {
    DadosAntigos?: ValueTypes['jsonb_comparison_exp'] | null;
    DadosNovos?: ValueTypes['jsonb_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Operacao?: ValueTypes['String_comparison_exp'] | null;
    Tipo?: ValueTypes['String_comparison_exp'] | null;
    Tipo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['contatos_Logs_bool_exp'][];
    _not?: ValueTypes['contatos_Logs_bool_exp'] | null;
    _or?: ValueTypes['contatos_Logs_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "contatos.Logs" */
  ['contatos_Logs_constraint']: contatos_Logs_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Logs_delete_at_path_input']: {
    DadosAntigos?: string[];
    DadosNovos?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Logs_delete_elem_input']: {
    DadosAntigos?: number | null;
    DadosNovos?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Logs_delete_key_input']: {
    DadosAntigos?: string | null;
    DadosNovos?: string | null;
  };
  /** input type for inserting data into table "contatos.Logs" */
  ['contatos_Logs_insert_input']: {
    DadosAntigos?: ValueTypes['jsonb'] | null;
    DadosNovos?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    Operacao?: string | null;
    Tipo?: string | null;
    Tipo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['contatos_Logs_max_fields']: AliasType<{
    Id?: true;
    Operacao?: true;
    Tipo?: true;
    Tipo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['contatos_Logs_min_fields']: AliasType<{
    Id?: true;
    Operacao?: true;
    Tipo?: true;
    Tipo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "contatos.Logs" */
  ['contatos_Logs_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['contatos_Logs'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "contatos.Logs" */
  ['contatos_Logs_on_conflict']: {
    constraint: ValueTypes['contatos_Logs_constraint'];
    update_columns: ValueTypes['contatos_Logs_update_column'][];
    where?: ValueTypes['contatos_Logs_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "contatos.Logs". */
  ['contatos_Logs_order_by']: {
    DadosAntigos?: ValueTypes['order_by'] | null;
    DadosNovos?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Operacao?: ValueTypes['order_by'] | null;
    Tipo?: ValueTypes['order_by'] | null;
    Tipo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: contatos_Logs */
  ['contatos_Logs_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Logs_prepend_input']: {
    DadosAntigos?: ValueTypes['jsonb'] | null;
    DadosNovos?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "contatos.Logs" */
  ['contatos_Logs_select_column']: contatos_Logs_select_column;
  /** input type for updating data in table "contatos.Logs" */
  ['contatos_Logs_set_input']: {
    DadosAntigos?: ValueTypes['jsonb'] | null;
    DadosNovos?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    Operacao?: string | null;
    Tipo?: string | null;
    Tipo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "contatos.Logs" */
  ['contatos_Logs_update_column']: contatos_Logs_update_column;
  /** columns and relationships of "contatos.Telefones" */
  ['contatos_Telefones']: AliasType<{
    Categorias?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Id?: true;
    Identidades?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    NomeDoResponsavel?: true;
    Telefone?: true;
    Tipos?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "contatos.Telefones" */
  ['contatos_Telefones_aggregate']: AliasType<{
    aggregate?: ValueTypes['contatos_Telefones_aggregate_fields'];
    nodes?: ValueTypes['contatos_Telefones'];
    __typename?: true;
  }>;
  /** aggregate fields of "contatos.Telefones" */
  ['contatos_Telefones_aggregate_fields']: AliasType<{
    avg?: ValueTypes['contatos_Telefones_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['contatos_Telefones_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['contatos_Telefones_max_fields'];
    min?: ValueTypes['contatos_Telefones_min_fields'];
    stddev?: ValueTypes['contatos_Telefones_stddev_fields'];
    stddev_pop?: ValueTypes['contatos_Telefones_stddev_pop_fields'];
    stddev_samp?: ValueTypes['contatos_Telefones_stddev_samp_fields'];
    sum?: ValueTypes['contatos_Telefones_sum_fields'];
    var_pop?: ValueTypes['contatos_Telefones_var_pop_fields'];
    var_samp?: ValueTypes['contatos_Telefones_var_samp_fields'];
    variance?: ValueTypes['contatos_Telefones_variance_fields'];
    __typename?: true;
  }>;
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Telefones_append_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
    Tipos?: ValueTypes['jsonb'] | null;
  };
  /** aggregate avg on columns */
  ['contatos_Telefones_avg_fields']: AliasType<{
    Telefone?: true;
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "contatos.Telefones". All fields are combined with a logical 'AND'. */
  ['contatos_Telefones_bool_exp']: {
    Categorias?: ValueTypes['jsonb_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Identidades?: ValueTypes['jsonb_comparison_exp'] | null;
    NomeDoResponsavel?: ValueTypes['String_comparison_exp'] | null;
    Telefone?: ValueTypes['bigint_comparison_exp'] | null;
    Tipos?: ValueTypes['jsonb_comparison_exp'] | null;
    _and?: ValueTypes['contatos_Telefones_bool_exp'][];
    _not?: ValueTypes['contatos_Telefones_bool_exp'] | null;
    _or?: ValueTypes['contatos_Telefones_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "contatos.Telefones" */
  ['contatos_Telefones_constraint']: contatos_Telefones_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Telefones_delete_at_path_input']: {
    Categorias?: string[];
    Identidades?: string[];
    Tipos?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Telefones_delete_elem_input']: {
    Categorias?: number | null;
    Identidades?: number | null;
    Tipos?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Telefones_delete_key_input']: {
    Categorias?: string | null;
    Identidades?: string | null;
    Tipos?: string | null;
  };
  /** input type for incrementing numeric columns in table "contatos.Telefones" */
  ['contatos_Telefones_inc_input']: {
    Telefone?: ValueTypes['bigint'] | null;
  };
  /** input type for inserting data into table "contatos.Telefones" */
  ['contatos_Telefones_insert_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
    NomeDoResponsavel?: string | null;
    Telefone?: ValueTypes['bigint'] | null;
    Tipos?: ValueTypes['jsonb'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['contatos_Telefones_max_fields']: AliasType<{
    Id?: true;
    NomeDoResponsavel?: true;
    Telefone?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['contatos_Telefones_min_fields']: AliasType<{
    Id?: true;
    NomeDoResponsavel?: true;
    Telefone?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "contatos.Telefones" */
  ['contatos_Telefones_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['contatos_Telefones'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "contatos.Telefones" */
  ['contatos_Telefones_on_conflict']: {
    constraint: ValueTypes['contatos_Telefones_constraint'];
    update_columns: ValueTypes['contatos_Telefones_update_column'][];
    where?: ValueTypes['contatos_Telefones_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "contatos.Telefones". */
  ['contatos_Telefones_order_by']: {
    Categorias?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Identidades?: ValueTypes['order_by'] | null;
    NomeDoResponsavel?: ValueTypes['order_by'] | null;
    Telefone?: ValueTypes['order_by'] | null;
    Tipos?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: contatos_Telefones */
  ['contatos_Telefones_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Telefones_prepend_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
    Tipos?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "contatos.Telefones" */
  ['contatos_Telefones_select_column']: contatos_Telefones_select_column;
  /** input type for updating data in table "contatos.Telefones" */
  ['contatos_Telefones_set_input']: {
    Categorias?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    Identidades?: ValueTypes['jsonb'] | null;
    NomeDoResponsavel?: string | null;
    Telefone?: ValueTypes['bigint'] | null;
    Tipos?: ValueTypes['jsonb'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['contatos_Telefones_stddev_fields']: AliasType<{
    Telefone?: true;
    __typename?: true;
  }>;
  /** aggregate stddev_pop on columns */
  ['contatos_Telefones_stddev_pop_fields']: AliasType<{
    Telefone?: true;
    __typename?: true;
  }>;
  /** aggregate stddev_samp on columns */
  ['contatos_Telefones_stddev_samp_fields']: AliasType<{
    Telefone?: true;
    __typename?: true;
  }>;
  /** aggregate sum on columns */
  ['contatos_Telefones_sum_fields']: AliasType<{
    Telefone?: true;
    __typename?: true;
  }>;
  /** update columns of table "contatos.Telefones" */
  ['contatos_Telefones_update_column']: contatos_Telefones_update_column;
  /** aggregate var_pop on columns */
  ['contatos_Telefones_var_pop_fields']: AliasType<{
    Telefone?: true;
    __typename?: true;
  }>;
  /** aggregate var_samp on columns */
  ['contatos_Telefones_var_samp_fields']: AliasType<{
    Telefone?: true;
    __typename?: true;
  }>;
  /** aggregate variance on columns */
  ['contatos_Telefones_variance_fields']: AliasType<{
    Telefone?: true;
    __typename?: true;
  }>;
  ['float8']: unknown;
  /** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
  ['float8_comparison_exp']: {
    _eq?: ValueTypes['float8'] | null;
    _gt?: ValueTypes['float8'] | null;
    _gte?: ValueTypes['float8'] | null;
    _in?: ValueTypes['float8'][];
    _is_null?: boolean | null;
    _lt?: ValueTypes['float8'] | null;
    _lte?: ValueTypes['float8'] | null;
    _neq?: ValueTypes['float8'] | null;
    _nin?: ValueTypes['float8'][];
  };
  /** columns and relationships of "identidades.Clientes" */
  ['identidades_Clientes']: AliasType<{
    Id?: true;
    Leads?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_Leads_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_Leads_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_Leads_bool_exp'] | null;
      },
      ValueTypes['clientes_Leads']
    ];
    Leads_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_Leads_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_Leads_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_Leads_bool_exp'] | null;
      },
      ValueTypes['clientes_Leads_aggregate']
    ];
    /** An object relationship */
    Pessoa?: ValueTypes['identidades_Pessoas'];
    Pessoa_Id?: true;
    Usuarios?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['autenticacao_Usuarios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['autenticacao_Usuarios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['autenticacao_Usuarios_bool_exp'] | null;
      },
      ValueTypes['autenticacao_Usuarios']
    ];
    Usuarios_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['autenticacao_Usuarios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['autenticacao_Usuarios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['autenticacao_Usuarios_bool_exp'] | null;
      },
      ValueTypes['autenticacao_Usuarios_aggregate']
    ];
    Veiculos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_Veiculos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_Veiculos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_Veiculos_bool_exp'] | null;
      },
      ValueTypes['clientes_Veiculos']
    ];
    VeiculosAtivos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos']
    ];
    VeiculosAtivos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_aggregate']
    ];
    Veiculos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_Veiculos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_Veiculos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_Veiculos_bool_exp'] | null;
      },
      ValueTypes['clientes_Veiculos_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos']: AliasType<{
    DataAprovado?: true;
    DataRecusado?: true;
    Id?: true;
    MotivoRecusa?: true;
    Nome?: true;
    /** An object relationship */
    Pessoa?: ValueTypes['identidades_Pessoas'];
    Pessoa_Id?: true;
    /** An object relationship */
    Situacao?: ValueTypes['identidades_Clientes_Documentos_Situacoes'];
    Situacao_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes']: AliasType<{
    Clientes_Documentos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Clientes_Documentos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Clientes_Documentos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Clientes_Documentos_bool_exp'] | null;
      },
      ValueTypes['identidades_Clientes_Documentos']
    ];
    Clientes_Documentos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Clientes_Documentos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Clientes_Documentos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Clientes_Documentos_bool_exp'] | null;
      },
      ValueTypes['identidades_Clientes_Documentos_aggregate']
    ];
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_aggregate']: AliasType<{
    aggregate?: ValueTypes['identidades_Clientes_Documentos_Situacoes_aggregate_fields'];
    nodes?: ValueTypes['identidades_Clientes_Documentos_Situacoes'];
    __typename?: true;
  }>;
  /** aggregate fields of "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['identidades_Clientes_Documentos_Situacoes_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['identidades_Clientes_Documentos_Situacoes_max_fields'];
    min?: ValueTypes['identidades_Clientes_Documentos_Situacoes_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "identidades.Clientes_Documentos_Situacoes". All fields are combined with a logical 'AND'. */
  ['identidades_Clientes_Documentos_Situacoes_bool_exp']: {
    Clientes_Documentos?:
      | ValueTypes['identidades_Clientes_Documentos_bool_exp']
      | null;
    Comentario?: ValueTypes['String_comparison_exp'] | null;
    Valor?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['identidades_Clientes_Documentos_Situacoes_bool_exp'][];
    _not?:
      | ValueTypes['identidades_Clientes_Documentos_Situacoes_bool_exp']
      | null;
    _or?: ValueTypes['identidades_Clientes_Documentos_Situacoes_bool_exp'][];
  };
  /** unique or primary key constraints on table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_constraint']: identidades_Clientes_Documentos_Situacoes_constraint;
  ['identidades_Clientes_Documentos_Situacoes_enum']: identidades_Clientes_Documentos_Situacoes_enum;
  /** Boolean expression to compare columns of type "identidades_Clientes_Documentos_Situacoes_enum". All fields are combined with logical 'AND'. */
  ['identidades_Clientes_Documentos_Situacoes_enum_comparison_exp']: {
    _eq?: ValueTypes['identidades_Clientes_Documentos_Situacoes_enum'] | null;
    _in?: ValueTypes['identidades_Clientes_Documentos_Situacoes_enum'][];
    _is_null?: boolean | null;
    _neq?: ValueTypes['identidades_Clientes_Documentos_Situacoes_enum'] | null;
    _nin?: ValueTypes['identidades_Clientes_Documentos_Situacoes_enum'][];
  };
  /** input type for inserting data into table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_insert_input']: {
    Clientes_Documentos?:
      | ValueTypes['identidades_Clientes_Documentos_arr_rel_insert_input']
      | null;
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** aggregate max on columns */
  ['identidades_Clientes_Documentos_Situacoes_max_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['identidades_Clientes_Documentos_Situacoes_min_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['identidades_Clientes_Documentos_Situacoes'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_obj_rel_insert_input']: {
    data: ValueTypes['identidades_Clientes_Documentos_Situacoes_insert_input'];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['identidades_Clientes_Documentos_Situacoes_on_conflict']
      | null;
  };
  /** on conflict condition type for table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_on_conflict']: {
    constraint: ValueTypes['identidades_Clientes_Documentos_Situacoes_constraint'];
    update_columns: ValueTypes['identidades_Clientes_Documentos_Situacoes_update_column'][];
    where?:
      | ValueTypes['identidades_Clientes_Documentos_Situacoes_bool_exp']
      | null;
  };
  /** Ordering options when selecting data from "identidades.Clientes_Documentos_Situacoes". */
  ['identidades_Clientes_Documentos_Situacoes_order_by']: {
    Clientes_Documentos_aggregate?:
      | ValueTypes['identidades_Clientes_Documentos_aggregate_order_by']
      | null;
    Comentario?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: identidades_Clientes_Documentos_Situacoes */
  ['identidades_Clientes_Documentos_Situacoes_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_select_column']: identidades_Clientes_Documentos_Situacoes_select_column;
  /** input type for updating data in table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_set_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** update columns of table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_update_column']: identidades_Clientes_Documentos_Situacoes_update_column;
  /** aggregated selection of "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_aggregate']: AliasType<{
    aggregate?: ValueTypes['identidades_Clientes_Documentos_aggregate_fields'];
    nodes?: ValueTypes['identidades_Clientes_Documentos'];
    __typename?: true;
  }>;
  /** aggregate fields of "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['identidades_Clientes_Documentos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['identidades_Clientes_Documentos_max_fields'];
    min?: ValueTypes['identidades_Clientes_Documentos_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['identidades_Clientes_Documentos_max_order_by'] | null;
    min?: ValueTypes['identidades_Clientes_Documentos_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_arr_rel_insert_input']: {
    data: ValueTypes['identidades_Clientes_Documentos_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['identidades_Clientes_Documentos_on_conflict']
      | null;
  };
  /** Boolean expression to filter rows from the table "identidades.Clientes_Documentos". All fields are combined with a logical 'AND'. */
  ['identidades_Clientes_Documentos_bool_exp']: {
    DataAprovado?: ValueTypes['timestamptz_comparison_exp'] | null;
    DataRecusado?: ValueTypes['timestamptz_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    MotivoRecusa?: ValueTypes['String_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_bool_exp'] | null;
    Pessoa_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Situacao?:
      | ValueTypes['identidades_Clientes_Documentos_Situacoes_bool_exp']
      | null;
    Situacao_Id?:
      | ValueTypes['identidades_Clientes_Documentos_Situacoes_enum_comparison_exp']
      | null;
    _and?: ValueTypes['identidades_Clientes_Documentos_bool_exp'][];
    _not?: ValueTypes['identidades_Clientes_Documentos_bool_exp'] | null;
    _or?: ValueTypes['identidades_Clientes_Documentos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_constraint']: identidades_Clientes_Documentos_constraint;
  /** input type for inserting data into table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_insert_input']: {
    DataAprovado?: ValueTypes['timestamptz'] | null;
    DataRecusado?: ValueTypes['timestamptz'] | null;
    Id?: ValueTypes['uuid'] | null;
    MotivoRecusa?: string | null;
    Nome?: string | null;
    Pessoa?: ValueTypes['identidades_Pessoas_obj_rel_insert_input'] | null;
    Pessoa_Id?: ValueTypes['uuid'] | null;
    Situacao?:
      | ValueTypes['identidades_Clientes_Documentos_Situacoes_obj_rel_insert_input']
      | null;
    Situacao_Id?:
      | ValueTypes['identidades_Clientes_Documentos_Situacoes_enum']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['identidades_Clientes_Documentos_max_fields']: AliasType<{
    DataAprovado?: true;
    DataRecusado?: true;
    Id?: true;
    MotivoRecusa?: true;
    Nome?: true;
    Pessoa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_max_order_by']: {
    DataAprovado?: ValueTypes['order_by'] | null;
    DataRecusado?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    MotivoRecusa?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Pessoa_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['identidades_Clientes_Documentos_min_fields']: AliasType<{
    DataAprovado?: true;
    DataRecusado?: true;
    Id?: true;
    MotivoRecusa?: true;
    Nome?: true;
    Pessoa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_min_order_by']: {
    DataAprovado?: ValueTypes['order_by'] | null;
    DataRecusado?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    MotivoRecusa?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Pessoa_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['identidades_Clientes_Documentos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_on_conflict']: {
    constraint: ValueTypes['identidades_Clientes_Documentos_constraint'];
    update_columns: ValueTypes['identidades_Clientes_Documentos_update_column'][];
    where?: ValueTypes['identidades_Clientes_Documentos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "identidades.Clientes_Documentos". */
  ['identidades_Clientes_Documentos_order_by']: {
    DataAprovado?: ValueTypes['order_by'] | null;
    DataRecusado?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    MotivoRecusa?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_order_by'] | null;
    Pessoa_Id?: ValueTypes['order_by'] | null;
    Situacao?:
      | ValueTypes['identidades_Clientes_Documentos_Situacoes_order_by']
      | null;
    Situacao_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: identidades_Clientes_Documentos */
  ['identidades_Clientes_Documentos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_select_column']: identidades_Clientes_Documentos_select_column;
  /** input type for updating data in table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_set_input']: {
    DataAprovado?: ValueTypes['timestamptz'] | null;
    DataRecusado?: ValueTypes['timestamptz'] | null;
    Id?: ValueTypes['uuid'] | null;
    MotivoRecusa?: string | null;
    Nome?: string | null;
    Pessoa_Id?: ValueTypes['uuid'] | null;
    Situacao_Id?:
      | ValueTypes['identidades_Clientes_Documentos_Situacoes_enum']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_update_column']: identidades_Clientes_Documentos_update_column;
  /** aggregated selection of "identidades.Clientes" */
  ['identidades_Clientes_aggregate']: AliasType<{
    aggregate?: ValueTypes['identidades_Clientes_aggregate_fields'];
    nodes?: ValueTypes['identidades_Clientes'];
    __typename?: true;
  }>;
  /** aggregate fields of "identidades.Clientes" */
  ['identidades_Clientes_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['identidades_Clientes_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['identidades_Clientes_max_fields'];
    min?: ValueTypes['identidades_Clientes_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "identidades.Clientes". All fields are combined with a logical 'AND'. */
  ['identidades_Clientes_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Leads?: ValueTypes['clientes_Leads_bool_exp'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_bool_exp'] | null;
    Pessoa_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Usuarios?: ValueTypes['autenticacao_Usuarios_bool_exp'] | null;
    Veiculos?: ValueTypes['clientes_Veiculos_bool_exp'] | null;
    VeiculosAtivos?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
    _and?: ValueTypes['identidades_Clientes_bool_exp'][];
    _not?: ValueTypes['identidades_Clientes_bool_exp'] | null;
    _or?: ValueTypes['identidades_Clientes_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "identidades.Clientes" */
  ['identidades_Clientes_constraint']: identidades_Clientes_constraint;
  /** input type for inserting data into table "identidades.Clientes" */
  ['identidades_Clientes_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Leads?: ValueTypes['clientes_Leads_arr_rel_insert_input'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_obj_rel_insert_input'] | null;
    Pessoa_Id?: ValueTypes['uuid'] | null;
    Usuarios?: ValueTypes['autenticacao_Usuarios_arr_rel_insert_input'] | null;
    Veiculos?: ValueTypes['clientes_Veiculos_arr_rel_insert_input'] | null;
    VeiculosAtivos?:
      | ValueTypes['clientes_VeiculosAtivos_arr_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['identidades_Clientes_max_fields']: AliasType<{
    Id?: true;
    Pessoa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['identidades_Clientes_min_fields']: AliasType<{
    Id?: true;
    Pessoa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "identidades.Clientes" */
  ['identidades_Clientes_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['identidades_Clientes'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "identidades.Clientes" */
  ['identidades_Clientes_obj_rel_insert_input']: {
    data: ValueTypes['identidades_Clientes_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['identidades_Clientes_on_conflict'] | null;
  };
  /** on conflict condition type for table "identidades.Clientes" */
  ['identidades_Clientes_on_conflict']: {
    constraint: ValueTypes['identidades_Clientes_constraint'];
    update_columns: ValueTypes['identidades_Clientes_update_column'][];
    where?: ValueTypes['identidades_Clientes_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "identidades.Clientes". */
  ['identidades_Clientes_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Leads_aggregate?: ValueTypes['clientes_Leads_aggregate_order_by'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_order_by'] | null;
    Pessoa_Id?: ValueTypes['order_by'] | null;
    Usuarios_aggregate?:
      | ValueTypes['autenticacao_Usuarios_aggregate_order_by']
      | null;
    VeiculosAtivos_aggregate?:
      | ValueTypes['clientes_VeiculosAtivos_aggregate_order_by']
      | null;
    Veiculos_aggregate?:
      | ValueTypes['clientes_Veiculos_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: identidades_Clientes */
  ['identidades_Clientes_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "identidades.Clientes" */
  ['identidades_Clientes_select_column']: identidades_Clientes_select_column;
  /** input type for updating data in table "identidades.Clientes" */
  ['identidades_Clientes_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Pessoa_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "identidades.Clientes" */
  ['identidades_Clientes_update_column']: identidades_Clientes_update_column;
  /** columns and relationships of "identidades.Colaboradores" */
  ['identidades_Colaboradores']: AliasType<{
    Id?: true;
    /** An object relationship */
    Pessoa?: ValueTypes['identidades_Pessoas'];
    Pessoa_Id?: true;
    Usuarios?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['autenticacao_Usuarios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['autenticacao_Usuarios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['autenticacao_Usuarios_bool_exp'] | null;
      },
      ValueTypes['autenticacao_Usuarios']
    ];
    Usuarios_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['autenticacao_Usuarios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['autenticacao_Usuarios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['autenticacao_Usuarios_bool_exp'] | null;
      },
      ValueTypes['autenticacao_Usuarios_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "identidades.Colaboradores" */
  ['identidades_Colaboradores_aggregate']: AliasType<{
    aggregate?: ValueTypes['identidades_Colaboradores_aggregate_fields'];
    nodes?: ValueTypes['identidades_Colaboradores'];
    __typename?: true;
  }>;
  /** aggregate fields of "identidades.Colaboradores" */
  ['identidades_Colaboradores_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['identidades_Colaboradores_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['identidades_Colaboradores_max_fields'];
    min?: ValueTypes['identidades_Colaboradores_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['identidades_Colaboradores_max_order_by'] | null;
    min?: ValueTypes['identidades_Colaboradores_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "identidades.Colaboradores" */
  ['identidades_Colaboradores_arr_rel_insert_input']: {
    data: ValueTypes['identidades_Colaboradores_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['identidades_Colaboradores_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "identidades.Colaboradores". All fields are combined with a logical 'AND'. */
  ['identidades_Colaboradores_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_bool_exp'] | null;
    Pessoa_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Usuarios?: ValueTypes['autenticacao_Usuarios_bool_exp'] | null;
    _and?: ValueTypes['identidades_Colaboradores_bool_exp'][];
    _not?: ValueTypes['identidades_Colaboradores_bool_exp'] | null;
    _or?: ValueTypes['identidades_Colaboradores_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "identidades.Colaboradores" */
  ['identidades_Colaboradores_constraint']: identidades_Colaboradores_constraint;
  /** input type for inserting data into table "identidades.Colaboradores" */
  ['identidades_Colaboradores_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_obj_rel_insert_input'] | null;
    Pessoa_Id?: ValueTypes['uuid'] | null;
    Usuarios?: ValueTypes['autenticacao_Usuarios_arr_rel_insert_input'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['identidades_Colaboradores_max_fields']: AliasType<{
    Id?: true;
    Pessoa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Pessoa_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['identidades_Colaboradores_min_fields']: AliasType<{
    Id?: true;
    Pessoa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Pessoa_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "identidades.Colaboradores" */
  ['identidades_Colaboradores_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['identidades_Colaboradores'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "identidades.Colaboradores" */
  ['identidades_Colaboradores_obj_rel_insert_input']: {
    data: ValueTypes['identidades_Colaboradores_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['identidades_Colaboradores_on_conflict'] | null;
  };
  /** on conflict condition type for table "identidades.Colaboradores" */
  ['identidades_Colaboradores_on_conflict']: {
    constraint: ValueTypes['identidades_Colaboradores_constraint'];
    update_columns: ValueTypes['identidades_Colaboradores_update_column'][];
    where?: ValueTypes['identidades_Colaboradores_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "identidades.Colaboradores". */
  ['identidades_Colaboradores_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_order_by'] | null;
    Pessoa_Id?: ValueTypes['order_by'] | null;
    Usuarios_aggregate?:
      | ValueTypes['autenticacao_Usuarios_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: identidades_Colaboradores */
  ['identidades_Colaboradores_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_select_column']: identidades_Colaboradores_select_column;
  /** input type for updating data in table "identidades.Colaboradores" */
  ['identidades_Colaboradores_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Pessoa_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_update_column']: identidades_Colaboradores_update_column;
  /** columns and relationships of "identidades.Fornecedores" */
  ['identidades_Fornecedores']: AliasType<{
    Id?: true;
    /** An object relationship */
    Pessoa?: ValueTypes['identidades_Pessoas'];
    Pessoa_Id?: true;
    PrecoDoKm?: true;
    PrestadorDeServico?: true;
    Vendedores?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Vendedores_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Vendedores_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Vendedores_bool_exp'] | null;
      },
      ValueTypes['identidades_Vendedores']
    ];
    Vendedores_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Vendedores_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Vendedores_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Vendedores_bool_exp'] | null;
      },
      ValueTypes['identidades_Vendedores_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "identidades.Fornecedores" */
  ['identidades_Fornecedores_aggregate']: AliasType<{
    aggregate?: ValueTypes['identidades_Fornecedores_aggregate_fields'];
    nodes?: ValueTypes['identidades_Fornecedores'];
    __typename?: true;
  }>;
  /** aggregate fields of "identidades.Fornecedores" */
  ['identidades_Fornecedores_aggregate_fields']: AliasType<{
    avg?: ValueTypes['identidades_Fornecedores_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['identidades_Fornecedores_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['identidades_Fornecedores_max_fields'];
    min?: ValueTypes['identidades_Fornecedores_min_fields'];
    stddev?: ValueTypes['identidades_Fornecedores_stddev_fields'];
    stddev_pop?: ValueTypes['identidades_Fornecedores_stddev_pop_fields'];
    stddev_samp?: ValueTypes['identidades_Fornecedores_stddev_samp_fields'];
    sum?: ValueTypes['identidades_Fornecedores_sum_fields'];
    var_pop?: ValueTypes['identidades_Fornecedores_var_pop_fields'];
    var_samp?: ValueTypes['identidades_Fornecedores_var_samp_fields'];
    variance?: ValueTypes['identidades_Fornecedores_variance_fields'];
    __typename?: true;
  }>;
  /** aggregate avg on columns */
  ['identidades_Fornecedores_avg_fields']: AliasType<{
    PrecoDoKm?: true;
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "identidades.Fornecedores". All fields are combined with a logical 'AND'. */
  ['identidades_Fornecedores_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_bool_exp'] | null;
    Pessoa_Id?: ValueTypes['uuid_comparison_exp'] | null;
    PrecoDoKm?: ValueTypes['float8_comparison_exp'] | null;
    PrestadorDeServico?: ValueTypes['Boolean_comparison_exp'] | null;
    Vendedores?: ValueTypes['identidades_Vendedores_bool_exp'] | null;
    _and?: ValueTypes['identidades_Fornecedores_bool_exp'][];
    _not?: ValueTypes['identidades_Fornecedores_bool_exp'] | null;
    _or?: ValueTypes['identidades_Fornecedores_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "identidades.Fornecedores" */
  ['identidades_Fornecedores_constraint']: identidades_Fornecedores_constraint;
  /** input type for incrementing numeric columns in table "identidades.Fornecedores" */
  ['identidades_Fornecedores_inc_input']: {
    PrecoDoKm?: ValueTypes['float8'] | null;
  };
  /** input type for inserting data into table "identidades.Fornecedores" */
  ['identidades_Fornecedores_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_obj_rel_insert_input'] | null;
    Pessoa_Id?: ValueTypes['uuid'] | null;
    PrecoDoKm?: ValueTypes['float8'] | null;
    PrestadorDeServico?: boolean | null;
    Vendedores?:
      | ValueTypes['identidades_Vendedores_arr_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['identidades_Fornecedores_max_fields']: AliasType<{
    Id?: true;
    Pessoa_Id?: true;
    PrecoDoKm?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['identidades_Fornecedores_min_fields']: AliasType<{
    Id?: true;
    Pessoa_Id?: true;
    PrecoDoKm?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "identidades.Fornecedores" */
  ['identidades_Fornecedores_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['identidades_Fornecedores'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "identidades.Fornecedores" */
  ['identidades_Fornecedores_obj_rel_insert_input']: {
    data: ValueTypes['identidades_Fornecedores_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['identidades_Fornecedores_on_conflict'] | null;
  };
  /** on conflict condition type for table "identidades.Fornecedores" */
  ['identidades_Fornecedores_on_conflict']: {
    constraint: ValueTypes['identidades_Fornecedores_constraint'];
    update_columns: ValueTypes['identidades_Fornecedores_update_column'][];
    where?: ValueTypes['identidades_Fornecedores_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "identidades.Fornecedores". */
  ['identidades_Fornecedores_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_order_by'] | null;
    Pessoa_Id?: ValueTypes['order_by'] | null;
    PrecoDoKm?: ValueTypes['order_by'] | null;
    PrestadorDeServico?: ValueTypes['order_by'] | null;
    Vendedores_aggregate?:
      | ValueTypes['identidades_Vendedores_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: identidades_Fornecedores */
  ['identidades_Fornecedores_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "identidades.Fornecedores" */
  ['identidades_Fornecedores_select_column']: identidades_Fornecedores_select_column;
  /** input type for updating data in table "identidades.Fornecedores" */
  ['identidades_Fornecedores_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Pessoa_Id?: ValueTypes['uuid'] | null;
    PrecoDoKm?: ValueTypes['float8'] | null;
    PrestadorDeServico?: boolean | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['identidades_Fornecedores_stddev_fields']: AliasType<{
    PrecoDoKm?: true;
    __typename?: true;
  }>;
  /** aggregate stddev_pop on columns */
  ['identidades_Fornecedores_stddev_pop_fields']: AliasType<{
    PrecoDoKm?: true;
    __typename?: true;
  }>;
  /** aggregate stddev_samp on columns */
  ['identidades_Fornecedores_stddev_samp_fields']: AliasType<{
    PrecoDoKm?: true;
    __typename?: true;
  }>;
  /** aggregate sum on columns */
  ['identidades_Fornecedores_sum_fields']: AliasType<{
    PrecoDoKm?: true;
    __typename?: true;
  }>;
  /** update columns of table "identidades.Fornecedores" */
  ['identidades_Fornecedores_update_column']: identidades_Fornecedores_update_column;
  /** aggregate var_pop on columns */
  ['identidades_Fornecedores_var_pop_fields']: AliasType<{
    PrecoDoKm?: true;
    __typename?: true;
  }>;
  /** aggregate var_samp on columns */
  ['identidades_Fornecedores_var_samp_fields']: AliasType<{
    PrecoDoKm?: true;
    __typename?: true;
  }>;
  /** aggregate variance on columns */
  ['identidades_Fornecedores_variance_fields']: AliasType<{
    PrecoDoKm?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "identidades.Logs" */
  ['identidades_Logs']: AliasType<{
    DadosAntigos?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    DadosNovos?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Id?: true;
    Operacao?: true;
    Tipo?: true;
    Tipo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "identidades.Logs" */
  ['identidades_Logs_aggregate']: AliasType<{
    aggregate?: ValueTypes['identidades_Logs_aggregate_fields'];
    nodes?: ValueTypes['identidades_Logs'];
    __typename?: true;
  }>;
  /** aggregate fields of "identidades.Logs" */
  ['identidades_Logs_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['identidades_Logs_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['identidades_Logs_max_fields'];
    min?: ValueTypes['identidades_Logs_min_fields'];
    __typename?: true;
  }>;
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Logs_append_input']: {
    DadosAntigos?: ValueTypes['jsonb'] | null;
    DadosNovos?: ValueTypes['jsonb'] | null;
  };
  /** Boolean expression to filter rows from the table "identidades.Logs". All fields are combined with a logical 'AND'. */
  ['identidades_Logs_bool_exp']: {
    DadosAntigos?: ValueTypes['jsonb_comparison_exp'] | null;
    DadosNovos?: ValueTypes['jsonb_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Operacao?: ValueTypes['String_comparison_exp'] | null;
    Tipo?: ValueTypes['String_comparison_exp'] | null;
    Tipo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['identidades_Logs_bool_exp'][];
    _not?: ValueTypes['identidades_Logs_bool_exp'] | null;
    _or?: ValueTypes['identidades_Logs_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "identidades.Logs" */
  ['identidades_Logs_constraint']: identidades_Logs_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['identidades_Logs_delete_at_path_input']: {
    DadosAntigos?: string[];
    DadosNovos?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['identidades_Logs_delete_elem_input']: {
    DadosAntigos?: number | null;
    DadosNovos?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['identidades_Logs_delete_key_input']: {
    DadosAntigos?: string | null;
    DadosNovos?: string | null;
  };
  /** input type for inserting data into table "identidades.Logs" */
  ['identidades_Logs_insert_input']: {
    DadosAntigos?: ValueTypes['jsonb'] | null;
    DadosNovos?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    Operacao?: string | null;
    Tipo?: string | null;
    Tipo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['identidades_Logs_max_fields']: AliasType<{
    Id?: true;
    Operacao?: true;
    Tipo?: true;
    Tipo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['identidades_Logs_min_fields']: AliasType<{
    Id?: true;
    Operacao?: true;
    Tipo?: true;
    Tipo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "identidades.Logs" */
  ['identidades_Logs_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['identidades_Logs'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "identidades.Logs" */
  ['identidades_Logs_on_conflict']: {
    constraint: ValueTypes['identidades_Logs_constraint'];
    update_columns: ValueTypes['identidades_Logs_update_column'][];
    where?: ValueTypes['identidades_Logs_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "identidades.Logs". */
  ['identidades_Logs_order_by']: {
    DadosAntigos?: ValueTypes['order_by'] | null;
    DadosNovos?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Operacao?: ValueTypes['order_by'] | null;
    Tipo?: ValueTypes['order_by'] | null;
    Tipo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: identidades_Logs */
  ['identidades_Logs_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Logs_prepend_input']: {
    DadosAntigos?: ValueTypes['jsonb'] | null;
    DadosNovos?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "identidades.Logs" */
  ['identidades_Logs_select_column']: identidades_Logs_select_column;
  /** input type for updating data in table "identidades.Logs" */
  ['identidades_Logs_set_input']: {
    DadosAntigos?: ValueTypes['jsonb'] | null;
    DadosNovos?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    Operacao?: string | null;
    Tipo?: string | null;
    Tipo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "identidades.Logs" */
  ['identidades_Logs_update_column']: identidades_Logs_update_column;
  /** columns and relationships of "identidades.Pessoas" */
  ['identidades_Pessoas']: AliasType<{
    /** An object relationship */
    Cliente?: ValueTypes['identidades_Clientes'];
    Colaboradores?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Colaboradores_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Colaboradores_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Colaboradores_bool_exp'] | null;
      },
      ValueTypes['identidades_Colaboradores']
    ];
    Colaboradores_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Colaboradores_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Colaboradores_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Colaboradores_bool_exp'] | null;
      },
      ValueTypes['identidades_Colaboradores_aggregate']
    ];
    DadosDaApi?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Documentos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Clientes_Documentos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Clientes_Documentos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Clientes_Documentos_bool_exp'] | null;
      },
      ValueTypes['identidades_Clientes_Documentos']
    ];
    Documentos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Clientes_Documentos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Clientes_Documentos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Clientes_Documentos_bool_exp'] | null;
      },
      ValueTypes['identidades_Clientes_Documentos_aggregate']
    ];
    /** An object relationship */
    Fornecedor?: ValueTypes['identidades_Fornecedores'];
    Id?: true;
    Identificador?: true;
    Nome?: true;
    PessoaJuridica?: true;
    Representantes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Representantes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Representantes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Representantes_bool_exp'] | null;
      },
      ValueTypes['identidades_Representantes']
    ];
    Representantes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Representantes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Representantes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Representantes_bool_exp'] | null;
      },
      ValueTypes['identidades_Representantes_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "identidades.Pessoas" */
  ['identidades_Pessoas_aggregate']: AliasType<{
    aggregate?: ValueTypes['identidades_Pessoas_aggregate_fields'];
    nodes?: ValueTypes['identidades_Pessoas'];
    __typename?: true;
  }>;
  /** aggregate fields of "identidades.Pessoas" */
  ['identidades_Pessoas_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['identidades_Pessoas_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['identidades_Pessoas_max_fields'];
    min?: ValueTypes['identidades_Pessoas_min_fields'];
    __typename?: true;
  }>;
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Pessoas_append_input']: {
    DadosDaApi?: ValueTypes['jsonb'] | null;
  };
  /** Boolean expression to filter rows from the table "identidades.Pessoas". All fields are combined with a logical 'AND'. */
  ['identidades_Pessoas_bool_exp']: {
    Cliente?: ValueTypes['identidades_Clientes_bool_exp'] | null;
    Colaboradores?: ValueTypes['identidades_Colaboradores_bool_exp'] | null;
    DadosDaApi?: ValueTypes['jsonb_comparison_exp'] | null;
    Documentos?: ValueTypes['identidades_Clientes_Documentos_bool_exp'] | null;
    Fornecedor?: ValueTypes['identidades_Fornecedores_bool_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Identificador?: ValueTypes['String_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    PessoaJuridica?: ValueTypes['Boolean_comparison_exp'] | null;
    Representantes?: ValueTypes['identidades_Representantes_bool_exp'] | null;
    _and?: ValueTypes['identidades_Pessoas_bool_exp'][];
    _not?: ValueTypes['identidades_Pessoas_bool_exp'] | null;
    _or?: ValueTypes['identidades_Pessoas_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "identidades.Pessoas" */
  ['identidades_Pessoas_constraint']: identidades_Pessoas_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['identidades_Pessoas_delete_at_path_input']: {
    DadosDaApi?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['identidades_Pessoas_delete_elem_input']: {
    DadosDaApi?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['identidades_Pessoas_delete_key_input']: {
    DadosDaApi?: string | null;
  };
  /** input type for inserting data into table "identidades.Pessoas" */
  ['identidades_Pessoas_insert_input']: {
    Cliente?: ValueTypes['identidades_Clientes_obj_rel_insert_input'] | null;
    Colaboradores?:
      | ValueTypes['identidades_Colaboradores_arr_rel_insert_input']
      | null;
    DadosDaApi?: ValueTypes['jsonb'] | null;
    Documentos?:
      | ValueTypes['identidades_Clientes_Documentos_arr_rel_insert_input']
      | null;
    Fornecedor?:
      | ValueTypes['identidades_Fornecedores_obj_rel_insert_input']
      | null;
    Id?: ValueTypes['uuid'] | null;
    Identificador?: string | null;
    Nome?: string | null;
    PessoaJuridica?: boolean | null;
    Representantes?:
      | ValueTypes['identidades_Representantes_arr_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['identidades_Pessoas_max_fields']: AliasType<{
    Id?: true;
    Identificador?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['identidades_Pessoas_min_fields']: AliasType<{
    Id?: true;
    Identificador?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "identidades.Pessoas" */
  ['identidades_Pessoas_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['identidades_Pessoas'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "identidades.Pessoas" */
  ['identidades_Pessoas_obj_rel_insert_input']: {
    data: ValueTypes['identidades_Pessoas_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['identidades_Pessoas_on_conflict'] | null;
  };
  /** on conflict condition type for table "identidades.Pessoas" */
  ['identidades_Pessoas_on_conflict']: {
    constraint: ValueTypes['identidades_Pessoas_constraint'];
    update_columns: ValueTypes['identidades_Pessoas_update_column'][];
    where?: ValueTypes['identidades_Pessoas_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "identidades.Pessoas". */
  ['identidades_Pessoas_order_by']: {
    Cliente?: ValueTypes['identidades_Clientes_order_by'] | null;
    Colaboradores_aggregate?:
      | ValueTypes['identidades_Colaboradores_aggregate_order_by']
      | null;
    DadosDaApi?: ValueTypes['order_by'] | null;
    Documentos_aggregate?:
      | ValueTypes['identidades_Clientes_Documentos_aggregate_order_by']
      | null;
    Fornecedor?: ValueTypes['identidades_Fornecedores_order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Identificador?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    PessoaJuridica?: ValueTypes['order_by'] | null;
    Representantes_aggregate?:
      | ValueTypes['identidades_Representantes_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: identidades_Pessoas */
  ['identidades_Pessoas_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Pessoas_prepend_input']: {
    DadosDaApi?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "identidades.Pessoas" */
  ['identidades_Pessoas_select_column']: identidades_Pessoas_select_column;
  /** input type for updating data in table "identidades.Pessoas" */
  ['identidades_Pessoas_set_input']: {
    DadosDaApi?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    Identificador?: string | null;
    Nome?: string | null;
    PessoaJuridica?: boolean | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "identidades.Pessoas" */
  ['identidades_Pessoas_update_column']: identidades_Pessoas_update_column;
  /** columns and relationships of "identidades.Representantes" */
  ['identidades_Representantes']: AliasType<{
    Id?: true;
    /** An object relationship */
    Pessoa?: ValueTypes['identidades_Pessoas'];
    /** An object relationship */
    PessoaRepresentada?: ValueTypes['identidades_Pessoas'];
    PessoaRepresentada_Id?: true;
    Pessoa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "identidades.Representantes" */
  ['identidades_Representantes_aggregate']: AliasType<{
    aggregate?: ValueTypes['identidades_Representantes_aggregate_fields'];
    nodes?: ValueTypes['identidades_Representantes'];
    __typename?: true;
  }>;
  /** aggregate fields of "identidades.Representantes" */
  ['identidades_Representantes_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['identidades_Representantes_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['identidades_Representantes_max_fields'];
    min?: ValueTypes['identidades_Representantes_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "identidades.Representantes" */
  ['identidades_Representantes_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['identidades_Representantes_max_order_by'] | null;
    min?: ValueTypes['identidades_Representantes_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "identidades.Representantes" */
  ['identidades_Representantes_arr_rel_insert_input']: {
    data: ValueTypes['identidades_Representantes_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['identidades_Representantes_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "identidades.Representantes". All fields are combined with a logical 'AND'. */
  ['identidades_Representantes_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_bool_exp'] | null;
    PessoaRepresentada?: ValueTypes['identidades_Pessoas_bool_exp'] | null;
    PessoaRepresentada_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Pessoa_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['identidades_Representantes_bool_exp'][];
    _not?: ValueTypes['identidades_Representantes_bool_exp'] | null;
    _or?: ValueTypes['identidades_Representantes_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "identidades.Representantes" */
  ['identidades_Representantes_constraint']: identidades_Representantes_constraint;
  /** input type for inserting data into table "identidades.Representantes" */
  ['identidades_Representantes_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_obj_rel_insert_input'] | null;
    PessoaRepresentada?:
      | ValueTypes['identidades_Pessoas_obj_rel_insert_input']
      | null;
    PessoaRepresentada_Id?: ValueTypes['uuid'] | null;
    Pessoa_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['identidades_Representantes_max_fields']: AliasType<{
    Id?: true;
    PessoaRepresentada_Id?: true;
    Pessoa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "identidades.Representantes" */
  ['identidades_Representantes_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    PessoaRepresentada_Id?: ValueTypes['order_by'] | null;
    Pessoa_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['identidades_Representantes_min_fields']: AliasType<{
    Id?: true;
    PessoaRepresentada_Id?: true;
    Pessoa_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "identidades.Representantes" */
  ['identidades_Representantes_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    PessoaRepresentada_Id?: ValueTypes['order_by'] | null;
    Pessoa_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "identidades.Representantes" */
  ['identidades_Representantes_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['identidades_Representantes'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "identidades.Representantes" */
  ['identidades_Representantes_on_conflict']: {
    constraint: ValueTypes['identidades_Representantes_constraint'];
    update_columns: ValueTypes['identidades_Representantes_update_column'][];
    where?: ValueTypes['identidades_Representantes_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "identidades.Representantes". */
  ['identidades_Representantes_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Pessoa?: ValueTypes['identidades_Pessoas_order_by'] | null;
    PessoaRepresentada?: ValueTypes['identidades_Pessoas_order_by'] | null;
    PessoaRepresentada_Id?: ValueTypes['order_by'] | null;
    Pessoa_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: identidades_Representantes */
  ['identidades_Representantes_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "identidades.Representantes" */
  ['identidades_Representantes_select_column']: identidades_Representantes_select_column;
  /** input type for updating data in table "identidades.Representantes" */
  ['identidades_Representantes_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    PessoaRepresentada_Id?: ValueTypes['uuid'] | null;
    Pessoa_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "identidades.Representantes" */
  ['identidades_Representantes_update_column']: identidades_Representantes_update_column;
  /** columns and relationships of "identidades.Vendedores" */
  ['identidades_Vendedores']: AliasType<{
    Emails?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    /** An object relationship */
    Fornecedor?: ValueTypes['identidades_Fornecedores'];
    Fornecedor_Id?: true;
    Id?: true;
    Nome?: true;
    Telefones?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "identidades.Vendedores" */
  ['identidades_Vendedores_aggregate']: AliasType<{
    aggregate?: ValueTypes['identidades_Vendedores_aggregate_fields'];
    nodes?: ValueTypes['identidades_Vendedores'];
    __typename?: true;
  }>;
  /** aggregate fields of "identidades.Vendedores" */
  ['identidades_Vendedores_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['identidades_Vendedores_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['identidades_Vendedores_max_fields'];
    min?: ValueTypes['identidades_Vendedores_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "identidades.Vendedores" */
  ['identidades_Vendedores_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['identidades_Vendedores_max_order_by'] | null;
    min?: ValueTypes['identidades_Vendedores_min_order_by'] | null;
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Vendedores_append_input']: {
    Emails?: ValueTypes['jsonb'] | null;
    Telefones?: ValueTypes['jsonb'] | null;
  };
  /** input type for inserting array relation for remote table "identidades.Vendedores" */
  ['identidades_Vendedores_arr_rel_insert_input']: {
    data: ValueTypes['identidades_Vendedores_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['identidades_Vendedores_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "identidades.Vendedores". All fields are combined with a logical 'AND'. */
  ['identidades_Vendedores_bool_exp']: {
    Emails?: ValueTypes['jsonb_comparison_exp'] | null;
    Fornecedor?: ValueTypes['identidades_Fornecedores_bool_exp'] | null;
    Fornecedor_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Telefones?: ValueTypes['jsonb_comparison_exp'] | null;
    _and?: ValueTypes['identidades_Vendedores_bool_exp'][];
    _not?: ValueTypes['identidades_Vendedores_bool_exp'] | null;
    _or?: ValueTypes['identidades_Vendedores_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "identidades.Vendedores" */
  ['identidades_Vendedores_constraint']: identidades_Vendedores_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['identidades_Vendedores_delete_at_path_input']: {
    Emails?: string[];
    Telefones?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['identidades_Vendedores_delete_elem_input']: {
    Emails?: number | null;
    Telefones?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['identidades_Vendedores_delete_key_input']: {
    Emails?: string | null;
    Telefones?: string | null;
  };
  /** input type for inserting data into table "identidades.Vendedores" */
  ['identidades_Vendedores_insert_input']: {
    Emails?: ValueTypes['jsonb'] | null;
    Fornecedor?:
      | ValueTypes['identidades_Fornecedores_obj_rel_insert_input']
      | null;
    Fornecedor_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Telefones?: ValueTypes['jsonb'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['identidades_Vendedores_max_fields']: AliasType<{
    Fornecedor_Id?: true;
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_max_order_by']: {
    Fornecedor_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['identidades_Vendedores_min_fields']: AliasType<{
    Fornecedor_Id?: true;
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_min_order_by']: {
    Fornecedor_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "identidades.Vendedores" */
  ['identidades_Vendedores_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['identidades_Vendedores'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "identidades.Vendedores" */
  ['identidades_Vendedores_on_conflict']: {
    constraint: ValueTypes['identidades_Vendedores_constraint'];
    update_columns: ValueTypes['identidades_Vendedores_update_column'][];
    where?: ValueTypes['identidades_Vendedores_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "identidades.Vendedores". */
  ['identidades_Vendedores_order_by']: {
    Emails?: ValueTypes['order_by'] | null;
    Fornecedor?: ValueTypes['identidades_Fornecedores_order_by'] | null;
    Fornecedor_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Telefones?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: identidades_Vendedores */
  ['identidades_Vendedores_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Vendedores_prepend_input']: {
    Emails?: ValueTypes['jsonb'] | null;
    Telefones?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_select_column']: identidades_Vendedores_select_column;
  /** input type for updating data in table "identidades.Vendedores" */
  ['identidades_Vendedores_set_input']: {
    Emails?: ValueTypes['jsonb'] | null;
    Fornecedor_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Telefones?: ValueTypes['jsonb'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_update_column']: identidades_Vendedores_update_column;
  ['jsonb']: unknown;
  /** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
  ['jsonb_comparison_exp']: {
    /** is the column contained in the given json value */
    _contained_in?: ValueTypes['jsonb'] | null;
    /** does the column contain the given json value at the top level */
    _contains?: ValueTypes['jsonb'] | null;
    _eq?: ValueTypes['jsonb'] | null;
    _gt?: ValueTypes['jsonb'] | null;
    _gte?: ValueTypes['jsonb'] | null;
    /** does the string exist as a top-level key in the column */
    _has_key?: string | null;
    /** do all of these strings exist as top-level keys in the column */
    _has_keys_all?: string[];
    /** do any of these strings exist as top-level keys in the column */
    _has_keys_any?: string[];
    _in?: ValueTypes['jsonb'][];
    _is_null?: boolean | null;
    _lt?: ValueTypes['jsonb'] | null;
    _lte?: ValueTypes['jsonb'] | null;
    _neq?: ValueTypes['jsonb'] | null;
    _nin?: ValueTypes['jsonb'][];
  };
  /** mutation root */
  ['mutation_root']: AliasType<{
    CadastrarCliente?: [
      {
        Identificador?: ValueTypes['bigint'] | null;
        PessoaJuridica?: boolean | null;
      },
      ValueTypes['CadastrarClienteOutput']
    ];
    CadastrarColaborador?: [
      {
        Identificador?: ValueTypes['bigint'] | null;
        PessoaJuridica?: boolean | null;
      },
      ValueTypes['CadastrarColaboradorOutput']
    ];
    CadastrarFornecedor?: [
      {
        Identificador?: ValueTypes['bigint'] | null;
        PessoaJuridica?: boolean | null;
      },
      ValueTypes['CadastrarFornecedorOutput']
    ];
    CadastrarRepresentante?: [
      {
        Identificador?: ValueTypes['bigint'] | null;
        PessoaJuridica?: boolean | null;
        PessoaRepresentada?: ValueTypes['uuid'] | null;
      },
      ValueTypes['CadastrarRepresentanteOutput']
    ];
    delete_CategoriasDeVeiculos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['CategoriasDeVeiculos_bool_exp'];
      },
      ValueTypes['CategoriasDeVeiculos_mutation_response']
    ];
    delete_CategoriasDeVeiculos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['CategoriasDeVeiculos']
    ];
    delete_EstadosEMunicipios?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['EstadosEMunicipios_bool_exp'];
      },
      ValueTypes['EstadosEMunicipios_mutation_response']
    ];
    delete_EstadosEMunicipios_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['EstadosEMunicipios']
    ];
    delete_atendimentos_EtapasDosFluxos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'];
      },
      ValueTypes['atendimentos_EtapasDosFluxos_mutation_response']
    ];
    delete_atendimentos_EtapasDosFluxos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['atendimentos_EtapasDosFluxos']
    ];
    delete_atendimentos_Fluxos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['atendimentos_Fluxos_bool_exp'];
      },
      ValueTypes['atendimentos_Fluxos_mutation_response']
    ];
    delete_atendimentos_Fluxos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['atendimentos_Fluxos']
    ];
    delete_atendimentos_Tickets?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['atendimentos_Tickets_bool_exp'];
      },
      ValueTypes['atendimentos_Tickets_mutation_response']
    ];
    delete_atendimentos_Tickets_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['atendimentos_Tickets']
    ];
    delete_atendimentos_TiposDeTickets?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['atendimentos_TiposDeTickets_bool_exp'];
      },
      ValueTypes['atendimentos_TiposDeTickets_mutation_response']
    ];
    delete_atendimentos_TiposDeTickets_by_pk?: [
      { Valor: string },
      ValueTypes['atendimentos_TiposDeTickets']
    ];
    delete_autenticacao_Atendentes?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['autenticacao_Atendentes_bool_exp'];
      },
      ValueTypes['autenticacao_Atendentes_mutation_response']
    ];
    delete_autenticacao_Atendentes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['autenticacao_Atendentes']
    ];
    delete_autenticacao_Usuarios?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['autenticacao_Usuarios_bool_exp'];
      },
      ValueTypes['autenticacao_Usuarios_mutation_response']
    ];
    delete_autenticacao_Usuarios_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['autenticacao_Usuarios']
    ];
    delete_clientes_Leads?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['clientes_Leads_bool_exp'];
      },
      ValueTypes['clientes_Leads_mutation_response']
    ];
    delete_clientes_Leads_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_Leads']
    ];
    delete_clientes_PerfisComerciais?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['clientes_PerfisComerciais_bool_exp'];
      },
      ValueTypes['clientes_PerfisComerciais_mutation_response']
    ];
    delete_clientes_PerfisComerciais_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_PerfisComerciais']
    ];
    delete_clientes_Veiculos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['clientes_Veiculos_bool_exp'];
      },
      ValueTypes['clientes_Veiculos_mutation_response']
    ];
    delete_clientes_VeiculosAtivos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['clientes_VeiculosAtivos_bool_exp'];
      },
      ValueTypes['clientes_VeiculosAtivos_mutation_response']
    ];
    delete_clientes_VeiculosAtivos_Beneficios?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['clientes_VeiculosAtivos_Beneficios_bool_exp'];
      },
      ValueTypes['clientes_VeiculosAtivos_Beneficios_mutation_response']
    ];
    delete_clientes_VeiculosAtivos_Beneficios_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_VeiculosAtivos_Beneficios']
    ];
    delete_clientes_VeiculosAtivos_Produtos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['clientes_VeiculosAtivos_Produtos_bool_exp'];
      },
      ValueTypes['clientes_VeiculosAtivos_Produtos_mutation_response']
    ];
    delete_clientes_VeiculosAtivos_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_VeiculosAtivos_Produtos']
    ];
    delete_clientes_VeiculosAtivos_Servicos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['clientes_VeiculosAtivos_Servicos_bool_exp'];
      },
      ValueTypes['clientes_VeiculosAtivos_Servicos_mutation_response']
    ];
    delete_clientes_VeiculosAtivos_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_VeiculosAtivos_Servicos']
    ];
    delete_clientes_VeiculosAtivos_Situacao?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['clientes_VeiculosAtivos_Situacao_bool_exp'];
      },
      ValueTypes['clientes_VeiculosAtivos_Situacao_mutation_response']
    ];
    delete_clientes_VeiculosAtivos_Situacao_by_pk?: [
      { Valor: string },
      ValueTypes['clientes_VeiculosAtivos_Situacao']
    ];
    delete_clientes_VeiculosAtivos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_VeiculosAtivos']
    ];
    delete_clientes_Veiculos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_Veiculos']
    ];
    delete_comercial_Acoes?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Acoes_bool_exp'];
      },
      ValueTypes['comercial_Acoes_mutation_response']
    ];
    delete_comercial_Acoes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Acoes']
    ];
    delete_comercial_Atributos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Atributos_bool_exp'];
      },
      ValueTypes['comercial_Atributos_mutation_response']
    ];
    delete_comercial_Atributos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Atributos']
    ];
    delete_comercial_Coberturas?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Coberturas_bool_exp'];
      },
      ValueTypes['comercial_Coberturas_mutation_response']
    ];
    delete_comercial_Coberturas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Coberturas']
    ];
    delete_comercial_Combos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Combos_bool_exp'];
      },
      ValueTypes['comercial_Combos_mutation_response']
    ];
    delete_comercial_Combos_Combos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Combos_Combos_bool_exp'];
      },
      ValueTypes['comercial_Combos_Combos_mutation_response']
    ];
    delete_comercial_Combos_Combos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos_Combos']
    ];
    delete_comercial_Combos_Planos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Combos_Planos_bool_exp'];
      },
      ValueTypes['comercial_Combos_Planos_mutation_response']
    ];
    delete_comercial_Combos_Planos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos_Planos']
    ];
    delete_comercial_Combos_Precos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Combos_Precos_bool_exp'];
      },
      ValueTypes['comercial_Combos_Precos_mutation_response']
    ];
    delete_comercial_Combos_Precos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos_Precos']
    ];
    delete_comercial_Combos_Produtos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Combos_Produtos_bool_exp'];
      },
      ValueTypes['comercial_Combos_Produtos_mutation_response']
    ];
    delete_comercial_Combos_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos_Produtos']
    ];
    delete_comercial_Combos_Servicos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Combos_Servicos_bool_exp'];
      },
      ValueTypes['comercial_Combos_Servicos_mutation_response']
    ];
    delete_comercial_Combos_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos_Servicos']
    ];
    delete_comercial_Combos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos']
    ];
    delete_comercial_Condicionais?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Condicionais_bool_exp'];
      },
      ValueTypes['comercial_Condicionais_mutation_response']
    ];
    delete_comercial_CondicionaisSituacoes?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_CondicionaisSituacoes_bool_exp'];
      },
      ValueTypes['comercial_CondicionaisSituacoes_mutation_response']
    ];
    delete_comercial_CondicionaisSituacoes_by_pk?: [
      { Valor: string },
      ValueTypes['comercial_CondicionaisSituacoes']
    ];
    delete_comercial_Condicionais_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Condicionais']
    ];
    delete_comercial_ContratosBase?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_ContratosBase_bool_exp'];
      },
      ValueTypes['comercial_ContratosBase_mutation_response']
    ];
    delete_comercial_ContratosBase_Versoes?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_ContratosBase_Versoes_bool_exp'];
      },
      ValueTypes['comercial_ContratosBase_Versoes_mutation_response']
    ];
    delete_comercial_ContratosBase_Versoes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_ContratosBase_Versoes']
    ];
    delete_comercial_ContratosBase_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_ContratosBase']
    ];
    delete_comercial_Planos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Planos_bool_exp'];
      },
      ValueTypes['comercial_Planos_mutation_response']
    ];
    delete_comercial_Planos_Condicionais?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Planos_Condicionais_bool_exp'];
      },
      ValueTypes['comercial_Planos_Condicionais_mutation_response']
    ];
    delete_comercial_Planos_Condicionais_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Planos_Condicionais']
    ];
    delete_comercial_Planos_Precos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Planos_Precos_bool_exp'];
      },
      ValueTypes['comercial_Planos_Precos_mutation_response']
    ];
    delete_comercial_Planos_Precos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Planos_Precos']
    ];
    delete_comercial_Planos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Planos']
    ];
    delete_comercial_PrestadoresDeServicos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_PrestadoresDeServicos_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_mutation_response']
    ];
    delete_comercial_PrestadoresDeServicos_Produtos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_mutation_response']
    ];
    delete_comercial_PrestadoresDeServicos_Produtos_Itens?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response']
    ];
    delete_comercial_PrestadoresDeServicos_Produtos_Itens_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens']
    ];
    delete_comercial_PrestadoresDeServicos_Produtos_Precos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response']
    ];
    delete_comercial_PrestadoresDeServicos_Produtos_Precos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    ];
    delete_comercial_PrestadoresDeServicos_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos']
    ];
    delete_comercial_PrestadoresDeServicos_Servicos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_mutation_response']
    ];
    delete_comercial_PrestadoresDeServicos_Servicos_Precos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response']
    ];
    delete_comercial_PrestadoresDeServicos_Servicos_Precos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    ];
    delete_comercial_PrestadoresDeServicos_Servicos_Tarifas?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response']
    ];
    delete_comercial_PrestadoresDeServicos_Servicos_Tarifas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    ];
    delete_comercial_PrestadoresDeServicos_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos']
    ];
    delete_comercial_PrestadoresDeServicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos']
    ];
    delete_comercial_Produtos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Produtos_bool_exp'];
      },
      ValueTypes['comercial_Produtos_mutation_response']
    ];
    delete_comercial_Produtos_Atributos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Produtos_Atributos_bool_exp'];
      },
      ValueTypes['comercial_Produtos_Atributos_mutation_response']
    ];
    delete_comercial_Produtos_Atributos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Produtos_Atributos']
    ];
    delete_comercial_Produtos_Oportunidades?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'];
      },
      ValueTypes['comercial_Produtos_Oportunidades_mutation_response']
    ];
    delete_comercial_Produtos_Oportunidades_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Produtos_Oportunidades']
    ];
    delete_comercial_Produtos_Produtos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Produtos_Produtos_bool_exp'];
      },
      ValueTypes['comercial_Produtos_Produtos_mutation_response']
    ];
    delete_comercial_Produtos_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Produtos_Produtos']
    ];
    delete_comercial_Produtos_Servicos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Produtos_Servicos_bool_exp'];
      },
      ValueTypes['comercial_Produtos_Servicos_mutation_response']
    ];
    delete_comercial_Produtos_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Produtos_Servicos']
    ];
    delete_comercial_Produtos_Tipos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Produtos_Tipos_bool_exp'];
      },
      ValueTypes['comercial_Produtos_Tipos_mutation_response']
    ];
    delete_comercial_Produtos_Tipos_by_pk?: [
      { Valor: string },
      ValueTypes['comercial_Produtos_Tipos']
    ];
    delete_comercial_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Produtos']
    ];
    delete_comercial_Servicos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Servicos_bool_exp'];
      },
      ValueTypes['comercial_Servicos_mutation_response']
    ];
    delete_comercial_Servicos_Atributos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Servicos_Atributos_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Atributos_mutation_response']
    ];
    delete_comercial_Servicos_Atributos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos_Atributos']
    ];
    delete_comercial_Servicos_Oportunidades?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Oportunidades_mutation_response']
    ];
    delete_comercial_Servicos_Oportunidades_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos_Oportunidades']
    ];
    delete_comercial_Servicos_Produtos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Servicos_Produtos_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Produtos_mutation_response']
    ];
    delete_comercial_Servicos_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos_Produtos']
    ];
    delete_comercial_Servicos_Servicos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Servicos_Servicos_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Servicos_mutation_response']
    ];
    delete_comercial_Servicos_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos_Servicos']
    ];
    delete_comercial_Servicos_Tarifas?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Servicos_Tarifas_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Tarifas_mutation_response']
    ];
    delete_comercial_Servicos_Tarifas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos_Tarifas']
    ];
    delete_comercial_Servicos_Tipos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Servicos_Tipos_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Tipos_mutation_response']
    ];
    delete_comercial_Servicos_Tipos_by_pk?: [
      { Valor: string },
      ValueTypes['comercial_Servicos_Tipos']
    ];
    delete_comercial_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos']
    ];
    delete_comercial_Tarifas?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['comercial_Tarifas_bool_exp'];
      },
      ValueTypes['comercial_Tarifas_mutation_response']
    ];
    delete_comercial_Tarifas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Tarifas']
    ];
    delete_contatos_Emails?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['contatos_Emails_bool_exp'];
      },
      ValueTypes['contatos_Emails_mutation_response']
    ];
    delete_contatos_Emails_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Emails']
    ];
    delete_contatos_Enderecos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['contatos_Enderecos_bool_exp'];
      },
      ValueTypes['contatos_Enderecos_mutation_response']
    ];
    delete_contatos_Enderecos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Enderecos']
    ];
    delete_contatos_Logs?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['contatos_Logs_bool_exp'];
      },
      ValueTypes['contatos_Logs_mutation_response']
    ];
    delete_contatos_Logs_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Logs']
    ];
    delete_contatos_Telefones?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['contatos_Telefones_bool_exp'];
      },
      ValueTypes['contatos_Telefones_mutation_response']
    ];
    delete_contatos_Telefones_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Telefones']
    ];
    delete_identidades_Clientes?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['identidades_Clientes_bool_exp'];
      },
      ValueTypes['identidades_Clientes_mutation_response']
    ];
    delete_identidades_Clientes_Documentos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['identidades_Clientes_Documentos_bool_exp'];
      },
      ValueTypes['identidades_Clientes_Documentos_mutation_response']
    ];
    delete_identidades_Clientes_Documentos_Situacoes?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['identidades_Clientes_Documentos_Situacoes_bool_exp'];
      },
      ValueTypes['identidades_Clientes_Documentos_Situacoes_mutation_response']
    ];
    delete_identidades_Clientes_Documentos_Situacoes_by_pk?: [
      { Valor: string },
      ValueTypes['identidades_Clientes_Documentos_Situacoes']
    ];
    delete_identidades_Clientes_Documentos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Clientes_Documentos']
    ];
    delete_identidades_Clientes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Clientes']
    ];
    delete_identidades_Colaboradores?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['identidades_Colaboradores_bool_exp'];
      },
      ValueTypes['identidades_Colaboradores_mutation_response']
    ];
    delete_identidades_Colaboradores_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Colaboradores']
    ];
    delete_identidades_Fornecedores?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['identidades_Fornecedores_bool_exp'];
      },
      ValueTypes['identidades_Fornecedores_mutation_response']
    ];
    delete_identidades_Fornecedores_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Fornecedores']
    ];
    delete_identidades_Logs?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['identidades_Logs_bool_exp'];
      },
      ValueTypes['identidades_Logs_mutation_response']
    ];
    delete_identidades_Logs_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Logs']
    ];
    delete_identidades_Pessoas?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['identidades_Pessoas_bool_exp'];
      },
      ValueTypes['identidades_Pessoas_mutation_response']
    ];
    delete_identidades_Pessoas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Pessoas']
    ];
    delete_identidades_Representantes?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['identidades_Representantes_bool_exp'];
      },
      ValueTypes['identidades_Representantes_mutation_response']
    ];
    delete_identidades_Representantes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Representantes']
    ];
    delete_identidades_Vendedores?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['identidades_Vendedores_bool_exp'];
      },
      ValueTypes['identidades_Vendedores_mutation_response']
    ];
    delete_identidades_Vendedores_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Vendedores']
    ];
    delete_propostas_Propostas?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['propostas_Propostas_bool_exp'];
      },
      ValueTypes['propostas_Propostas_mutation_response']
    ];
    delete_propostas_Propostas_Combos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['propostas_Propostas_Combos_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Combos_mutation_response']
    ];
    delete_propostas_Propostas_Combos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Combos']
    ];
    delete_propostas_Propostas_Instalacoes?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['propostas_Propostas_Instalacoes_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Instalacoes_mutation_response']
    ];
    delete_propostas_Propostas_Instalacoes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Instalacoes']
    ];
    delete_propostas_Propostas_Oportunidades?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Oportunidades_mutation_response']
    ];
    delete_propostas_Propostas_Oportunidades_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Oportunidades']
    ];
    delete_propostas_Propostas_Planos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['propostas_Propostas_Planos_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Planos_mutation_response']
    ];
    delete_propostas_Propostas_Planos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Planos']
    ];
    delete_propostas_Propostas_Produtos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['propostas_Propostas_Produtos_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Produtos_mutation_response']
    ];
    delete_propostas_Propostas_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Produtos']
    ];
    delete_propostas_Propostas_Servicos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['propostas_Propostas_Servicos_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Servicos_mutation_response']
    ];
    delete_propostas_Propostas_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Servicos']
    ];
    delete_propostas_Propostas_Situacoes?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['propostas_Propostas_Situacoes_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Situacoes_mutation_response']
    ];
    delete_propostas_Propostas_Situacoes_by_pk?: [
      { Valor: string },
      ValueTypes['propostas_Propostas_Situacoes']
    ];
    delete_propostas_Propostas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas']
    ];
    delete_vendas_GruposDePerguntas?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['vendas_GruposDePerguntas_bool_exp'];
      },
      ValueTypes['vendas_GruposDePerguntas_mutation_response']
    ];
    delete_vendas_GruposDePerguntas_Perguntas?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'];
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas_mutation_response']
    ];
    delete_vendas_GruposDePerguntas_Perguntas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['vendas_GruposDePerguntas_Perguntas']
    ];
    delete_vendas_GruposDePerguntas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['vendas_GruposDePerguntas']
    ];
    delete_vendas_Perguntas?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['vendas_Perguntas_bool_exp'];
      },
      ValueTypes['vendas_Perguntas_mutation_response']
    ];
    delete_vendas_Perguntas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['vendas_Perguntas']
    ];
    delete_vendas_TiposDePagamento?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['vendas_TiposDePagamento_bool_exp'];
      },
      ValueTypes['vendas_TiposDePagamento_mutation_response']
    ];
    delete_vendas_TiposDePagamento_by_pk?: [
      { Valor: string },
      ValueTypes['vendas_TiposDePagamento']
    ];
    delete_vendas_TiposDePrecos?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['vendas_TiposDePrecos_bool_exp'];
      },
      ValueTypes['vendas_TiposDePrecos_mutation_response']
    ];
    delete_vendas_TiposDePrecos_by_pk?: [
      { Valor: string },
      ValueTypes['vendas_TiposDePrecos']
    ];
    delete_vendas_TiposDeRecorrencia?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['vendas_TiposDeRecorrencia_bool_exp'];
      },
      ValueTypes['vendas_TiposDeRecorrencia_mutation_response']
    ];
    delete_vendas_TiposDeRecorrencia_by_pk?: [
      { Valor: string },
      ValueTypes['vendas_TiposDeRecorrencia']
    ];
    insert_CategoriasDeVeiculos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['CategoriasDeVeiculos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['CategoriasDeVeiculos_on_conflict'] | null;
      },
      ValueTypes['CategoriasDeVeiculos_mutation_response']
    ];
    insert_CategoriasDeVeiculos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['CategoriasDeVeiculos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['CategoriasDeVeiculos_on_conflict'] | null;
      },
      ValueTypes['CategoriasDeVeiculos']
    ];
    insert_EstadosEMunicipios?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['EstadosEMunicipios_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['EstadosEMunicipios_on_conflict'] | null;
      },
      ValueTypes['EstadosEMunicipios_mutation_response']
    ];
    insert_EstadosEMunicipios_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['EstadosEMunicipios_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['EstadosEMunicipios_on_conflict'] | null;
      },
      ValueTypes['EstadosEMunicipios']
    ];
    insert_atendimentos_EtapasDosFluxos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['atendimentos_EtapasDosFluxos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['atendimentos_EtapasDosFluxos_on_conflict']
          | null;
      },
      ValueTypes['atendimentos_EtapasDosFluxos_mutation_response']
    ];
    insert_atendimentos_EtapasDosFluxos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['atendimentos_EtapasDosFluxos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['atendimentos_EtapasDosFluxos_on_conflict']
          | null;
      },
      ValueTypes['atendimentos_EtapasDosFluxos']
    ];
    insert_atendimentos_Fluxos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['atendimentos_Fluxos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['atendimentos_Fluxos_on_conflict'] | null;
      },
      ValueTypes['atendimentos_Fluxos_mutation_response']
    ];
    insert_atendimentos_Fluxos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['atendimentos_Fluxos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['atendimentos_Fluxos_on_conflict'] | null;
      },
      ValueTypes['atendimentos_Fluxos']
    ];
    insert_atendimentos_Tickets?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['atendimentos_Tickets_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['atendimentos_Tickets_on_conflict'] | null;
      },
      ValueTypes['atendimentos_Tickets_mutation_response']
    ];
    insert_atendimentos_Tickets_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['atendimentos_Tickets_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['atendimentos_Tickets_on_conflict'] | null;
      },
      ValueTypes['atendimentos_Tickets']
    ];
    insert_atendimentos_TiposDeTickets?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['atendimentos_TiposDeTickets_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['atendimentos_TiposDeTickets_on_conflict']
          | null;
      },
      ValueTypes['atendimentos_TiposDeTickets_mutation_response']
    ];
    insert_atendimentos_TiposDeTickets_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['atendimentos_TiposDeTickets_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['atendimentos_TiposDeTickets_on_conflict']
          | null;
      },
      ValueTypes['atendimentos_TiposDeTickets']
    ];
    insert_autenticacao_Atendentes?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['autenticacao_Atendentes_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['autenticacao_Atendentes_on_conflict'] | null;
      },
      ValueTypes['autenticacao_Atendentes_mutation_response']
    ];
    insert_autenticacao_Atendentes_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['autenticacao_Atendentes_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['autenticacao_Atendentes_on_conflict'] | null;
      },
      ValueTypes['autenticacao_Atendentes']
    ];
    insert_autenticacao_Usuarios?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['autenticacao_Usuarios_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['autenticacao_Usuarios_on_conflict'] | null;
      },
      ValueTypes['autenticacao_Usuarios_mutation_response']
    ];
    insert_autenticacao_Usuarios_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['autenticacao_Usuarios_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['autenticacao_Usuarios_on_conflict'] | null;
      },
      ValueTypes['autenticacao_Usuarios']
    ];
    insert_clientes_Leads?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['clientes_Leads_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['clientes_Leads_on_conflict'] | null;
      },
      ValueTypes['clientes_Leads_mutation_response']
    ];
    insert_clientes_Leads_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['clientes_Leads_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['clientes_Leads_on_conflict'] | null;
      },
      ValueTypes['clientes_Leads']
    ];
    insert_clientes_PerfisComerciais?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['clientes_PerfisComerciais_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['clientes_PerfisComerciais_on_conflict']
          | null;
      },
      ValueTypes['clientes_PerfisComerciais_mutation_response']
    ];
    insert_clientes_PerfisComerciais_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['clientes_PerfisComerciais_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['clientes_PerfisComerciais_on_conflict']
          | null;
      },
      ValueTypes['clientes_PerfisComerciais']
    ];
    insert_clientes_Veiculos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['clientes_Veiculos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['clientes_Veiculos_on_conflict'] | null;
      },
      ValueTypes['clientes_Veiculos_mutation_response']
    ];
    insert_clientes_VeiculosAtivos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['clientes_VeiculosAtivos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['clientes_VeiculosAtivos_on_conflict'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_mutation_response']
    ];
    insert_clientes_VeiculosAtivos_Beneficios?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['clientes_VeiculosAtivos_Beneficios_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['clientes_VeiculosAtivos_Beneficios_on_conflict']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Beneficios_mutation_response']
    ];
    insert_clientes_VeiculosAtivos_Beneficios_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['clientes_VeiculosAtivos_Beneficios_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['clientes_VeiculosAtivos_Beneficios_on_conflict']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Beneficios']
    ];
    insert_clientes_VeiculosAtivos_Produtos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['clientes_VeiculosAtivos_Produtos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['clientes_VeiculosAtivos_Produtos_on_conflict']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Produtos_mutation_response']
    ];
    insert_clientes_VeiculosAtivos_Produtos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['clientes_VeiculosAtivos_Produtos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['clientes_VeiculosAtivos_Produtos_on_conflict']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Produtos']
    ];
    insert_clientes_VeiculosAtivos_Servicos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['clientes_VeiculosAtivos_Servicos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['clientes_VeiculosAtivos_Servicos_on_conflict']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Servicos_mutation_response']
    ];
    insert_clientes_VeiculosAtivos_Servicos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['clientes_VeiculosAtivos_Servicos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['clientes_VeiculosAtivos_Servicos_on_conflict']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Servicos']
    ];
    insert_clientes_VeiculosAtivos_Situacao?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['clientes_VeiculosAtivos_Situacao_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['clientes_VeiculosAtivos_Situacao_on_conflict']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Situacao_mutation_response']
    ];
    insert_clientes_VeiculosAtivos_Situacao_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['clientes_VeiculosAtivos_Situacao_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['clientes_VeiculosAtivos_Situacao_on_conflict']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Situacao']
    ];
    insert_clientes_VeiculosAtivos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['clientes_VeiculosAtivos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['clientes_VeiculosAtivos_on_conflict'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos']
    ];
    insert_clientes_Veiculos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['clientes_Veiculos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['clientes_Veiculos_on_conflict'] | null;
      },
      ValueTypes['clientes_Veiculos']
    ];
    insert_comercial_Acoes?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Acoes_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Acoes_on_conflict'] | null;
      },
      ValueTypes['comercial_Acoes_mutation_response']
    ];
    insert_comercial_Acoes_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Acoes_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Acoes_on_conflict'] | null;
      },
      ValueTypes['comercial_Acoes']
    ];
    insert_comercial_Atributos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Atributos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Atributos_on_conflict'] | null;
      },
      ValueTypes['comercial_Atributos_mutation_response']
    ];
    insert_comercial_Atributos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Atributos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Atributos_on_conflict'] | null;
      },
      ValueTypes['comercial_Atributos']
    ];
    insert_comercial_Coberturas?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Coberturas_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Coberturas_on_conflict'] | null;
      },
      ValueTypes['comercial_Coberturas_mutation_response']
    ];
    insert_comercial_Coberturas_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Coberturas_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Coberturas_on_conflict'] | null;
      },
      ValueTypes['comercial_Coberturas']
    ];
    insert_comercial_Combos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Combos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Combos_on_conflict'] | null;
      },
      ValueTypes['comercial_Combos_mutation_response']
    ];
    insert_comercial_Combos_Combos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Combos_Combos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Combos_Combos_on_conflict'] | null;
      },
      ValueTypes['comercial_Combos_Combos_mutation_response']
    ];
    insert_comercial_Combos_Combos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Combos_Combos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Combos_Combos_on_conflict'] | null;
      },
      ValueTypes['comercial_Combos_Combos']
    ];
    insert_comercial_Combos_Planos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Combos_Planos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Combos_Planos_on_conflict'] | null;
      },
      ValueTypes['comercial_Combos_Planos_mutation_response']
    ];
    insert_comercial_Combos_Planos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Combos_Planos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Combos_Planos_on_conflict'] | null;
      },
      ValueTypes['comercial_Combos_Planos']
    ];
    insert_comercial_Combos_Precos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Combos_Precos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Combos_Precos_on_conflict'] | null;
      },
      ValueTypes['comercial_Combos_Precos_mutation_response']
    ];
    insert_comercial_Combos_Precos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Combos_Precos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Combos_Precos_on_conflict'] | null;
      },
      ValueTypes['comercial_Combos_Precos']
    ];
    insert_comercial_Combos_Produtos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Combos_Produtos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Combos_Produtos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Combos_Produtos_mutation_response']
    ];
    insert_comercial_Combos_Produtos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Combos_Produtos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Combos_Produtos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Combos_Produtos']
    ];
    insert_comercial_Combos_Servicos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Combos_Servicos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Combos_Servicos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Combos_Servicos_mutation_response']
    ];
    insert_comercial_Combos_Servicos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Combos_Servicos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Combos_Servicos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Combos_Servicos']
    ];
    insert_comercial_Combos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Combos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Combos_on_conflict'] | null;
      },
      ValueTypes['comercial_Combos']
    ];
    insert_comercial_Condicionais?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Condicionais_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Condicionais_on_conflict'] | null;
      },
      ValueTypes['comercial_Condicionais_mutation_response']
    ];
    insert_comercial_CondicionaisSituacoes?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_CondicionaisSituacoes_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_CondicionaisSituacoes_on_conflict']
          | null;
      },
      ValueTypes['comercial_CondicionaisSituacoes_mutation_response']
    ];
    insert_comercial_CondicionaisSituacoes_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_CondicionaisSituacoes_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_CondicionaisSituacoes_on_conflict']
          | null;
      },
      ValueTypes['comercial_CondicionaisSituacoes']
    ];
    insert_comercial_Condicionais_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Condicionais_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Condicionais_on_conflict'] | null;
      },
      ValueTypes['comercial_Condicionais']
    ];
    insert_comercial_ContratosBase?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_ContratosBase_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_ContratosBase_on_conflict'] | null;
      },
      ValueTypes['comercial_ContratosBase_mutation_response']
    ];
    insert_comercial_ContratosBase_Versoes?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_ContratosBase_Versoes_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_ContratosBase_Versoes_on_conflict']
          | null;
      },
      ValueTypes['comercial_ContratosBase_Versoes_mutation_response']
    ];
    insert_comercial_ContratosBase_Versoes_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_ContratosBase_Versoes_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_ContratosBase_Versoes_on_conflict']
          | null;
      },
      ValueTypes['comercial_ContratosBase_Versoes']
    ];
    insert_comercial_ContratosBase_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_ContratosBase_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_ContratosBase_on_conflict'] | null;
      },
      ValueTypes['comercial_ContratosBase']
    ];
    insert_comercial_Planos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Planos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Planos_on_conflict'] | null;
      },
      ValueTypes['comercial_Planos_mutation_response']
    ];
    insert_comercial_Planos_Condicionais?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Planos_Condicionais_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Planos_Condicionais_on_conflict']
          | null;
      },
      ValueTypes['comercial_Planos_Condicionais_mutation_response']
    ];
    insert_comercial_Planos_Condicionais_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Planos_Condicionais_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Planos_Condicionais_on_conflict']
          | null;
      },
      ValueTypes['comercial_Planos_Condicionais']
    ];
    insert_comercial_Planos_Precos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Planos_Precos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Planos_Precos_on_conflict'] | null;
      },
      ValueTypes['comercial_Planos_Precos_mutation_response']
    ];
    insert_comercial_Planos_Precos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Planos_Precos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Planos_Precos_on_conflict'] | null;
      },
      ValueTypes['comercial_Planos_Precos']
    ];
    insert_comercial_Planos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Planos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Planos_on_conflict'] | null;
      },
      ValueTypes['comercial_Planos']
    ];
    insert_comercial_PrestadoresDeServicos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_PrestadoresDeServicos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_mutation_response']
    ];
    insert_comercial_PrestadoresDeServicos_Produtos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_PrestadoresDeServicos_Produtos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_mutation_response']
    ];
    insert_comercial_PrestadoresDeServicos_Produtos_Itens?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response']
    ];
    insert_comercial_PrestadoresDeServicos_Produtos_Itens_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens']
    ];
    insert_comercial_PrestadoresDeServicos_Produtos_Precos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response']
    ];
    insert_comercial_PrestadoresDeServicos_Produtos_Precos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    ];
    insert_comercial_PrestadoresDeServicos_Produtos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_PrestadoresDeServicos_Produtos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos']
    ];
    insert_comercial_PrestadoresDeServicos_Servicos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_PrestadoresDeServicos_Servicos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_mutation_response']
    ];
    insert_comercial_PrestadoresDeServicos_Servicos_Precos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response']
    ];
    insert_comercial_PrestadoresDeServicos_Servicos_Precos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    ];
    insert_comercial_PrestadoresDeServicos_Servicos_Tarifas?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response']
    ];
    insert_comercial_PrestadoresDeServicos_Servicos_Tarifas_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    ];
    insert_comercial_PrestadoresDeServicos_Servicos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_PrestadoresDeServicos_Servicos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos']
    ];
    insert_comercial_PrestadoresDeServicos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_PrestadoresDeServicos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_PrestadoresDeServicos_on_conflict']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos']
    ];
    insert_comercial_Produtos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Produtos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Produtos_on_conflict'] | null;
      },
      ValueTypes['comercial_Produtos_mutation_response']
    ];
    insert_comercial_Produtos_Atributos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Produtos_Atributos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Produtos_Atributos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Produtos_Atributos_mutation_response']
    ];
    insert_comercial_Produtos_Atributos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Produtos_Atributos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Produtos_Atributos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Produtos_Atributos']
    ];
    insert_comercial_Produtos_Oportunidades?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Produtos_Oportunidades_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Produtos_Oportunidades_on_conflict']
          | null;
      },
      ValueTypes['comercial_Produtos_Oportunidades_mutation_response']
    ];
    insert_comercial_Produtos_Oportunidades_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Produtos_Oportunidades_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Produtos_Oportunidades_on_conflict']
          | null;
      },
      ValueTypes['comercial_Produtos_Oportunidades']
    ];
    insert_comercial_Produtos_Produtos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Produtos_Produtos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Produtos_Produtos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Produtos_Produtos_mutation_response']
    ];
    insert_comercial_Produtos_Produtos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Produtos_Produtos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Produtos_Produtos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Produtos_Produtos']
    ];
    insert_comercial_Produtos_Servicos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Produtos_Servicos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Produtos_Servicos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Produtos_Servicos_mutation_response']
    ];
    insert_comercial_Produtos_Servicos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Produtos_Servicos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Produtos_Servicos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Produtos_Servicos']
    ];
    insert_comercial_Produtos_Tipos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Produtos_Tipos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Produtos_Tipos_on_conflict'] | null;
      },
      ValueTypes['comercial_Produtos_Tipos_mutation_response']
    ];
    insert_comercial_Produtos_Tipos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Produtos_Tipos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Produtos_Tipos_on_conflict'] | null;
      },
      ValueTypes['comercial_Produtos_Tipos']
    ];
    insert_comercial_Produtos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Produtos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Produtos_on_conflict'] | null;
      },
      ValueTypes['comercial_Produtos']
    ];
    insert_comercial_Servicos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Servicos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Servicos_on_conflict'] | null;
      },
      ValueTypes['comercial_Servicos_mutation_response']
    ];
    insert_comercial_Servicos_Atributos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Servicos_Atributos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Servicos_Atributos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Servicos_Atributos_mutation_response']
    ];
    insert_comercial_Servicos_Atributos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Servicos_Atributos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Servicos_Atributos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Servicos_Atributos']
    ];
    insert_comercial_Servicos_Oportunidades?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Servicos_Oportunidades_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Servicos_Oportunidades_on_conflict']
          | null;
      },
      ValueTypes['comercial_Servicos_Oportunidades_mutation_response']
    ];
    insert_comercial_Servicos_Oportunidades_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Servicos_Oportunidades_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Servicos_Oportunidades_on_conflict']
          | null;
      },
      ValueTypes['comercial_Servicos_Oportunidades']
    ];
    insert_comercial_Servicos_Produtos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Servicos_Produtos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Servicos_Produtos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Servicos_Produtos_mutation_response']
    ];
    insert_comercial_Servicos_Produtos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Servicos_Produtos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Servicos_Produtos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Servicos_Produtos']
    ];
    insert_comercial_Servicos_Servicos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Servicos_Servicos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Servicos_Servicos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Servicos_Servicos_mutation_response']
    ];
    insert_comercial_Servicos_Servicos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Servicos_Servicos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Servicos_Servicos_on_conflict']
          | null;
      },
      ValueTypes['comercial_Servicos_Servicos']
    ];
    insert_comercial_Servicos_Tarifas?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Servicos_Tarifas_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Servicos_Tarifas_on_conflict']
          | null;
      },
      ValueTypes['comercial_Servicos_Tarifas_mutation_response']
    ];
    insert_comercial_Servicos_Tarifas_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Servicos_Tarifas_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['comercial_Servicos_Tarifas_on_conflict']
          | null;
      },
      ValueTypes['comercial_Servicos_Tarifas']
    ];
    insert_comercial_Servicos_Tipos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Servicos_Tipos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Servicos_Tipos_on_conflict'] | null;
      },
      ValueTypes['comercial_Servicos_Tipos_mutation_response']
    ];
    insert_comercial_Servicos_Tipos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Servicos_Tipos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Servicos_Tipos_on_conflict'] | null;
      },
      ValueTypes['comercial_Servicos_Tipos']
    ];
    insert_comercial_Servicos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Servicos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Servicos_on_conflict'] | null;
      },
      ValueTypes['comercial_Servicos']
    ];
    insert_comercial_Tarifas?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['comercial_Tarifas_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Tarifas_on_conflict'] | null;
      },
      ValueTypes['comercial_Tarifas_mutation_response']
    ];
    insert_comercial_Tarifas_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['comercial_Tarifas_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['comercial_Tarifas_on_conflict'] | null;
      },
      ValueTypes['comercial_Tarifas']
    ];
    insert_contatos_Emails?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['contatos_Emails_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['contatos_Emails_on_conflict'] | null;
      },
      ValueTypes['contatos_Emails_mutation_response']
    ];
    insert_contatos_Emails_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['contatos_Emails_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['contatos_Emails_on_conflict'] | null;
      },
      ValueTypes['contatos_Emails']
    ];
    insert_contatos_Enderecos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['contatos_Enderecos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['contatos_Enderecos_on_conflict'] | null;
      },
      ValueTypes['contatos_Enderecos_mutation_response']
    ];
    insert_contatos_Enderecos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['contatos_Enderecos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['contatos_Enderecos_on_conflict'] | null;
      },
      ValueTypes['contatos_Enderecos']
    ];
    insert_contatos_Logs?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['contatos_Logs_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['contatos_Logs_on_conflict'] | null;
      },
      ValueTypes['contatos_Logs_mutation_response']
    ];
    insert_contatos_Logs_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['contatos_Logs_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['contatos_Logs_on_conflict'] | null;
      },
      ValueTypes['contatos_Logs']
    ];
    insert_contatos_Telefones?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['contatos_Telefones_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['contatos_Telefones_on_conflict'] | null;
      },
      ValueTypes['contatos_Telefones_mutation_response']
    ];
    insert_contatos_Telefones_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['contatos_Telefones_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['contatos_Telefones_on_conflict'] | null;
      },
      ValueTypes['contatos_Telefones']
    ];
    insert_identidades_Clientes?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['identidades_Clientes_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['identidades_Clientes_on_conflict'] | null;
      },
      ValueTypes['identidades_Clientes_mutation_response']
    ];
    insert_identidades_Clientes_Documentos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['identidades_Clientes_Documentos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['identidades_Clientes_Documentos_on_conflict']
          | null;
      },
      ValueTypes['identidades_Clientes_Documentos_mutation_response']
    ];
    insert_identidades_Clientes_Documentos_Situacoes?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['identidades_Clientes_Documentos_Situacoes_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['identidades_Clientes_Documentos_Situacoes_on_conflict']
          | null;
      },
      ValueTypes['identidades_Clientes_Documentos_Situacoes_mutation_response']
    ];
    insert_identidades_Clientes_Documentos_Situacoes_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['identidades_Clientes_Documentos_Situacoes_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['identidades_Clientes_Documentos_Situacoes_on_conflict']
          | null;
      },
      ValueTypes['identidades_Clientes_Documentos_Situacoes']
    ];
    insert_identidades_Clientes_Documentos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['identidades_Clientes_Documentos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['identidades_Clientes_Documentos_on_conflict']
          | null;
      },
      ValueTypes['identidades_Clientes_Documentos']
    ];
    insert_identidades_Clientes_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['identidades_Clientes_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['identidades_Clientes_on_conflict'] | null;
      },
      ValueTypes['identidades_Clientes']
    ];
    insert_identidades_Colaboradores?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['identidades_Colaboradores_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['identidades_Colaboradores_on_conflict']
          | null;
      },
      ValueTypes['identidades_Colaboradores_mutation_response']
    ];
    insert_identidades_Colaboradores_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['identidades_Colaboradores_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['identidades_Colaboradores_on_conflict']
          | null;
      },
      ValueTypes['identidades_Colaboradores']
    ];
    insert_identidades_Fornecedores?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['identidades_Fornecedores_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['identidades_Fornecedores_on_conflict'] | null;
      },
      ValueTypes['identidades_Fornecedores_mutation_response']
    ];
    insert_identidades_Fornecedores_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['identidades_Fornecedores_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['identidades_Fornecedores_on_conflict'] | null;
      },
      ValueTypes['identidades_Fornecedores']
    ];
    insert_identidades_Logs?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['identidades_Logs_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['identidades_Logs_on_conflict'] | null;
      },
      ValueTypes['identidades_Logs_mutation_response']
    ];
    insert_identidades_Logs_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['identidades_Logs_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['identidades_Logs_on_conflict'] | null;
      },
      ValueTypes['identidades_Logs']
    ];
    insert_identidades_Pessoas?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['identidades_Pessoas_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['identidades_Pessoas_on_conflict'] | null;
      },
      ValueTypes['identidades_Pessoas_mutation_response']
    ];
    insert_identidades_Pessoas_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['identidades_Pessoas_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['identidades_Pessoas_on_conflict'] | null;
      },
      ValueTypes['identidades_Pessoas']
    ];
    insert_identidades_Representantes?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['identidades_Representantes_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['identidades_Representantes_on_conflict']
          | null;
      },
      ValueTypes['identidades_Representantes_mutation_response']
    ];
    insert_identidades_Representantes_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['identidades_Representantes_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['identidades_Representantes_on_conflict']
          | null;
      },
      ValueTypes['identidades_Representantes']
    ];
    insert_identidades_Vendedores?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['identidades_Vendedores_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['identidades_Vendedores_on_conflict'] | null;
      },
      ValueTypes['identidades_Vendedores_mutation_response']
    ];
    insert_identidades_Vendedores_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['identidades_Vendedores_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['identidades_Vendedores_on_conflict'] | null;
      },
      ValueTypes['identidades_Vendedores']
    ];
    insert_propostas_Propostas?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['propostas_Propostas_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['propostas_Propostas_on_conflict'] | null;
      },
      ValueTypes['propostas_Propostas_mutation_response']
    ];
    insert_propostas_Propostas_Combos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['propostas_Propostas_Combos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Combos_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Combos_mutation_response']
    ];
    insert_propostas_Propostas_Combos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['propostas_Propostas_Combos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Combos_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Combos']
    ];
    insert_propostas_Propostas_Instalacoes?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['propostas_Propostas_Instalacoes_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Instalacoes_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Instalacoes_mutation_response']
    ];
    insert_propostas_Propostas_Instalacoes_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['propostas_Propostas_Instalacoes_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Instalacoes_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Instalacoes']
    ];
    insert_propostas_Propostas_Oportunidades?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['propostas_Propostas_Oportunidades_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Oportunidades_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Oportunidades_mutation_response']
    ];
    insert_propostas_Propostas_Oportunidades_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['propostas_Propostas_Oportunidades_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Oportunidades_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Oportunidades']
    ];
    insert_propostas_Propostas_Planos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['propostas_Propostas_Planos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Planos_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Planos_mutation_response']
    ];
    insert_propostas_Propostas_Planos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['propostas_Propostas_Planos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Planos_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Planos']
    ];
    insert_propostas_Propostas_Produtos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['propostas_Propostas_Produtos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Produtos_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Produtos_mutation_response']
    ];
    insert_propostas_Propostas_Produtos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['propostas_Propostas_Produtos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Produtos_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Produtos']
    ];
    insert_propostas_Propostas_Servicos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['propostas_Propostas_Servicos_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Servicos_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Servicos_mutation_response']
    ];
    insert_propostas_Propostas_Servicos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['propostas_Propostas_Servicos_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Servicos_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Servicos']
    ];
    insert_propostas_Propostas_Situacoes?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['propostas_Propostas_Situacoes_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Situacoes_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Situacoes_mutation_response']
    ];
    insert_propostas_Propostas_Situacoes_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['propostas_Propostas_Situacoes_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['propostas_Propostas_Situacoes_on_conflict']
          | null;
      },
      ValueTypes['propostas_Propostas_Situacoes']
    ];
    insert_propostas_Propostas_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['propostas_Propostas_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['propostas_Propostas_on_conflict'] | null;
      },
      ValueTypes['propostas_Propostas']
    ];
    insert_vendas_GruposDePerguntas?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['vendas_GruposDePerguntas_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['vendas_GruposDePerguntas_on_conflict'] | null;
      },
      ValueTypes['vendas_GruposDePerguntas_mutation_response']
    ];
    insert_vendas_GruposDePerguntas_Perguntas?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['vendas_GruposDePerguntas_Perguntas_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_on_conflict']
          | null;
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas_mutation_response']
    ];
    insert_vendas_GruposDePerguntas_Perguntas_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['vendas_GruposDePerguntas_Perguntas_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_on_conflict']
          | null;
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas']
    ];
    insert_vendas_GruposDePerguntas_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['vendas_GruposDePerguntas_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['vendas_GruposDePerguntas_on_conflict'] | null;
      },
      ValueTypes['vendas_GruposDePerguntas']
    ];
    insert_vendas_Perguntas?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['vendas_Perguntas_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['vendas_Perguntas_on_conflict'] | null;
      },
      ValueTypes['vendas_Perguntas_mutation_response']
    ];
    insert_vendas_Perguntas_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['vendas_Perguntas_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['vendas_Perguntas_on_conflict'] | null;
      },
      ValueTypes['vendas_Perguntas']
    ];
    insert_vendas_TiposDePagamento?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['vendas_TiposDePagamento_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['vendas_TiposDePagamento_on_conflict'] | null;
      },
      ValueTypes['vendas_TiposDePagamento_mutation_response']
    ];
    insert_vendas_TiposDePagamento_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['vendas_TiposDePagamento_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['vendas_TiposDePagamento_on_conflict'] | null;
      },
      ValueTypes['vendas_TiposDePagamento']
    ];
    insert_vendas_TiposDePrecos?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['vendas_TiposDePrecos_insert_input'][] /** on conflict condition */;
        on_conflict?: ValueTypes['vendas_TiposDePrecos_on_conflict'] | null;
      },
      ValueTypes['vendas_TiposDePrecos_mutation_response']
    ];
    insert_vendas_TiposDePrecos_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['vendas_TiposDePrecos_insert_input'] /** on conflict condition */;
        on_conflict?: ValueTypes['vendas_TiposDePrecos_on_conflict'] | null;
      },
      ValueTypes['vendas_TiposDePrecos']
    ];
    insert_vendas_TiposDeRecorrencia?: [
      {
        /** the rows to be inserted */
        objects: ValueTypes['vendas_TiposDeRecorrencia_insert_input'][] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['vendas_TiposDeRecorrencia_on_conflict']
          | null;
      },
      ValueTypes['vendas_TiposDeRecorrencia_mutation_response']
    ];
    insert_vendas_TiposDeRecorrencia_one?: [
      {
        /** the row to be inserted */
        object: ValueTypes['vendas_TiposDeRecorrencia_insert_input'] /** on conflict condition */;
        on_conflict?:
          | ValueTypes['vendas_TiposDeRecorrencia_on_conflict']
          | null;
      },
      ValueTypes['vendas_TiposDeRecorrencia']
    ];
    update_CategoriasDeVeiculos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['CategoriasDeVeiculos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['CategoriasDeVeiculos_bool_exp'];
      },
      ValueTypes['CategoriasDeVeiculos_mutation_response']
    ];
    update_CategoriasDeVeiculos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['CategoriasDeVeiculos_set_input'] | null;
        pk_columns: ValueTypes['CategoriasDeVeiculos_pk_columns_input'];
      },
      ValueTypes['CategoriasDeVeiculos']
    ];
    update_EstadosEMunicipios?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['EstadosEMunicipios_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['EstadosEMunicipios_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['EstadosEMunicipios_bool_exp'];
      },
      ValueTypes['EstadosEMunicipios_mutation_response']
    ];
    update_EstadosEMunicipios_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['EstadosEMunicipios_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['EstadosEMunicipios_set_input'] | null;
        pk_columns: ValueTypes['EstadosEMunicipios_pk_columns_input'];
      },
      ValueTypes['EstadosEMunicipios']
    ];
    update_atendimentos_EtapasDosFluxos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['atendimentos_EtapasDosFluxos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['atendimentos_EtapasDosFluxos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'];
      },
      ValueTypes['atendimentos_EtapasDosFluxos_mutation_response']
    ];
    update_atendimentos_EtapasDosFluxos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['atendimentos_EtapasDosFluxos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['atendimentos_EtapasDosFluxos_set_input'] | null;
        pk_columns: ValueTypes['atendimentos_EtapasDosFluxos_pk_columns_input'];
      },
      ValueTypes['atendimentos_EtapasDosFluxos']
    ];
    update_atendimentos_Fluxos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['atendimentos_Fluxos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['atendimentos_Fluxos_bool_exp'];
      },
      ValueTypes['atendimentos_Fluxos_mutation_response']
    ];
    update_atendimentos_Fluxos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['atendimentos_Fluxos_set_input'] | null;
        pk_columns: ValueTypes['atendimentos_Fluxos_pk_columns_input'];
      },
      ValueTypes['atendimentos_Fluxos']
    ];
    update_atendimentos_Tickets?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['atendimentos_Tickets_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['atendimentos_Tickets_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['atendimentos_Tickets_bool_exp'];
      },
      ValueTypes['atendimentos_Tickets_mutation_response']
    ];
    update_atendimentos_Tickets_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['atendimentos_Tickets_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['atendimentos_Tickets_set_input'] | null;
        pk_columns: ValueTypes['atendimentos_Tickets_pk_columns_input'];
      },
      ValueTypes['atendimentos_Tickets']
    ];
    update_atendimentos_TiposDeTickets?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['atendimentos_TiposDeTickets_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['atendimentos_TiposDeTickets_bool_exp'];
      },
      ValueTypes['atendimentos_TiposDeTickets_mutation_response']
    ];
    update_atendimentos_TiposDeTickets_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['atendimentos_TiposDeTickets_set_input'] | null;
        pk_columns: ValueTypes['atendimentos_TiposDeTickets_pk_columns_input'];
      },
      ValueTypes['atendimentos_TiposDeTickets']
    ];
    update_autenticacao_Atendentes?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['autenticacao_Atendentes_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['autenticacao_Atendentes_bool_exp'];
      },
      ValueTypes['autenticacao_Atendentes_mutation_response']
    ];
    update_autenticacao_Atendentes_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['autenticacao_Atendentes_set_input'] | null;
        pk_columns: ValueTypes['autenticacao_Atendentes_pk_columns_input'];
      },
      ValueTypes['autenticacao_Atendentes']
    ];
    update_autenticacao_Usuarios?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['autenticacao_Usuarios_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['autenticacao_Usuarios_bool_exp'];
      },
      ValueTypes['autenticacao_Usuarios_mutation_response']
    ];
    update_autenticacao_Usuarios_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['autenticacao_Usuarios_set_input'] | null;
        pk_columns: ValueTypes['autenticacao_Usuarios_pk_columns_input'];
      },
      ValueTypes['autenticacao_Usuarios']
    ];
    update_clientes_Leads?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['clientes_Leads_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['clientes_Leads_bool_exp'];
      },
      ValueTypes['clientes_Leads_mutation_response']
    ];
    update_clientes_Leads_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['clientes_Leads_set_input'] | null;
        pk_columns: ValueTypes['clientes_Leads_pk_columns_input'];
      },
      ValueTypes['clientes_Leads']
    ];
    update_clientes_PerfisComerciais?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['clientes_PerfisComerciais_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['clientes_PerfisComerciais_bool_exp'];
      },
      ValueTypes['clientes_PerfisComerciais_mutation_response']
    ];
    update_clientes_PerfisComerciais_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['clientes_PerfisComerciais_set_input'] | null;
        pk_columns: ValueTypes['clientes_PerfisComerciais_pk_columns_input'];
      },
      ValueTypes['clientes_PerfisComerciais']
    ];
    update_clientes_Veiculos?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['clientes_Veiculos_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['clientes_Veiculos_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['clientes_Veiculos_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['clientes_Veiculos_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['clientes_Veiculos_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['clientes_Veiculos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['clientes_Veiculos_bool_exp'];
      },
      ValueTypes['clientes_Veiculos_mutation_response']
    ];
    update_clientes_VeiculosAtivos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['clientes_VeiculosAtivos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['clientes_VeiculosAtivos_bool_exp'];
      },
      ValueTypes['clientes_VeiculosAtivos_mutation_response']
    ];
    update_clientes_VeiculosAtivos_Beneficios?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['clientes_VeiculosAtivos_Beneficios_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['clientes_VeiculosAtivos_Beneficios_bool_exp'];
      },
      ValueTypes['clientes_VeiculosAtivos_Beneficios_mutation_response']
    ];
    update_clientes_VeiculosAtivos_Beneficios_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['clientes_VeiculosAtivos_Beneficios_set_input']
          | null;
        pk_columns: ValueTypes['clientes_VeiculosAtivos_Beneficios_pk_columns_input'];
      },
      ValueTypes['clientes_VeiculosAtivos_Beneficios']
    ];
    update_clientes_VeiculosAtivos_Produtos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['clientes_VeiculosAtivos_Produtos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['clientes_VeiculosAtivos_Produtos_bool_exp'];
      },
      ValueTypes['clientes_VeiculosAtivos_Produtos_mutation_response']
    ];
    update_clientes_VeiculosAtivos_Produtos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['clientes_VeiculosAtivos_Produtos_set_input'] | null;
        pk_columns: ValueTypes['clientes_VeiculosAtivos_Produtos_pk_columns_input'];
      },
      ValueTypes['clientes_VeiculosAtivos_Produtos']
    ];
    update_clientes_VeiculosAtivos_Servicos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['clientes_VeiculosAtivos_Servicos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['clientes_VeiculosAtivos_Servicos_bool_exp'];
      },
      ValueTypes['clientes_VeiculosAtivos_Servicos_mutation_response']
    ];
    update_clientes_VeiculosAtivos_Servicos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['clientes_VeiculosAtivos_Servicos_set_input'] | null;
        pk_columns: ValueTypes['clientes_VeiculosAtivos_Servicos_pk_columns_input'];
      },
      ValueTypes['clientes_VeiculosAtivos_Servicos']
    ];
    update_clientes_VeiculosAtivos_Situacao?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['clientes_VeiculosAtivos_Situacao_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['clientes_VeiculosAtivos_Situacao_bool_exp'];
      },
      ValueTypes['clientes_VeiculosAtivos_Situacao_mutation_response']
    ];
    update_clientes_VeiculosAtivos_Situacao_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['clientes_VeiculosAtivos_Situacao_set_input'] | null;
        pk_columns: ValueTypes['clientes_VeiculosAtivos_Situacao_pk_columns_input'];
      },
      ValueTypes['clientes_VeiculosAtivos_Situacao']
    ];
    update_clientes_VeiculosAtivos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['clientes_VeiculosAtivos_set_input'] | null;
        pk_columns: ValueTypes['clientes_VeiculosAtivos_pk_columns_input'];
      },
      ValueTypes['clientes_VeiculosAtivos']
    ];
    update_clientes_Veiculos_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['clientes_Veiculos_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['clientes_Veiculos_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['clientes_Veiculos_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['clientes_Veiculos_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['clientes_Veiculos_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['clientes_Veiculos_set_input'] | null;
        pk_columns: ValueTypes['clientes_Veiculos_pk_columns_input'];
      },
      ValueTypes['clientes_Veiculos']
    ];
    update_comercial_Acoes?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['comercial_Acoes_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['comercial_Acoes_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['comercial_Acoes_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['comercial_Acoes_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['comercial_Acoes_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Acoes_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Acoes_bool_exp'];
      },
      ValueTypes['comercial_Acoes_mutation_response']
    ];
    update_comercial_Acoes_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['comercial_Acoes_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['comercial_Acoes_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['comercial_Acoes_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['comercial_Acoes_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['comercial_Acoes_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Acoes_set_input'] | null;
        pk_columns: ValueTypes['comercial_Acoes_pk_columns_input'];
      },
      ValueTypes['comercial_Acoes']
    ];
    update_comercial_Atributos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Atributos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Atributos_bool_exp'];
      },
      ValueTypes['comercial_Atributos_mutation_response']
    ];
    update_comercial_Atributos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Atributos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Atributos_pk_columns_input'];
      },
      ValueTypes['comercial_Atributos']
    ];
    update_comercial_Coberturas?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Coberturas_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Coberturas_bool_exp'];
      },
      ValueTypes['comercial_Coberturas_mutation_response']
    ];
    update_comercial_Coberturas_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Coberturas_set_input'] | null;
        pk_columns: ValueTypes['comercial_Coberturas_pk_columns_input'];
      },
      ValueTypes['comercial_Coberturas']
    ];
    update_comercial_Combos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Combos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Combos_bool_exp'];
      },
      ValueTypes['comercial_Combos_mutation_response']
    ];
    update_comercial_Combos_Combos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Combos_Combos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Combos_Combos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Combos_Combos_bool_exp'];
      },
      ValueTypes['comercial_Combos_Combos_mutation_response']
    ];
    update_comercial_Combos_Combos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Combos_Combos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Combos_Combos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Combos_Combos_pk_columns_input'];
      },
      ValueTypes['comercial_Combos_Combos']
    ];
    update_comercial_Combos_Planos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Combos_Planos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Combos_Planos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Combos_Planos_bool_exp'];
      },
      ValueTypes['comercial_Combos_Planos_mutation_response']
    ];
    update_comercial_Combos_Planos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Combos_Planos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Combos_Planos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Combos_Planos_pk_columns_input'];
      },
      ValueTypes['comercial_Combos_Planos']
    ];
    update_comercial_Combos_Precos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Combos_Precos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Combos_Precos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Combos_Precos_bool_exp'];
      },
      ValueTypes['comercial_Combos_Precos_mutation_response']
    ];
    update_comercial_Combos_Precos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Combos_Precos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Combos_Precos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Combos_Precos_pk_columns_input'];
      },
      ValueTypes['comercial_Combos_Precos']
    ];
    update_comercial_Combos_Produtos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Combos_Produtos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Combos_Produtos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Combos_Produtos_bool_exp'];
      },
      ValueTypes['comercial_Combos_Produtos_mutation_response']
    ];
    update_comercial_Combos_Produtos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Combos_Produtos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Combos_Produtos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Combos_Produtos_pk_columns_input'];
      },
      ValueTypes['comercial_Combos_Produtos']
    ];
    update_comercial_Combos_Servicos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Combos_Servicos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Combos_Servicos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Combos_Servicos_bool_exp'];
      },
      ValueTypes['comercial_Combos_Servicos_mutation_response']
    ];
    update_comercial_Combos_Servicos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Combos_Servicos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Combos_Servicos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Combos_Servicos_pk_columns_input'];
      },
      ValueTypes['comercial_Combos_Servicos']
    ];
    update_comercial_Combos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Combos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Combos_pk_columns_input'];
      },
      ValueTypes['comercial_Combos']
    ];
    update_comercial_Condicionais?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Condicionais_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Condicionais_bool_exp'];
      },
      ValueTypes['comercial_Condicionais_mutation_response']
    ];
    update_comercial_CondicionaisSituacoes?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_CondicionaisSituacoes_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_CondicionaisSituacoes_bool_exp'];
      },
      ValueTypes['comercial_CondicionaisSituacoes_mutation_response']
    ];
    update_comercial_CondicionaisSituacoes_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_CondicionaisSituacoes_set_input'] | null;
        pk_columns: ValueTypes['comercial_CondicionaisSituacoes_pk_columns_input'];
      },
      ValueTypes['comercial_CondicionaisSituacoes']
    ];
    update_comercial_Condicionais_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Condicionais_set_input'] | null;
        pk_columns: ValueTypes['comercial_Condicionais_pk_columns_input'];
      },
      ValueTypes['comercial_Condicionais']
    ];
    update_comercial_ContratosBase?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_ContratosBase_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_ContratosBase_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_ContratosBase_bool_exp'];
      },
      ValueTypes['comercial_ContratosBase_mutation_response']
    ];
    update_comercial_ContratosBase_Versoes?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_ContratosBase_Versoes_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_ContratosBase_Versoes_bool_exp'];
      },
      ValueTypes['comercial_ContratosBase_Versoes_mutation_response']
    ];
    update_comercial_ContratosBase_Versoes_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_ContratosBase_Versoes_set_input'] | null;
        pk_columns: ValueTypes['comercial_ContratosBase_Versoes_pk_columns_input'];
      },
      ValueTypes['comercial_ContratosBase_Versoes']
    ];
    update_comercial_ContratosBase_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_ContratosBase_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_ContratosBase_set_input'] | null;
        pk_columns: ValueTypes['comercial_ContratosBase_pk_columns_input'];
      },
      ValueTypes['comercial_ContratosBase']
    ];
    update_comercial_Planos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Planos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Planos_bool_exp'];
      },
      ValueTypes['comercial_Planos_mutation_response']
    ];
    update_comercial_Planos_Condicionais?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Planos_Condicionais_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Planos_Condicionais_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Planos_Condicionais_bool_exp'];
      },
      ValueTypes['comercial_Planos_Condicionais_mutation_response']
    ];
    update_comercial_Planos_Condicionais_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Planos_Condicionais_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Planos_Condicionais_set_input'] | null;
        pk_columns: ValueTypes['comercial_Planos_Condicionais_pk_columns_input'];
      },
      ValueTypes['comercial_Planos_Condicionais']
    ];
    update_comercial_Planos_Precos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Planos_Precos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Planos_Precos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Planos_Precos_bool_exp'];
      },
      ValueTypes['comercial_Planos_Precos_mutation_response']
    ];
    update_comercial_Planos_Precos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Planos_Precos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Planos_Precos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Planos_Precos_pk_columns_input'];
      },
      ValueTypes['comercial_Planos_Precos']
    ];
    update_comercial_Planos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Planos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Planos_pk_columns_input'];
      },
      ValueTypes['comercial_Planos']
    ];
    update_comercial_PrestadoresDeServicos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_PrestadoresDeServicos_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_mutation_response']
    ];
    update_comercial_PrestadoresDeServicos_Produtos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_mutation_response']
    ];
    update_comercial_PrestadoresDeServicos_Produtos_Itens?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response']
    ];
    update_comercial_PrestadoresDeServicos_Produtos_Itens_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_set_input']
          | null;
        pk_columns: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_pk_columns_input'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens']
    ];
    update_comercial_PrestadoresDeServicos_Produtos_Precos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response']
    ];
    update_comercial_PrestadoresDeServicos_Produtos_Precos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_set_input']
          | null;
        pk_columns: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_pk_columns_input'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    ];
    update_comercial_PrestadoresDeServicos_Produtos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_set_input']
          | null;
        pk_columns: ValueTypes['comercial_PrestadoresDeServicos_Produtos_pk_columns_input'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos']
    ];
    update_comercial_PrestadoresDeServicos_Servicos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_mutation_response']
    ];
    update_comercial_PrestadoresDeServicos_Servicos_Precos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response']
    ];
    update_comercial_PrestadoresDeServicos_Servicos_Precos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_set_input']
          | null;
        pk_columns: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_pk_columns_input'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    ];
    update_comercial_PrestadoresDeServicos_Servicos_Tarifas?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response']
    ];
    update_comercial_PrestadoresDeServicos_Servicos_Tarifas_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_set_input']
          | null;
        pk_columns: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_pk_columns_input'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    ];
    update_comercial_PrestadoresDeServicos_Servicos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_set_input']
          | null;
        pk_columns: ValueTypes['comercial_PrestadoresDeServicos_Servicos_pk_columns_input'];
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos']
    ];
    update_comercial_PrestadoresDeServicos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_PrestadoresDeServicos_set_input'] | null;
        pk_columns: ValueTypes['comercial_PrestadoresDeServicos_pk_columns_input'];
      },
      ValueTypes['comercial_PrestadoresDeServicos']
    ];
    update_comercial_Produtos?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['comercial_Produtos_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['comercial_Produtos_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['comercial_Produtos_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['comercial_Produtos_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['comercial_Produtos_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Produtos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Produtos_bool_exp'];
      },
      ValueTypes['comercial_Produtos_mutation_response']
    ];
    update_comercial_Produtos_Atributos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Produtos_Atributos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Produtos_Atributos_bool_exp'];
      },
      ValueTypes['comercial_Produtos_Atributos_mutation_response']
    ];
    update_comercial_Produtos_Atributos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Produtos_Atributos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Produtos_Atributos_pk_columns_input'];
      },
      ValueTypes['comercial_Produtos_Atributos']
    ];
    update_comercial_Produtos_Oportunidades?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Produtos_Oportunidades_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Produtos_Oportunidades_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'];
      },
      ValueTypes['comercial_Produtos_Oportunidades_mutation_response']
    ];
    update_comercial_Produtos_Oportunidades_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Produtos_Oportunidades_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Produtos_Oportunidades_set_input'] | null;
        pk_columns: ValueTypes['comercial_Produtos_Oportunidades_pk_columns_input'];
      },
      ValueTypes['comercial_Produtos_Oportunidades']
    ];
    update_comercial_Produtos_Produtos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Produtos_Produtos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Produtos_Produtos_bool_exp'];
      },
      ValueTypes['comercial_Produtos_Produtos_mutation_response']
    ];
    update_comercial_Produtos_Produtos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Produtos_Produtos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Produtos_Produtos_pk_columns_input'];
      },
      ValueTypes['comercial_Produtos_Produtos']
    ];
    update_comercial_Produtos_Servicos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Produtos_Servicos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Produtos_Servicos_bool_exp'];
      },
      ValueTypes['comercial_Produtos_Servicos_mutation_response']
    ];
    update_comercial_Produtos_Servicos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Produtos_Servicos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Produtos_Servicos_pk_columns_input'];
      },
      ValueTypes['comercial_Produtos_Servicos']
    ];
    update_comercial_Produtos_Tipos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Produtos_Tipos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Produtos_Tipos_bool_exp'];
      },
      ValueTypes['comercial_Produtos_Tipos_mutation_response']
    ];
    update_comercial_Produtos_Tipos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Produtos_Tipos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Produtos_Tipos_pk_columns_input'];
      },
      ValueTypes['comercial_Produtos_Tipos']
    ];
    update_comercial_Produtos_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['comercial_Produtos_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['comercial_Produtos_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['comercial_Produtos_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['comercial_Produtos_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['comercial_Produtos_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Produtos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Produtos_pk_columns_input'];
      },
      ValueTypes['comercial_Produtos']
    ];
    update_comercial_Servicos?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['comercial_Servicos_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['comercial_Servicos_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['comercial_Servicos_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['comercial_Servicos_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['comercial_Servicos_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Servicos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Servicos_bool_exp'];
      },
      ValueTypes['comercial_Servicos_mutation_response']
    ];
    update_comercial_Servicos_Atributos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Servicos_Atributos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Servicos_Atributos_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Atributos_mutation_response']
    ];
    update_comercial_Servicos_Atributos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Servicos_Atributos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Servicos_Atributos_pk_columns_input'];
      },
      ValueTypes['comercial_Servicos_Atributos']
    ];
    update_comercial_Servicos_Oportunidades?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Servicos_Oportunidades_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['comercial_Servicos_Oportunidades_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Oportunidades_mutation_response']
    ];
    update_comercial_Servicos_Oportunidades_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['comercial_Servicos_Oportunidades_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Servicos_Oportunidades_set_input'] | null;
        pk_columns: ValueTypes['comercial_Servicos_Oportunidades_pk_columns_input'];
      },
      ValueTypes['comercial_Servicos_Oportunidades']
    ];
    update_comercial_Servicos_Produtos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Servicos_Produtos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Servicos_Produtos_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Produtos_mutation_response']
    ];
    update_comercial_Servicos_Produtos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Servicos_Produtos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Servicos_Produtos_pk_columns_input'];
      },
      ValueTypes['comercial_Servicos_Produtos']
    ];
    update_comercial_Servicos_Servicos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Servicos_Servicos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Servicos_Servicos_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Servicos_mutation_response']
    ];
    update_comercial_Servicos_Servicos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Servicos_Servicos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Servicos_Servicos_pk_columns_input'];
      },
      ValueTypes['comercial_Servicos_Servicos']
    ];
    update_comercial_Servicos_Tarifas?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Servicos_Tarifas_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Servicos_Tarifas_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Tarifas_mutation_response']
    ];
    update_comercial_Servicos_Tarifas_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Servicos_Tarifas_set_input'] | null;
        pk_columns: ValueTypes['comercial_Servicos_Tarifas_pk_columns_input'];
      },
      ValueTypes['comercial_Servicos_Tarifas']
    ];
    update_comercial_Servicos_Tipos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Servicos_Tipos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Servicos_Tipos_bool_exp'];
      },
      ValueTypes['comercial_Servicos_Tipos_mutation_response']
    ];
    update_comercial_Servicos_Tipos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Servicos_Tipos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Servicos_Tipos_pk_columns_input'];
      },
      ValueTypes['comercial_Servicos_Tipos']
    ];
    update_comercial_Servicos_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['comercial_Servicos_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['comercial_Servicos_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['comercial_Servicos_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['comercial_Servicos_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['comercial_Servicos_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['comercial_Servicos_set_input'] | null;
        pk_columns: ValueTypes['comercial_Servicos_pk_columns_input'];
      },
      ValueTypes['comercial_Servicos']
    ];
    update_comercial_Tarifas?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['comercial_Tarifas_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['comercial_Tarifas_bool_exp'];
      },
      ValueTypes['comercial_Tarifas_mutation_response']
    ];
    update_comercial_Tarifas_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['comercial_Tarifas_set_input'] | null;
        pk_columns: ValueTypes['comercial_Tarifas_pk_columns_input'];
      },
      ValueTypes['comercial_Tarifas']
    ];
    update_contatos_Emails?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['contatos_Emails_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['contatos_Emails_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['contatos_Emails_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['contatos_Emails_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['contatos_Emails_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['contatos_Emails_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['contatos_Emails_bool_exp'];
      },
      ValueTypes['contatos_Emails_mutation_response']
    ];
    update_contatos_Emails_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['contatos_Emails_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['contatos_Emails_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['contatos_Emails_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['contatos_Emails_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['contatos_Emails_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['contatos_Emails_set_input'] | null;
        pk_columns: ValueTypes['contatos_Emails_pk_columns_input'];
      },
      ValueTypes['contatos_Emails']
    ];
    update_contatos_Enderecos?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['contatos_Enderecos_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['contatos_Enderecos_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['contatos_Enderecos_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['contatos_Enderecos_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['contatos_Enderecos_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['contatos_Enderecos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['contatos_Enderecos_bool_exp'];
      },
      ValueTypes['contatos_Enderecos_mutation_response']
    ];
    update_contatos_Enderecos_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['contatos_Enderecos_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['contatos_Enderecos_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['contatos_Enderecos_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['contatos_Enderecos_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['contatos_Enderecos_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['contatos_Enderecos_set_input'] | null;
        pk_columns: ValueTypes['contatos_Enderecos_pk_columns_input'];
      },
      ValueTypes['contatos_Enderecos']
    ];
    update_contatos_Logs?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['contatos_Logs_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['contatos_Logs_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['contatos_Logs_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['contatos_Logs_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['contatos_Logs_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['contatos_Logs_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['contatos_Logs_bool_exp'];
      },
      ValueTypes['contatos_Logs_mutation_response']
    ];
    update_contatos_Logs_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['contatos_Logs_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['contatos_Logs_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['contatos_Logs_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['contatos_Logs_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['contatos_Logs_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['contatos_Logs_set_input'] | null;
        pk_columns: ValueTypes['contatos_Logs_pk_columns_input'];
      },
      ValueTypes['contatos_Logs']
    ];
    update_contatos_Telefones?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['contatos_Telefones_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['contatos_Telefones_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['contatos_Telefones_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['contatos_Telefones_delete_key_input']
          | null /** increments the numeric columns with given value of the filtered values */;
        _inc?:
          | ValueTypes['contatos_Telefones_inc_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['contatos_Telefones_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['contatos_Telefones_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['contatos_Telefones_bool_exp'];
      },
      ValueTypes['contatos_Telefones_mutation_response']
    ];
    update_contatos_Telefones_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['contatos_Telefones_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['contatos_Telefones_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['contatos_Telefones_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['contatos_Telefones_delete_key_input']
          | null /** increments the numeric columns with given value of the filtered values */;
        _inc?:
          | ValueTypes['contatos_Telefones_inc_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['contatos_Telefones_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['contatos_Telefones_set_input'] | null;
        pk_columns: ValueTypes['contatos_Telefones_pk_columns_input'];
      },
      ValueTypes['contatos_Telefones']
    ];
    update_identidades_Clientes?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['identidades_Clientes_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['identidades_Clientes_bool_exp'];
      },
      ValueTypes['identidades_Clientes_mutation_response']
    ];
    update_identidades_Clientes_Documentos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['identidades_Clientes_Documentos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['identidades_Clientes_Documentos_bool_exp'];
      },
      ValueTypes['identidades_Clientes_Documentos_mutation_response']
    ];
    update_identidades_Clientes_Documentos_Situacoes?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['identidades_Clientes_Documentos_Situacoes_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['identidades_Clientes_Documentos_Situacoes_bool_exp'];
      },
      ValueTypes['identidades_Clientes_Documentos_Situacoes_mutation_response']
    ];
    update_identidades_Clientes_Documentos_Situacoes_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['identidades_Clientes_Documentos_Situacoes_set_input']
          | null;
        pk_columns: ValueTypes['identidades_Clientes_Documentos_Situacoes_pk_columns_input'];
      },
      ValueTypes['identidades_Clientes_Documentos_Situacoes']
    ];
    update_identidades_Clientes_Documentos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['identidades_Clientes_Documentos_set_input'] | null;
        pk_columns: ValueTypes['identidades_Clientes_Documentos_pk_columns_input'];
      },
      ValueTypes['identidades_Clientes_Documentos']
    ];
    update_identidades_Clientes_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['identidades_Clientes_set_input'] | null;
        pk_columns: ValueTypes['identidades_Clientes_pk_columns_input'];
      },
      ValueTypes['identidades_Clientes']
    ];
    update_identidades_Colaboradores?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['identidades_Colaboradores_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['identidades_Colaboradores_bool_exp'];
      },
      ValueTypes['identidades_Colaboradores_mutation_response']
    ];
    update_identidades_Colaboradores_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['identidades_Colaboradores_set_input'] | null;
        pk_columns: ValueTypes['identidades_Colaboradores_pk_columns_input'];
      },
      ValueTypes['identidades_Colaboradores']
    ];
    update_identidades_Fornecedores?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['identidades_Fornecedores_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['identidades_Fornecedores_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['identidades_Fornecedores_bool_exp'];
      },
      ValueTypes['identidades_Fornecedores_mutation_response']
    ];
    update_identidades_Fornecedores_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['identidades_Fornecedores_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['identidades_Fornecedores_set_input'] | null;
        pk_columns: ValueTypes['identidades_Fornecedores_pk_columns_input'];
      },
      ValueTypes['identidades_Fornecedores']
    ];
    update_identidades_Logs?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['identidades_Logs_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['identidades_Logs_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['identidades_Logs_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['identidades_Logs_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['identidades_Logs_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['identidades_Logs_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['identidades_Logs_bool_exp'];
      },
      ValueTypes['identidades_Logs_mutation_response']
    ];
    update_identidades_Logs_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['identidades_Logs_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['identidades_Logs_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['identidades_Logs_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['identidades_Logs_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['identidades_Logs_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['identidades_Logs_set_input'] | null;
        pk_columns: ValueTypes['identidades_Logs_pk_columns_input'];
      },
      ValueTypes['identidades_Logs']
    ];
    update_identidades_Pessoas?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['identidades_Pessoas_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['identidades_Pessoas_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['identidades_Pessoas_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['identidades_Pessoas_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['identidades_Pessoas_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['identidades_Pessoas_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['identidades_Pessoas_bool_exp'];
      },
      ValueTypes['identidades_Pessoas_mutation_response']
    ];
    update_identidades_Pessoas_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['identidades_Pessoas_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['identidades_Pessoas_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['identidades_Pessoas_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['identidades_Pessoas_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['identidades_Pessoas_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['identidades_Pessoas_set_input'] | null;
        pk_columns: ValueTypes['identidades_Pessoas_pk_columns_input'];
      },
      ValueTypes['identidades_Pessoas']
    ];
    update_identidades_Representantes?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['identidades_Representantes_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['identidades_Representantes_bool_exp'];
      },
      ValueTypes['identidades_Representantes_mutation_response']
    ];
    update_identidades_Representantes_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['identidades_Representantes_set_input'] | null;
        pk_columns: ValueTypes['identidades_Representantes_pk_columns_input'];
      },
      ValueTypes['identidades_Representantes']
    ];
    update_identidades_Vendedores?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['identidades_Vendedores_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['identidades_Vendedores_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['identidades_Vendedores_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['identidades_Vendedores_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['identidades_Vendedores_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['identidades_Vendedores_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['identidades_Vendedores_bool_exp'];
      },
      ValueTypes['identidades_Vendedores_mutation_response']
    ];
    update_identidades_Vendedores_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['identidades_Vendedores_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['identidades_Vendedores_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['identidades_Vendedores_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['identidades_Vendedores_delete_key_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['identidades_Vendedores_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['identidades_Vendedores_set_input'] | null;
        pk_columns: ValueTypes['identidades_Vendedores_pk_columns_input'];
      },
      ValueTypes['identidades_Vendedores']
    ];
    update_propostas_Propostas?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['propostas_Propostas_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['propostas_Propostas_bool_exp'];
      },
      ValueTypes['propostas_Propostas_mutation_response']
    ];
    update_propostas_Propostas_Combos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['propostas_Propostas_Combos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['propostas_Propostas_Combos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['propostas_Propostas_Combos_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Combos_mutation_response']
    ];
    update_propostas_Propostas_Combos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['propostas_Propostas_Combos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['propostas_Propostas_Combos_set_input'] | null;
        pk_columns: ValueTypes['propostas_Propostas_Combos_pk_columns_input'];
      },
      ValueTypes['propostas_Propostas_Combos']
    ];
    update_propostas_Propostas_Instalacoes?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['propostas_Propostas_Instalacoes_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['propostas_Propostas_Instalacoes_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['propostas_Propostas_Instalacoes_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['propostas_Propostas_Instalacoes_delete_key_input']
          | null /** increments the numeric columns with given value of the filtered values */;
        _inc?:
          | ValueTypes['propostas_Propostas_Instalacoes_inc_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['propostas_Propostas_Instalacoes_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['propostas_Propostas_Instalacoes_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['propostas_Propostas_Instalacoes_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Instalacoes_mutation_response']
    ];
    update_propostas_Propostas_Instalacoes_by_pk?: [
      {
        /** append existing jsonb value of filtered columns with new jsonb value */
        _append?:
          | ValueTypes['propostas_Propostas_Instalacoes_append_input']
          | null /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */;
        _delete_at_path?:
          | ValueTypes['propostas_Propostas_Instalacoes_delete_at_path_input']
          | null /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */;
        _delete_elem?:
          | ValueTypes['propostas_Propostas_Instalacoes_delete_elem_input']
          | null /** delete key/value pair or string element. key/value pairs are matched based on their key value */;
        _delete_key?:
          | ValueTypes['propostas_Propostas_Instalacoes_delete_key_input']
          | null /** increments the numeric columns with given value of the filtered values */;
        _inc?:
          | ValueTypes['propostas_Propostas_Instalacoes_inc_input']
          | null /** prepend existing jsonb value of filtered columns with new jsonb value */;
        _prepend?:
          | ValueTypes['propostas_Propostas_Instalacoes_prepend_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['propostas_Propostas_Instalacoes_set_input'] | null;
        pk_columns: ValueTypes['propostas_Propostas_Instalacoes_pk_columns_input'];
      },
      ValueTypes['propostas_Propostas_Instalacoes']
    ];
    update_propostas_Propostas_Oportunidades?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['propostas_Propostas_Oportunidades_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['propostas_Propostas_Oportunidades_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Oportunidades_mutation_response']
    ];
    update_propostas_Propostas_Oportunidades_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['propostas_Propostas_Oportunidades_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['propostas_Propostas_Oportunidades_set_input'] | null;
        pk_columns: ValueTypes['propostas_Propostas_Oportunidades_pk_columns_input'];
      },
      ValueTypes['propostas_Propostas_Oportunidades']
    ];
    update_propostas_Propostas_Planos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['propostas_Propostas_Planos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['propostas_Propostas_Planos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['propostas_Propostas_Planos_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Planos_mutation_response']
    ];
    update_propostas_Propostas_Planos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['propostas_Propostas_Planos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['propostas_Propostas_Planos_set_input'] | null;
        pk_columns: ValueTypes['propostas_Propostas_Planos_pk_columns_input'];
      },
      ValueTypes['propostas_Propostas_Planos']
    ];
    update_propostas_Propostas_Produtos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['propostas_Propostas_Produtos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['propostas_Propostas_Produtos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['propostas_Propostas_Produtos_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Produtos_mutation_response']
    ];
    update_propostas_Propostas_Produtos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['propostas_Propostas_Produtos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['propostas_Propostas_Produtos_set_input'] | null;
        pk_columns: ValueTypes['propostas_Propostas_Produtos_pk_columns_input'];
      },
      ValueTypes['propostas_Propostas_Produtos']
    ];
    update_propostas_Propostas_Servicos?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['propostas_Propostas_Servicos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['propostas_Propostas_Servicos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['propostas_Propostas_Servicos_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Servicos_mutation_response']
    ];
    update_propostas_Propostas_Servicos_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['propostas_Propostas_Servicos_inc_input']
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ValueTypes['propostas_Propostas_Servicos_set_input'] | null;
        pk_columns: ValueTypes['propostas_Propostas_Servicos_pk_columns_input'];
      },
      ValueTypes['propostas_Propostas_Servicos']
    ];
    update_propostas_Propostas_Situacoes?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['propostas_Propostas_Situacoes_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['propostas_Propostas_Situacoes_bool_exp'];
      },
      ValueTypes['propostas_Propostas_Situacoes_mutation_response']
    ];
    update_propostas_Propostas_Situacoes_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['propostas_Propostas_Situacoes_set_input'] | null;
        pk_columns: ValueTypes['propostas_Propostas_Situacoes_pk_columns_input'];
      },
      ValueTypes['propostas_Propostas_Situacoes']
    ];
    update_propostas_Propostas_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['propostas_Propostas_set_input'] | null;
        pk_columns: ValueTypes['propostas_Propostas_pk_columns_input'];
      },
      ValueTypes['propostas_Propostas']
    ];
    update_vendas_GruposDePerguntas?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['vendas_GruposDePerguntas_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['vendas_GruposDePerguntas_bool_exp'];
      },
      ValueTypes['vendas_GruposDePerguntas_mutation_response']
    ];
    update_vendas_GruposDePerguntas_Perguntas?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'];
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas_mutation_response']
    ];
    update_vendas_GruposDePerguntas_Perguntas_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_set_input']
          | null;
        pk_columns: ValueTypes['vendas_GruposDePerguntas_Perguntas_pk_columns_input'];
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas']
    ];
    update_vendas_GruposDePerguntas_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['vendas_GruposDePerguntas_set_input'] | null;
        pk_columns: ValueTypes['vendas_GruposDePerguntas_pk_columns_input'];
      },
      ValueTypes['vendas_GruposDePerguntas']
    ];
    update_vendas_Perguntas?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['vendas_Perguntas_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['vendas_Perguntas_bool_exp'];
      },
      ValueTypes['vendas_Perguntas_mutation_response']
    ];
    update_vendas_Perguntas_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['vendas_Perguntas_set_input'] | null;
        pk_columns: ValueTypes['vendas_Perguntas_pk_columns_input'];
      },
      ValueTypes['vendas_Perguntas']
    ];
    update_vendas_TiposDePagamento?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['vendas_TiposDePagamento_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['vendas_TiposDePagamento_bool_exp'];
      },
      ValueTypes['vendas_TiposDePagamento_mutation_response']
    ];
    update_vendas_TiposDePagamento_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['vendas_TiposDePagamento_set_input'] | null;
        pk_columns: ValueTypes['vendas_TiposDePagamento_pk_columns_input'];
      },
      ValueTypes['vendas_TiposDePagamento']
    ];
    update_vendas_TiposDePrecos?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['vendas_TiposDePrecos_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['vendas_TiposDePrecos_bool_exp'];
      },
      ValueTypes['vendas_TiposDePrecos_mutation_response']
    ];
    update_vendas_TiposDePrecos_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['vendas_TiposDePrecos_set_input'] | null;
        pk_columns: ValueTypes['vendas_TiposDePrecos_pk_columns_input'];
      },
      ValueTypes['vendas_TiposDePrecos']
    ];
    update_vendas_TiposDeRecorrencia?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['vendas_TiposDeRecorrencia_set_input']
          | null /** filter the rows which have to be updated */;
        where: ValueTypes['vendas_TiposDeRecorrencia_bool_exp'];
      },
      ValueTypes['vendas_TiposDeRecorrencia_mutation_response']
    ];
    update_vendas_TiposDeRecorrencia_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ValueTypes['vendas_TiposDeRecorrencia_set_input'] | null;
        pk_columns: ValueTypes['vendas_TiposDeRecorrencia_pk_columns_input'];
      },
      ValueTypes['vendas_TiposDeRecorrencia']
    ];
    __typename?: true;
  }>;
  /** column ordering options */
  ['order_by']: order_by;
  /** columns and relationships of "propostas.Propostas" */
  ['propostas_Propostas']: AliasType<{
    Cliente_Id?: true;
    Combos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Combos']
    ];
    Combos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Combos_aggregate']
    ];
    DataAceito?: true;
    Id?: true;
    Instalacoes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Instalacoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Instalacoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Instalacoes_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Instalacoes']
    ];
    Instalacoes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Instalacoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Instalacoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Instalacoes_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Instalacoes_aggregate']
    ];
    Lead_Id?: true;
    Oportunidades?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Oportunidades']
    ];
    Oportunidades_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Oportunidades_aggregate']
    ];
    Planos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Planos']
    ];
    Planos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Planos_aggregate']
    ];
    Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Produtos']
    ];
    Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Produtos_aggregate']
    ];
    Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Servicos']
    ];
    Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Servicos_aggregate']
    ];
    /** An object relationship */
    Situacao?: ValueTypes['propostas_Propostas_Situacoes'];
    Situacao_Id?: true;
    Ticket_Id?: true;
    TipoDePagamento_Id?: true;
    TipoDeRecorrencia_Id?: true;
    Usuario_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos']: AliasType<{
    /** An object relationship */
    Combo?: ValueTypes['comercial_Combos'];
    /** An object relationship */
    ComboPreco?: ValueTypes['comercial_Combos_Precos'];
    ComboPreco_Id?: true;
    Combo_Id?: true;
    Id?: true;
    /** An object relationship */
    Proposta?: ValueTypes['propostas_Propostas'];
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_aggregate']: AliasType<{
    aggregate?: ValueTypes['propostas_Propostas_Combos_aggregate_fields'];
    nodes?: ValueTypes['propostas_Propostas_Combos'];
    __typename?: true;
  }>;
  /** aggregate fields of "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['propostas_Propostas_Combos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['propostas_Propostas_Combos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['propostas_Propostas_Combos_max_fields'];
    min?: ValueTypes['propostas_Propostas_Combos_min_fields'];
    stddev?: ValueTypes['propostas_Propostas_Combos_stddev_fields'];
    stddev_pop?: ValueTypes['propostas_Propostas_Combos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['propostas_Propostas_Combos_stddev_samp_fields'];
    sum?: ValueTypes['propostas_Propostas_Combos_sum_fields'];
    var_pop?: ValueTypes['propostas_Propostas_Combos_var_pop_fields'];
    var_samp?: ValueTypes['propostas_Propostas_Combos_var_samp_fields'];
    variance?: ValueTypes['propostas_Propostas_Combos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_aggregate_order_by']: {
    avg?: ValueTypes['propostas_Propostas_Combos_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['propostas_Propostas_Combos_max_order_by'] | null;
    min?: ValueTypes['propostas_Propostas_Combos_min_order_by'] | null;
    stddev?: ValueTypes['propostas_Propostas_Combos_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['propostas_Propostas_Combos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['propostas_Propostas_Combos_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['propostas_Propostas_Combos_sum_order_by'] | null;
    var_pop?: ValueTypes['propostas_Propostas_Combos_var_pop_order_by'] | null;
    var_samp?:
      | ValueTypes['propostas_Propostas_Combos_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['propostas_Propostas_Combos_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_arr_rel_insert_input']: {
    data: ValueTypes['propostas_Propostas_Combos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['propostas_Propostas_Combos_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Combos_avg_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_avg_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Combos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Combos_bool_exp']: {
    Combo?: ValueTypes['comercial_Combos_bool_exp'] | null;
    ComboPreco?: ValueTypes['comercial_Combos_Precos_bool_exp'] | null;
    ComboPreco_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Combo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Proposta?: ValueTypes['propostas_Propostas_bool_exp'] | null;
    Proposta_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Veiculo?: ValueTypes['Int_comparison_exp'] | null;
    Veiculo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['propostas_Propostas_Combos_bool_exp'][];
    _not?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
    _or?: ValueTypes['propostas_Propostas_Combos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_constraint']: propostas_Propostas_Combos_constraint;
  /** input type for incrementing numeric columns in table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_inc_input']: {
    Veiculo?: number | null;
  };
  /** input type for inserting data into table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_insert_input']: {
    Combo?: ValueTypes['comercial_Combos_obj_rel_insert_input'] | null;
    ComboPreco?:
      | ValueTypes['comercial_Combos_Precos_obj_rel_insert_input']
      | null;
    ComboPreco_Id?: ValueTypes['uuid'] | null;
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Proposta?: ValueTypes['propostas_Propostas_obj_rel_insert_input'] | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Veiculo?: number | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Combos_max_fields']: AliasType<{
    ComboPreco_Id?: true;
    Combo_Id?: true;
    Id?: true;
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_max_order_by']: {
    ComboPreco_Id?: ValueTypes['order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Combos_min_fields']: AliasType<{
    ComboPreco_Id?: true;
    Combo_Id?: true;
    Id?: true;
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_min_order_by']: {
    ComboPreco_Id?: ValueTypes['order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['propostas_Propostas_Combos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_on_conflict']: {
    constraint: ValueTypes['propostas_Propostas_Combos_constraint'];
    update_columns: ValueTypes['propostas_Propostas_Combos_update_column'][];
    where?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "propostas.Propostas_Combos". */
  ['propostas_Propostas_Combos_order_by']: {
    Combo?: ValueTypes['comercial_Combos_order_by'] | null;
    ComboPreco?: ValueTypes['comercial_Combos_Precos_order_by'] | null;
    ComboPreco_Id?: ValueTypes['order_by'] | null;
    Combo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Proposta?: ValueTypes['propostas_Propostas_order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: propostas_Propostas_Combos */
  ['propostas_Propostas_Combos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_select_column']: propostas_Propostas_Combos_select_column;
  /** input type for updating data in table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_set_input']: {
    ComboPreco_Id?: ValueTypes['uuid'] | null;
    Combo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Veiculo?: number | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Combos_stddev_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_stddev_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Combos_stddev_pop_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_stddev_pop_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Combos_stddev_samp_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_stddev_samp_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Combos_sum_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_sum_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_update_column']: propostas_Propostas_Combos_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Combos_var_pop_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_var_pop_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Combos_var_samp_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_var_samp_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Combos_variance_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_variance_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes']: AliasType<{
    Endereco?: [
      {
        /** JSON select path */ path?: string | null;
      },
      true
    ];
    Id?: true;
    PosicaoDoVeiculo?: true;
    /** An object relationship */
    Proposta?: ValueTypes['propostas_Propostas'];
    Proposta_Id?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_aggregate']: AliasType<{
    aggregate?: ValueTypes['propostas_Propostas_Instalacoes_aggregate_fields'];
    nodes?: ValueTypes['propostas_Propostas_Instalacoes'];
    __typename?: true;
  }>;
  /** aggregate fields of "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_aggregate_fields']: AliasType<{
    avg?: ValueTypes['propostas_Propostas_Instalacoes_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['propostas_Propostas_Instalacoes_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['propostas_Propostas_Instalacoes_max_fields'];
    min?: ValueTypes['propostas_Propostas_Instalacoes_min_fields'];
    stddev?: ValueTypes['propostas_Propostas_Instalacoes_stddev_fields'];
    stddev_pop?: ValueTypes['propostas_Propostas_Instalacoes_stddev_pop_fields'];
    stddev_samp?: ValueTypes['propostas_Propostas_Instalacoes_stddev_samp_fields'];
    sum?: ValueTypes['propostas_Propostas_Instalacoes_sum_fields'];
    var_pop?: ValueTypes['propostas_Propostas_Instalacoes_var_pop_fields'];
    var_samp?: ValueTypes['propostas_Propostas_Instalacoes_var_samp_fields'];
    variance?: ValueTypes['propostas_Propostas_Instalacoes_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_aggregate_order_by']: {
    avg?: ValueTypes['propostas_Propostas_Instalacoes_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['propostas_Propostas_Instalacoes_max_order_by'] | null;
    min?: ValueTypes['propostas_Propostas_Instalacoes_min_order_by'] | null;
    stddev?:
      | ValueTypes['propostas_Propostas_Instalacoes_stddev_order_by']
      | null;
    stddev_pop?:
      | ValueTypes['propostas_Propostas_Instalacoes_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['propostas_Propostas_Instalacoes_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['propostas_Propostas_Instalacoes_sum_order_by'] | null;
    var_pop?:
      | ValueTypes['propostas_Propostas_Instalacoes_var_pop_order_by']
      | null;
    var_samp?:
      | ValueTypes['propostas_Propostas_Instalacoes_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['propostas_Propostas_Instalacoes_variance_order_by']
      | null;
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['propostas_Propostas_Instalacoes_append_input']: {
    Endereco?: ValueTypes['jsonb'] | null;
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_arr_rel_insert_input']: {
    data: ValueTypes['propostas_Propostas_Instalacoes_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['propostas_Propostas_Instalacoes_on_conflict']
      | null;
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Instalacoes_avg_fields']: AliasType<{
    PosicaoDoVeiculo?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_avg_order_by']: {
    PosicaoDoVeiculo?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Instalacoes". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Instalacoes_bool_exp']: {
    Endereco?: ValueTypes['jsonb_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    PosicaoDoVeiculo?: ValueTypes['Int_comparison_exp'] | null;
    Proposta?: ValueTypes['propostas_Propostas_bool_exp'] | null;
    Proposta_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Veiculo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['propostas_Propostas_Instalacoes_bool_exp'][];
    _not?: ValueTypes['propostas_Propostas_Instalacoes_bool_exp'] | null;
    _or?: ValueTypes['propostas_Propostas_Instalacoes_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_constraint']: propostas_Propostas_Instalacoes_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['propostas_Propostas_Instalacoes_delete_at_path_input']: {
    Endereco?: string[];
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['propostas_Propostas_Instalacoes_delete_elem_input']: {
    Endereco?: number | null;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['propostas_Propostas_Instalacoes_delete_key_input']: {
    Endereco?: string | null;
  };
  /** input type for incrementing numeric columns in table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_inc_input']: {
    PosicaoDoVeiculo?: number | null;
  };
  /** input type for inserting data into table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_insert_input']: {
    Endereco?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    PosicaoDoVeiculo?: number | null;
    Proposta?: ValueTypes['propostas_Propostas_obj_rel_insert_input'] | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Instalacoes_max_fields']: AliasType<{
    Id?: true;
    PosicaoDoVeiculo?: true;
    Proposta_Id?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    PosicaoDoVeiculo?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Instalacoes_min_fields']: AliasType<{
    Id?: true;
    PosicaoDoVeiculo?: true;
    Proposta_Id?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    PosicaoDoVeiculo?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['propostas_Propostas_Instalacoes'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_on_conflict']: {
    constraint: ValueTypes['propostas_Propostas_Instalacoes_constraint'];
    update_columns: ValueTypes['propostas_Propostas_Instalacoes_update_column'][];
    where?: ValueTypes['propostas_Propostas_Instalacoes_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "propostas.Propostas_Instalacoes". */
  ['propostas_Propostas_Instalacoes_order_by']: {
    Endereco?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    PosicaoDoVeiculo?: ValueTypes['order_by'] | null;
    Proposta?: ValueTypes['propostas_Propostas_order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: propostas_Propostas_Instalacoes */
  ['propostas_Propostas_Instalacoes_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['propostas_Propostas_Instalacoes_prepend_input']: {
    Endereco?: ValueTypes['jsonb'] | null;
  };
  /** select columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_select_column']: propostas_Propostas_Instalacoes_select_column;
  /** input type for updating data in table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_set_input']: {
    Endereco?: ValueTypes['jsonb'] | null;
    Id?: ValueTypes['uuid'] | null;
    PosicaoDoVeiculo?: number | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Instalacoes_stddev_fields']: AliasType<{
    PosicaoDoVeiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_stddev_order_by']: {
    PosicaoDoVeiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Instalacoes_stddev_pop_fields']: AliasType<{
    PosicaoDoVeiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_stddev_pop_order_by']: {
    PosicaoDoVeiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Instalacoes_stddev_samp_fields']: AliasType<{
    PosicaoDoVeiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_stddev_samp_order_by']: {
    PosicaoDoVeiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Instalacoes_sum_fields']: AliasType<{
    PosicaoDoVeiculo?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_sum_order_by']: {
    PosicaoDoVeiculo?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_update_column']: propostas_Propostas_Instalacoes_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Instalacoes_var_pop_fields']: AliasType<{
    PosicaoDoVeiculo?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_var_pop_order_by']: {
    PosicaoDoVeiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Instalacoes_var_samp_fields']: AliasType<{
    PosicaoDoVeiculo?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_var_samp_order_by']: {
    PosicaoDoVeiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Instalacoes_variance_fields']: AliasType<{
    PosicaoDoVeiculo?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_variance_order_by']: {
    PosicaoDoVeiculo?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades']: AliasType<{
    Id?: true;
    /** An object relationship */
    OportunidadeDeProduto?: ValueTypes['comercial_Produtos_Oportunidades'];
    /** An object relationship */
    OportunidadeDeServico?: ValueTypes['comercial_Servicos_Oportunidades'];
    OportunidadeProduto_Id?: true;
    OportunidadeServico_Id?: true;
    /** An object relationship */
    Proposta?: ValueTypes['propostas_Propostas'];
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_aggregate']: AliasType<{
    aggregate?: ValueTypes['propostas_Propostas_Oportunidades_aggregate_fields'];
    nodes?: ValueTypes['propostas_Propostas_Oportunidades'];
    __typename?: true;
  }>;
  /** aggregate fields of "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_aggregate_fields']: AliasType<{
    avg?: ValueTypes['propostas_Propostas_Oportunidades_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['propostas_Propostas_Oportunidades_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['propostas_Propostas_Oportunidades_max_fields'];
    min?: ValueTypes['propostas_Propostas_Oportunidades_min_fields'];
    stddev?: ValueTypes['propostas_Propostas_Oportunidades_stddev_fields'];
    stddev_pop?: ValueTypes['propostas_Propostas_Oportunidades_stddev_pop_fields'];
    stddev_samp?: ValueTypes['propostas_Propostas_Oportunidades_stddev_samp_fields'];
    sum?: ValueTypes['propostas_Propostas_Oportunidades_sum_fields'];
    var_pop?: ValueTypes['propostas_Propostas_Oportunidades_var_pop_fields'];
    var_samp?: ValueTypes['propostas_Propostas_Oportunidades_var_samp_fields'];
    variance?: ValueTypes['propostas_Propostas_Oportunidades_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_aggregate_order_by']: {
    avg?: ValueTypes['propostas_Propostas_Oportunidades_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['propostas_Propostas_Oportunidades_max_order_by'] | null;
    min?: ValueTypes['propostas_Propostas_Oportunidades_min_order_by'] | null;
    stddev?:
      | ValueTypes['propostas_Propostas_Oportunidades_stddev_order_by']
      | null;
    stddev_pop?:
      | ValueTypes['propostas_Propostas_Oportunidades_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['propostas_Propostas_Oportunidades_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['propostas_Propostas_Oportunidades_sum_order_by'] | null;
    var_pop?:
      | ValueTypes['propostas_Propostas_Oportunidades_var_pop_order_by']
      | null;
    var_samp?:
      | ValueTypes['propostas_Propostas_Oportunidades_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['propostas_Propostas_Oportunidades_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_arr_rel_insert_input']: {
    data: ValueTypes['propostas_Propostas_Oportunidades_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['propostas_Propostas_Oportunidades_on_conflict']
      | null;
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Oportunidades_avg_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_avg_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Oportunidades". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Oportunidades_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    OportunidadeDeProduto?:
      | ValueTypes['comercial_Produtos_Oportunidades_bool_exp']
      | null;
    OportunidadeDeServico?:
      | ValueTypes['comercial_Servicos_Oportunidades_bool_exp']
      | null;
    OportunidadeProduto_Id?: ValueTypes['uuid_comparison_exp'] | null;
    OportunidadeServico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Proposta?: ValueTypes['propostas_Propostas_bool_exp'] | null;
    Proposta_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Veiculo?: ValueTypes['Int_comparison_exp'] | null;
    Veiculo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'][];
    _not?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'] | null;
    _or?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_constraint']: propostas_Propostas_Oportunidades_constraint;
  /** input type for incrementing numeric columns in table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_inc_input']: {
    Veiculo?: number | null;
  };
  /** input type for inserting data into table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    OportunidadeDeProduto?:
      | ValueTypes['comercial_Produtos_Oportunidades_obj_rel_insert_input']
      | null;
    OportunidadeDeServico?:
      | ValueTypes['comercial_Servicos_Oportunidades_obj_rel_insert_input']
      | null;
    OportunidadeProduto_Id?: ValueTypes['uuid'] | null;
    OportunidadeServico_Id?: ValueTypes['uuid'] | null;
    Proposta?: ValueTypes['propostas_Propostas_obj_rel_insert_input'] | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Veiculo?: number | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Oportunidades_max_fields']: AliasType<{
    Id?: true;
    OportunidadeProduto_Id?: true;
    OportunidadeServico_Id?: true;
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    OportunidadeProduto_Id?: ValueTypes['order_by'] | null;
    OportunidadeServico_Id?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Oportunidades_min_fields']: AliasType<{
    Id?: true;
    OportunidadeProduto_Id?: true;
    OportunidadeServico_Id?: true;
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    OportunidadeProduto_Id?: ValueTypes['order_by'] | null;
    OportunidadeServico_Id?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['propostas_Propostas_Oportunidades'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_on_conflict']: {
    constraint: ValueTypes['propostas_Propostas_Oportunidades_constraint'];
    update_columns: ValueTypes['propostas_Propostas_Oportunidades_update_column'][];
    where?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "propostas.Propostas_Oportunidades". */
  ['propostas_Propostas_Oportunidades_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    OportunidadeDeProduto?:
      | ValueTypes['comercial_Produtos_Oportunidades_order_by']
      | null;
    OportunidadeDeServico?:
      | ValueTypes['comercial_Servicos_Oportunidades_order_by']
      | null;
    OportunidadeProduto_Id?: ValueTypes['order_by'] | null;
    OportunidadeServico_Id?: ValueTypes['order_by'] | null;
    Proposta?: ValueTypes['propostas_Propostas_order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: propostas_Propostas_Oportunidades */
  ['propostas_Propostas_Oportunidades_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_select_column']: propostas_Propostas_Oportunidades_select_column;
  /** input type for updating data in table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    OportunidadeProduto_Id?: ValueTypes['uuid'] | null;
    OportunidadeServico_Id?: ValueTypes['uuid'] | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Veiculo?: number | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Oportunidades_stddev_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_stddev_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Oportunidades_stddev_pop_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_stddev_pop_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Oportunidades_stddev_samp_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_stddev_samp_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Oportunidades_sum_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_sum_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_update_column']: propostas_Propostas_Oportunidades_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Oportunidades_var_pop_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_var_pop_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Oportunidades_var_samp_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_var_samp_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Oportunidades_variance_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_variance_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos']: AliasType<{
    Id?: true;
    /** An object relationship */
    Plano?: ValueTypes['comercial_Planos'];
    /** An object relationship */
    PlanoPreco?: ValueTypes['comercial_Planos_Precos'];
    PlanoPreco_Id?: true;
    Plano_Id?: true;
    /** An object relationship */
    Proposta?: ValueTypes['propostas_Propostas'];
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_aggregate']: AliasType<{
    aggregate?: ValueTypes['propostas_Propostas_Planos_aggregate_fields'];
    nodes?: ValueTypes['propostas_Propostas_Planos'];
    __typename?: true;
  }>;
  /** aggregate fields of "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['propostas_Propostas_Planos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['propostas_Propostas_Planos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['propostas_Propostas_Planos_max_fields'];
    min?: ValueTypes['propostas_Propostas_Planos_min_fields'];
    stddev?: ValueTypes['propostas_Propostas_Planos_stddev_fields'];
    stddev_pop?: ValueTypes['propostas_Propostas_Planos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['propostas_Propostas_Planos_stddev_samp_fields'];
    sum?: ValueTypes['propostas_Propostas_Planos_sum_fields'];
    var_pop?: ValueTypes['propostas_Propostas_Planos_var_pop_fields'];
    var_samp?: ValueTypes['propostas_Propostas_Planos_var_samp_fields'];
    variance?: ValueTypes['propostas_Propostas_Planos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_aggregate_order_by']: {
    avg?: ValueTypes['propostas_Propostas_Planos_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['propostas_Propostas_Planos_max_order_by'] | null;
    min?: ValueTypes['propostas_Propostas_Planos_min_order_by'] | null;
    stddev?: ValueTypes['propostas_Propostas_Planos_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['propostas_Propostas_Planos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['propostas_Propostas_Planos_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['propostas_Propostas_Planos_sum_order_by'] | null;
    var_pop?: ValueTypes['propostas_Propostas_Planos_var_pop_order_by'] | null;
    var_samp?:
      | ValueTypes['propostas_Propostas_Planos_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['propostas_Propostas_Planos_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_arr_rel_insert_input']: {
    data: ValueTypes['propostas_Propostas_Planos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['propostas_Propostas_Planos_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Planos_avg_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_avg_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Planos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Planos_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Plano?: ValueTypes['comercial_Planos_bool_exp'] | null;
    PlanoPreco?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
    PlanoPreco_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Plano_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Proposta?: ValueTypes['propostas_Propostas_bool_exp'] | null;
    Proposta_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Veiculo?: ValueTypes['Int_comparison_exp'] | null;
    Veiculo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['propostas_Propostas_Planos_bool_exp'][];
    _not?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
    _or?: ValueTypes['propostas_Propostas_Planos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_constraint']: propostas_Propostas_Planos_constraint;
  /** input type for incrementing numeric columns in table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_inc_input']: {
    Veiculo?: number | null;
  };
  /** input type for inserting data into table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Plano?: ValueTypes['comercial_Planos_obj_rel_insert_input'] | null;
    PlanoPreco?:
      | ValueTypes['comercial_Planos_Precos_obj_rel_insert_input']
      | null;
    PlanoPreco_Id?: ValueTypes['uuid'] | null;
    Plano_Id?: ValueTypes['uuid'] | null;
    Proposta?: ValueTypes['propostas_Propostas_obj_rel_insert_input'] | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Veiculo?: number | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Planos_max_fields']: AliasType<{
    Id?: true;
    PlanoPreco_Id?: true;
    Plano_Id?: true;
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    PlanoPreco_Id?: ValueTypes['order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Planos_min_fields']: AliasType<{
    Id?: true;
    PlanoPreco_Id?: true;
    Plano_Id?: true;
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    PlanoPreco_Id?: ValueTypes['order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['propostas_Propostas_Planos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_on_conflict']: {
    constraint: ValueTypes['propostas_Propostas_Planos_constraint'];
    update_columns: ValueTypes['propostas_Propostas_Planos_update_column'][];
    where?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "propostas.Propostas_Planos". */
  ['propostas_Propostas_Planos_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Plano?: ValueTypes['comercial_Planos_order_by'] | null;
    PlanoPreco?: ValueTypes['comercial_Planos_Precos_order_by'] | null;
    PlanoPreco_Id?: ValueTypes['order_by'] | null;
    Plano_Id?: ValueTypes['order_by'] | null;
    Proposta?: ValueTypes['propostas_Propostas_order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: propostas_Propostas_Planos */
  ['propostas_Propostas_Planos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_select_column']: propostas_Propostas_Planos_select_column;
  /** input type for updating data in table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    PlanoPreco_Id?: ValueTypes['uuid'] | null;
    Plano_Id?: ValueTypes['uuid'] | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Veiculo?: number | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Planos_stddev_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_stddev_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Planos_stddev_pop_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_stddev_pop_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Planos_stddev_samp_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_stddev_samp_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Planos_sum_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_sum_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_update_column']: propostas_Propostas_Planos_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Planos_var_pop_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_var_pop_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Planos_var_samp_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_var_samp_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Planos_variance_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_variance_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos']: AliasType<{
    Id?: true;
    /** An object relationship */
    Produto?: ValueTypes['comercial_Produtos'];
    /** An object relationship */
    ProdutoPreco?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    ProdutoPreco_Id?: true;
    Produto_Id?: true;
    /** An object relationship */
    Proposta?: ValueTypes['propostas_Propostas'];
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_aggregate']: AliasType<{
    aggregate?: ValueTypes['propostas_Propostas_Produtos_aggregate_fields'];
    nodes?: ValueTypes['propostas_Propostas_Produtos'];
    __typename?: true;
  }>;
  /** aggregate fields of "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['propostas_Propostas_Produtos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['propostas_Propostas_Produtos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['propostas_Propostas_Produtos_max_fields'];
    min?: ValueTypes['propostas_Propostas_Produtos_min_fields'];
    stddev?: ValueTypes['propostas_Propostas_Produtos_stddev_fields'];
    stddev_pop?: ValueTypes['propostas_Propostas_Produtos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['propostas_Propostas_Produtos_stddev_samp_fields'];
    sum?: ValueTypes['propostas_Propostas_Produtos_sum_fields'];
    var_pop?: ValueTypes['propostas_Propostas_Produtos_var_pop_fields'];
    var_samp?: ValueTypes['propostas_Propostas_Produtos_var_samp_fields'];
    variance?: ValueTypes['propostas_Propostas_Produtos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_aggregate_order_by']: {
    avg?: ValueTypes['propostas_Propostas_Produtos_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['propostas_Propostas_Produtos_max_order_by'] | null;
    min?: ValueTypes['propostas_Propostas_Produtos_min_order_by'] | null;
    stddev?: ValueTypes['propostas_Propostas_Produtos_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['propostas_Propostas_Produtos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['propostas_Propostas_Produtos_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['propostas_Propostas_Produtos_sum_order_by'] | null;
    var_pop?:
      | ValueTypes['propostas_Propostas_Produtos_var_pop_order_by']
      | null;
    var_samp?:
      | ValueTypes['propostas_Propostas_Produtos_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['propostas_Propostas_Produtos_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_arr_rel_insert_input']: {
    data: ValueTypes['propostas_Propostas_Produtos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['propostas_Propostas_Produtos_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Produtos_avg_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_avg_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Produtos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Produtos_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Produto?: ValueTypes['comercial_Produtos_bool_exp'] | null;
    ProdutoPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
      | null;
    ProdutoPreco_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Produto_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Proposta?: ValueTypes['propostas_Propostas_bool_exp'] | null;
    Proposta_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Veiculo?: ValueTypes['Int_comparison_exp'] | null;
    Veiculo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['propostas_Propostas_Produtos_bool_exp'][];
    _not?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
    _or?: ValueTypes['propostas_Propostas_Produtos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_constraint']: propostas_Propostas_Produtos_constraint;
  /** input type for incrementing numeric columns in table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_inc_input']: {
    Veiculo?: number | null;
  };
  /** input type for inserting data into table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Produto?: ValueTypes['comercial_Produtos_obj_rel_insert_input'] | null;
    ProdutoPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_obj_rel_insert_input']
      | null;
    ProdutoPreco_Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    Proposta?: ValueTypes['propostas_Propostas_obj_rel_insert_input'] | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Veiculo?: number | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Produtos_max_fields']: AliasType<{
    Id?: true;
    ProdutoPreco_Id?: true;
    Produto_Id?: true;
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    ProdutoPreco_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Produtos_min_fields']: AliasType<{
    Id?: true;
    ProdutoPreco_Id?: true;
    Produto_Id?: true;
    Proposta_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    ProdutoPreco_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['propostas_Propostas_Produtos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_on_conflict']: {
    constraint: ValueTypes['propostas_Propostas_Produtos_constraint'];
    update_columns: ValueTypes['propostas_Propostas_Produtos_update_column'][];
    where?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "propostas.Propostas_Produtos". */
  ['propostas_Propostas_Produtos_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Produto?: ValueTypes['comercial_Produtos_order_by'] | null;
    ProdutoPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_order_by']
      | null;
    ProdutoPreco_Id?: ValueTypes['order_by'] | null;
    Produto_Id?: ValueTypes['order_by'] | null;
    Proposta?: ValueTypes['propostas_Propostas_order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: propostas_Propostas_Produtos */
  ['propostas_Propostas_Produtos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_select_column']: propostas_Propostas_Produtos_select_column;
  /** input type for updating data in table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    ProdutoPreco_Id?: ValueTypes['uuid'] | null;
    Produto_Id?: ValueTypes['uuid'] | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Veiculo?: number | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Produtos_stddev_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_stddev_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Produtos_stddev_pop_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_stddev_pop_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Produtos_stddev_samp_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_stddev_samp_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Produtos_sum_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_sum_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_update_column']: propostas_Propostas_Produtos_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Produtos_var_pop_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_var_pop_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Produtos_var_samp_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_var_samp_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Produtos_variance_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_variance_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos']: AliasType<{
    Id?: true;
    /** An object relationship */
    Proposta?: ValueTypes['propostas_Propostas'];
    Proposta_Id?: true;
    /** An object relationship */
    Servico?: ValueTypes['comercial_Servicos'];
    Servico_Id?: true;
    /** An object relationship */
    ServicosPreco?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    ServicosPreco_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_aggregate']: AliasType<{
    aggregate?: ValueTypes['propostas_Propostas_Servicos_aggregate_fields'];
    nodes?: ValueTypes['propostas_Propostas_Servicos'];
    __typename?: true;
  }>;
  /** aggregate fields of "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_aggregate_fields']: AliasType<{
    avg?: ValueTypes['propostas_Propostas_Servicos_avg_fields'];
    count?: [
      {
        columns?: ValueTypes['propostas_Propostas_Servicos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['propostas_Propostas_Servicos_max_fields'];
    min?: ValueTypes['propostas_Propostas_Servicos_min_fields'];
    stddev?: ValueTypes['propostas_Propostas_Servicos_stddev_fields'];
    stddev_pop?: ValueTypes['propostas_Propostas_Servicos_stddev_pop_fields'];
    stddev_samp?: ValueTypes['propostas_Propostas_Servicos_stddev_samp_fields'];
    sum?: ValueTypes['propostas_Propostas_Servicos_sum_fields'];
    var_pop?: ValueTypes['propostas_Propostas_Servicos_var_pop_fields'];
    var_samp?: ValueTypes['propostas_Propostas_Servicos_var_samp_fields'];
    variance?: ValueTypes['propostas_Propostas_Servicos_variance_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_aggregate_order_by']: {
    avg?: ValueTypes['propostas_Propostas_Servicos_avg_order_by'] | null;
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['propostas_Propostas_Servicos_max_order_by'] | null;
    min?: ValueTypes['propostas_Propostas_Servicos_min_order_by'] | null;
    stddev?: ValueTypes['propostas_Propostas_Servicos_stddev_order_by'] | null;
    stddev_pop?:
      | ValueTypes['propostas_Propostas_Servicos_stddev_pop_order_by']
      | null;
    stddev_samp?:
      | ValueTypes['propostas_Propostas_Servicos_stddev_samp_order_by']
      | null;
    sum?: ValueTypes['propostas_Propostas_Servicos_sum_order_by'] | null;
    var_pop?:
      | ValueTypes['propostas_Propostas_Servicos_var_pop_order_by']
      | null;
    var_samp?:
      | ValueTypes['propostas_Propostas_Servicos_var_samp_order_by']
      | null;
    variance?:
      | ValueTypes['propostas_Propostas_Servicos_variance_order_by']
      | null;
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_arr_rel_insert_input']: {
    data: ValueTypes['propostas_Propostas_Servicos_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['propostas_Propostas_Servicos_on_conflict'] | null;
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Servicos_avg_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by avg() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_avg_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Servicos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Servicos_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Proposta?: ValueTypes['propostas_Propostas_bool_exp'] | null;
    Proposta_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Servico?: ValueTypes['comercial_Servicos_bool_exp'] | null;
    Servico_Id?: ValueTypes['uuid_comparison_exp'] | null;
    ServicosPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
      | null;
    ServicosPreco_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Veiculo?: ValueTypes['Int_comparison_exp'] | null;
    Veiculo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['propostas_Propostas_Servicos_bool_exp'][];
    _not?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
    _or?: ValueTypes['propostas_Propostas_Servicos_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_constraint']: propostas_Propostas_Servicos_constraint;
  /** input type for incrementing numeric columns in table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_inc_input']: {
    Veiculo?: number | null;
  };
  /** input type for inserting data into table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Proposta?: ValueTypes['propostas_Propostas_obj_rel_insert_input'] | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Servico?: ValueTypes['comercial_Servicos_obj_rel_insert_input'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    ServicosPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_obj_rel_insert_input']
      | null;
    ServicosPreco_Id?: ValueTypes['uuid'] | null;
    Veiculo?: number | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Servicos_max_fields']: AliasType<{
    Id?: true;
    Proposta_Id?: true;
    Servico_Id?: true;
    ServicosPreco_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_max_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    ServicosPreco_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Servicos_min_fields']: AliasType<{
    Id?: true;
    Proposta_Id?: true;
    Servico_Id?: true;
    ServicosPreco_Id?: true;
    Veiculo?: true;
    Veiculo_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_min_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    ServicosPreco_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['propostas_Propostas_Servicos'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_on_conflict']: {
    constraint: ValueTypes['propostas_Propostas_Servicos_constraint'];
    update_columns: ValueTypes['propostas_Propostas_Servicos_update_column'][];
    where?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "propostas.Propostas_Servicos". */
  ['propostas_Propostas_Servicos_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Proposta?: ValueTypes['propostas_Propostas_order_by'] | null;
    Proposta_Id?: ValueTypes['order_by'] | null;
    Servico?: ValueTypes['comercial_Servicos_order_by'] | null;
    Servico_Id?: ValueTypes['order_by'] | null;
    ServicosPreco?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by']
      | null;
    ServicosPreco_Id?: ValueTypes['order_by'] | null;
    Veiculo?: ValueTypes['order_by'] | null;
    Veiculo_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: propostas_Propostas_Servicos */
  ['propostas_Propostas_Servicos_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_select_column']: propostas_Propostas_Servicos_select_column;
  /** input type for updating data in table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Proposta_Id?: ValueTypes['uuid'] | null;
    Servico_Id?: ValueTypes['uuid'] | null;
    ServicosPreco_Id?: ValueTypes['uuid'] | null;
    Veiculo?: number | null;
    Veiculo_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Servicos_stddev_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_stddev_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Servicos_stddev_pop_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_pop() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_stddev_pop_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Servicos_stddev_samp_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by stddev_samp() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_stddev_samp_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Servicos_sum_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by sum() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_sum_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** update columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_update_column']: propostas_Propostas_Servicos_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Servicos_var_pop_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by var_pop() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_var_pop_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Servicos_var_samp_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by var_samp() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_var_samp_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Servicos_variance_fields']: AliasType<{
    Veiculo?: true;
    __typename?: true;
  }>;
  /** order by variance() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_variance_order_by']: {
    Veiculo?: ValueTypes['order_by'] | null;
  };
  /** columns and relationships of "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes']: AliasType<{
    Comentario?: true;
    Propostas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas']
    ];
    Propostas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_aggregate']
    ];
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_aggregate']: AliasType<{
    aggregate?: ValueTypes['propostas_Propostas_Situacoes_aggregate_fields'];
    nodes?: ValueTypes['propostas_Propostas_Situacoes'];
    __typename?: true;
  }>;
  /** aggregate fields of "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['propostas_Propostas_Situacoes_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['propostas_Propostas_Situacoes_max_fields'];
    min?: ValueTypes['propostas_Propostas_Situacoes_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "propostas.Propostas_Situacoes". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Situacoes_bool_exp']: {
    Comentario?: ValueTypes['String_comparison_exp'] | null;
    Propostas?: ValueTypes['propostas_Propostas_bool_exp'] | null;
    Valor?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['propostas_Propostas_Situacoes_bool_exp'][];
    _not?: ValueTypes['propostas_Propostas_Situacoes_bool_exp'] | null;
    _or?: ValueTypes['propostas_Propostas_Situacoes_bool_exp'][];
  };
  /** unique or primary key constraints on table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_constraint']: propostas_Propostas_Situacoes_constraint;
  ['propostas_Propostas_Situacoes_enum']: propostas_Propostas_Situacoes_enum;
  /** Boolean expression to compare columns of type "propostas_Propostas_Situacoes_enum". All fields are combined with logical 'AND'. */
  ['propostas_Propostas_Situacoes_enum_comparison_exp']: {
    _eq?: ValueTypes['propostas_Propostas_Situacoes_enum'] | null;
    _in?: ValueTypes['propostas_Propostas_Situacoes_enum'][];
    _is_null?: boolean | null;
    _neq?: ValueTypes['propostas_Propostas_Situacoes_enum'] | null;
    _nin?: ValueTypes['propostas_Propostas_Situacoes_enum'][];
  };
  /** input type for inserting data into table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_insert_input']: {
    Comentario?: string | null;
    Propostas?: ValueTypes['propostas_Propostas_arr_rel_insert_input'] | null;
    Valor?: string | null;
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Situacoes_max_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['propostas_Propostas_Situacoes_min_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['propostas_Propostas_Situacoes'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_obj_rel_insert_input']: {
    data: ValueTypes['propostas_Propostas_Situacoes_insert_input'];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['propostas_Propostas_Situacoes_on_conflict']
      | null;
  };
  /** on conflict condition type for table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_on_conflict']: {
    constraint: ValueTypes['propostas_Propostas_Situacoes_constraint'];
    update_columns: ValueTypes['propostas_Propostas_Situacoes_update_column'][];
    where?: ValueTypes['propostas_Propostas_Situacoes_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "propostas.Propostas_Situacoes". */
  ['propostas_Propostas_Situacoes_order_by']: {
    Comentario?: ValueTypes['order_by'] | null;
    Propostas_aggregate?:
      | ValueTypes['propostas_Propostas_aggregate_order_by']
      | null;
    Valor?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: propostas_Propostas_Situacoes */
  ['propostas_Propostas_Situacoes_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_select_column']: propostas_Propostas_Situacoes_select_column;
  /** input type for updating data in table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_set_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** update columns of table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_update_column']: propostas_Propostas_Situacoes_update_column;
  /** aggregated selection of "propostas.Propostas" */
  ['propostas_Propostas_aggregate']: AliasType<{
    aggregate?: ValueTypes['propostas_Propostas_aggregate_fields'];
    nodes?: ValueTypes['propostas_Propostas'];
    __typename?: true;
  }>;
  /** aggregate fields of "propostas.Propostas" */
  ['propostas_Propostas_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['propostas_Propostas_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['propostas_Propostas_max_fields'];
    min?: ValueTypes['propostas_Propostas_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "propostas.Propostas" */
  ['propostas_Propostas_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['propostas_Propostas_max_order_by'] | null;
    min?: ValueTypes['propostas_Propostas_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "propostas.Propostas" */
  ['propostas_Propostas_arr_rel_insert_input']: {
    data: ValueTypes['propostas_Propostas_insert_input'][];
    /** on conflict condition */
    on_conflict?: ValueTypes['propostas_Propostas_on_conflict'] | null;
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_bool_exp']: {
    Cliente_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Combos?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
    DataAceito?: ValueTypes['timestamptz_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Instalacoes?: ValueTypes['propostas_Propostas_Instalacoes_bool_exp'] | null;
    Lead_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Oportunidades?:
      | ValueTypes['propostas_Propostas_Oportunidades_bool_exp']
      | null;
    Planos?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
    Produtos?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
    Servicos?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
    Situacao?: ValueTypes['propostas_Propostas_Situacoes_bool_exp'] | null;
    Situacao_Id?:
      | ValueTypes['propostas_Propostas_Situacoes_enum_comparison_exp']
      | null;
    Ticket_Id?: ValueTypes['uuid_comparison_exp'] | null;
    TipoDePagamento_Id?: ValueTypes['String_comparison_exp'] | null;
    TipoDeRecorrencia_Id?: ValueTypes['String_comparison_exp'] | null;
    Usuario_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['propostas_Propostas_bool_exp'][];
    _not?: ValueTypes['propostas_Propostas_bool_exp'] | null;
    _or?: ValueTypes['propostas_Propostas_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "propostas.Propostas" */
  ['propostas_Propostas_constraint']: propostas_Propostas_constraint;
  /** input type for inserting data into table "propostas.Propostas" */
  ['propostas_Propostas_insert_input']: {
    Cliente_Id?: ValueTypes['uuid'] | null;
    Combos?:
      | ValueTypes['propostas_Propostas_Combos_arr_rel_insert_input']
      | null;
    DataAceito?: ValueTypes['timestamptz'] | null;
    Id?: ValueTypes['uuid'] | null;
    Instalacoes?:
      | ValueTypes['propostas_Propostas_Instalacoes_arr_rel_insert_input']
      | null;
    Lead_Id?: ValueTypes['uuid'] | null;
    Oportunidades?:
      | ValueTypes['propostas_Propostas_Oportunidades_arr_rel_insert_input']
      | null;
    Planos?:
      | ValueTypes['propostas_Propostas_Planos_arr_rel_insert_input']
      | null;
    Produtos?:
      | ValueTypes['propostas_Propostas_Produtos_arr_rel_insert_input']
      | null;
    Servicos?:
      | ValueTypes['propostas_Propostas_Servicos_arr_rel_insert_input']
      | null;
    Situacao?:
      | ValueTypes['propostas_Propostas_Situacoes_obj_rel_insert_input']
      | null;
    Situacao_Id?: ValueTypes['propostas_Propostas_Situacoes_enum'] | null;
    Ticket_Id?: ValueTypes['uuid'] | null;
    TipoDePagamento_Id?: string | null;
    TipoDeRecorrencia_Id?: string | null;
    Usuario_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['propostas_Propostas_max_fields']: AliasType<{
    Cliente_Id?: true;
    DataAceito?: true;
    Id?: true;
    Lead_Id?: true;
    Ticket_Id?: true;
    TipoDePagamento_Id?: true;
    TipoDeRecorrencia_Id?: true;
    Usuario_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "propostas.Propostas" */
  ['propostas_Propostas_max_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    DataAceito?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Lead_Id?: ValueTypes['order_by'] | null;
    Ticket_Id?: ValueTypes['order_by'] | null;
    TipoDePagamento_Id?: ValueTypes['order_by'] | null;
    TipoDeRecorrencia_Id?: ValueTypes['order_by'] | null;
    Usuario_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['propostas_Propostas_min_fields']: AliasType<{
    Cliente_Id?: true;
    DataAceito?: true;
    Id?: true;
    Lead_Id?: true;
    Ticket_Id?: true;
    TipoDePagamento_Id?: true;
    TipoDeRecorrencia_Id?: true;
    Usuario_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "propostas.Propostas" */
  ['propostas_Propostas_min_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    DataAceito?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Lead_Id?: ValueTypes['order_by'] | null;
    Ticket_Id?: ValueTypes['order_by'] | null;
    TipoDePagamento_Id?: ValueTypes['order_by'] | null;
    TipoDeRecorrencia_Id?: ValueTypes['order_by'] | null;
    Usuario_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "propostas.Propostas" */
  ['propostas_Propostas_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['propostas_Propostas'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "propostas.Propostas" */
  ['propostas_Propostas_obj_rel_insert_input']: {
    data: ValueTypes['propostas_Propostas_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['propostas_Propostas_on_conflict'] | null;
  };
  /** on conflict condition type for table "propostas.Propostas" */
  ['propostas_Propostas_on_conflict']: {
    constraint: ValueTypes['propostas_Propostas_constraint'];
    update_columns: ValueTypes['propostas_Propostas_update_column'][];
    where?: ValueTypes['propostas_Propostas_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "propostas.Propostas". */
  ['propostas_Propostas_order_by']: {
    Cliente_Id?: ValueTypes['order_by'] | null;
    Combos_aggregate?:
      | ValueTypes['propostas_Propostas_Combos_aggregate_order_by']
      | null;
    DataAceito?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Instalacoes_aggregate?:
      | ValueTypes['propostas_Propostas_Instalacoes_aggregate_order_by']
      | null;
    Lead_Id?: ValueTypes['order_by'] | null;
    Oportunidades_aggregate?:
      | ValueTypes['propostas_Propostas_Oportunidades_aggregate_order_by']
      | null;
    Planos_aggregate?:
      | ValueTypes['propostas_Propostas_Planos_aggregate_order_by']
      | null;
    Produtos_aggregate?:
      | ValueTypes['propostas_Propostas_Produtos_aggregate_order_by']
      | null;
    Servicos_aggregate?:
      | ValueTypes['propostas_Propostas_Servicos_aggregate_order_by']
      | null;
    Situacao?: ValueTypes['propostas_Propostas_Situacoes_order_by'] | null;
    Situacao_Id?: ValueTypes['order_by'] | null;
    Ticket_Id?: ValueTypes['order_by'] | null;
    TipoDePagamento_Id?: ValueTypes['order_by'] | null;
    TipoDeRecorrencia_Id?: ValueTypes['order_by'] | null;
    Usuario_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: propostas_Propostas */
  ['propostas_Propostas_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas" */
  ['propostas_Propostas_select_column']: propostas_Propostas_select_column;
  /** input type for updating data in table "propostas.Propostas" */
  ['propostas_Propostas_set_input']: {
    Cliente_Id?: ValueTypes['uuid'] | null;
    DataAceito?: ValueTypes['timestamptz'] | null;
    Id?: ValueTypes['uuid'] | null;
    Lead_Id?: ValueTypes['uuid'] | null;
    Situacao_Id?: ValueTypes['propostas_Propostas_Situacoes_enum'] | null;
    Ticket_Id?: ValueTypes['uuid'] | null;
    TipoDePagamento_Id?: string | null;
    TipoDeRecorrencia_Id?: string | null;
    Usuario_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "propostas.Propostas" */
  ['propostas_Propostas_update_column']: propostas_Propostas_update_column;
  ['query_root']: AliasType<{
    CategoriasDeVeiculos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['CategoriasDeVeiculos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['CategoriasDeVeiculos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['CategoriasDeVeiculos_bool_exp'] | null;
      },
      ValueTypes['CategoriasDeVeiculos']
    ];
    CategoriasDeVeiculos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['CategoriasDeVeiculos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['CategoriasDeVeiculos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['CategoriasDeVeiculos_bool_exp'] | null;
      },
      ValueTypes['CategoriasDeVeiculos_aggregate']
    ];
    CategoriasDeVeiculos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['CategoriasDeVeiculos']
    ];
    EstadosEMunicipios?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['EstadosEMunicipios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['EstadosEMunicipios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
      },
      ValueTypes['EstadosEMunicipios']
    ];
    EstadosEMunicipios_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['EstadosEMunicipios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['EstadosEMunicipios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
      },
      ValueTypes['EstadosEMunicipios_aggregate']
    ];
    EstadosEMunicipios_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['EstadosEMunicipios']
    ];
    atendimentos_EtapasDosFluxos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_EtapasDosFluxos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_EtapasDosFluxos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'] | null;
      },
      ValueTypes['atendimentos_EtapasDosFluxos']
    ];
    atendimentos_EtapasDosFluxos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_EtapasDosFluxos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_EtapasDosFluxos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'] | null;
      },
      ValueTypes['atendimentos_EtapasDosFluxos_aggregate']
    ];
    atendimentos_EtapasDosFluxos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['atendimentos_EtapasDosFluxos']
    ];
    atendimentos_Fluxos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Fluxos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Fluxos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Fluxos_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Fluxos']
    ];
    atendimentos_Fluxos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Fluxos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Fluxos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Fluxos_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Fluxos_aggregate']
    ];
    atendimentos_Fluxos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['atendimentos_Fluxos']
    ];
    atendimentos_Tickets?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Tickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Tickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Tickets']
    ];
    atendimentos_Tickets_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Tickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Tickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Tickets_aggregate']
    ];
    atendimentos_Tickets_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['atendimentos_Tickets']
    ];
    atendimentos_TiposDeTickets?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_TiposDeTickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_TiposDeTickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_TiposDeTickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_TiposDeTickets']
    ];
    atendimentos_TiposDeTickets_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_TiposDeTickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_TiposDeTickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_TiposDeTickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_TiposDeTickets_aggregate']
    ];
    atendimentos_TiposDeTickets_by_pk?: [
      { Valor: string },
      ValueTypes['atendimentos_TiposDeTickets']
    ];
    autenticacao_Atendentes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['autenticacao_Atendentes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['autenticacao_Atendentes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['autenticacao_Atendentes_bool_exp'] | null;
      },
      ValueTypes['autenticacao_Atendentes']
    ];
    autenticacao_Atendentes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['autenticacao_Atendentes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['autenticacao_Atendentes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['autenticacao_Atendentes_bool_exp'] | null;
      },
      ValueTypes['autenticacao_Atendentes_aggregate']
    ];
    autenticacao_Atendentes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['autenticacao_Atendentes']
    ];
    autenticacao_Usuarios?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['autenticacao_Usuarios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['autenticacao_Usuarios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['autenticacao_Usuarios_bool_exp'] | null;
      },
      ValueTypes['autenticacao_Usuarios']
    ];
    autenticacao_Usuarios_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['autenticacao_Usuarios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['autenticacao_Usuarios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['autenticacao_Usuarios_bool_exp'] | null;
      },
      ValueTypes['autenticacao_Usuarios_aggregate']
    ];
    autenticacao_Usuarios_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['autenticacao_Usuarios']
    ];
    clientes_Leads?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_Leads_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_Leads_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_Leads_bool_exp'] | null;
      },
      ValueTypes['clientes_Leads']
    ];
    clientes_Leads_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_Leads_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_Leads_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_Leads_bool_exp'] | null;
      },
      ValueTypes['clientes_Leads_aggregate']
    ];
    clientes_Leads_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_Leads']
    ];
    clientes_PerfisComerciais?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_PerfisComerciais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_PerfisComerciais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_PerfisComerciais_bool_exp'] | null;
      },
      ValueTypes['clientes_PerfisComerciais']
    ];
    clientes_PerfisComerciais_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_PerfisComerciais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_PerfisComerciais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_PerfisComerciais_bool_exp'] | null;
      },
      ValueTypes['clientes_PerfisComerciais_aggregate']
    ];
    clientes_PerfisComerciais_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_PerfisComerciais']
    ];
    clientes_Veiculos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_Veiculos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_Veiculos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_Veiculos_bool_exp'] | null;
      },
      ValueTypes['clientes_Veiculos']
    ];
    clientes_VeiculosAtivos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos']
    ];
    clientes_VeiculosAtivos_Beneficios?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Beneficios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Beneficios_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['clientes_VeiculosAtivos_Beneficios_bool_exp']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Beneficios']
    ];
    clientes_VeiculosAtivos_Beneficios_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Beneficios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Beneficios_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['clientes_VeiculosAtivos_Beneficios_bool_exp']
          | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Beneficios_aggregate']
    ];
    clientes_VeiculosAtivos_Beneficios_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_VeiculosAtivos_Beneficios']
    ];
    clientes_VeiculosAtivos_Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_Produtos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Produtos']
    ];
    clientes_VeiculosAtivos_Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_Produtos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Produtos_aggregate']
    ];
    clientes_VeiculosAtivos_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_VeiculosAtivos_Produtos']
    ];
    clientes_VeiculosAtivos_Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_Servicos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Servicos']
    ];
    clientes_VeiculosAtivos_Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_Servicos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Servicos_aggregate']
    ];
    clientes_VeiculosAtivos_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_VeiculosAtivos_Servicos']
    ];
    clientes_VeiculosAtivos_Situacao?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Situacao_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Situacao_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_Situacao_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Situacao']
    ];
    clientes_VeiculosAtivos_Situacao_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_Situacao_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_Situacao_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_Situacao_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_Situacao_aggregate']
    ];
    clientes_VeiculosAtivos_Situacao_by_pk?: [
      { Valor: string },
      ValueTypes['clientes_VeiculosAtivos_Situacao']
    ];
    clientes_VeiculosAtivos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_VeiculosAtivos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_VeiculosAtivos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_VeiculosAtivos_bool_exp'] | null;
      },
      ValueTypes['clientes_VeiculosAtivos_aggregate']
    ];
    clientes_VeiculosAtivos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_VeiculosAtivos']
    ];
    clientes_Veiculos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['clientes_Veiculos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['clientes_Veiculos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['clientes_Veiculos_bool_exp'] | null;
      },
      ValueTypes['clientes_Veiculos_aggregate']
    ];
    clientes_Veiculos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['clientes_Veiculos']
    ];
    comercial_Acoes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Acoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Acoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Acoes_bool_exp'] | null;
      },
      ValueTypes['comercial_Acoes']
    ];
    comercial_Acoes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Acoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Acoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Acoes_bool_exp'] | null;
      },
      ValueTypes['comercial_Acoes_aggregate']
    ];
    comercial_Acoes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Acoes']
    ];
    comercial_Atributos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Atributos']
    ];
    comercial_Atributos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Atributos_aggregate']
    ];
    comercial_Atributos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Atributos']
    ];
    comercial_Coberturas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Coberturas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Coberturas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Coberturas_bool_exp'] | null;
      },
      ValueTypes['comercial_Coberturas']
    ];
    comercial_Coberturas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Coberturas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Coberturas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Coberturas_bool_exp'] | null;
      },
      ValueTypes['comercial_Coberturas_aggregate']
    ];
    comercial_Coberturas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Coberturas']
    ];
    comercial_Combos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos']
    ];
    comercial_Combos_Combos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Combos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Combos']
    ];
    comercial_Combos_Combos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Combos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Combos_aggregate']
    ];
    comercial_Combos_Combos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos_Combos']
    ];
    comercial_Combos_Planos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Planos']
    ];
    comercial_Combos_Planos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Planos_aggregate']
    ];
    comercial_Combos_Planos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos_Planos']
    ];
    comercial_Combos_Precos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Precos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Precos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Precos']
    ];
    comercial_Combos_Precos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Precos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Precos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Precos_aggregate']
    ];
    comercial_Combos_Precos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos_Precos']
    ];
    comercial_Combos_Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Produtos']
    ];
    comercial_Combos_Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Produtos_aggregate']
    ];
    comercial_Combos_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos_Produtos']
    ];
    comercial_Combos_Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Servicos']
    ];
    comercial_Combos_Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_Servicos_aggregate']
    ];
    comercial_Combos_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos_Servicos']
    ];
    comercial_Combos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Combos_bool_exp'] | null;
      },
      ValueTypes['comercial_Combos_aggregate']
    ];
    comercial_Combos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Combos']
    ];
    comercial_Condicionais?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Condicionais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Condicionais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Condicionais_bool_exp'] | null;
      },
      ValueTypes['comercial_Condicionais']
    ];
    comercial_CondicionaisSituacoes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_CondicionaisSituacoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_CondicionaisSituacoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_CondicionaisSituacoes_bool_exp'] | null;
      },
      ValueTypes['comercial_CondicionaisSituacoes']
    ];
    comercial_CondicionaisSituacoes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_CondicionaisSituacoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_CondicionaisSituacoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_CondicionaisSituacoes_bool_exp'] | null;
      },
      ValueTypes['comercial_CondicionaisSituacoes_aggregate']
    ];
    comercial_CondicionaisSituacoes_by_pk?: [
      { Valor: string },
      ValueTypes['comercial_CondicionaisSituacoes']
    ];
    comercial_Condicionais_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Condicionais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Condicionais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Condicionais_bool_exp'] | null;
      },
      ValueTypes['comercial_Condicionais_aggregate']
    ];
    comercial_Condicionais_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Condicionais']
    ];
    comercial_ContratosBase?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_ContratosBase_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_ContratosBase_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_ContratosBase_bool_exp'] | null;
      },
      ValueTypes['comercial_ContratosBase']
    ];
    comercial_ContratosBase_Versoes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_ContratosBase_Versoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_ContratosBase_Versoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_ContratosBase_Versoes_bool_exp'] | null;
      },
      ValueTypes['comercial_ContratosBase_Versoes']
    ];
    comercial_ContratosBase_Versoes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_ContratosBase_Versoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_ContratosBase_Versoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_ContratosBase_Versoes_bool_exp'] | null;
      },
      ValueTypes['comercial_ContratosBase_Versoes_aggregate']
    ];
    comercial_ContratosBase_Versoes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_ContratosBase_Versoes']
    ];
    comercial_ContratosBase_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_ContratosBase_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_ContratosBase_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_ContratosBase_bool_exp'] | null;
      },
      ValueTypes['comercial_ContratosBase_aggregate']
    ];
    comercial_ContratosBase_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_ContratosBase']
    ];
    comercial_Planos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos']
    ];
    comercial_Planos_Condicionais?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Condicionais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Condicionais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Condicionais_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Condicionais']
    ];
    comercial_Planos_Condicionais_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Condicionais_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Condicionais_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Condicionais_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Condicionais_aggregate']
    ];
    comercial_Planos_Condicionais_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Planos_Condicionais']
    ];
    comercial_Planos_Precos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Precos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Precos']
    ];
    comercial_Planos_Precos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_Precos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_Precos_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_Precos_aggregate']
    ];
    comercial_Planos_Precos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Planos_Precos']
    ];
    comercial_Planos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Planos_bool_exp'] | null;
      },
      ValueTypes['comercial_Planos_aggregate']
    ];
    comercial_Planos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Planos']
    ];
    comercial_PrestadoresDeServicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_PrestadoresDeServicos_bool_exp'] | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos']
    ];
    comercial_PrestadoresDeServicos_Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos']
    ];
    comercial_PrestadoresDeServicos_Produtos_Itens?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens']
    ];
    comercial_PrestadoresDeServicos_Produtos_Itens_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate']
    ];
    comercial_PrestadoresDeServicos_Produtos_Itens_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Itens']
    ];
    comercial_PrestadoresDeServicos_Produtos_Precos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    ];
    comercial_PrestadoresDeServicos_Produtos_Precos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate']
    ];
    comercial_PrestadoresDeServicos_Produtos_Precos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    ];
    comercial_PrestadoresDeServicos_Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_aggregate']
    ];
    comercial_PrestadoresDeServicos_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos']
    ];
    comercial_PrestadoresDeServicos_Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos']
    ];
    comercial_PrestadoresDeServicos_Servicos_Precos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    ];
    comercial_PrestadoresDeServicos_Servicos_Precos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate']
    ];
    comercial_PrestadoresDeServicos_Servicos_Precos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    ];
    comercial_PrestadoresDeServicos_Servicos_Tarifas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    ];
    comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate']
    ];
    comercial_PrestadoresDeServicos_Servicos_Tarifas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    ];
    comercial_PrestadoresDeServicos_Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_aggregate']
    ];
    comercial_PrestadoresDeServicos_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos']
    ];
    comercial_PrestadoresDeServicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_PrestadoresDeServicos_bool_exp'] | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_aggregate']
    ];
    comercial_PrestadoresDeServicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_PrestadoresDeServicos']
    ];
    comercial_Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos']
    ];
    comercial_Produtos_Atributos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Atributos']
    ];
    comercial_Produtos_Atributos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Atributos_aggregate']
    ];
    comercial_Produtos_Atributos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Produtos_Atributos']
    ];
    comercial_Produtos_Oportunidades?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Oportunidades']
    ];
    comercial_Produtos_Oportunidades_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Oportunidades_aggregate']
    ];
    comercial_Produtos_Oportunidades_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Produtos_Oportunidades']
    ];
    comercial_Produtos_Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Produtos']
    ];
    comercial_Produtos_Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Produtos_aggregate']
    ];
    comercial_Produtos_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Produtos_Produtos']
    ];
    comercial_Produtos_Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Servicos']
    ];
    comercial_Produtos_Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Servicos_aggregate']
    ];
    comercial_Produtos_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Produtos_Servicos']
    ];
    comercial_Produtos_Tipos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Tipos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Tipos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Tipos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Tipos']
    ];
    comercial_Produtos_Tipos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_Tipos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_Tipos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_Tipos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_Tipos_aggregate']
    ];
    comercial_Produtos_Tipos_by_pk?: [
      { Valor: string },
      ValueTypes['comercial_Produtos_Tipos']
    ];
    comercial_Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Produtos_aggregate']
    ];
    comercial_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Produtos']
    ];
    comercial_Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos']
    ];
    comercial_Servicos_Atributos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Atributos']
    ];
    comercial_Servicos_Atributos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Atributos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Atributos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Atributos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Atributos_aggregate']
    ];
    comercial_Servicos_Atributos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos_Atributos']
    ];
    comercial_Servicos_Oportunidades?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Oportunidades']
    ];
    comercial_Servicos_Oportunidades_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Oportunidades_aggregate']
    ];
    comercial_Servicos_Oportunidades_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos_Oportunidades']
    ];
    comercial_Servicos_Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Produtos']
    ];
    comercial_Servicos_Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Produtos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Produtos_aggregate']
    ];
    comercial_Servicos_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos_Produtos']
    ];
    comercial_Servicos_Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Servicos']
    ];
    comercial_Servicos_Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Servicos_aggregate']
    ];
    comercial_Servicos_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos_Servicos']
    ];
    comercial_Servicos_Tarifas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Tarifas']
    ];
    comercial_Servicos_Tarifas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Tarifas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Tarifas_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Tarifas_aggregate']
    ];
    comercial_Servicos_Tarifas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos_Tarifas']
    ];
    comercial_Servicos_Tipos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Tipos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Tipos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Tipos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Tipos']
    ];
    comercial_Servicos_Tipos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_Tipos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_Tipos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_Tipos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_Tipos_aggregate']
    ];
    comercial_Servicos_Tipos_by_pk?: [
      { Valor: string },
      ValueTypes['comercial_Servicos_Tipos']
    ];
    comercial_Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Servicos_bool_exp'] | null;
      },
      ValueTypes['comercial_Servicos_aggregate']
    ];
    comercial_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Servicos']
    ];
    comercial_Tarifas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Tarifas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Tarifas_bool_exp'] | null;
      },
      ValueTypes['comercial_Tarifas']
    ];
    comercial_Tarifas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Tarifas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Tarifas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Tarifas_bool_exp'] | null;
      },
      ValueTypes['comercial_Tarifas_aggregate']
    ];
    comercial_Tarifas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Tarifas']
    ];
    contatos_Emails?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Emails_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Emails_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Emails_bool_exp'] | null;
      },
      ValueTypes['contatos_Emails']
    ];
    contatos_Emails_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Emails_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Emails_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Emails_bool_exp'] | null;
      },
      ValueTypes['contatos_Emails_aggregate']
    ];
    contatos_Emails_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Emails']
    ];
    contatos_Enderecos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Enderecos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Enderecos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Enderecos_bool_exp'] | null;
      },
      ValueTypes['contatos_Enderecos']
    ];
    contatos_Enderecos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Enderecos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Enderecos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Enderecos_bool_exp'] | null;
      },
      ValueTypes['contatos_Enderecos_aggregate']
    ];
    contatos_Enderecos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Enderecos']
    ];
    contatos_Logs?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Logs_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Logs_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Logs_bool_exp'] | null;
      },
      ValueTypes['contatos_Logs']
    ];
    contatos_Logs_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Logs_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Logs_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Logs_bool_exp'] | null;
      },
      ValueTypes['contatos_Logs_aggregate']
    ];
    contatos_Logs_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Logs']
    ];
    contatos_Telefones?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Telefones_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Telefones_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Telefones_bool_exp'] | null;
      },
      ValueTypes['contatos_Telefones']
    ];
    contatos_Telefones_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Telefones_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Telefones_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Telefones_bool_exp'] | null;
      },
      ValueTypes['contatos_Telefones_aggregate']
    ];
    contatos_Telefones_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Telefones']
    ];
    identidades_Clientes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Clientes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Clientes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Clientes_bool_exp'] | null;
      },
      ValueTypes['identidades_Clientes']
    ];
    identidades_Clientes_Documentos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Clientes_Documentos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Clientes_Documentos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Clientes_Documentos_bool_exp'] | null;
      },
      ValueTypes['identidades_Clientes_Documentos']
    ];
    identidades_Clientes_Documentos_Situacoes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Clientes_Documentos_Situacoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Clientes_Documentos_Situacoes_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['identidades_Clientes_Documentos_Situacoes_bool_exp']
          | null;
      },
      ValueTypes['identidades_Clientes_Documentos_Situacoes']
    ];
    identidades_Clientes_Documentos_Situacoes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Clientes_Documentos_Situacoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Clientes_Documentos_Situacoes_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['identidades_Clientes_Documentos_Situacoes_bool_exp']
          | null;
      },
      ValueTypes['identidades_Clientes_Documentos_Situacoes_aggregate']
    ];
    identidades_Clientes_Documentos_Situacoes_by_pk?: [
      { Valor: string },
      ValueTypes['identidades_Clientes_Documentos_Situacoes']
    ];
    identidades_Clientes_Documentos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Clientes_Documentos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Clientes_Documentos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Clientes_Documentos_bool_exp'] | null;
      },
      ValueTypes['identidades_Clientes_Documentos_aggregate']
    ];
    identidades_Clientes_Documentos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Clientes_Documentos']
    ];
    identidades_Clientes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Clientes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Clientes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Clientes_bool_exp'] | null;
      },
      ValueTypes['identidades_Clientes_aggregate']
    ];
    identidades_Clientes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Clientes']
    ];
    identidades_Colaboradores?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Colaboradores_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Colaboradores_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Colaboradores_bool_exp'] | null;
      },
      ValueTypes['identidades_Colaboradores']
    ];
    identidades_Colaboradores_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Colaboradores_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Colaboradores_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Colaboradores_bool_exp'] | null;
      },
      ValueTypes['identidades_Colaboradores_aggregate']
    ];
    identidades_Colaboradores_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Colaboradores']
    ];
    identidades_Fornecedores?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Fornecedores_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Fornecedores_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Fornecedores_bool_exp'] | null;
      },
      ValueTypes['identidades_Fornecedores']
    ];
    identidades_Fornecedores_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Fornecedores_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Fornecedores_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Fornecedores_bool_exp'] | null;
      },
      ValueTypes['identidades_Fornecedores_aggregate']
    ];
    identidades_Fornecedores_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Fornecedores']
    ];
    identidades_Logs?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Logs_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Logs_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Logs_bool_exp'] | null;
      },
      ValueTypes['identidades_Logs']
    ];
    identidades_Logs_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Logs_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Logs_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Logs_bool_exp'] | null;
      },
      ValueTypes['identidades_Logs_aggregate']
    ];
    identidades_Logs_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Logs']
    ];
    identidades_Pessoas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Pessoas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Pessoas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Pessoas_bool_exp'] | null;
      },
      ValueTypes['identidades_Pessoas']
    ];
    identidades_Pessoas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Pessoas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Pessoas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Pessoas_bool_exp'] | null;
      },
      ValueTypes['identidades_Pessoas_aggregate']
    ];
    identidades_Pessoas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Pessoas']
    ];
    identidades_Representantes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Representantes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Representantes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Representantes_bool_exp'] | null;
      },
      ValueTypes['identidades_Representantes']
    ];
    identidades_Representantes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Representantes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Representantes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Representantes_bool_exp'] | null;
      },
      ValueTypes['identidades_Representantes_aggregate']
    ];
    identidades_Representantes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Representantes']
    ];
    identidades_Vendedores?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Vendedores_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Vendedores_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Vendedores_bool_exp'] | null;
      },
      ValueTypes['identidades_Vendedores']
    ];
    identidades_Vendedores_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['identidades_Vendedores_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['identidades_Vendedores_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['identidades_Vendedores_bool_exp'] | null;
      },
      ValueTypes['identidades_Vendedores_aggregate']
    ];
    identidades_Vendedores_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['identidades_Vendedores']
    ];
    propostas_Propostas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas']
    ];
    propostas_Propostas_Combos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Combos']
    ];
    propostas_Propostas_Combos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Combos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Combos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Combos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Combos_aggregate']
    ];
    propostas_Propostas_Combos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Combos']
    ];
    propostas_Propostas_Instalacoes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Instalacoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Instalacoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Instalacoes_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Instalacoes']
    ];
    propostas_Propostas_Instalacoes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Instalacoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Instalacoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Instalacoes_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Instalacoes_aggregate']
    ];
    propostas_Propostas_Instalacoes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Instalacoes']
    ];
    propostas_Propostas_Oportunidades?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Oportunidades']
    ];
    propostas_Propostas_Oportunidades_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Oportunidades_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Oportunidades_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Oportunidades_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Oportunidades_aggregate']
    ];
    propostas_Propostas_Oportunidades_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Oportunidades']
    ];
    propostas_Propostas_Planos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Planos']
    ];
    propostas_Propostas_Planos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Planos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Planos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Planos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Planos_aggregate']
    ];
    propostas_Propostas_Planos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Planos']
    ];
    propostas_Propostas_Produtos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Produtos']
    ];
    propostas_Propostas_Produtos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Produtos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Produtos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Produtos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Produtos_aggregate']
    ];
    propostas_Propostas_Produtos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Produtos']
    ];
    propostas_Propostas_Servicos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Servicos']
    ];
    propostas_Propostas_Servicos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Servicos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Servicos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Servicos_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Servicos_aggregate']
    ];
    propostas_Propostas_Servicos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas_Servicos']
    ];
    propostas_Propostas_Situacoes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Situacoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Situacoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Situacoes_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Situacoes']
    ];
    propostas_Propostas_Situacoes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_Situacoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_Situacoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_Situacoes_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_Situacoes_aggregate']
    ];
    propostas_Propostas_Situacoes_by_pk?: [
      { Valor: string },
      ValueTypes['propostas_Propostas_Situacoes']
    ];
    propostas_Propostas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['propostas_Propostas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['propostas_Propostas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['propostas_Propostas_bool_exp'] | null;
      },
      ValueTypes['propostas_Propostas_aggregate']
    ];
    propostas_Propostas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['propostas_Propostas']
    ];
    vendas_GruposDePerguntas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_GruposDePerguntas_bool_exp'] | null;
      },
      ValueTypes['vendas_GruposDePerguntas']
    ];
    vendas_GruposDePerguntas_Perguntas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_Perguntas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp']
          | null;
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas']
    ];
    vendas_GruposDePerguntas_Perguntas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_Perguntas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp']
          | null;
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas_aggregate']
    ];
    vendas_GruposDePerguntas_Perguntas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['vendas_GruposDePerguntas_Perguntas']
    ];
    vendas_GruposDePerguntas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_GruposDePerguntas_bool_exp'] | null;
      },
      ValueTypes['vendas_GruposDePerguntas_aggregate']
    ];
    vendas_GruposDePerguntas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['vendas_GruposDePerguntas']
    ];
    vendas_Perguntas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_Perguntas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_Perguntas_bool_exp'] | null;
      },
      ValueTypes['vendas_Perguntas']
    ];
    vendas_Perguntas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_Perguntas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_Perguntas_bool_exp'] | null;
      },
      ValueTypes['vendas_Perguntas_aggregate']
    ];
    vendas_Perguntas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['vendas_Perguntas']
    ];
    vendas_TiposDePagamento?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_TiposDePagamento_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_TiposDePagamento_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_TiposDePagamento_bool_exp'] | null;
      },
      ValueTypes['vendas_TiposDePagamento']
    ];
    vendas_TiposDePagamento_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_TiposDePagamento_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_TiposDePagamento_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_TiposDePagamento_bool_exp'] | null;
      },
      ValueTypes['vendas_TiposDePagamento_aggregate']
    ];
    vendas_TiposDePagamento_by_pk?: [
      { Valor: string },
      ValueTypes['vendas_TiposDePagamento']
    ];
    vendas_TiposDePrecos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_TiposDePrecos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_TiposDePrecos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_TiposDePrecos_bool_exp'] | null;
      },
      ValueTypes['vendas_TiposDePrecos']
    ];
    vendas_TiposDePrecos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_TiposDePrecos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_TiposDePrecos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_TiposDePrecos_bool_exp'] | null;
      },
      ValueTypes['vendas_TiposDePrecos_aggregate']
    ];
    vendas_TiposDePrecos_by_pk?: [
      { Valor: string },
      ValueTypes['vendas_TiposDePrecos']
    ];
    vendas_TiposDeRecorrencia?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_TiposDeRecorrencia_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_TiposDeRecorrencia_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_TiposDeRecorrencia_bool_exp'] | null;
      },
      ValueTypes['vendas_TiposDeRecorrencia']
    ];
    vendas_TiposDeRecorrencia_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_TiposDeRecorrencia_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_TiposDeRecorrencia_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_TiposDeRecorrencia_bool_exp'] | null;
      },
      ValueTypes['vendas_TiposDeRecorrencia_aggregate']
    ];
    vendas_TiposDeRecorrencia_by_pk?: [
      { Valor: string },
      ValueTypes['vendas_TiposDeRecorrencia']
    ];
    __typename?: true;
  }>;
  ['subscription_root']: AliasType<{
    CategoriasDeVeiculos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['CategoriasDeVeiculos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['CategoriasDeVeiculos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['CategoriasDeVeiculos_bool_exp'] | null;
      },
      ValueTypes['CategoriasDeVeiculos']
    ];
    CategoriasDeVeiculos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['CategoriasDeVeiculos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['CategoriasDeVeiculos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['CategoriasDeVeiculos_bool_exp'] | null;
      },
      ValueTypes['CategoriasDeVeiculos_aggregate']
    ];
    CategoriasDeVeiculos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['CategoriasDeVeiculos']
    ];
    EstadosEMunicipios?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['EstadosEMunicipios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['EstadosEMunicipios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
      },
      ValueTypes['EstadosEMunicipios']
    ];
    EstadosEMunicipios_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['EstadosEMunicipios_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['EstadosEMunicipios_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['EstadosEMunicipios_bool_exp'] | null;
      },
      ValueTypes['EstadosEMunicipios_aggregate']
    ];
    EstadosEMunicipios_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['EstadosEMunicipios']
    ];
    atendimentos_EtapasDosFluxos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_EtapasDosFluxos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_EtapasDosFluxos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'] | null;
      },
      ValueTypes['atendimentos_EtapasDosFluxos']
    ];
    atendimentos_EtapasDosFluxos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_EtapasDosFluxos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_EtapasDosFluxos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_EtapasDosFluxos_bool_exp'] | null;
      },
      ValueTypes['atendimentos_EtapasDosFluxos_aggregate']
    ];
    atendimentos_EtapasDosFluxos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['atendimentos_EtapasDosFluxos']
    ];
    atendimentos_Fluxos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Fluxos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Fluxos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Fluxos_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Fluxos']
    ];
    atendimentos_Fluxos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Fluxos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Fluxos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Fluxos_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Fluxos_aggregate']
    ];
    atendimentos_Fluxos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['atendimentos_Fluxos']
    ];
    atendimentos_Tickets?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Tickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Tickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Tickets']
    ];
    atendimentos_Tickets_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_Tickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_Tickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_Tickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_Tickets_aggregate']
    ];
    atendimentos_Tickets_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['atendimentos_Tickets']
    ];
    atendimentos_TiposDeTickets?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_TiposDeTickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_TiposDeTickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_TiposDeTickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_TiposDeTickets']
    ];
    atendimentos_TiposDeTickets_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['atendimentos_TiposDeTickets_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['atendimentos_TiposDeTickets_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['atendimentos_TiposDeTickets_bool_exp'] | null;
      },
      ValueTypes['atendimentos_TiposDeTickets_aggregate']
    ];
    atendimentos_TiposDeTickets_by_pk?: [
      { Valor: string },
      ValueTypes['atendimentos_TiposDeTickets']
    ];
    comercial_Acoes?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Acoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Acoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Acoes_bool_exp'] | null;
      },
      ValueTypes['comercial_Acoes']
    ];
    comercial_Acoes_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Acoes_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Acoes_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Acoes_bool_exp'] | null;
      },
      ValueTypes['comercial_Acoes_aggregate']
    ];
    comercial_Acoes_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Acoes']
    ];
    comercial_Coberturas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Coberturas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Coberturas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Coberturas_bool_exp'] | null;
      },
      ValueTypes['comercial_Coberturas']
    ];
    comercial_Coberturas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_Coberturas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_Coberturas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['comercial_Coberturas_bool_exp'] | null;
      },
      ValueTypes['comercial_Coberturas_aggregate']
    ];
    comercial_Coberturas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['comercial_Coberturas']
    ];
    contatos_Emails?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Emails_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Emails_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Emails_bool_exp'] | null;
      },
      ValueTypes['contatos_Emails']
    ];
    contatos_Emails_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Emails_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Emails_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Emails_bool_exp'] | null;
      },
      ValueTypes['contatos_Emails_aggregate']
    ];
    contatos_Emails_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Emails']
    ];
    contatos_Enderecos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Enderecos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Enderecos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Enderecos_bool_exp'] | null;
      },
      ValueTypes['contatos_Enderecos']
    ];
    contatos_Enderecos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Enderecos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Enderecos_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Enderecos_bool_exp'] | null;
      },
      ValueTypes['contatos_Enderecos_aggregate']
    ];
    contatos_Enderecos_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Enderecos']
    ];
    contatos_Logs?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Logs_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Logs_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Logs_bool_exp'] | null;
      },
      ValueTypes['contatos_Logs']
    ];
    contatos_Logs_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Logs_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Logs_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Logs_bool_exp'] | null;
      },
      ValueTypes['contatos_Logs_aggregate']
    ];
    contatos_Logs_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Logs']
    ];
    contatos_Telefones?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Telefones_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Telefones_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Telefones_bool_exp'] | null;
      },
      ValueTypes['contatos_Telefones']
    ];
    contatos_Telefones_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['contatos_Telefones_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['contatos_Telefones_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['contatos_Telefones_bool_exp'] | null;
      },
      ValueTypes['contatos_Telefones_aggregate']
    ];
    contatos_Telefones_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['contatos_Telefones']
    ];
    vendas_GruposDePerguntas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_GruposDePerguntas_bool_exp'] | null;
      },
      ValueTypes['vendas_GruposDePerguntas']
    ];
    vendas_GruposDePerguntas_Perguntas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_Perguntas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp']
          | null;
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas']
    ];
    vendas_GruposDePerguntas_Perguntas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_Perguntas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp']
          | null;
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas_aggregate']
    ];
    vendas_GruposDePerguntas_Perguntas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['vendas_GruposDePerguntas_Perguntas']
    ];
    vendas_GruposDePerguntas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_GruposDePerguntas_bool_exp'] | null;
      },
      ValueTypes['vendas_GruposDePerguntas_aggregate']
    ];
    vendas_GruposDePerguntas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['vendas_GruposDePerguntas']
    ];
    vendas_Perguntas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_Perguntas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_Perguntas_bool_exp'] | null;
      },
      ValueTypes['vendas_Perguntas']
    ];
    vendas_Perguntas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_Perguntas_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_Perguntas_bool_exp'] | null;
      },
      ValueTypes['vendas_Perguntas_aggregate']
    ];
    vendas_Perguntas_by_pk?: [
      { Id: ValueTypes['uuid'] },
      ValueTypes['vendas_Perguntas']
    ];
    vendas_TiposDePagamento?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_TiposDePagamento_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_TiposDePagamento_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_TiposDePagamento_bool_exp'] | null;
      },
      ValueTypes['vendas_TiposDePagamento']
    ];
    vendas_TiposDePagamento_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_TiposDePagamento_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_TiposDePagamento_order_by'][] /** filter the rows returned */;
        where?: ValueTypes['vendas_TiposDePagamento_bool_exp'] | null;
      },
      ValueTypes['vendas_TiposDePagamento_aggregate']
    ];
    vendas_TiposDePagamento_by_pk?: [
      { Valor: string },
      ValueTypes['vendas_TiposDePagamento']
    ];
    __typename?: true;
  }>;
  ['timestamptz']: unknown;
  /** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
  ['timestamptz_comparison_exp']: {
    _eq?: ValueTypes['timestamptz'] | null;
    _gt?: ValueTypes['timestamptz'] | null;
    _gte?: ValueTypes['timestamptz'] | null;
    _in?: ValueTypes['timestamptz'][];
    _is_null?: boolean | null;
    _lt?: ValueTypes['timestamptz'] | null;
    _lte?: ValueTypes['timestamptz'] | null;
    _neq?: ValueTypes['timestamptz'] | null;
    _nin?: ValueTypes['timestamptz'][];
  };
  ['uuid']: unknown;
  /** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
  ['uuid_comparison_exp']: {
    _eq?: ValueTypes['uuid'] | null;
    _gt?: ValueTypes['uuid'] | null;
    _gte?: ValueTypes['uuid'] | null;
    _in?: ValueTypes['uuid'][];
    _is_null?: boolean | null;
    _lt?: ValueTypes['uuid'] | null;
    _lte?: ValueTypes['uuid'] | null;
    _neq?: ValueTypes['uuid'] | null;
    _nin?: ValueTypes['uuid'][];
  };
  /** columns and relationships of "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas']: AliasType<{
    Id?: true;
    Nome?: true;
    Perguntas?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_Perguntas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp']
          | null;
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas']
    ];
    Perguntas_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_Perguntas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp']
          | null;
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas_aggregate']
    ];
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** columns and relationships of "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas']: AliasType<{
    /** An object relationship */
    Grupo?: ValueTypes['vendas_GruposDePerguntas'];
    Grupo_Id?: true;
    Id?: true;
    /** An object relationship */
    Pergunta?: ValueTypes['vendas_Perguntas'];
    Pergunta_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_aggregate']: AliasType<{
    aggregate?: ValueTypes['vendas_GruposDePerguntas_Perguntas_aggregate_fields'];
    nodes?: ValueTypes['vendas_GruposDePerguntas_Perguntas'];
    __typename?: true;
  }>;
  /** aggregate fields of "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['vendas_GruposDePerguntas_Perguntas_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['vendas_GruposDePerguntas_Perguntas_max_fields'];
    min?: ValueTypes['vendas_GruposDePerguntas_Perguntas_min_fields'];
    __typename?: true;
  }>;
  /** order by aggregate values of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | null;
    max?: ValueTypes['vendas_GruposDePerguntas_Perguntas_max_order_by'] | null;
    min?: ValueTypes['vendas_GruposDePerguntas_Perguntas_min_order_by'] | null;
  };
  /** input type for inserting array relation for remote table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_arr_rel_insert_input']: {
    data: ValueTypes['vendas_GruposDePerguntas_Perguntas_insert_input'][];
    /** on conflict condition */
    on_conflict?:
      | ValueTypes['vendas_GruposDePerguntas_Perguntas_on_conflict']
      | null;
  };
  /** Boolean expression to filter rows from the table "vendas.GruposDePerguntas_Perguntas". All fields are combined with a logical 'AND'. */
  ['vendas_GruposDePerguntas_Perguntas_bool_exp']: {
    Grupo?: ValueTypes['vendas_GruposDePerguntas_bool_exp'] | null;
    Grupo_Id?: ValueTypes['uuid_comparison_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Pergunta?: ValueTypes['vendas_Perguntas_bool_exp'] | null;
    Pergunta_Id?: ValueTypes['uuid_comparison_exp'] | null;
    _and?: ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'][];
    _not?: ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'] | null;
    _or?: ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_constraint']: vendas_GruposDePerguntas_Perguntas_constraint;
  /** input type for inserting data into table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_insert_input']: {
    Grupo?: ValueTypes['vendas_GruposDePerguntas_obj_rel_insert_input'] | null;
    Grupo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Pergunta?: ValueTypes['vendas_Perguntas_obj_rel_insert_input'] | null;
    Pergunta_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['vendas_GruposDePerguntas_Perguntas_max_fields']: AliasType<{
    Grupo_Id?: true;
    Id?: true;
    Pergunta_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by max() on columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_max_order_by']: {
    Grupo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Pergunta_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** aggregate min on columns */
  ['vendas_GruposDePerguntas_Perguntas_min_fields']: AliasType<{
    Grupo_Id?: true;
    Id?: true;
    Pergunta_Id?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** order by min() on columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_min_order_by']: {
    Grupo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Pergunta_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** response of any mutation on the table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['vendas_GruposDePerguntas_Perguntas'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_on_conflict']: {
    constraint: ValueTypes['vendas_GruposDePerguntas_Perguntas_constraint'];
    update_columns: ValueTypes['vendas_GruposDePerguntas_Perguntas_update_column'][];
    where?: ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "vendas.GruposDePerguntas_Perguntas". */
  ['vendas_GruposDePerguntas_Perguntas_order_by']: {
    Grupo?: ValueTypes['vendas_GruposDePerguntas_order_by'] | null;
    Grupo_Id?: ValueTypes['order_by'] | null;
    Id?: ValueTypes['order_by'] | null;
    Pergunta?: ValueTypes['vendas_Perguntas_order_by'] | null;
    Pergunta_Id?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: vendas_GruposDePerguntas_Perguntas */
  ['vendas_GruposDePerguntas_Perguntas_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_select_column']: vendas_GruposDePerguntas_Perguntas_select_column;
  /** input type for updating data in table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_set_input']: {
    Grupo_Id?: ValueTypes['uuid'] | null;
    Id?: ValueTypes['uuid'] | null;
    Pergunta_Id?: ValueTypes['uuid'] | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_update_column']: vendas_GruposDePerguntas_Perguntas_update_column;
  /** aggregated selection of "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_aggregate']: AliasType<{
    aggregate?: ValueTypes['vendas_GruposDePerguntas_aggregate_fields'];
    nodes?: ValueTypes['vendas_GruposDePerguntas'];
    __typename?: true;
  }>;
  /** aggregate fields of "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['vendas_GruposDePerguntas_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['vendas_GruposDePerguntas_max_fields'];
    min?: ValueTypes['vendas_GruposDePerguntas_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "vendas.GruposDePerguntas". All fields are combined with a logical 'AND'. */
  ['vendas_GruposDePerguntas_bool_exp']: {
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Nome?: ValueTypes['String_comparison_exp'] | null;
    Perguntas?:
      | ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp']
      | null;
    _and?: ValueTypes['vendas_GruposDePerguntas_bool_exp'][];
    _not?: ValueTypes['vendas_GruposDePerguntas_bool_exp'] | null;
    _or?: ValueTypes['vendas_GruposDePerguntas_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_constraint']: vendas_GruposDePerguntas_constraint;
  /** input type for inserting data into table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_insert_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    Perguntas?:
      | ValueTypes['vendas_GruposDePerguntas_Perguntas_arr_rel_insert_input']
      | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['vendas_GruposDePerguntas_max_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['vendas_GruposDePerguntas_min_fields']: AliasType<{
    Id?: true;
    Nome?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['vendas_GruposDePerguntas'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_obj_rel_insert_input']: {
    data: ValueTypes['vendas_GruposDePerguntas_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['vendas_GruposDePerguntas_on_conflict'] | null;
  };
  /** on conflict condition type for table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_on_conflict']: {
    constraint: ValueTypes['vendas_GruposDePerguntas_constraint'];
    update_columns: ValueTypes['vendas_GruposDePerguntas_update_column'][];
    where?: ValueTypes['vendas_GruposDePerguntas_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "vendas.GruposDePerguntas". */
  ['vendas_GruposDePerguntas_order_by']: {
    Id?: ValueTypes['order_by'] | null;
    Nome?: ValueTypes['order_by'] | null;
    Perguntas_aggregate?:
      | ValueTypes['vendas_GruposDePerguntas_Perguntas_aggregate_order_by']
      | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: vendas_GruposDePerguntas */
  ['vendas_GruposDePerguntas_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_select_column']: vendas_GruposDePerguntas_select_column;
  /** input type for updating data in table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_set_input']: {
    Id?: ValueTypes['uuid'] | null;
    Nome?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_update_column']: vendas_GruposDePerguntas_update_column;
  /** columns and relationships of "vendas.Perguntas" */
  ['vendas_Perguntas']: AliasType<{
    Descricao?: true;
    Grupos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_Perguntas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp']
          | null;
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas']
    ];
    Grupos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['vendas_GruposDePerguntas_Perguntas_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['vendas_GruposDePerguntas_Perguntas_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp']
          | null;
      },
      ValueTypes['vendas_GruposDePerguntas_Perguntas_aggregate']
    ];
    Id?: true;
    Titulo?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "vendas.Perguntas" */
  ['vendas_Perguntas_aggregate']: AliasType<{
    aggregate?: ValueTypes['vendas_Perguntas_aggregate_fields'];
    nodes?: ValueTypes['vendas_Perguntas'];
    __typename?: true;
  }>;
  /** aggregate fields of "vendas.Perguntas" */
  ['vendas_Perguntas_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['vendas_Perguntas_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['vendas_Perguntas_max_fields'];
    min?: ValueTypes['vendas_Perguntas_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "vendas.Perguntas". All fields are combined with a logical 'AND'. */
  ['vendas_Perguntas_bool_exp']: {
    Descricao?: ValueTypes['String_comparison_exp'] | null;
    Grupos?: ValueTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'] | null;
    Id?: ValueTypes['uuid_comparison_exp'] | null;
    Titulo?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['vendas_Perguntas_bool_exp'][];
    _not?: ValueTypes['vendas_Perguntas_bool_exp'] | null;
    _or?: ValueTypes['vendas_Perguntas_bool_exp'][];
    created_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    deleted_at?: ValueTypes['timestamptz_comparison_exp'] | null;
    updated_at?: ValueTypes['timestamptz_comparison_exp'] | null;
  };
  /** unique or primary key constraints on table "vendas.Perguntas" */
  ['vendas_Perguntas_constraint']: vendas_Perguntas_constraint;
  /** input type for inserting data into table "vendas.Perguntas" */
  ['vendas_Perguntas_insert_input']: {
    Descricao?: string | null;
    Grupos?:
      | ValueTypes['vendas_GruposDePerguntas_Perguntas_arr_rel_insert_input']
      | null;
    Id?: ValueTypes['uuid'] | null;
    Titulo?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** aggregate max on columns */
  ['vendas_Perguntas_max_fields']: AliasType<{
    Descricao?: true;
    Id?: true;
    Titulo?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['vendas_Perguntas_min_fields']: AliasType<{
    Descricao?: true;
    Id?: true;
    Titulo?: true;
    created_at?: true;
    deleted_at?: true;
    updated_at?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "vendas.Perguntas" */
  ['vendas_Perguntas_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['vendas_Perguntas'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "vendas.Perguntas" */
  ['vendas_Perguntas_obj_rel_insert_input']: {
    data: ValueTypes['vendas_Perguntas_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['vendas_Perguntas_on_conflict'] | null;
  };
  /** on conflict condition type for table "vendas.Perguntas" */
  ['vendas_Perguntas_on_conflict']: {
    constraint: ValueTypes['vendas_Perguntas_constraint'];
    update_columns: ValueTypes['vendas_Perguntas_update_column'][];
    where?: ValueTypes['vendas_Perguntas_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "vendas.Perguntas". */
  ['vendas_Perguntas_order_by']: {
    Descricao?: ValueTypes['order_by'] | null;
    Grupos_aggregate?:
      | ValueTypes['vendas_GruposDePerguntas_Perguntas_aggregate_order_by']
      | null;
    Id?: ValueTypes['order_by'] | null;
    Titulo?: ValueTypes['order_by'] | null;
    created_at?: ValueTypes['order_by'] | null;
    deleted_at?: ValueTypes['order_by'] | null;
    updated_at?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: vendas_Perguntas */
  ['vendas_Perguntas_pk_columns_input']: {
    Id: ValueTypes['uuid'];
  };
  /** select columns of table "vendas.Perguntas" */
  ['vendas_Perguntas_select_column']: vendas_Perguntas_select_column;
  /** input type for updating data in table "vendas.Perguntas" */
  ['vendas_Perguntas_set_input']: {
    Descricao?: string | null;
    Id?: ValueTypes['uuid'] | null;
    Titulo?: string | null;
    created_at?: ValueTypes['timestamptz'] | null;
    deleted_at?: ValueTypes['timestamptz'] | null;
    updated_at?: ValueTypes['timestamptz'] | null;
  };
  /** update columns of table "vendas.Perguntas" */
  ['vendas_Perguntas_update_column']: vendas_Perguntas_update_column;
  /** columns and relationships of "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_aggregate']: AliasType<{
    aggregate?: ValueTypes['vendas_TiposDePagamento_aggregate_fields'];
    nodes?: ValueTypes['vendas_TiposDePagamento'];
    __typename?: true;
  }>;
  /** aggregate fields of "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['vendas_TiposDePagamento_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['vendas_TiposDePagamento_max_fields'];
    min?: ValueTypes['vendas_TiposDePagamento_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "vendas.TiposDePagamento". All fields are combined with a logical 'AND'. */
  ['vendas_TiposDePagamento_bool_exp']: {
    Comentario?: ValueTypes['String_comparison_exp'] | null;
    Valor?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['vendas_TiposDePagamento_bool_exp'][];
    _not?: ValueTypes['vendas_TiposDePagamento_bool_exp'] | null;
    _or?: ValueTypes['vendas_TiposDePagamento_bool_exp'][];
  };
  /** unique or primary key constraints on table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_constraint']: vendas_TiposDePagamento_constraint;
  /** input type for inserting data into table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_insert_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** aggregate max on columns */
  ['vendas_TiposDePagamento_max_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['vendas_TiposDePagamento_min_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['vendas_TiposDePagamento'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_on_conflict']: {
    constraint: ValueTypes['vendas_TiposDePagamento_constraint'];
    update_columns: ValueTypes['vendas_TiposDePagamento_update_column'][];
    where?: ValueTypes['vendas_TiposDePagamento_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "vendas.TiposDePagamento". */
  ['vendas_TiposDePagamento_order_by']: {
    Comentario?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: vendas_TiposDePagamento */
  ['vendas_TiposDePagamento_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_select_column']: vendas_TiposDePagamento_select_column;
  /** input type for updating data in table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_set_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** update columns of table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_update_column']: vendas_TiposDePagamento_update_column;
  /** columns and relationships of "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos']: AliasType<{
    Comentario?: true;
    PrestadoresDeServicos_Produtos_Precos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    ];
    PrestadoresDeServicos_Produtos_Precos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate']
    ];
    PrestadoresDeServicos_Servicos_Precos?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    ];
    PrestadoresDeServicos_Servicos_Precos_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_select_column'][] /** limit the number of rows returned */;
        limit?:
          | number
          | null /** skip the first n rows. Use only with order_by */;
        offset?: number | null /** sort the rows by one or more columns */;
        order_by?: ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by'][] /** filter the rows returned */;
        where?:
          | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
          | null;
      },
      ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate']
    ];
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_aggregate']: AliasType<{
    aggregate?: ValueTypes['vendas_TiposDePrecos_aggregate_fields'];
    nodes?: ValueTypes['vendas_TiposDePrecos'];
    __typename?: true;
  }>;
  /** aggregate fields of "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['vendas_TiposDePrecos_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['vendas_TiposDePrecos_max_fields'];
    min?: ValueTypes['vendas_TiposDePrecos_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "vendas.TiposDePrecos". All fields are combined with a logical 'AND'. */
  ['vendas_TiposDePrecos_bool_exp']: {
    Comentario?: ValueTypes['String_comparison_exp'] | null;
    PrestadoresDeServicos_Produtos_Precos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
      | null;
    PrestadoresDeServicos_Servicos_Precos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
      | null;
    Valor?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['vendas_TiposDePrecos_bool_exp'][];
    _not?: ValueTypes['vendas_TiposDePrecos_bool_exp'] | null;
    _or?: ValueTypes['vendas_TiposDePrecos_bool_exp'][];
  };
  /** unique or primary key constraints on table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_constraint']: vendas_TiposDePrecos_constraint;
  ['vendas_TiposDePrecos_enum']: vendas_TiposDePrecos_enum;
  /** Boolean expression to compare columns of type "vendas_TiposDePrecos_enum". All fields are combined with logical 'AND'. */
  ['vendas_TiposDePrecos_enum_comparison_exp']: {
    _eq?: ValueTypes['vendas_TiposDePrecos_enum'] | null;
    _in?: ValueTypes['vendas_TiposDePrecos_enum'][];
    _is_null?: boolean | null;
    _neq?: ValueTypes['vendas_TiposDePrecos_enum'] | null;
    _nin?: ValueTypes['vendas_TiposDePrecos_enum'][];
  };
  /** input type for inserting data into table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_insert_input']: {
    Comentario?: string | null;
    PrestadoresDeServicos_Produtos_Precos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_arr_rel_insert_input']
      | null;
    PrestadoresDeServicos_Servicos_Precos?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_arr_rel_insert_input']
      | null;
    Valor?: string | null;
  };
  /** aggregate max on columns */
  ['vendas_TiposDePrecos_max_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['vendas_TiposDePrecos_min_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['vendas_TiposDePrecos'];
    __typename?: true;
  }>;
  /** input type for inserting object relation for remote table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_obj_rel_insert_input']: {
    data: ValueTypes['vendas_TiposDePrecos_insert_input'];
    /** on conflict condition */
    on_conflict?: ValueTypes['vendas_TiposDePrecos_on_conflict'] | null;
  };
  /** on conflict condition type for table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_on_conflict']: {
    constraint: ValueTypes['vendas_TiposDePrecos_constraint'];
    update_columns: ValueTypes['vendas_TiposDePrecos_update_column'][];
    where?: ValueTypes['vendas_TiposDePrecos_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "vendas.TiposDePrecos". */
  ['vendas_TiposDePrecos_order_by']: {
    Comentario?: ValueTypes['order_by'] | null;
    PrestadoresDeServicos_Produtos_Precos_aggregate?:
      | ValueTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_order_by']
      | null;
    PrestadoresDeServicos_Servicos_Precos_aggregate?:
      | ValueTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_order_by']
      | null;
    Valor?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: vendas_TiposDePrecos */
  ['vendas_TiposDePrecos_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_select_column']: vendas_TiposDePrecos_select_column;
  /** input type for updating data in table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_set_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** update columns of table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_update_column']: vendas_TiposDePrecos_update_column;
  /** columns and relationships of "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregated selection of "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_aggregate']: AliasType<{
    aggregate?: ValueTypes['vendas_TiposDeRecorrencia_aggregate_fields'];
    nodes?: ValueTypes['vendas_TiposDeRecorrencia'];
    __typename?: true;
  }>;
  /** aggregate fields of "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?: ValueTypes['vendas_TiposDeRecorrencia_select_column'][];
        distinct?: boolean | null;
      },
      true
    ];
    max?: ValueTypes['vendas_TiposDeRecorrencia_max_fields'];
    min?: ValueTypes['vendas_TiposDeRecorrencia_min_fields'];
    __typename?: true;
  }>;
  /** Boolean expression to filter rows from the table "vendas.TiposDeRecorrencia". All fields are combined with a logical 'AND'. */
  ['vendas_TiposDeRecorrencia_bool_exp']: {
    Comentario?: ValueTypes['String_comparison_exp'] | null;
    Valor?: ValueTypes['String_comparison_exp'] | null;
    _and?: ValueTypes['vendas_TiposDeRecorrencia_bool_exp'][];
    _not?: ValueTypes['vendas_TiposDeRecorrencia_bool_exp'] | null;
    _or?: ValueTypes['vendas_TiposDeRecorrencia_bool_exp'][];
  };
  /** unique or primary key constraints on table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_constraint']: vendas_TiposDeRecorrencia_constraint;
  /** input type for inserting data into table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_insert_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** aggregate max on columns */
  ['vendas_TiposDeRecorrencia_max_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** aggregate min on columns */
  ['vendas_TiposDeRecorrencia_min_fields']: AliasType<{
    Comentario?: true;
    Valor?: true;
    __typename?: true;
  }>;
  /** response of any mutation on the table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: true;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['vendas_TiposDeRecorrencia'];
    __typename?: true;
  }>;
  /** on conflict condition type for table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_on_conflict']: {
    constraint: ValueTypes['vendas_TiposDeRecorrencia_constraint'];
    update_columns: ValueTypes['vendas_TiposDeRecorrencia_update_column'][];
    where?: ValueTypes['vendas_TiposDeRecorrencia_bool_exp'] | null;
  };
  /** Ordering options when selecting data from "vendas.TiposDeRecorrencia". */
  ['vendas_TiposDeRecorrencia_order_by']: {
    Comentario?: ValueTypes['order_by'] | null;
    Valor?: ValueTypes['order_by'] | null;
  };
  /** primary key columns input for table: vendas_TiposDeRecorrencia */
  ['vendas_TiposDeRecorrencia_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_select_column']: vendas_TiposDeRecorrencia_select_column;
  /** input type for updating data in table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_set_input']: {
    Comentario?: string | null;
    Valor?: string | null;
  };
  /** update columns of table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_update_column']: vendas_TiposDeRecorrencia_update_column;
};

export type ModelTypes = {
  /** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
  ['Boolean_comparison_exp']: GraphQLTypes['Boolean_comparison_exp'];
  ['CadastrarClienteOutput']: {
    Id: ModelTypes['uuid'];
  };
  ['CadastrarColaboradorOutput']: {
    Id: ModelTypes['uuid'];
  };
  ['CadastrarFornecedorOutput']: {
    Id: ModelTypes['uuid'];
  };
  ['CadastrarRepresentanteOutput']: {
    Id: ModelTypes['uuid'];
  };
  /** columns and relationships of "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos']: {
    Id: ModelTypes['uuid'];
    Nome: string;
  };
  /** aggregated selection of "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_aggregate']: {
    aggregate?: ModelTypes['CategoriasDeVeiculos_aggregate_fields'];
    nodes: ModelTypes['CategoriasDeVeiculos'][];
  };
  /** aggregate fields of "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['CategoriasDeVeiculos_max_fields'];
    min?: ModelTypes['CategoriasDeVeiculos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "CategoriasDeVeiculos". All fields are combined with a logical 'AND'. */
  ['CategoriasDeVeiculos_bool_exp']: GraphQLTypes['CategoriasDeVeiculos_bool_exp'];
  /** unique or primary key constraints on table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_constraint']: GraphQLTypes['CategoriasDeVeiculos_constraint'];
  /** input type for inserting data into table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_insert_input']: GraphQLTypes['CategoriasDeVeiculos_insert_input'];
  /** aggregate max on columns */
  ['CategoriasDeVeiculos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
  };
  /** aggregate min on columns */
  ['CategoriasDeVeiculos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
  };
  /** response of any mutation on the table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['CategoriasDeVeiculos'][];
  };
  /** on conflict condition type for table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_on_conflict']: GraphQLTypes['CategoriasDeVeiculos_on_conflict'];
  /** Ordering options when selecting data from "CategoriasDeVeiculos". */
  ['CategoriasDeVeiculos_order_by']: GraphQLTypes['CategoriasDeVeiculos_order_by'];
  /** primary key columns input for table: CategoriasDeVeiculos */
  ['CategoriasDeVeiculos_pk_columns_input']: GraphQLTypes['CategoriasDeVeiculos_pk_columns_input'];
  /** select columns of table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_select_column']: GraphQLTypes['CategoriasDeVeiculos_select_column'];
  /** input type for updating data in table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_set_input']: GraphQLTypes['CategoriasDeVeiculos_set_input'];
  /** update columns of table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_update_column']: GraphQLTypes['CategoriasDeVeiculos_update_column'];
  /** columns and relationships of "EstadosEMunicipios" */
  ['EstadosEMunicipios']: {
    /** An array relationship */
    Cidades: ModelTypes['EstadosEMunicipios'][];
    /** An aggregate relationship */
    Cidades_aggregate: ModelTypes['EstadosEMunicipios_aggregate'];
    CodigoIbge?: ModelTypes['bigint'];
    /** An object relationship */
    Estado?: ModelTypes['EstadosEMunicipios'];
    Id: ModelTypes['uuid'];
    Nome: string;
    Pai_Id?: ModelTypes['uuid'];
    Sigla?: string;
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "EstadosEMunicipios" */
  ['EstadosEMunicipios_aggregate']: {
    aggregate?: ModelTypes['EstadosEMunicipios_aggregate_fields'];
    nodes: ModelTypes['EstadosEMunicipios'][];
  };
  /** aggregate fields of "EstadosEMunicipios" */
  ['EstadosEMunicipios_aggregate_fields']: {
    avg?: ModelTypes['EstadosEMunicipios_avg_fields'];
    count: number;
    max?: ModelTypes['EstadosEMunicipios_max_fields'];
    min?: ModelTypes['EstadosEMunicipios_min_fields'];
    stddev?: ModelTypes['EstadosEMunicipios_stddev_fields'];
    stddev_pop?: ModelTypes['EstadosEMunicipios_stddev_pop_fields'];
    stddev_samp?: ModelTypes['EstadosEMunicipios_stddev_samp_fields'];
    sum?: ModelTypes['EstadosEMunicipios_sum_fields'];
    var_pop?: ModelTypes['EstadosEMunicipios_var_pop_fields'];
    var_samp?: ModelTypes['EstadosEMunicipios_var_samp_fields'];
    variance?: ModelTypes['EstadosEMunicipios_variance_fields'];
  };
  /** order by aggregate values of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_aggregate_order_by']: GraphQLTypes['EstadosEMunicipios_aggregate_order_by'];
  /** input type for inserting array relation for remote table "EstadosEMunicipios" */
  ['EstadosEMunicipios_arr_rel_insert_input']: GraphQLTypes['EstadosEMunicipios_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['EstadosEMunicipios_avg_fields']: {
    CodigoIbge?: number;
  };
  /** order by avg() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_avg_order_by']: GraphQLTypes['EstadosEMunicipios_avg_order_by'];
  /** Boolean expression to filter rows from the table "EstadosEMunicipios". All fields are combined with a logical 'AND'. */
  ['EstadosEMunicipios_bool_exp']: GraphQLTypes['EstadosEMunicipios_bool_exp'];
  /** unique or primary key constraints on table "EstadosEMunicipios" */
  ['EstadosEMunicipios_constraint']: GraphQLTypes['EstadosEMunicipios_constraint'];
  /** input type for incrementing numeric columns in table "EstadosEMunicipios" */
  ['EstadosEMunicipios_inc_input']: GraphQLTypes['EstadosEMunicipios_inc_input'];
  /** input type for inserting data into table "EstadosEMunicipios" */
  ['EstadosEMunicipios_insert_input']: GraphQLTypes['EstadosEMunicipios_insert_input'];
  /** aggregate max on columns */
  ['EstadosEMunicipios_max_fields']: {
    CodigoIbge?: ModelTypes['bigint'];
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Pai_Id?: ModelTypes['uuid'];
    Sigla?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_max_order_by']: GraphQLTypes['EstadosEMunicipios_max_order_by'];
  /** aggregate min on columns */
  ['EstadosEMunicipios_min_fields']: {
    CodigoIbge?: ModelTypes['bigint'];
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Pai_Id?: ModelTypes['uuid'];
    Sigla?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_min_order_by']: GraphQLTypes['EstadosEMunicipios_min_order_by'];
  /** response of any mutation on the table "EstadosEMunicipios" */
  ['EstadosEMunicipios_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['EstadosEMunicipios'][];
  };
  /** input type for inserting object relation for remote table "EstadosEMunicipios" */
  ['EstadosEMunicipios_obj_rel_insert_input']: GraphQLTypes['EstadosEMunicipios_obj_rel_insert_input'];
  /** on conflict condition type for table "EstadosEMunicipios" */
  ['EstadosEMunicipios_on_conflict']: GraphQLTypes['EstadosEMunicipios_on_conflict'];
  /** Ordering options when selecting data from "EstadosEMunicipios". */
  ['EstadosEMunicipios_order_by']: GraphQLTypes['EstadosEMunicipios_order_by'];
  /** primary key columns input for table: EstadosEMunicipios */
  ['EstadosEMunicipios_pk_columns_input']: GraphQLTypes['EstadosEMunicipios_pk_columns_input'];
  /** select columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_select_column']: GraphQLTypes['EstadosEMunicipios_select_column'];
  /** input type for updating data in table "EstadosEMunicipios" */
  ['EstadosEMunicipios_set_input']: GraphQLTypes['EstadosEMunicipios_set_input'];
  /** aggregate stddev on columns */
  ['EstadosEMunicipios_stddev_fields']: {
    CodigoIbge?: number;
  };
  /** order by stddev() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_stddev_order_by']: GraphQLTypes['EstadosEMunicipios_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['EstadosEMunicipios_stddev_pop_fields']: {
    CodigoIbge?: number;
  };
  /** order by stddev_pop() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_stddev_pop_order_by']: GraphQLTypes['EstadosEMunicipios_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['EstadosEMunicipios_stddev_samp_fields']: {
    CodigoIbge?: number;
  };
  /** order by stddev_samp() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_stddev_samp_order_by']: GraphQLTypes['EstadosEMunicipios_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['EstadosEMunicipios_sum_fields']: {
    CodigoIbge?: ModelTypes['bigint'];
  };
  /** order by sum() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_sum_order_by']: GraphQLTypes['EstadosEMunicipios_sum_order_by'];
  /** update columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_update_column']: GraphQLTypes['EstadosEMunicipios_update_column'];
  /** aggregate var_pop on columns */
  ['EstadosEMunicipios_var_pop_fields']: {
    CodigoIbge?: number;
  };
  /** order by var_pop() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_var_pop_order_by']: GraphQLTypes['EstadosEMunicipios_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['EstadosEMunicipios_var_samp_fields']: {
    CodigoIbge?: number;
  };
  /** order by var_samp() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_var_samp_order_by']: GraphQLTypes['EstadosEMunicipios_var_samp_order_by'];
  /** aggregate variance on columns */
  ['EstadosEMunicipios_variance_fields']: {
    CodigoIbge?: number;
  };
  /** order by variance() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_variance_order_by']: GraphQLTypes['EstadosEMunicipios_variance_order_by'];
  /** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
  ['Int_comparison_exp']: GraphQLTypes['Int_comparison_exp'];
  /** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
  ['String_comparison_exp']: GraphQLTypes['String_comparison_exp'];
  /** columns and relationships of "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos']: {
    /** An object relationship */
    Fluxo: ModelTypes['atendimentos_Fluxos'];
    Fluxo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    Nome: string;
    Posicao: number;
    /** An array relationship */
    Tickets: ModelTypes['atendimentos_Tickets'][];
    /** An aggregate relationship */
    Tickets_aggregate: ModelTypes['atendimentos_Tickets_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_aggregate']: {
    aggregate?: ModelTypes['atendimentos_EtapasDosFluxos_aggregate_fields'];
    nodes: ModelTypes['atendimentos_EtapasDosFluxos'][];
  };
  /** aggregate fields of "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_aggregate_fields']: {
    avg?: ModelTypes['atendimentos_EtapasDosFluxos_avg_fields'];
    count: number;
    max?: ModelTypes['atendimentos_EtapasDosFluxos_max_fields'];
    min?: ModelTypes['atendimentos_EtapasDosFluxos_min_fields'];
    stddev?: ModelTypes['atendimentos_EtapasDosFluxos_stddev_fields'];
    stddev_pop?: ModelTypes['atendimentos_EtapasDosFluxos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['atendimentos_EtapasDosFluxos_stddev_samp_fields'];
    sum?: ModelTypes['atendimentos_EtapasDosFluxos_sum_fields'];
    var_pop?: ModelTypes['atendimentos_EtapasDosFluxos_var_pop_fields'];
    var_samp?: ModelTypes['atendimentos_EtapasDosFluxos_var_samp_fields'];
    variance?: ModelTypes['atendimentos_EtapasDosFluxos_variance_fields'];
  };
  /** order by aggregate values of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_aggregate_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_arr_rel_insert_input']: GraphQLTypes['atendimentos_EtapasDosFluxos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['atendimentos_EtapasDosFluxos_avg_fields']: {
    Posicao?: number;
  };
  /** order by avg() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_avg_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_avg_order_by'];
  /** Boolean expression to filter rows from the table "atendimentos.EtapasDosFluxos". All fields are combined with a logical 'AND'. */
  ['atendimentos_EtapasDosFluxos_bool_exp']: GraphQLTypes['atendimentos_EtapasDosFluxos_bool_exp'];
  /** unique or primary key constraints on table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_constraint']: GraphQLTypes['atendimentos_EtapasDosFluxos_constraint'];
  /** input type for incrementing numeric columns in table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_inc_input']: GraphQLTypes['atendimentos_EtapasDosFluxos_inc_input'];
  /** input type for inserting data into table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_insert_input']: GraphQLTypes['atendimentos_EtapasDosFluxos_insert_input'];
  /** aggregate max on columns */
  ['atendimentos_EtapasDosFluxos_max_fields']: {
    Fluxo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Posicao?: number;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_max_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_max_order_by'];
  /** aggregate min on columns */
  ['atendimentos_EtapasDosFluxos_min_fields']: {
    Fluxo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Posicao?: number;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_min_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_min_order_by'];
  /** response of any mutation on the table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['atendimentos_EtapasDosFluxos'][];
  };
  /** input type for inserting object relation for remote table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_obj_rel_insert_input']: GraphQLTypes['atendimentos_EtapasDosFluxos_obj_rel_insert_input'];
  /** on conflict condition type for table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_on_conflict']: GraphQLTypes['atendimentos_EtapasDosFluxos_on_conflict'];
  /** Ordering options when selecting data from "atendimentos.EtapasDosFluxos". */
  ['atendimentos_EtapasDosFluxos_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_order_by'];
  /** primary key columns input for table: atendimentos_EtapasDosFluxos */
  ['atendimentos_EtapasDosFluxos_pk_columns_input']: GraphQLTypes['atendimentos_EtapasDosFluxos_pk_columns_input'];
  /** select columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_select_column']: GraphQLTypes['atendimentos_EtapasDosFluxos_select_column'];
  /** input type for updating data in table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_set_input']: GraphQLTypes['atendimentos_EtapasDosFluxos_set_input'];
  /** aggregate stddev on columns */
  ['atendimentos_EtapasDosFluxos_stddev_fields']: {
    Posicao?: number;
  };
  /** order by stddev() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_stddev_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['atendimentos_EtapasDosFluxos_stddev_pop_fields']: {
    Posicao?: number;
  };
  /** order by stddev_pop() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_stddev_pop_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['atendimentos_EtapasDosFluxos_stddev_samp_fields']: {
    Posicao?: number;
  };
  /** order by stddev_samp() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_stddev_samp_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['atendimentos_EtapasDosFluxos_sum_fields']: {
    Posicao?: number;
  };
  /** order by sum() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_sum_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_sum_order_by'];
  /** update columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_update_column']: GraphQLTypes['atendimentos_EtapasDosFluxos_update_column'];
  /** aggregate var_pop on columns */
  ['atendimentos_EtapasDosFluxos_var_pop_fields']: {
    Posicao?: number;
  };
  /** order by var_pop() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_var_pop_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['atendimentos_EtapasDosFluxos_var_samp_fields']: {
    Posicao?: number;
  };
  /** order by var_samp() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_var_samp_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['atendimentos_EtapasDosFluxos_variance_fields']: {
    Posicao?: number;
  };
  /** order by variance() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_variance_order_by']: GraphQLTypes['atendimentos_EtapasDosFluxos_variance_order_by'];
  /** columns and relationships of "atendimentos.Fluxos" */
  ['atendimentos_Fluxos']: {
    /** An array relationship */
    Etapas: ModelTypes['atendimentos_EtapasDosFluxos'][];
    /** An aggregate relationship */
    Etapas_aggregate: ModelTypes['atendimentos_EtapasDosFluxos_aggregate'];
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Tickets: ModelTypes['atendimentos_Tickets'][];
    /** An aggregate relationship */
    Tickets_aggregate: ModelTypes['atendimentos_Tickets_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_aggregate']: {
    aggregate?: ModelTypes['atendimentos_Fluxos_aggregate_fields'];
    nodes: ModelTypes['atendimentos_Fluxos'][];
  };
  /** aggregate fields of "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['atendimentos_Fluxos_max_fields'];
    min?: ModelTypes['atendimentos_Fluxos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "atendimentos.Fluxos". All fields are combined with a logical 'AND'. */
  ['atendimentos_Fluxos_bool_exp']: GraphQLTypes['atendimentos_Fluxos_bool_exp'];
  /** unique or primary key constraints on table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_constraint']: GraphQLTypes['atendimentos_Fluxos_constraint'];
  /** input type for inserting data into table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_insert_input']: GraphQLTypes['atendimentos_Fluxos_insert_input'];
  /** aggregate max on columns */
  ['atendimentos_Fluxos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['atendimentos_Fluxos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['atendimentos_Fluxos'][];
  };
  /** input type for inserting object relation for remote table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_obj_rel_insert_input']: GraphQLTypes['atendimentos_Fluxos_obj_rel_insert_input'];
  /** on conflict condition type for table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_on_conflict']: GraphQLTypes['atendimentos_Fluxos_on_conflict'];
  /** Ordering options when selecting data from "atendimentos.Fluxos". */
  ['atendimentos_Fluxos_order_by']: GraphQLTypes['atendimentos_Fluxos_order_by'];
  /** primary key columns input for table: atendimentos_Fluxos */
  ['atendimentos_Fluxos_pk_columns_input']: GraphQLTypes['atendimentos_Fluxos_pk_columns_input'];
  /** select columns of table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_select_column']: GraphQLTypes['atendimentos_Fluxos_select_column'];
  /** input type for updating data in table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_set_input']: GraphQLTypes['atendimentos_Fluxos_set_input'];
  /** update columns of table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_update_column']: GraphQLTypes['atendimentos_Fluxos_update_column'];
  /** columns and relationships of "atendimentos.Tickets" */
  ['atendimentos_Tickets']: {
    Cliente_Id?: ModelTypes['uuid'];
    CodigoReferencia: number;
    /** An object relationship */
    Etapa: ModelTypes['atendimentos_EtapasDosFluxos'];
    Etapa_Id: ModelTypes['uuid'];
    /** An object relationship */
    Fluxo: ModelTypes['atendimentos_Fluxos'];
    Fluxo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    Lead_Id?: ModelTypes['uuid'];
    /** An object relationship */
    Tipo: ModelTypes['atendimentos_TiposDeTickets'];
    Tipo_Id: ModelTypes['atendimentos_TiposDeTickets_enum'];
    Usuario_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "atendimentos.Tickets" */
  ['atendimentos_Tickets_aggregate']: {
    aggregate?: ModelTypes['atendimentos_Tickets_aggregate_fields'];
    nodes: ModelTypes['atendimentos_Tickets'][];
  };
  /** aggregate fields of "atendimentos.Tickets" */
  ['atendimentos_Tickets_aggregate_fields']: {
    avg?: ModelTypes['atendimentos_Tickets_avg_fields'];
    count: number;
    max?: ModelTypes['atendimentos_Tickets_max_fields'];
    min?: ModelTypes['atendimentos_Tickets_min_fields'];
    stddev?: ModelTypes['atendimentos_Tickets_stddev_fields'];
    stddev_pop?: ModelTypes['atendimentos_Tickets_stddev_pop_fields'];
    stddev_samp?: ModelTypes['atendimentos_Tickets_stddev_samp_fields'];
    sum?: ModelTypes['atendimentos_Tickets_sum_fields'];
    var_pop?: ModelTypes['atendimentos_Tickets_var_pop_fields'];
    var_samp?: ModelTypes['atendimentos_Tickets_var_samp_fields'];
    variance?: ModelTypes['atendimentos_Tickets_variance_fields'];
  };
  /** order by aggregate values of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_aggregate_order_by']: GraphQLTypes['atendimentos_Tickets_aggregate_order_by'];
  /** input type for inserting array relation for remote table "atendimentos.Tickets" */
  ['atendimentos_Tickets_arr_rel_insert_input']: GraphQLTypes['atendimentos_Tickets_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['atendimentos_Tickets_avg_fields']: {
    CodigoReferencia?: number;
  };
  /** order by avg() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_avg_order_by']: GraphQLTypes['atendimentos_Tickets_avg_order_by'];
  /** Boolean expression to filter rows from the table "atendimentos.Tickets". All fields are combined with a logical 'AND'. */
  ['atendimentos_Tickets_bool_exp']: GraphQLTypes['atendimentos_Tickets_bool_exp'];
  /** unique or primary key constraints on table "atendimentos.Tickets" */
  ['atendimentos_Tickets_constraint']: GraphQLTypes['atendimentos_Tickets_constraint'];
  /** input type for incrementing numeric columns in table "atendimentos.Tickets" */
  ['atendimentos_Tickets_inc_input']: GraphQLTypes['atendimentos_Tickets_inc_input'];
  /** input type for inserting data into table "atendimentos.Tickets" */
  ['atendimentos_Tickets_insert_input']: GraphQLTypes['atendimentos_Tickets_insert_input'];
  /** aggregate max on columns */
  ['atendimentos_Tickets_max_fields']: {
    Cliente_Id?: ModelTypes['uuid'];
    CodigoReferencia?: number;
    Etapa_Id?: ModelTypes['uuid'];
    Fluxo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Lead_Id?: ModelTypes['uuid'];
    Usuario_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_max_order_by']: GraphQLTypes['atendimentos_Tickets_max_order_by'];
  /** aggregate min on columns */
  ['atendimentos_Tickets_min_fields']: {
    Cliente_Id?: ModelTypes['uuid'];
    CodigoReferencia?: number;
    Etapa_Id?: ModelTypes['uuid'];
    Fluxo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Lead_Id?: ModelTypes['uuid'];
    Usuario_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_min_order_by']: GraphQLTypes['atendimentos_Tickets_min_order_by'];
  /** response of any mutation on the table "atendimentos.Tickets" */
  ['atendimentos_Tickets_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['atendimentos_Tickets'][];
  };
  /** on conflict condition type for table "atendimentos.Tickets" */
  ['atendimentos_Tickets_on_conflict']: GraphQLTypes['atendimentos_Tickets_on_conflict'];
  /** Ordering options when selecting data from "atendimentos.Tickets". */
  ['atendimentos_Tickets_order_by']: GraphQLTypes['atendimentos_Tickets_order_by'];
  /** primary key columns input for table: atendimentos_Tickets */
  ['atendimentos_Tickets_pk_columns_input']: GraphQLTypes['atendimentos_Tickets_pk_columns_input'];
  /** select columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_select_column']: GraphQLTypes['atendimentos_Tickets_select_column'];
  /** input type for updating data in table "atendimentos.Tickets" */
  ['atendimentos_Tickets_set_input']: GraphQLTypes['atendimentos_Tickets_set_input'];
  /** aggregate stddev on columns */
  ['atendimentos_Tickets_stddev_fields']: {
    CodigoReferencia?: number;
  };
  /** order by stddev() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_stddev_order_by']: GraphQLTypes['atendimentos_Tickets_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['atendimentos_Tickets_stddev_pop_fields']: {
    CodigoReferencia?: number;
  };
  /** order by stddev_pop() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_stddev_pop_order_by']: GraphQLTypes['atendimentos_Tickets_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['atendimentos_Tickets_stddev_samp_fields']: {
    CodigoReferencia?: number;
  };
  /** order by stddev_samp() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_stddev_samp_order_by']: GraphQLTypes['atendimentos_Tickets_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['atendimentos_Tickets_sum_fields']: {
    CodigoReferencia?: number;
  };
  /** order by sum() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_sum_order_by']: GraphQLTypes['atendimentos_Tickets_sum_order_by'];
  /** update columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_update_column']: GraphQLTypes['atendimentos_Tickets_update_column'];
  /** aggregate var_pop on columns */
  ['atendimentos_Tickets_var_pop_fields']: {
    CodigoReferencia?: number;
  };
  /** order by var_pop() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_var_pop_order_by']: GraphQLTypes['atendimentos_Tickets_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['atendimentos_Tickets_var_samp_fields']: {
    CodigoReferencia?: number;
  };
  /** order by var_samp() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_var_samp_order_by']: GraphQLTypes['atendimentos_Tickets_var_samp_order_by'];
  /** aggregate variance on columns */
  ['atendimentos_Tickets_variance_fields']: {
    CodigoReferencia?: number;
  };
  /** order by variance() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_variance_order_by']: GraphQLTypes['atendimentos_Tickets_variance_order_by'];
  /** columns and relationships of "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets']: {
    Comentario: string;
    /** An array relationship */
    Tickets: ModelTypes['atendimentos_Tickets'][];
    /** An aggregate relationship */
    Tickets_aggregate: ModelTypes['atendimentos_Tickets_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_aggregate']: {
    aggregate?: ModelTypes['atendimentos_TiposDeTickets_aggregate_fields'];
    nodes: ModelTypes['atendimentos_TiposDeTickets'][];
  };
  /** aggregate fields of "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_aggregate_fields']: {
    count: number;
    max?: ModelTypes['atendimentos_TiposDeTickets_max_fields'];
    min?: ModelTypes['atendimentos_TiposDeTickets_min_fields'];
  };
  /** Boolean expression to filter rows from the table "atendimentos.TiposDeTickets". All fields are combined with a logical 'AND'. */
  ['atendimentos_TiposDeTickets_bool_exp']: GraphQLTypes['atendimentos_TiposDeTickets_bool_exp'];
  /** unique or primary key constraints on table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_constraint']: GraphQLTypes['atendimentos_TiposDeTickets_constraint'];
  ['atendimentos_TiposDeTickets_enum']: GraphQLTypes['atendimentos_TiposDeTickets_enum'];
  /** Boolean expression to compare columns of type "atendimentos_TiposDeTickets_enum". All fields are combined with logical 'AND'. */
  ['atendimentos_TiposDeTickets_enum_comparison_exp']: GraphQLTypes['atendimentos_TiposDeTickets_enum_comparison_exp'];
  /** input type for inserting data into table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_insert_input']: GraphQLTypes['atendimentos_TiposDeTickets_insert_input'];
  /** aggregate max on columns */
  ['atendimentos_TiposDeTickets_max_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['atendimentos_TiposDeTickets_min_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['atendimentos_TiposDeTickets'][];
  };
  /** input type for inserting object relation for remote table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_obj_rel_insert_input']: GraphQLTypes['atendimentos_TiposDeTickets_obj_rel_insert_input'];
  /** on conflict condition type for table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_on_conflict']: GraphQLTypes['atendimentos_TiposDeTickets_on_conflict'];
  /** Ordering options when selecting data from "atendimentos.TiposDeTickets". */
  ['atendimentos_TiposDeTickets_order_by']: GraphQLTypes['atendimentos_TiposDeTickets_order_by'];
  /** primary key columns input for table: atendimentos_TiposDeTickets */
  ['atendimentos_TiposDeTickets_pk_columns_input']: GraphQLTypes['atendimentos_TiposDeTickets_pk_columns_input'];
  /** select columns of table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_select_column']: GraphQLTypes['atendimentos_TiposDeTickets_select_column'];
  /** input type for updating data in table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_set_input']: GraphQLTypes['atendimentos_TiposDeTickets_set_input'];
  /** update columns of table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_update_column']: GraphQLTypes['atendimentos_TiposDeTickets_update_column'];
  /** columns and relationships of "autenticacao.Atendentes" */
  ['autenticacao_Atendentes']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Usuario: ModelTypes['autenticacao_Usuarios'];
    Usuario_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_aggregate']: {
    aggregate?: ModelTypes['autenticacao_Atendentes_aggregate_fields'];
    nodes: ModelTypes['autenticacao_Atendentes'][];
  };
  /** aggregate fields of "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_aggregate_fields']: {
    count: number;
    max?: ModelTypes['autenticacao_Atendentes_max_fields'];
    min?: ModelTypes['autenticacao_Atendentes_min_fields'];
  };
  /** Boolean expression to filter rows from the table "autenticacao.Atendentes". All fields are combined with a logical 'AND'. */
  ['autenticacao_Atendentes_bool_exp']: GraphQLTypes['autenticacao_Atendentes_bool_exp'];
  /** unique or primary key constraints on table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_constraint']: GraphQLTypes['autenticacao_Atendentes_constraint'];
  /** input type for inserting data into table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_insert_input']: GraphQLTypes['autenticacao_Atendentes_insert_input'];
  /** aggregate max on columns */
  ['autenticacao_Atendentes_max_fields']: {
    Id?: ModelTypes['uuid'];
    Usuario_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['autenticacao_Atendentes_min_fields']: {
    Id?: ModelTypes['uuid'];
    Usuario_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['autenticacao_Atendentes'][];
  };
  /** input type for inserting object relation for remote table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_obj_rel_insert_input']: GraphQLTypes['autenticacao_Atendentes_obj_rel_insert_input'];
  /** on conflict condition type for table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_on_conflict']: GraphQLTypes['autenticacao_Atendentes_on_conflict'];
  /** Ordering options when selecting data from "autenticacao.Atendentes". */
  ['autenticacao_Atendentes_order_by']: GraphQLTypes['autenticacao_Atendentes_order_by'];
  /** primary key columns input for table: autenticacao_Atendentes */
  ['autenticacao_Atendentes_pk_columns_input']: GraphQLTypes['autenticacao_Atendentes_pk_columns_input'];
  /** select columns of table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_select_column']: GraphQLTypes['autenticacao_Atendentes_select_column'];
  /** input type for updating data in table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_set_input']: GraphQLTypes['autenticacao_Atendentes_set_input'];
  /** update columns of table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_update_column']: GraphQLTypes['autenticacao_Atendentes_update_column'];
  /** columns and relationships of "autenticacao.Usuarios" */
  ['autenticacao_Usuarios']: {
    /** An object relationship */
    Atendente?: ModelTypes['autenticacao_Atendentes'];
    /** An object relationship */
    Cliente?: ModelTypes['identidades_Clientes'];
    Cliente_Id?: ModelTypes['uuid'];
    /** An object relationship */
    Colaborador?: ModelTypes['identidades_Colaboradores'];
    Colaborador_Id?: ModelTypes['uuid'];
    Email: string;
    Id: ModelTypes['uuid'];
    Senha: string;
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_aggregate']: {
    aggregate?: ModelTypes['autenticacao_Usuarios_aggregate_fields'];
    nodes: ModelTypes['autenticacao_Usuarios'][];
  };
  /** aggregate fields of "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_aggregate_fields']: {
    count: number;
    max?: ModelTypes['autenticacao_Usuarios_max_fields'];
    min?: ModelTypes['autenticacao_Usuarios_min_fields'];
  };
  /** order by aggregate values of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_aggregate_order_by']: GraphQLTypes['autenticacao_Usuarios_aggregate_order_by'];
  /** input type for inserting array relation for remote table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_arr_rel_insert_input']: GraphQLTypes['autenticacao_Usuarios_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "autenticacao.Usuarios". All fields are combined with a logical 'AND'. */
  ['autenticacao_Usuarios_bool_exp']: GraphQLTypes['autenticacao_Usuarios_bool_exp'];
  /** unique or primary key constraints on table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_constraint']: GraphQLTypes['autenticacao_Usuarios_constraint'];
  /** input type for inserting data into table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_insert_input']: GraphQLTypes['autenticacao_Usuarios_insert_input'];
  /** aggregate max on columns */
  ['autenticacao_Usuarios_max_fields']: {
    Cliente_Id?: ModelTypes['uuid'];
    Colaborador_Id?: ModelTypes['uuid'];
    Email?: string;
    Id?: ModelTypes['uuid'];
    Senha?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_max_order_by']: GraphQLTypes['autenticacao_Usuarios_max_order_by'];
  /** aggregate min on columns */
  ['autenticacao_Usuarios_min_fields']: {
    Cliente_Id?: ModelTypes['uuid'];
    Colaborador_Id?: ModelTypes['uuid'];
    Email?: string;
    Id?: ModelTypes['uuid'];
    Senha?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_min_order_by']: GraphQLTypes['autenticacao_Usuarios_min_order_by'];
  /** response of any mutation on the table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['autenticacao_Usuarios'][];
  };
  /** input type for inserting object relation for remote table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_obj_rel_insert_input']: GraphQLTypes['autenticacao_Usuarios_obj_rel_insert_input'];
  /** on conflict condition type for table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_on_conflict']: GraphQLTypes['autenticacao_Usuarios_on_conflict'];
  /** Ordering options when selecting data from "autenticacao.Usuarios". */
  ['autenticacao_Usuarios_order_by']: GraphQLTypes['autenticacao_Usuarios_order_by'];
  /** primary key columns input for table: autenticacao_Usuarios */
  ['autenticacao_Usuarios_pk_columns_input']: GraphQLTypes['autenticacao_Usuarios_pk_columns_input'];
  /** select columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_select_column']: GraphQLTypes['autenticacao_Usuarios_select_column'];
  /** input type for updating data in table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_set_input']: GraphQLTypes['autenticacao_Usuarios_set_input'];
  /** update columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_update_column']: GraphQLTypes['autenticacao_Usuarios_update_column'];
  ['bigint']: any;
  /** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
  ['bigint_comparison_exp']: GraphQLTypes['bigint_comparison_exp'];
  /** columns and relationships of "clientes.Leads" */
  ['clientes_Leads']: {
    /** An object relationship */
    Cliente?: ModelTypes['identidades_Clientes'];
    Cliente_Id?: ModelTypes['uuid'];
    Email: string;
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    PerfisComerciais: ModelTypes['clientes_PerfisComerciais'][];
    /** An aggregate relationship */
    PerfisComerciais_aggregate: ModelTypes['clientes_PerfisComerciais_aggregate'];
    Telefone: string;
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "clientes.Leads" */
  ['clientes_Leads_aggregate']: {
    aggregate?: ModelTypes['clientes_Leads_aggregate_fields'];
    nodes: ModelTypes['clientes_Leads'][];
  };
  /** aggregate fields of "clientes.Leads" */
  ['clientes_Leads_aggregate_fields']: {
    count: number;
    max?: ModelTypes['clientes_Leads_max_fields'];
    min?: ModelTypes['clientes_Leads_min_fields'];
  };
  /** order by aggregate values of table "clientes.Leads" */
  ['clientes_Leads_aggregate_order_by']: GraphQLTypes['clientes_Leads_aggregate_order_by'];
  /** input type for inserting array relation for remote table "clientes.Leads" */
  ['clientes_Leads_arr_rel_insert_input']: GraphQLTypes['clientes_Leads_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "clientes.Leads". All fields are combined with a logical 'AND'. */
  ['clientes_Leads_bool_exp']: GraphQLTypes['clientes_Leads_bool_exp'];
  /** unique or primary key constraints on table "clientes.Leads" */
  ['clientes_Leads_constraint']: GraphQLTypes['clientes_Leads_constraint'];
  /** input type for inserting data into table "clientes.Leads" */
  ['clientes_Leads_insert_input']: GraphQLTypes['clientes_Leads_insert_input'];
  /** aggregate max on columns */
  ['clientes_Leads_max_fields']: {
    Cliente_Id?: ModelTypes['uuid'];
    Email?: string;
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Telefone?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.Leads" */
  ['clientes_Leads_max_order_by']: GraphQLTypes['clientes_Leads_max_order_by'];
  /** aggregate min on columns */
  ['clientes_Leads_min_fields']: {
    Cliente_Id?: ModelTypes['uuid'];
    Email?: string;
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Telefone?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.Leads" */
  ['clientes_Leads_min_order_by']: GraphQLTypes['clientes_Leads_min_order_by'];
  /** response of any mutation on the table "clientes.Leads" */
  ['clientes_Leads_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['clientes_Leads'][];
  };
  /** input type for inserting object relation for remote table "clientes.Leads" */
  ['clientes_Leads_obj_rel_insert_input']: GraphQLTypes['clientes_Leads_obj_rel_insert_input'];
  /** on conflict condition type for table "clientes.Leads" */
  ['clientes_Leads_on_conflict']: GraphQLTypes['clientes_Leads_on_conflict'];
  /** Ordering options when selecting data from "clientes.Leads". */
  ['clientes_Leads_order_by']: GraphQLTypes['clientes_Leads_order_by'];
  /** primary key columns input for table: clientes_Leads */
  ['clientes_Leads_pk_columns_input']: GraphQLTypes['clientes_Leads_pk_columns_input'];
  /** select columns of table "clientes.Leads" */
  ['clientes_Leads_select_column']: GraphQLTypes['clientes_Leads_select_column'];
  /** input type for updating data in table "clientes.Leads" */
  ['clientes_Leads_set_input']: GraphQLTypes['clientes_Leads_set_input'];
  /** update columns of table "clientes.Leads" */
  ['clientes_Leads_update_column']: GraphQLTypes['clientes_Leads_update_column'];
  /** columns and relationships of "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais']: {
    Grupo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Lead: ModelTypes['clientes_Leads'];
    Lead_Id: ModelTypes['uuid'];
    Pergunta_Id: ModelTypes['uuid'];
    Resposta: string;
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_aggregate']: {
    aggregate?: ModelTypes['clientes_PerfisComerciais_aggregate_fields'];
    nodes: ModelTypes['clientes_PerfisComerciais'][];
  };
  /** aggregate fields of "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_aggregate_fields']: {
    count: number;
    max?: ModelTypes['clientes_PerfisComerciais_max_fields'];
    min?: ModelTypes['clientes_PerfisComerciais_min_fields'];
  };
  /** order by aggregate values of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_aggregate_order_by']: GraphQLTypes['clientes_PerfisComerciais_aggregate_order_by'];
  /** input type for inserting array relation for remote table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_arr_rel_insert_input']: GraphQLTypes['clientes_PerfisComerciais_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "clientes.PerfisComerciais". All fields are combined with a logical 'AND'. */
  ['clientes_PerfisComerciais_bool_exp']: GraphQLTypes['clientes_PerfisComerciais_bool_exp'];
  /** unique or primary key constraints on table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_constraint']: GraphQLTypes['clientes_PerfisComerciais_constraint'];
  /** input type for inserting data into table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_insert_input']: GraphQLTypes['clientes_PerfisComerciais_insert_input'];
  /** aggregate max on columns */
  ['clientes_PerfisComerciais_max_fields']: {
    Grupo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Lead_Id?: ModelTypes['uuid'];
    Pergunta_Id?: ModelTypes['uuid'];
    Resposta?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_max_order_by']: GraphQLTypes['clientes_PerfisComerciais_max_order_by'];
  /** aggregate min on columns */
  ['clientes_PerfisComerciais_min_fields']: {
    Grupo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Lead_Id?: ModelTypes['uuid'];
    Pergunta_Id?: ModelTypes['uuid'];
    Resposta?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_min_order_by']: GraphQLTypes['clientes_PerfisComerciais_min_order_by'];
  /** response of any mutation on the table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['clientes_PerfisComerciais'][];
  };
  /** on conflict condition type for table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_on_conflict']: GraphQLTypes['clientes_PerfisComerciais_on_conflict'];
  /** Ordering options when selecting data from "clientes.PerfisComerciais". */
  ['clientes_PerfisComerciais_order_by']: GraphQLTypes['clientes_PerfisComerciais_order_by'];
  /** primary key columns input for table: clientes_PerfisComerciais */
  ['clientes_PerfisComerciais_pk_columns_input']: GraphQLTypes['clientes_PerfisComerciais_pk_columns_input'];
  /** select columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_select_column']: GraphQLTypes['clientes_PerfisComerciais_select_column'];
  /** input type for updating data in table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_set_input']: GraphQLTypes['clientes_PerfisComerciais_set_input'];
  /** update columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_update_column']: GraphQLTypes['clientes_PerfisComerciais_update_column'];
  /** columns and relationships of "clientes.Veiculos" */
  ['clientes_Veiculos']: {
    Apelido?: string;
    Categoria_Id: ModelTypes['uuid'];
    /** An object relationship */
    Cliente?: ModelTypes['identidades_Clientes'];
    Cliente_Id?: ModelTypes['uuid'];
    DadosDaApi?: ModelTypes['jsonb'];
    Id: ModelTypes['uuid'];
    NumeroDoChassi?: string;
    Placa?: string;
    /** An array relationship */
    VeiculosAtivos: ModelTypes['clientes_VeiculosAtivos'][];
    /** An aggregate relationship */
    VeiculosAtivos_aggregate: ModelTypes['clientes_VeiculosAtivos_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos']: {
    /** An array relationship */
    Beneficios: ModelTypes['clientes_VeiculosAtivos_Beneficios'][];
    /** An aggregate relationship */
    Beneficios_aggregate: ModelTypes['clientes_VeiculosAtivos_Beneficios_aggregate'];
    /** An object relationship */
    Cliente: ModelTypes['identidades_Clientes'];
    Cliente_Id: ModelTypes['uuid'];
    Franquia_Id?: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    OS_Id?: ModelTypes['uuid'];
    /** An array relationship */
    Produtos: ModelTypes['clientes_VeiculosAtivos_Produtos'][];
    /** An aggregate relationship */
    Produtos_aggregate: ModelTypes['clientes_VeiculosAtivos_Produtos_aggregate'];
    /** An array relationship */
    Servicos: ModelTypes['clientes_VeiculosAtivos_Servicos'][];
    /** An aggregate relationship */
    Servicos_aggregate: ModelTypes['clientes_VeiculosAtivos_Servicos_aggregate'];
    /** An object relationship */
    Situacao: ModelTypes['clientes_VeiculosAtivos_Situacao'];
    Situacao_Id: ModelTypes['clientes_VeiculosAtivos_Situacao_enum'];
    /** An object relationship */
    Veiculo: ModelTypes['clientes_Veiculos'];
    Veiculo_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios']: {
    Ativo: boolean;
    Id: ModelTypes['uuid'];
    PortfolioPreco_Id: ModelTypes['uuid'];
    Portfolio_Id: ModelTypes['uuid'];
    TipoPortfolio: string;
    /** An object relationship */
    VeiculoAtivo: ModelTypes['clientes_VeiculosAtivos'];
    VeiculoAtivo_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_aggregate']: {
    aggregate?: ModelTypes['clientes_VeiculosAtivos_Beneficios_aggregate_fields'];
    nodes: ModelTypes['clientes_VeiculosAtivos_Beneficios'][];
  };
  /** aggregate fields of "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_aggregate_fields']: {
    count: number;
    max?: ModelTypes['clientes_VeiculosAtivos_Beneficios_max_fields'];
    min?: ModelTypes['clientes_VeiculosAtivos_Beneficios_min_fields'];
  };
  /** order by aggregate values of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_aggregate_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_aggregate_order_by'];
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_arr_rel_insert_input']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Beneficios". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Beneficios_bool_exp']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_bool_exp'];
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_constraint']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_constraint'];
  /** input type for inserting data into table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_insert_input']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_insert_input'];
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Beneficios_max_fields']: {
    Id?: ModelTypes['uuid'];
    PortfolioPreco_Id?: ModelTypes['uuid'];
    Portfolio_Id?: ModelTypes['uuid'];
    TipoPortfolio?: string;
    VeiculoAtivo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_max_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_max_order_by'];
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Beneficios_min_fields']: {
    Id?: ModelTypes['uuid'];
    PortfolioPreco_Id?: ModelTypes['uuid'];
    Portfolio_Id?: ModelTypes['uuid'];
    TipoPortfolio?: string;
    VeiculoAtivo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_min_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_min_order_by'];
  /** response of any mutation on the table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['clientes_VeiculosAtivos_Beneficios'][];
  };
  /** on conflict condition type for table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_on_conflict']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_on_conflict'];
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Beneficios". */
  ['clientes_VeiculosAtivos_Beneficios_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_order_by'];
  /** primary key columns input for table: clientes_VeiculosAtivos_Beneficios */
  ['clientes_VeiculosAtivos_Beneficios_pk_columns_input']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_pk_columns_input'];
  /** select columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_select_column']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_select_column'];
  /** input type for updating data in table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_set_input']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_set_input'];
  /** update columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_update_column']: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_update_column'];
  /** columns and relationships of "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos']: {
    Ativo: boolean;
    Id: ModelTypes['uuid'];
    ProdutoPreco_Id: ModelTypes['uuid'];
    Produto_Id: ModelTypes['uuid'];
    VeiculoAtivo_Id: ModelTypes['uuid'];
    /** An object relationship */
    VeiculosAtivo: ModelTypes['clientes_VeiculosAtivos'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_aggregate']: {
    aggregate?: ModelTypes['clientes_VeiculosAtivos_Produtos_aggregate_fields'];
    nodes: ModelTypes['clientes_VeiculosAtivos_Produtos'][];
  };
  /** aggregate fields of "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['clientes_VeiculosAtivos_Produtos_max_fields'];
    min?: ModelTypes['clientes_VeiculosAtivos_Produtos_min_fields'];
  };
  /** order by aggregate values of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_aggregate_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_arr_rel_insert_input']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Produtos". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Produtos_bool_exp']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_bool_exp'];
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_constraint']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_constraint'];
  /** input type for inserting data into table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_insert_input']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_insert_input'];
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Produtos_max_fields']: {
    Id?: ModelTypes['uuid'];
    ProdutoPreco_Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    VeiculoAtivo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_max_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_max_order_by'];
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Produtos_min_fields']: {
    Id?: ModelTypes['uuid'];
    ProdutoPreco_Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    VeiculoAtivo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_min_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_min_order_by'];
  /** response of any mutation on the table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['clientes_VeiculosAtivos_Produtos'][];
  };
  /** on conflict condition type for table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_on_conflict']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_on_conflict'];
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Produtos". */
  ['clientes_VeiculosAtivos_Produtos_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_order_by'];
  /** primary key columns input for table: clientes_VeiculosAtivos_Produtos */
  ['clientes_VeiculosAtivos_Produtos_pk_columns_input']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_pk_columns_input'];
  /** select columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_select_column']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_select_column'];
  /** input type for updating data in table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_set_input']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_set_input'];
  /** update columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_update_column']: GraphQLTypes['clientes_VeiculosAtivos_Produtos_update_column'];
  /** columns and relationships of "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos']: {
    Ativo: boolean;
    Id: ModelTypes['uuid'];
    ServicoPreco_Id: ModelTypes['uuid'];
    Servico_Id: ModelTypes['uuid'];
    VeiculoAtivo_Id: ModelTypes['uuid'];
    /** An object relationship */
    VeiculosAtivo: ModelTypes['clientes_VeiculosAtivos'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_aggregate']: {
    aggregate?: ModelTypes['clientes_VeiculosAtivos_Servicos_aggregate_fields'];
    nodes: ModelTypes['clientes_VeiculosAtivos_Servicos'][];
  };
  /** aggregate fields of "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['clientes_VeiculosAtivos_Servicos_max_fields'];
    min?: ModelTypes['clientes_VeiculosAtivos_Servicos_min_fields'];
  };
  /** order by aggregate values of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_aggregate_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_arr_rel_insert_input']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Servicos". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Servicos_bool_exp']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_bool_exp'];
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_constraint']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_constraint'];
  /** input type for inserting data into table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_insert_input']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_insert_input'];
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Servicos_max_fields']: {
    Id?: ModelTypes['uuid'];
    ServicoPreco_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    VeiculoAtivo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_max_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_max_order_by'];
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Servicos_min_fields']: {
    Id?: ModelTypes['uuid'];
    ServicoPreco_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    VeiculoAtivo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_min_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_min_order_by'];
  /** response of any mutation on the table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['clientes_VeiculosAtivos_Servicos'][];
  };
  /** on conflict condition type for table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_on_conflict']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_on_conflict'];
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Servicos". */
  ['clientes_VeiculosAtivos_Servicos_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_order_by'];
  /** primary key columns input for table: clientes_VeiculosAtivos_Servicos */
  ['clientes_VeiculosAtivos_Servicos_pk_columns_input']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_pk_columns_input'];
  /** select columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_select_column']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_select_column'];
  /** input type for updating data in table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_set_input']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_set_input'];
  /** update columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_update_column']: GraphQLTypes['clientes_VeiculosAtivos_Servicos_update_column'];
  /** columns and relationships of "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao']: {
    Comentario: string;
    Valor: string;
    /** An array relationship */
    VeiculosAtivos: ModelTypes['clientes_VeiculosAtivos'][];
    /** An aggregate relationship */
    VeiculosAtivos_aggregate: ModelTypes['clientes_VeiculosAtivos_aggregate'];
  };
  /** aggregated selection of "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_aggregate']: {
    aggregate?: ModelTypes['clientes_VeiculosAtivos_Situacao_aggregate_fields'];
    nodes: ModelTypes['clientes_VeiculosAtivos_Situacao'][];
  };
  /** aggregate fields of "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_aggregate_fields']: {
    count: number;
    max?: ModelTypes['clientes_VeiculosAtivos_Situacao_max_fields'];
    min?: ModelTypes['clientes_VeiculosAtivos_Situacao_min_fields'];
  };
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Situacao". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Situacao_bool_exp']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_bool_exp'];
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_constraint']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_constraint'];
  ['clientes_VeiculosAtivos_Situacao_enum']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_enum'];
  /** Boolean expression to compare columns of type "clientes_VeiculosAtivos_Situacao_enum". All fields are combined with logical 'AND'. */
  ['clientes_VeiculosAtivos_Situacao_enum_comparison_exp']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_enum_comparison_exp'];
  /** input type for inserting data into table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_insert_input']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_insert_input'];
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Situacao_max_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Situacao_min_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['clientes_VeiculosAtivos_Situacao'][];
  };
  /** input type for inserting object relation for remote table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_obj_rel_insert_input']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_obj_rel_insert_input'];
  /** on conflict condition type for table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_on_conflict']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_on_conflict'];
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Situacao". */
  ['clientes_VeiculosAtivos_Situacao_order_by']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_order_by'];
  /** primary key columns input for table: clientes_VeiculosAtivos_Situacao */
  ['clientes_VeiculosAtivos_Situacao_pk_columns_input']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_pk_columns_input'];
  /** select columns of table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_select_column']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_select_column'];
  /** input type for updating data in table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_set_input']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_set_input'];
  /** update columns of table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_update_column']: GraphQLTypes['clientes_VeiculosAtivos_Situacao_update_column'];
  /** aggregated selection of "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_aggregate']: {
    aggregate?: ModelTypes['clientes_VeiculosAtivos_aggregate_fields'];
    nodes: ModelTypes['clientes_VeiculosAtivos'][];
  };
  /** aggregate fields of "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['clientes_VeiculosAtivos_max_fields'];
    min?: ModelTypes['clientes_VeiculosAtivos_min_fields'];
  };
  /** order by aggregate values of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_aggregate_order_by']: GraphQLTypes['clientes_VeiculosAtivos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_arr_rel_insert_input']: GraphQLTypes['clientes_VeiculosAtivos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_bool_exp']: GraphQLTypes['clientes_VeiculosAtivos_bool_exp'];
  /** unique or primary key constraints on table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_constraint']: GraphQLTypes['clientes_VeiculosAtivos_constraint'];
  /** input type for inserting data into table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_insert_input']: GraphQLTypes['clientes_VeiculosAtivos_insert_input'];
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_max_fields']: {
    Cliente_Id?: ModelTypes['uuid'];
    Franquia_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    OS_Id?: ModelTypes['uuid'];
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_max_order_by']: GraphQLTypes['clientes_VeiculosAtivos_max_order_by'];
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_min_fields']: {
    Cliente_Id?: ModelTypes['uuid'];
    Franquia_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    OS_Id?: ModelTypes['uuid'];
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_min_order_by']: GraphQLTypes['clientes_VeiculosAtivos_min_order_by'];
  /** response of any mutation on the table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['clientes_VeiculosAtivos'][];
  };
  /** input type for inserting object relation for remote table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_obj_rel_insert_input']: GraphQLTypes['clientes_VeiculosAtivos_obj_rel_insert_input'];
  /** on conflict condition type for table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_on_conflict']: GraphQLTypes['clientes_VeiculosAtivos_on_conflict'];
  /** Ordering options when selecting data from "clientes.VeiculosAtivos". */
  ['clientes_VeiculosAtivos_order_by']: GraphQLTypes['clientes_VeiculosAtivos_order_by'];
  /** primary key columns input for table: clientes_VeiculosAtivos */
  ['clientes_VeiculosAtivos_pk_columns_input']: GraphQLTypes['clientes_VeiculosAtivos_pk_columns_input'];
  /** select columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_select_column']: GraphQLTypes['clientes_VeiculosAtivos_select_column'];
  /** input type for updating data in table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_set_input']: GraphQLTypes['clientes_VeiculosAtivos_set_input'];
  /** update columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_update_column']: GraphQLTypes['clientes_VeiculosAtivos_update_column'];
  /** aggregated selection of "clientes.Veiculos" */
  ['clientes_Veiculos_aggregate']: {
    aggregate?: ModelTypes['clientes_Veiculos_aggregate_fields'];
    nodes: ModelTypes['clientes_Veiculos'][];
  };
  /** aggregate fields of "clientes.Veiculos" */
  ['clientes_Veiculos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['clientes_Veiculos_max_fields'];
    min?: ModelTypes['clientes_Veiculos_min_fields'];
  };
  /** order by aggregate values of table "clientes.Veiculos" */
  ['clientes_Veiculos_aggregate_order_by']: GraphQLTypes['clientes_Veiculos_aggregate_order_by'];
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['clientes_Veiculos_append_input']: GraphQLTypes['clientes_Veiculos_append_input'];
  /** input type for inserting array relation for remote table "clientes.Veiculos" */
  ['clientes_Veiculos_arr_rel_insert_input']: GraphQLTypes['clientes_Veiculos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "clientes.Veiculos". All fields are combined with a logical 'AND'. */
  ['clientes_Veiculos_bool_exp']: GraphQLTypes['clientes_Veiculos_bool_exp'];
  /** unique or primary key constraints on table "clientes.Veiculos" */
  ['clientes_Veiculos_constraint']: GraphQLTypes['clientes_Veiculos_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['clientes_Veiculos_delete_at_path_input']: GraphQLTypes['clientes_Veiculos_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['clientes_Veiculos_delete_elem_input']: GraphQLTypes['clientes_Veiculos_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['clientes_Veiculos_delete_key_input']: GraphQLTypes['clientes_Veiculos_delete_key_input'];
  /** input type for inserting data into table "clientes.Veiculos" */
  ['clientes_Veiculos_insert_input']: GraphQLTypes['clientes_Veiculos_insert_input'];
  /** aggregate max on columns */
  ['clientes_Veiculos_max_fields']: {
    Apelido?: string;
    Categoria_Id?: ModelTypes['uuid'];
    Cliente_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    NumeroDoChassi?: string;
    Placa?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_max_order_by']: GraphQLTypes['clientes_Veiculos_max_order_by'];
  /** aggregate min on columns */
  ['clientes_Veiculos_min_fields']: {
    Apelido?: string;
    Categoria_Id?: ModelTypes['uuid'];
    Cliente_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    NumeroDoChassi?: string;
    Placa?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_min_order_by']: GraphQLTypes['clientes_Veiculos_min_order_by'];
  /** response of any mutation on the table "clientes.Veiculos" */
  ['clientes_Veiculos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['clientes_Veiculos'][];
  };
  /** input type for inserting object relation for remote table "clientes.Veiculos" */
  ['clientes_Veiculos_obj_rel_insert_input']: GraphQLTypes['clientes_Veiculos_obj_rel_insert_input'];
  /** on conflict condition type for table "clientes.Veiculos" */
  ['clientes_Veiculos_on_conflict']: GraphQLTypes['clientes_Veiculos_on_conflict'];
  /** Ordering options when selecting data from "clientes.Veiculos". */
  ['clientes_Veiculos_order_by']: GraphQLTypes['clientes_Veiculos_order_by'];
  /** primary key columns input for table: clientes_Veiculos */
  ['clientes_Veiculos_pk_columns_input']: GraphQLTypes['clientes_Veiculos_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['clientes_Veiculos_prepend_input']: GraphQLTypes['clientes_Veiculos_prepend_input'];
  /** select columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_select_column']: GraphQLTypes['clientes_Veiculos_select_column'];
  /** input type for updating data in table "clientes.Veiculos" */
  ['clientes_Veiculos_set_input']: GraphQLTypes['clientes_Veiculos_set_input'];
  /** update columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_update_column']: GraphQLTypes['clientes_Veiculos_update_column'];
  /** columns and relationships of "comercial.Acoes" */
  ['comercial_Acoes']: {
    Etapas_Id: ModelTypes['jsonb'];
    Id: ModelTypes['uuid'];
    Titulo: string;
    Url: string;
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Acoes" */
  ['comercial_Acoes_aggregate']: {
    aggregate?: ModelTypes['comercial_Acoes_aggregate_fields'];
    nodes: ModelTypes['comercial_Acoes'][];
  };
  /** aggregate fields of "comercial.Acoes" */
  ['comercial_Acoes_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Acoes_max_fields'];
    min?: ModelTypes['comercial_Acoes_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Acoes_append_input']: GraphQLTypes['comercial_Acoes_append_input'];
  /** Boolean expression to filter rows from the table "comercial.Acoes". All fields are combined with a logical 'AND'. */
  ['comercial_Acoes_bool_exp']: GraphQLTypes['comercial_Acoes_bool_exp'];
  /** unique or primary key constraints on table "comercial.Acoes" */
  ['comercial_Acoes_constraint']: GraphQLTypes['comercial_Acoes_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['comercial_Acoes_delete_at_path_input']: GraphQLTypes['comercial_Acoes_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['comercial_Acoes_delete_elem_input']: GraphQLTypes['comercial_Acoes_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['comercial_Acoes_delete_key_input']: GraphQLTypes['comercial_Acoes_delete_key_input'];
  /** input type for inserting data into table "comercial.Acoes" */
  ['comercial_Acoes_insert_input']: GraphQLTypes['comercial_Acoes_insert_input'];
  /** aggregate max on columns */
  ['comercial_Acoes_max_fields']: {
    Id?: ModelTypes['uuid'];
    Titulo?: string;
    Url?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_Acoes_min_fields']: {
    Id?: ModelTypes['uuid'];
    Titulo?: string;
    Url?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.Acoes" */
  ['comercial_Acoes_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Acoes'][];
  };
  /** on conflict condition type for table "comercial.Acoes" */
  ['comercial_Acoes_on_conflict']: GraphQLTypes['comercial_Acoes_on_conflict'];
  /** Ordering options when selecting data from "comercial.Acoes". */
  ['comercial_Acoes_order_by']: GraphQLTypes['comercial_Acoes_order_by'];
  /** primary key columns input for table: comercial_Acoes */
  ['comercial_Acoes_pk_columns_input']: GraphQLTypes['comercial_Acoes_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Acoes_prepend_input']: GraphQLTypes['comercial_Acoes_prepend_input'];
  /** select columns of table "comercial.Acoes" */
  ['comercial_Acoes_select_column']: GraphQLTypes['comercial_Acoes_select_column'];
  /** input type for updating data in table "comercial.Acoes" */
  ['comercial_Acoes_set_input']: GraphQLTypes['comercial_Acoes_set_input'];
  /** update columns of table "comercial.Acoes" */
  ['comercial_Acoes_update_column']: GraphQLTypes['comercial_Acoes_update_column'];
  /** columns and relationships of "comercial.Atributos" */
  ['comercial_Atributos']: {
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Produtos: ModelTypes['comercial_Produtos_Atributos'][];
    /** An aggregate relationship */
    Produtos_aggregate: ModelTypes['comercial_Produtos_Atributos_aggregate'];
    /** An array relationship */
    Servicos: ModelTypes['comercial_Servicos_Atributos'][];
    /** An aggregate relationship */
    Servicos_aggregate: ModelTypes['comercial_Servicos_Atributos_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Atributos" */
  ['comercial_Atributos_aggregate']: {
    aggregate?: ModelTypes['comercial_Atributos_aggregate_fields'];
    nodes: ModelTypes['comercial_Atributos'][];
  };
  /** aggregate fields of "comercial.Atributos" */
  ['comercial_Atributos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Atributos_max_fields'];
    min?: ModelTypes['comercial_Atributos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Atributos". All fields are combined with a logical 'AND'. */
  ['comercial_Atributos_bool_exp']: GraphQLTypes['comercial_Atributos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Atributos" */
  ['comercial_Atributos_constraint']: GraphQLTypes['comercial_Atributos_constraint'];
  /** input type for inserting data into table "comercial.Atributos" */
  ['comercial_Atributos_insert_input']: GraphQLTypes['comercial_Atributos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Atributos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_Atributos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.Atributos" */
  ['comercial_Atributos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Atributos'][];
  };
  /** input type for inserting object relation for remote table "comercial.Atributos" */
  ['comercial_Atributos_obj_rel_insert_input']: GraphQLTypes['comercial_Atributos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Atributos" */
  ['comercial_Atributos_on_conflict']: GraphQLTypes['comercial_Atributos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Atributos". */
  ['comercial_Atributos_order_by']: GraphQLTypes['comercial_Atributos_order_by'];
  /** primary key columns input for table: comercial_Atributos */
  ['comercial_Atributos_pk_columns_input']: GraphQLTypes['comercial_Atributos_pk_columns_input'];
  /** select columns of table "comercial.Atributos" */
  ['comercial_Atributos_select_column']: GraphQLTypes['comercial_Atributos_select_column'];
  /** input type for updating data in table "comercial.Atributos" */
  ['comercial_Atributos_set_input']: GraphQLTypes['comercial_Atributos_set_input'];
  /** update columns of table "comercial.Atributos" */
  ['comercial_Atributos_update_column']: GraphQLTypes['comercial_Atributos_update_column'];
  /** columns and relationships of "comercial.Coberturas" */
  ['comercial_Coberturas']: {
    Id: ModelTypes['uuid'];
    Nome: string;
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Coberturas" */
  ['comercial_Coberturas_aggregate']: {
    aggregate?: ModelTypes['comercial_Coberturas_aggregate_fields'];
    nodes: ModelTypes['comercial_Coberturas'][];
  };
  /** aggregate fields of "comercial.Coberturas" */
  ['comercial_Coberturas_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Coberturas_max_fields'];
    min?: ModelTypes['comercial_Coberturas_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Coberturas". All fields are combined with a logical 'AND'. */
  ['comercial_Coberturas_bool_exp']: GraphQLTypes['comercial_Coberturas_bool_exp'];
  /** unique or primary key constraints on table "comercial.Coberturas" */
  ['comercial_Coberturas_constraint']: GraphQLTypes['comercial_Coberturas_constraint'];
  /** input type for inserting data into table "comercial.Coberturas" */
  ['comercial_Coberturas_insert_input']: GraphQLTypes['comercial_Coberturas_insert_input'];
  /** aggregate max on columns */
  ['comercial_Coberturas_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_Coberturas_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.Coberturas" */
  ['comercial_Coberturas_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Coberturas'][];
  };
  /** on conflict condition type for table "comercial.Coberturas" */
  ['comercial_Coberturas_on_conflict']: GraphQLTypes['comercial_Coberturas_on_conflict'];
  /** Ordering options when selecting data from "comercial.Coberturas". */
  ['comercial_Coberturas_order_by']: GraphQLTypes['comercial_Coberturas_order_by'];
  /** primary key columns input for table: comercial_Coberturas */
  ['comercial_Coberturas_pk_columns_input']: GraphQLTypes['comercial_Coberturas_pk_columns_input'];
  /** select columns of table "comercial.Coberturas" */
  ['comercial_Coberturas_select_column']: GraphQLTypes['comercial_Coberturas_select_column'];
  /** input type for updating data in table "comercial.Coberturas" */
  ['comercial_Coberturas_set_input']: GraphQLTypes['comercial_Coberturas_set_input'];
  /** update columns of table "comercial.Coberturas" */
  ['comercial_Coberturas_update_column']: GraphQLTypes['comercial_Coberturas_update_column'];
  /** columns and relationships of "comercial.Combos" */
  ['comercial_Combos']: {
    /** An array relationship */
    ComboPai: ModelTypes['comercial_Combos_Combos'][];
    /** An aggregate relationship */
    ComboPai_aggregate: ModelTypes['comercial_Combos_Combos_aggregate'];
    /** An array relationship */
    Combos: ModelTypes['comercial_Combos_Combos'][];
    /** An aggregate relationship */
    Combos_aggregate: ModelTypes['comercial_Combos_Combos_aggregate'];
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    OportunidadesDeProdutos: ModelTypes['comercial_Produtos_Oportunidades'][];
    /** An aggregate relationship */
    OportunidadesDeProdutos_aggregate: ModelTypes['comercial_Produtos_Oportunidades_aggregate'];
    /** An array relationship */
    OportunidadesDeServicos: ModelTypes['comercial_Servicos_Oportunidades'][];
    /** An aggregate relationship */
    OportunidadesDeServicos_aggregate: ModelTypes['comercial_Servicos_Oportunidades_aggregate'];
    /** An array relationship */
    Planos: ModelTypes['comercial_Combos_Planos'][];
    /** An aggregate relationship */
    Planos_aggregate: ModelTypes['comercial_Combos_Planos_aggregate'];
    /** An array relationship */
    Precos: ModelTypes['comercial_Combos_Precos'][];
    /** An aggregate relationship */
    Precos_aggregate: ModelTypes['comercial_Combos_Precos_aggregate'];
    /** An array relationship */
    Produtos: ModelTypes['comercial_Combos_Produtos'][];
    /** An aggregate relationship */
    Produtos_aggregate: ModelTypes['comercial_Combos_Produtos_aggregate'];
    /** An array relationship */
    Propostas: ModelTypes['propostas_Propostas_Combos'][];
    /** An aggregate relationship */
    Propostas_aggregate: ModelTypes['propostas_Propostas_Combos_aggregate'];
    /** An array relationship */
    Servicos: ModelTypes['comercial_Combos_Servicos'][];
    /** An aggregate relationship */
    Servicos_aggregate: ModelTypes['comercial_Combos_Servicos_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.Combos_Combos" */
  ['comercial_Combos_Combos']: {
    /** An object relationship */
    Combo: ModelTypes['comercial_Combos'];
    /** An object relationship */
    ComboPertencente: ModelTypes['comercial_Combos'];
    ComboPertencente_Id: ModelTypes['uuid'];
    Combo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    Valor: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_aggregate']: {
    aggregate?: ModelTypes['comercial_Combos_Combos_aggregate_fields'];
    nodes: ModelTypes['comercial_Combos_Combos'][];
  };
  /** aggregate fields of "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_aggregate_fields']: {
    avg?: ModelTypes['comercial_Combos_Combos_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_Combos_Combos_max_fields'];
    min?: ModelTypes['comercial_Combos_Combos_min_fields'];
    stddev?: ModelTypes['comercial_Combos_Combos_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_Combos_Combos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_Combos_Combos_stddev_samp_fields'];
    sum?: ModelTypes['comercial_Combos_Combos_sum_fields'];
    var_pop?: ModelTypes['comercial_Combos_Combos_var_pop_fields'];
    var_samp?: ModelTypes['comercial_Combos_Combos_var_samp_fields'];
    variance?: ModelTypes['comercial_Combos_Combos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_aggregate_order_by']: GraphQLTypes['comercial_Combos_Combos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_arr_rel_insert_input']: GraphQLTypes['comercial_Combos_Combos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_Combos_Combos_avg_fields']: {
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_avg_order_by']: GraphQLTypes['comercial_Combos_Combos_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.Combos_Combos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Combos_bool_exp']: GraphQLTypes['comercial_Combos_Combos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_constraint']: GraphQLTypes['comercial_Combos_Combos_constraint'];
  /** input type for incrementing numeric columns in table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_inc_input']: GraphQLTypes['comercial_Combos_Combos_inc_input'];
  /** input type for inserting data into table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_insert_input']: GraphQLTypes['comercial_Combos_Combos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Combos_Combos_max_fields']: {
    ComboPertencente_Id?: ModelTypes['uuid'];
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_max_order_by']: GraphQLTypes['comercial_Combos_Combos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Combos_Combos_min_fields']: {
    ComboPertencente_Id?: ModelTypes['uuid'];
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_min_order_by']: GraphQLTypes['comercial_Combos_Combos_min_order_by'];
  /** response of any mutation on the table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Combos_Combos'][];
  };
  /** on conflict condition type for table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_on_conflict']: GraphQLTypes['comercial_Combos_Combos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Combos_Combos". */
  ['comercial_Combos_Combos_order_by']: GraphQLTypes['comercial_Combos_Combos_order_by'];
  /** primary key columns input for table: comercial_Combos_Combos */
  ['comercial_Combos_Combos_pk_columns_input']: GraphQLTypes['comercial_Combos_Combos_pk_columns_input'];
  /** select columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_select_column']: GraphQLTypes['comercial_Combos_Combos_select_column'];
  /** input type for updating data in table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_set_input']: GraphQLTypes['comercial_Combos_Combos_set_input'];
  /** aggregate stddev on columns */
  ['comercial_Combos_Combos_stddev_fields']: {
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_stddev_order_by']: GraphQLTypes['comercial_Combos_Combos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Combos_stddev_pop_fields']: {
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_stddev_pop_order_by']: GraphQLTypes['comercial_Combos_Combos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Combos_stddev_samp_fields']: {
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_stddev_samp_order_by']: GraphQLTypes['comercial_Combos_Combos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_Combos_Combos_sum_fields']: {
    Valor?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_sum_order_by']: GraphQLTypes['comercial_Combos_Combos_sum_order_by'];
  /** update columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_update_column']: GraphQLTypes['comercial_Combos_Combos_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_Combos_Combos_var_pop_fields']: {
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_var_pop_order_by']: GraphQLTypes['comercial_Combos_Combos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_Combos_Combos_var_samp_fields']: {
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_var_samp_order_by']: GraphQLTypes['comercial_Combos_Combos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_Combos_Combos_variance_fields']: {
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_variance_order_by']: GraphQLTypes['comercial_Combos_Combos_variance_order_by'];
  /** columns and relationships of "comercial.Combos_Planos" */
  ['comercial_Combos_Planos']: {
    /** An object relationship */
    Combo: ModelTypes['comercial_Combos'];
    Combo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Plano: ModelTypes['comercial_Planos'];
    /** An object relationship */
    PlanoPreco: ModelTypes['comercial_Planos_Precos'];
    PlanoPreco_Id: ModelTypes['uuid'];
    Plano_Id: ModelTypes['uuid'];
    ValorPraticado: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_aggregate']: {
    aggregate?: ModelTypes['comercial_Combos_Planos_aggregate_fields'];
    nodes: ModelTypes['comercial_Combos_Planos'][];
  };
  /** aggregate fields of "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_aggregate_fields']: {
    avg?: ModelTypes['comercial_Combos_Planos_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_Combos_Planos_max_fields'];
    min?: ModelTypes['comercial_Combos_Planos_min_fields'];
    stddev?: ModelTypes['comercial_Combos_Planos_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_Combos_Planos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_Combos_Planos_stddev_samp_fields'];
    sum?: ModelTypes['comercial_Combos_Planos_sum_fields'];
    var_pop?: ModelTypes['comercial_Combos_Planos_var_pop_fields'];
    var_samp?: ModelTypes['comercial_Combos_Planos_var_samp_fields'];
    variance?: ModelTypes['comercial_Combos_Planos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_aggregate_order_by']: GraphQLTypes['comercial_Combos_Planos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_arr_rel_insert_input']: GraphQLTypes['comercial_Combos_Planos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_Combos_Planos_avg_fields']: {
    ValorPraticado?: number;
  };
  /** order by avg() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_avg_order_by']: GraphQLTypes['comercial_Combos_Planos_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.Combos_Planos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Planos_bool_exp']: GraphQLTypes['comercial_Combos_Planos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_constraint']: GraphQLTypes['comercial_Combos_Planos_constraint'];
  /** input type for incrementing numeric columns in table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_inc_input']: GraphQLTypes['comercial_Combos_Planos_inc_input'];
  /** input type for inserting data into table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_insert_input']: GraphQLTypes['comercial_Combos_Planos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Combos_Planos_max_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    PlanoPreco_Id?: ModelTypes['uuid'];
    Plano_Id?: ModelTypes['uuid'];
    ValorPraticado?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_max_order_by']: GraphQLTypes['comercial_Combos_Planos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Combos_Planos_min_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    PlanoPreco_Id?: ModelTypes['uuid'];
    Plano_Id?: ModelTypes['uuid'];
    ValorPraticado?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_min_order_by']: GraphQLTypes['comercial_Combos_Planos_min_order_by'];
  /** response of any mutation on the table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Combos_Planos'][];
  };
  /** on conflict condition type for table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_on_conflict']: GraphQLTypes['comercial_Combos_Planos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Combos_Planos". */
  ['comercial_Combos_Planos_order_by']: GraphQLTypes['comercial_Combos_Planos_order_by'];
  /** primary key columns input for table: comercial_Combos_Planos */
  ['comercial_Combos_Planos_pk_columns_input']: GraphQLTypes['comercial_Combos_Planos_pk_columns_input'];
  /** select columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_select_column']: GraphQLTypes['comercial_Combos_Planos_select_column'];
  /** input type for updating data in table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_set_input']: GraphQLTypes['comercial_Combos_Planos_set_input'];
  /** aggregate stddev on columns */
  ['comercial_Combos_Planos_stddev_fields']: {
    ValorPraticado?: number;
  };
  /** order by stddev() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_stddev_order_by']: GraphQLTypes['comercial_Combos_Planos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Planos_stddev_pop_fields']: {
    ValorPraticado?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_stddev_pop_order_by']: GraphQLTypes['comercial_Combos_Planos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Planos_stddev_samp_fields']: {
    ValorPraticado?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_stddev_samp_order_by']: GraphQLTypes['comercial_Combos_Planos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_Combos_Planos_sum_fields']: {
    ValorPraticado?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_sum_order_by']: GraphQLTypes['comercial_Combos_Planos_sum_order_by'];
  /** update columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_update_column']: GraphQLTypes['comercial_Combos_Planos_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_Combos_Planos_var_pop_fields']: {
    ValorPraticado?: number;
  };
  /** order by var_pop() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_var_pop_order_by']: GraphQLTypes['comercial_Combos_Planos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_Combos_Planos_var_samp_fields']: {
    ValorPraticado?: number;
  };
  /** order by var_samp() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_var_samp_order_by']: GraphQLTypes['comercial_Combos_Planos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_Combos_Planos_variance_fields']: {
    ValorPraticado?: number;
  };
  /** order by variance() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_variance_order_by']: GraphQLTypes['comercial_Combos_Planos_variance_order_by'];
  /** columns and relationships of "comercial.Combos_Precos" */
  ['comercial_Combos_Precos']: {
    /** An object relationship */
    Combo: ModelTypes['comercial_Combos'];
    Combo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An array relationship */
    PropostasCombos: ModelTypes['propostas_Propostas_Combos'][];
    /** An aggregate relationship */
    PropostasCombos_aggregate: ModelTypes['propostas_Propostas_Combos_aggregate'];
    ValorBase: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_aggregate']: {
    aggregate?: ModelTypes['comercial_Combos_Precos_aggregate_fields'];
    nodes: ModelTypes['comercial_Combos_Precos'][];
  };
  /** aggregate fields of "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_aggregate_fields']: {
    avg?: ModelTypes['comercial_Combos_Precos_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_Combos_Precos_max_fields'];
    min?: ModelTypes['comercial_Combos_Precos_min_fields'];
    stddev?: ModelTypes['comercial_Combos_Precos_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_Combos_Precos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_Combos_Precos_stddev_samp_fields'];
    sum?: ModelTypes['comercial_Combos_Precos_sum_fields'];
    var_pop?: ModelTypes['comercial_Combos_Precos_var_pop_fields'];
    var_samp?: ModelTypes['comercial_Combos_Precos_var_samp_fields'];
    variance?: ModelTypes['comercial_Combos_Precos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_aggregate_order_by']: GraphQLTypes['comercial_Combos_Precos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_arr_rel_insert_input']: GraphQLTypes['comercial_Combos_Precos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_Combos_Precos_avg_fields']: {
    ValorBase?: number;
  };
  /** order by avg() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_avg_order_by']: GraphQLTypes['comercial_Combos_Precos_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.Combos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Precos_bool_exp']: GraphQLTypes['comercial_Combos_Precos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_constraint']: GraphQLTypes['comercial_Combos_Precos_constraint'];
  /** input type for incrementing numeric columns in table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_inc_input']: GraphQLTypes['comercial_Combos_Precos_inc_input'];
  /** input type for inserting data into table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_insert_input']: GraphQLTypes['comercial_Combos_Precos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Combos_Precos_max_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    ValorBase?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_max_order_by']: GraphQLTypes['comercial_Combos_Precos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Combos_Precos_min_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    ValorBase?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_min_order_by']: GraphQLTypes['comercial_Combos_Precos_min_order_by'];
  /** response of any mutation on the table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Combos_Precos'][];
  };
  /** input type for inserting object relation for remote table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_obj_rel_insert_input']: GraphQLTypes['comercial_Combos_Precos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_on_conflict']: GraphQLTypes['comercial_Combos_Precos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Combos_Precos". */
  ['comercial_Combos_Precos_order_by']: GraphQLTypes['comercial_Combos_Precos_order_by'];
  /** primary key columns input for table: comercial_Combos_Precos */
  ['comercial_Combos_Precos_pk_columns_input']: GraphQLTypes['comercial_Combos_Precos_pk_columns_input'];
  /** select columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_select_column']: GraphQLTypes['comercial_Combos_Precos_select_column'];
  /** input type for updating data in table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_set_input']: GraphQLTypes['comercial_Combos_Precos_set_input'];
  /** aggregate stddev on columns */
  ['comercial_Combos_Precos_stddev_fields']: {
    ValorBase?: number;
  };
  /** order by stddev() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_stddev_order_by']: GraphQLTypes['comercial_Combos_Precos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Precos_stddev_pop_fields']: {
    ValorBase?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_stddev_pop_order_by']: GraphQLTypes['comercial_Combos_Precos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Precos_stddev_samp_fields']: {
    ValorBase?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_stddev_samp_order_by']: GraphQLTypes['comercial_Combos_Precos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_Combos_Precos_sum_fields']: {
    ValorBase?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_sum_order_by']: GraphQLTypes['comercial_Combos_Precos_sum_order_by'];
  /** update columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_update_column']: GraphQLTypes['comercial_Combos_Precos_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_Combos_Precos_var_pop_fields']: {
    ValorBase?: number;
  };
  /** order by var_pop() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_var_pop_order_by']: GraphQLTypes['comercial_Combos_Precos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_Combos_Precos_var_samp_fields']: {
    ValorBase?: number;
  };
  /** order by var_samp() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_var_samp_order_by']: GraphQLTypes['comercial_Combos_Precos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_Combos_Precos_variance_fields']: {
    ValorBase?: number;
  };
  /** order by variance() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_variance_order_by']: GraphQLTypes['comercial_Combos_Precos_variance_order_by'];
  /** columns and relationships of "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos']: {
    /** An object relationship */
    Combo: ModelTypes['comercial_Combos'];
    Combo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Produto: ModelTypes['comercial_Produtos'];
    /** An object relationship */
    ProdutoPreco: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    ProdutoPreco_Id: ModelTypes['uuid'];
    Produto_Id: ModelTypes['uuid'];
    ValorPraticado: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_aggregate']: {
    aggregate?: ModelTypes['comercial_Combos_Produtos_aggregate_fields'];
    nodes: ModelTypes['comercial_Combos_Produtos'][];
  };
  /** aggregate fields of "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_aggregate_fields']: {
    avg?: ModelTypes['comercial_Combos_Produtos_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_Combos_Produtos_max_fields'];
    min?: ModelTypes['comercial_Combos_Produtos_min_fields'];
    stddev?: ModelTypes['comercial_Combos_Produtos_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_Combos_Produtos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_Combos_Produtos_stddev_samp_fields'];
    sum?: ModelTypes['comercial_Combos_Produtos_sum_fields'];
    var_pop?: ModelTypes['comercial_Combos_Produtos_var_pop_fields'];
    var_samp?: ModelTypes['comercial_Combos_Produtos_var_samp_fields'];
    variance?: ModelTypes['comercial_Combos_Produtos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_aggregate_order_by']: GraphQLTypes['comercial_Combos_Produtos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_arr_rel_insert_input']: GraphQLTypes['comercial_Combos_Produtos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_Combos_Produtos_avg_fields']: {
    ValorPraticado?: number;
  };
  /** order by avg() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_avg_order_by']: GraphQLTypes['comercial_Combos_Produtos_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.Combos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Produtos_bool_exp']: GraphQLTypes['comercial_Combos_Produtos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_constraint']: GraphQLTypes['comercial_Combos_Produtos_constraint'];
  /** input type for incrementing numeric columns in table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_inc_input']: GraphQLTypes['comercial_Combos_Produtos_inc_input'];
  /** input type for inserting data into table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_insert_input']: GraphQLTypes['comercial_Combos_Produtos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Combos_Produtos_max_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    ProdutoPreco_Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    ValorPraticado?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_max_order_by']: GraphQLTypes['comercial_Combos_Produtos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Combos_Produtos_min_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    ProdutoPreco_Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    ValorPraticado?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_min_order_by']: GraphQLTypes['comercial_Combos_Produtos_min_order_by'];
  /** response of any mutation on the table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Combos_Produtos'][];
  };
  /** on conflict condition type for table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_on_conflict']: GraphQLTypes['comercial_Combos_Produtos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Combos_Produtos". */
  ['comercial_Combos_Produtos_order_by']: GraphQLTypes['comercial_Combos_Produtos_order_by'];
  /** primary key columns input for table: comercial_Combos_Produtos */
  ['comercial_Combos_Produtos_pk_columns_input']: GraphQLTypes['comercial_Combos_Produtos_pk_columns_input'];
  /** select columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_select_column']: GraphQLTypes['comercial_Combos_Produtos_select_column'];
  /** input type for updating data in table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_set_input']: GraphQLTypes['comercial_Combos_Produtos_set_input'];
  /** aggregate stddev on columns */
  ['comercial_Combos_Produtos_stddev_fields']: {
    ValorPraticado?: number;
  };
  /** order by stddev() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_stddev_order_by']: GraphQLTypes['comercial_Combos_Produtos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Produtos_stddev_pop_fields']: {
    ValorPraticado?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_stddev_pop_order_by']: GraphQLTypes['comercial_Combos_Produtos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Produtos_stddev_samp_fields']: {
    ValorPraticado?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_stddev_samp_order_by']: GraphQLTypes['comercial_Combos_Produtos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_Combos_Produtos_sum_fields']: {
    ValorPraticado?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_sum_order_by']: GraphQLTypes['comercial_Combos_Produtos_sum_order_by'];
  /** update columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_update_column']: GraphQLTypes['comercial_Combos_Produtos_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_Combos_Produtos_var_pop_fields']: {
    ValorPraticado?: number;
  };
  /** order by var_pop() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_var_pop_order_by']: GraphQLTypes['comercial_Combos_Produtos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_Combos_Produtos_var_samp_fields']: {
    ValorPraticado?: number;
  };
  /** order by var_samp() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_var_samp_order_by']: GraphQLTypes['comercial_Combos_Produtos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_Combos_Produtos_variance_fields']: {
    ValorPraticado?: number;
  };
  /** order by variance() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_variance_order_by']: GraphQLTypes['comercial_Combos_Produtos_variance_order_by'];
  /** columns and relationships of "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos']: {
    /** An object relationship */
    Combo: ModelTypes['comercial_Combos'];
    Combo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Servico: ModelTypes['comercial_Servicos'];
    ServicoPreco_Id: ModelTypes['uuid'];
    Servico_Id: ModelTypes['uuid'];
    /** An object relationship */
    ServicosPreco: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    ValorPraticado: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_aggregate']: {
    aggregate?: ModelTypes['comercial_Combos_Servicos_aggregate_fields'];
    nodes: ModelTypes['comercial_Combos_Servicos'][];
  };
  /** aggregate fields of "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_aggregate_fields']: {
    avg?: ModelTypes['comercial_Combos_Servicos_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_Combos_Servicos_max_fields'];
    min?: ModelTypes['comercial_Combos_Servicos_min_fields'];
    stddev?: ModelTypes['comercial_Combos_Servicos_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_Combos_Servicos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_Combos_Servicos_stddev_samp_fields'];
    sum?: ModelTypes['comercial_Combos_Servicos_sum_fields'];
    var_pop?: ModelTypes['comercial_Combos_Servicos_var_pop_fields'];
    var_samp?: ModelTypes['comercial_Combos_Servicos_var_samp_fields'];
    variance?: ModelTypes['comercial_Combos_Servicos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_aggregate_order_by']: GraphQLTypes['comercial_Combos_Servicos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_arr_rel_insert_input']: GraphQLTypes['comercial_Combos_Servicos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_Combos_Servicos_avg_fields']: {
    ValorPraticado?: number;
  };
  /** order by avg() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_avg_order_by']: GraphQLTypes['comercial_Combos_Servicos_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.Combos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Servicos_bool_exp']: GraphQLTypes['comercial_Combos_Servicos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_constraint']: GraphQLTypes['comercial_Combos_Servicos_constraint'];
  /** input type for incrementing numeric columns in table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_inc_input']: GraphQLTypes['comercial_Combos_Servicos_inc_input'];
  /** input type for inserting data into table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_insert_input']: GraphQLTypes['comercial_Combos_Servicos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Combos_Servicos_max_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    ServicoPreco_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    ValorPraticado?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_max_order_by']: GraphQLTypes['comercial_Combos_Servicos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Combos_Servicos_min_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    ServicoPreco_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    ValorPraticado?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_min_order_by']: GraphQLTypes['comercial_Combos_Servicos_min_order_by'];
  /** response of any mutation on the table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Combos_Servicos'][];
  };
  /** on conflict condition type for table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_on_conflict']: GraphQLTypes['comercial_Combos_Servicos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Combos_Servicos". */
  ['comercial_Combos_Servicos_order_by']: GraphQLTypes['comercial_Combos_Servicos_order_by'];
  /** primary key columns input for table: comercial_Combos_Servicos */
  ['comercial_Combos_Servicos_pk_columns_input']: GraphQLTypes['comercial_Combos_Servicos_pk_columns_input'];
  /** select columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_select_column']: GraphQLTypes['comercial_Combos_Servicos_select_column'];
  /** input type for updating data in table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_set_input']: GraphQLTypes['comercial_Combos_Servicos_set_input'];
  /** aggregate stddev on columns */
  ['comercial_Combos_Servicos_stddev_fields']: {
    ValorPraticado?: number;
  };
  /** order by stddev() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_stddev_order_by']: GraphQLTypes['comercial_Combos_Servicos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Servicos_stddev_pop_fields']: {
    ValorPraticado?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_stddev_pop_order_by']: GraphQLTypes['comercial_Combos_Servicos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Servicos_stddev_samp_fields']: {
    ValorPraticado?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_stddev_samp_order_by']: GraphQLTypes['comercial_Combos_Servicos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_Combos_Servicos_sum_fields']: {
    ValorPraticado?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_sum_order_by']: GraphQLTypes['comercial_Combos_Servicos_sum_order_by'];
  /** update columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_update_column']: GraphQLTypes['comercial_Combos_Servicos_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_Combos_Servicos_var_pop_fields']: {
    ValorPraticado?: number;
  };
  /** order by var_pop() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_var_pop_order_by']: GraphQLTypes['comercial_Combos_Servicos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_Combos_Servicos_var_samp_fields']: {
    ValorPraticado?: number;
  };
  /** order by var_samp() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_var_samp_order_by']: GraphQLTypes['comercial_Combos_Servicos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_Combos_Servicos_variance_fields']: {
    ValorPraticado?: number;
  };
  /** order by variance() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_variance_order_by']: GraphQLTypes['comercial_Combos_Servicos_variance_order_by'];
  /** aggregated selection of "comercial.Combos" */
  ['comercial_Combos_aggregate']: {
    aggregate?: ModelTypes['comercial_Combos_aggregate_fields'];
    nodes: ModelTypes['comercial_Combos'][];
  };
  /** aggregate fields of "comercial.Combos" */
  ['comercial_Combos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Combos_max_fields'];
    min?: ModelTypes['comercial_Combos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Combos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_bool_exp']: GraphQLTypes['comercial_Combos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Combos" */
  ['comercial_Combos_constraint']: GraphQLTypes['comercial_Combos_constraint'];
  /** input type for inserting data into table "comercial.Combos" */
  ['comercial_Combos_insert_input']: GraphQLTypes['comercial_Combos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Combos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_Combos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.Combos" */
  ['comercial_Combos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Combos'][];
  };
  /** input type for inserting object relation for remote table "comercial.Combos" */
  ['comercial_Combos_obj_rel_insert_input']: GraphQLTypes['comercial_Combos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Combos" */
  ['comercial_Combos_on_conflict']: GraphQLTypes['comercial_Combos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Combos". */
  ['comercial_Combos_order_by']: GraphQLTypes['comercial_Combos_order_by'];
  /** primary key columns input for table: comercial_Combos */
  ['comercial_Combos_pk_columns_input']: GraphQLTypes['comercial_Combos_pk_columns_input'];
  /** select columns of table "comercial.Combos" */
  ['comercial_Combos_select_column']: GraphQLTypes['comercial_Combos_select_column'];
  /** input type for updating data in table "comercial.Combos" */
  ['comercial_Combos_set_input']: GraphQLTypes['comercial_Combos_set_input'];
  /** update columns of table "comercial.Combos" */
  ['comercial_Combos_update_column']: GraphQLTypes['comercial_Combos_update_column'];
  /** columns and relationships of "comercial.Condicionais" */
  ['comercial_Condicionais']: {
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Planos: ModelTypes['comercial_Planos_Condicionais'][];
    /** An aggregate relationship */
    Planos_aggregate: ModelTypes['comercial_Planos_Condicionais_aggregate'];
    /** An object relationship */
    Situacao: ModelTypes['comercial_CondicionaisSituacoes'];
    Situacao_Id: ModelTypes['comercial_CondicionaisSituacoes_enum'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes']: {
    Comentario: string;
    /** An array relationship */
    Condicionais: ModelTypes['comercial_Condicionais'][];
    /** An aggregate relationship */
    Condicionais_aggregate: ModelTypes['comercial_Condicionais_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_aggregate']: {
    aggregate?: ModelTypes['comercial_CondicionaisSituacoes_aggregate_fields'];
    nodes: ModelTypes['comercial_CondicionaisSituacoes'][];
  };
  /** aggregate fields of "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_CondicionaisSituacoes_max_fields'];
    min?: ModelTypes['comercial_CondicionaisSituacoes_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.CondicionaisSituacoes". All fields are combined with a logical 'AND'. */
  ['comercial_CondicionaisSituacoes_bool_exp']: GraphQLTypes['comercial_CondicionaisSituacoes_bool_exp'];
  /** unique or primary key constraints on table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_constraint']: GraphQLTypes['comercial_CondicionaisSituacoes_constraint'];
  ['comercial_CondicionaisSituacoes_enum']: GraphQLTypes['comercial_CondicionaisSituacoes_enum'];
  /** Boolean expression to compare columns of type "comercial_CondicionaisSituacoes_enum". All fields are combined with logical 'AND'. */
  ['comercial_CondicionaisSituacoes_enum_comparison_exp']: GraphQLTypes['comercial_CondicionaisSituacoes_enum_comparison_exp'];
  /** input type for inserting data into table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_insert_input']: GraphQLTypes['comercial_CondicionaisSituacoes_insert_input'];
  /** aggregate max on columns */
  ['comercial_CondicionaisSituacoes_max_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['comercial_CondicionaisSituacoes_min_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_CondicionaisSituacoes'][];
  };
  /** input type for inserting object relation for remote table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_obj_rel_insert_input']: GraphQLTypes['comercial_CondicionaisSituacoes_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_on_conflict']: GraphQLTypes['comercial_CondicionaisSituacoes_on_conflict'];
  /** Ordering options when selecting data from "comercial.CondicionaisSituacoes". */
  ['comercial_CondicionaisSituacoes_order_by']: GraphQLTypes['comercial_CondicionaisSituacoes_order_by'];
  /** primary key columns input for table: comercial_CondicionaisSituacoes */
  ['comercial_CondicionaisSituacoes_pk_columns_input']: GraphQLTypes['comercial_CondicionaisSituacoes_pk_columns_input'];
  /** select columns of table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_select_column']: GraphQLTypes['comercial_CondicionaisSituacoes_select_column'];
  /** input type for updating data in table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_set_input']: GraphQLTypes['comercial_CondicionaisSituacoes_set_input'];
  /** update columns of table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_update_column']: GraphQLTypes['comercial_CondicionaisSituacoes_update_column'];
  /** aggregated selection of "comercial.Condicionais" */
  ['comercial_Condicionais_aggregate']: {
    aggregate?: ModelTypes['comercial_Condicionais_aggregate_fields'];
    nodes: ModelTypes['comercial_Condicionais'][];
  };
  /** aggregate fields of "comercial.Condicionais" */
  ['comercial_Condicionais_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Condicionais_max_fields'];
    min?: ModelTypes['comercial_Condicionais_min_fields'];
  };
  /** order by aggregate values of table "comercial.Condicionais" */
  ['comercial_Condicionais_aggregate_order_by']: GraphQLTypes['comercial_Condicionais_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Condicionais" */
  ['comercial_Condicionais_arr_rel_insert_input']: GraphQLTypes['comercial_Condicionais_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.Condicionais". All fields are combined with a logical 'AND'. */
  ['comercial_Condicionais_bool_exp']: GraphQLTypes['comercial_Condicionais_bool_exp'];
  /** unique or primary key constraints on table "comercial.Condicionais" */
  ['comercial_Condicionais_constraint']: GraphQLTypes['comercial_Condicionais_constraint'];
  /** input type for inserting data into table "comercial.Condicionais" */
  ['comercial_Condicionais_insert_input']: GraphQLTypes['comercial_Condicionais_insert_input'];
  /** aggregate max on columns */
  ['comercial_Condicionais_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_max_order_by']: GraphQLTypes['comercial_Condicionais_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Condicionais_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_min_order_by']: GraphQLTypes['comercial_Condicionais_min_order_by'];
  /** response of any mutation on the table "comercial.Condicionais" */
  ['comercial_Condicionais_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Condicionais'][];
  };
  /** input type for inserting object relation for remote table "comercial.Condicionais" */
  ['comercial_Condicionais_obj_rel_insert_input']: GraphQLTypes['comercial_Condicionais_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Condicionais" */
  ['comercial_Condicionais_on_conflict']: GraphQLTypes['comercial_Condicionais_on_conflict'];
  /** Ordering options when selecting data from "comercial.Condicionais". */
  ['comercial_Condicionais_order_by']: GraphQLTypes['comercial_Condicionais_order_by'];
  /** primary key columns input for table: comercial_Condicionais */
  ['comercial_Condicionais_pk_columns_input']: GraphQLTypes['comercial_Condicionais_pk_columns_input'];
  /** select columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_select_column']: GraphQLTypes['comercial_Condicionais_select_column'];
  /** input type for updating data in table "comercial.Condicionais" */
  ['comercial_Condicionais_set_input']: GraphQLTypes['comercial_Condicionais_set_input'];
  /** update columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_update_column']: GraphQLTypes['comercial_Condicionais_update_column'];
  /** columns and relationships of "comercial.ContratosBase" */
  ['comercial_ContratosBase']: {
    CodigoReferencia: number;
    Id: ModelTypes['uuid'];
    Nome: string;
    Parceiro_Id: ModelTypes['uuid'];
    /** An object relationship */
    PrestadorDeServico: ModelTypes['comercial_PrestadoresDeServicos'];
    /** An array relationship */
    Versoes: ModelTypes['comercial_ContratosBase_Versoes'][];
    /** An aggregate relationship */
    Versoes_aggregate: ModelTypes['comercial_ContratosBase_Versoes_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes']: {
    /** An object relationship */
    ContratoBase: ModelTypes['comercial_ContratosBase'];
    ContratoBase_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    Versao: string;
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_aggregate']: {
    aggregate?: ModelTypes['comercial_ContratosBase_Versoes_aggregate_fields'];
    nodes: ModelTypes['comercial_ContratosBase_Versoes'][];
  };
  /** aggregate fields of "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_ContratosBase_Versoes_max_fields'];
    min?: ModelTypes['comercial_ContratosBase_Versoes_min_fields'];
  };
  /** order by aggregate values of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_aggregate_order_by']: GraphQLTypes['comercial_ContratosBase_Versoes_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_arr_rel_insert_input']: GraphQLTypes['comercial_ContratosBase_Versoes_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.ContratosBase_Versoes". All fields are combined with a logical 'AND'. */
  ['comercial_ContratosBase_Versoes_bool_exp']: GraphQLTypes['comercial_ContratosBase_Versoes_bool_exp'];
  /** unique or primary key constraints on table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_constraint']: GraphQLTypes['comercial_ContratosBase_Versoes_constraint'];
  /** input type for inserting data into table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_insert_input']: GraphQLTypes['comercial_ContratosBase_Versoes_insert_input'];
  /** aggregate max on columns */
  ['comercial_ContratosBase_Versoes_max_fields']: {
    ContratoBase_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Versao?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_max_order_by']: GraphQLTypes['comercial_ContratosBase_Versoes_max_order_by'];
  /** aggregate min on columns */
  ['comercial_ContratosBase_Versoes_min_fields']: {
    ContratoBase_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Versao?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_min_order_by']: GraphQLTypes['comercial_ContratosBase_Versoes_min_order_by'];
  /** response of any mutation on the table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_ContratosBase_Versoes'][];
  };
  /** on conflict condition type for table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_on_conflict']: GraphQLTypes['comercial_ContratosBase_Versoes_on_conflict'];
  /** Ordering options when selecting data from "comercial.ContratosBase_Versoes". */
  ['comercial_ContratosBase_Versoes_order_by']: GraphQLTypes['comercial_ContratosBase_Versoes_order_by'];
  /** primary key columns input for table: comercial_ContratosBase_Versoes */
  ['comercial_ContratosBase_Versoes_pk_columns_input']: GraphQLTypes['comercial_ContratosBase_Versoes_pk_columns_input'];
  /** select columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_select_column']: GraphQLTypes['comercial_ContratosBase_Versoes_select_column'];
  /** input type for updating data in table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_set_input']: GraphQLTypes['comercial_ContratosBase_Versoes_set_input'];
  /** update columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_update_column']: GraphQLTypes['comercial_ContratosBase_Versoes_update_column'];
  /** aggregated selection of "comercial.ContratosBase" */
  ['comercial_ContratosBase_aggregate']: {
    aggregate?: ModelTypes['comercial_ContratosBase_aggregate_fields'];
    nodes: ModelTypes['comercial_ContratosBase'][];
  };
  /** aggregate fields of "comercial.ContratosBase" */
  ['comercial_ContratosBase_aggregate_fields']: {
    avg?: ModelTypes['comercial_ContratosBase_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_ContratosBase_max_fields'];
    min?: ModelTypes['comercial_ContratosBase_min_fields'];
    stddev?: ModelTypes['comercial_ContratosBase_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_ContratosBase_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_ContratosBase_stddev_samp_fields'];
    sum?: ModelTypes['comercial_ContratosBase_sum_fields'];
    var_pop?: ModelTypes['comercial_ContratosBase_var_pop_fields'];
    var_samp?: ModelTypes['comercial_ContratosBase_var_samp_fields'];
    variance?: ModelTypes['comercial_ContratosBase_variance_fields'];
  };
  /** order by aggregate values of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_aggregate_order_by']: GraphQLTypes['comercial_ContratosBase_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.ContratosBase" */
  ['comercial_ContratosBase_arr_rel_insert_input']: GraphQLTypes['comercial_ContratosBase_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_ContratosBase_avg_fields']: {
    CodigoReferencia?: number;
  };
  /** order by avg() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_avg_order_by']: GraphQLTypes['comercial_ContratosBase_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.ContratosBase". All fields are combined with a logical 'AND'. */
  ['comercial_ContratosBase_bool_exp']: GraphQLTypes['comercial_ContratosBase_bool_exp'];
  /** unique or primary key constraints on table "comercial.ContratosBase" */
  ['comercial_ContratosBase_constraint']: GraphQLTypes['comercial_ContratosBase_constraint'];
  /** input type for incrementing numeric columns in table "comercial.ContratosBase" */
  ['comercial_ContratosBase_inc_input']: GraphQLTypes['comercial_ContratosBase_inc_input'];
  /** input type for inserting data into table "comercial.ContratosBase" */
  ['comercial_ContratosBase_insert_input']: GraphQLTypes['comercial_ContratosBase_insert_input'];
  /** aggregate max on columns */
  ['comercial_ContratosBase_max_fields']: {
    CodigoReferencia?: number;
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Parceiro_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_max_order_by']: GraphQLTypes['comercial_ContratosBase_max_order_by'];
  /** aggregate min on columns */
  ['comercial_ContratosBase_min_fields']: {
    CodigoReferencia?: number;
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Parceiro_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_min_order_by']: GraphQLTypes['comercial_ContratosBase_min_order_by'];
  /** response of any mutation on the table "comercial.ContratosBase" */
  ['comercial_ContratosBase_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_ContratosBase'][];
  };
  /** input type for inserting object relation for remote table "comercial.ContratosBase" */
  ['comercial_ContratosBase_obj_rel_insert_input']: GraphQLTypes['comercial_ContratosBase_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.ContratosBase" */
  ['comercial_ContratosBase_on_conflict']: GraphQLTypes['comercial_ContratosBase_on_conflict'];
  /** Ordering options when selecting data from "comercial.ContratosBase". */
  ['comercial_ContratosBase_order_by']: GraphQLTypes['comercial_ContratosBase_order_by'];
  /** primary key columns input for table: comercial_ContratosBase */
  ['comercial_ContratosBase_pk_columns_input']: GraphQLTypes['comercial_ContratosBase_pk_columns_input'];
  /** select columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_select_column']: GraphQLTypes['comercial_ContratosBase_select_column'];
  /** input type for updating data in table "comercial.ContratosBase" */
  ['comercial_ContratosBase_set_input']: GraphQLTypes['comercial_ContratosBase_set_input'];
  /** aggregate stddev on columns */
  ['comercial_ContratosBase_stddev_fields']: {
    CodigoReferencia?: number;
  };
  /** order by stddev() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_stddev_order_by']: GraphQLTypes['comercial_ContratosBase_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_ContratosBase_stddev_pop_fields']: {
    CodigoReferencia?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_stddev_pop_order_by']: GraphQLTypes['comercial_ContratosBase_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_ContratosBase_stddev_samp_fields']: {
    CodigoReferencia?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_stddev_samp_order_by']: GraphQLTypes['comercial_ContratosBase_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_ContratosBase_sum_fields']: {
    CodigoReferencia?: number;
  };
  /** order by sum() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_sum_order_by']: GraphQLTypes['comercial_ContratosBase_sum_order_by'];
  /** update columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_update_column']: GraphQLTypes['comercial_ContratosBase_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_ContratosBase_var_pop_fields']: {
    CodigoReferencia?: number;
  };
  /** order by var_pop() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_var_pop_order_by']: GraphQLTypes['comercial_ContratosBase_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_ContratosBase_var_samp_fields']: {
    CodigoReferencia?: number;
  };
  /** order by var_samp() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_var_samp_order_by']: GraphQLTypes['comercial_ContratosBase_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_ContratosBase_variance_fields']: {
    CodigoReferencia?: number;
  };
  /** order by variance() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_variance_order_by']: GraphQLTypes['comercial_ContratosBase_variance_order_by'];
  /** columns and relationships of "comercial.Planos" */
  ['comercial_Planos']: {
    /** An array relationship */
    Combos: ModelTypes['comercial_Combos_Planos'][];
    /** An aggregate relationship */
    Combos_aggregate: ModelTypes['comercial_Combos_Planos_aggregate'];
    /** An array relationship */
    Condicionais: ModelTypes['comercial_Planos_Condicionais'][];
    /** An aggregate relationship */
    Condicionais_aggregate: ModelTypes['comercial_Planos_Condicionais_aggregate'];
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Precos: ModelTypes['comercial_Planos_Precos'][];
    /** An aggregate relationship */
    Precos_aggregate: ModelTypes['comercial_Planos_Precos_aggregate'];
    /** An array relationship */
    Propostas: ModelTypes['propostas_Propostas_Planos'][];
    /** An aggregate relationship */
    Propostas_aggregate: ModelTypes['propostas_Propostas_Planos_aggregate'];
    /** An object relationship */
    Servico: ModelTypes['comercial_Servicos'];
    Servico_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais']: {
    /** An object relationship */
    Condicional: ModelTypes['comercial_Condicionais'];
    Condicional_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Plano: ModelTypes['comercial_Planos'];
    Plano_Id: ModelTypes['uuid'];
    Valor: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_aggregate']: {
    aggregate?: ModelTypes['comercial_Planos_Condicionais_aggregate_fields'];
    nodes: ModelTypes['comercial_Planos_Condicionais'][];
  };
  /** aggregate fields of "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_aggregate_fields']: {
    avg?: ModelTypes['comercial_Planos_Condicionais_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_Planos_Condicionais_max_fields'];
    min?: ModelTypes['comercial_Planos_Condicionais_min_fields'];
    stddev?: ModelTypes['comercial_Planos_Condicionais_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_Planos_Condicionais_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_Planos_Condicionais_stddev_samp_fields'];
    sum?: ModelTypes['comercial_Planos_Condicionais_sum_fields'];
    var_pop?: ModelTypes['comercial_Planos_Condicionais_var_pop_fields'];
    var_samp?: ModelTypes['comercial_Planos_Condicionais_var_samp_fields'];
    variance?: ModelTypes['comercial_Planos_Condicionais_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_aggregate_order_by']: GraphQLTypes['comercial_Planos_Condicionais_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_arr_rel_insert_input']: GraphQLTypes['comercial_Planos_Condicionais_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_Planos_Condicionais_avg_fields']: {
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_avg_order_by']: GraphQLTypes['comercial_Planos_Condicionais_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.Planos_Condicionais". All fields are combined with a logical 'AND'. */
  ['comercial_Planos_Condicionais_bool_exp']: GraphQLTypes['comercial_Planos_Condicionais_bool_exp'];
  /** unique or primary key constraints on table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_constraint']: GraphQLTypes['comercial_Planos_Condicionais_constraint'];
  /** input type for incrementing numeric columns in table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_inc_input']: GraphQLTypes['comercial_Planos_Condicionais_inc_input'];
  /** input type for inserting data into table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_insert_input']: GraphQLTypes['comercial_Planos_Condicionais_insert_input'];
  /** aggregate max on columns */
  ['comercial_Planos_Condicionais_max_fields']: {
    Condicional_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Plano_Id?: ModelTypes['uuid'];
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_max_order_by']: GraphQLTypes['comercial_Planos_Condicionais_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Planos_Condicionais_min_fields']: {
    Condicional_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Plano_Id?: ModelTypes['uuid'];
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_min_order_by']: GraphQLTypes['comercial_Planos_Condicionais_min_order_by'];
  /** response of any mutation on the table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Planos_Condicionais'][];
  };
  /** on conflict condition type for table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_on_conflict']: GraphQLTypes['comercial_Planos_Condicionais_on_conflict'];
  /** Ordering options when selecting data from "comercial.Planos_Condicionais". */
  ['comercial_Planos_Condicionais_order_by']: GraphQLTypes['comercial_Planos_Condicionais_order_by'];
  /** primary key columns input for table: comercial_Planos_Condicionais */
  ['comercial_Planos_Condicionais_pk_columns_input']: GraphQLTypes['comercial_Planos_Condicionais_pk_columns_input'];
  /** select columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_select_column']: GraphQLTypes['comercial_Planos_Condicionais_select_column'];
  /** input type for updating data in table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_set_input']: GraphQLTypes['comercial_Planos_Condicionais_set_input'];
  /** aggregate stddev on columns */
  ['comercial_Planos_Condicionais_stddev_fields']: {
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_stddev_order_by']: GraphQLTypes['comercial_Planos_Condicionais_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_Planos_Condicionais_stddev_pop_fields']: {
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_stddev_pop_order_by']: GraphQLTypes['comercial_Planos_Condicionais_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_Planos_Condicionais_stddev_samp_fields']: {
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_stddev_samp_order_by']: GraphQLTypes['comercial_Planos_Condicionais_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_Planos_Condicionais_sum_fields']: {
    Valor?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_sum_order_by']: GraphQLTypes['comercial_Planos_Condicionais_sum_order_by'];
  /** update columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_update_column']: GraphQLTypes['comercial_Planos_Condicionais_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_Planos_Condicionais_var_pop_fields']: {
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_var_pop_order_by']: GraphQLTypes['comercial_Planos_Condicionais_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_Planos_Condicionais_var_samp_fields']: {
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_var_samp_order_by']: GraphQLTypes['comercial_Planos_Condicionais_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_Planos_Condicionais_variance_fields']: {
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_variance_order_by']: GraphQLTypes['comercial_Planos_Condicionais_variance_order_by'];
  /** columns and relationships of "comercial.Planos_Precos" */
  ['comercial_Planos_Precos']: {
    /** An array relationship */
    CombosPlanos: ModelTypes['comercial_Combos_Planos'][];
    /** An aggregate relationship */
    CombosPlanos_aggregate: ModelTypes['comercial_Combos_Planos_aggregate'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Plano: ModelTypes['comercial_Planos'];
    Plano_Id: ModelTypes['uuid'];
    /** An array relationship */
    PropostasPlanos: ModelTypes['propostas_Propostas_Planos'][];
    /** An aggregate relationship */
    PropostasPlanos_aggregate: ModelTypes['propostas_Propostas_Planos_aggregate'];
    /** An object relationship */
    ServicoPreco: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    ServicoPreco_Id: ModelTypes['uuid'];
    ValorBase: ModelTypes['float8'];
    ValorPraticado?: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_aggregate']: {
    aggregate?: ModelTypes['comercial_Planos_Precos_aggregate_fields'];
    nodes: ModelTypes['comercial_Planos_Precos'][];
  };
  /** aggregate fields of "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_aggregate_fields']: {
    avg?: ModelTypes['comercial_Planos_Precos_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_Planos_Precos_max_fields'];
    min?: ModelTypes['comercial_Planos_Precos_min_fields'];
    stddev?: ModelTypes['comercial_Planos_Precos_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_Planos_Precos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_Planos_Precos_stddev_samp_fields'];
    sum?: ModelTypes['comercial_Planos_Precos_sum_fields'];
    var_pop?: ModelTypes['comercial_Planos_Precos_var_pop_fields'];
    var_samp?: ModelTypes['comercial_Planos_Precos_var_samp_fields'];
    variance?: ModelTypes['comercial_Planos_Precos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_aggregate_order_by']: GraphQLTypes['comercial_Planos_Precos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_arr_rel_insert_input']: GraphQLTypes['comercial_Planos_Precos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_Planos_Precos_avg_fields']: {
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by avg() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_avg_order_by']: GraphQLTypes['comercial_Planos_Precos_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.Planos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_Planos_Precos_bool_exp']: GraphQLTypes['comercial_Planos_Precos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_constraint']: GraphQLTypes['comercial_Planos_Precos_constraint'];
  /** input type for incrementing numeric columns in table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_inc_input']: GraphQLTypes['comercial_Planos_Precos_inc_input'];
  /** input type for inserting data into table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_insert_input']: GraphQLTypes['comercial_Planos_Precos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Planos_Precos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Plano_Id?: ModelTypes['uuid'];
    ServicoPreco_Id?: ModelTypes['uuid'];
    ValorBase?: ModelTypes['float8'];
    ValorPraticado?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_max_order_by']: GraphQLTypes['comercial_Planos_Precos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Planos_Precos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Plano_Id?: ModelTypes['uuid'];
    ServicoPreco_Id?: ModelTypes['uuid'];
    ValorBase?: ModelTypes['float8'];
    ValorPraticado?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_min_order_by']: GraphQLTypes['comercial_Planos_Precos_min_order_by'];
  /** response of any mutation on the table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Planos_Precos'][];
  };
  /** input type for inserting object relation for remote table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_obj_rel_insert_input']: GraphQLTypes['comercial_Planos_Precos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_on_conflict']: GraphQLTypes['comercial_Planos_Precos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Planos_Precos". */
  ['comercial_Planos_Precos_order_by']: GraphQLTypes['comercial_Planos_Precos_order_by'];
  /** primary key columns input for table: comercial_Planos_Precos */
  ['comercial_Planos_Precos_pk_columns_input']: GraphQLTypes['comercial_Planos_Precos_pk_columns_input'];
  /** select columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_select_column']: GraphQLTypes['comercial_Planos_Precos_select_column'];
  /** input type for updating data in table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_set_input']: GraphQLTypes['comercial_Planos_Precos_set_input'];
  /** aggregate stddev on columns */
  ['comercial_Planos_Precos_stddev_fields']: {
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by stddev() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_stddev_order_by']: GraphQLTypes['comercial_Planos_Precos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_Planos_Precos_stddev_pop_fields']: {
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_stddev_pop_order_by']: GraphQLTypes['comercial_Planos_Precos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_Planos_Precos_stddev_samp_fields']: {
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_stddev_samp_order_by']: GraphQLTypes['comercial_Planos_Precos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_Planos_Precos_sum_fields']: {
    ValorBase?: ModelTypes['float8'];
    ValorPraticado?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_sum_order_by']: GraphQLTypes['comercial_Planos_Precos_sum_order_by'];
  /** update columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_update_column']: GraphQLTypes['comercial_Planos_Precos_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_Planos_Precos_var_pop_fields']: {
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by var_pop() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_var_pop_order_by']: GraphQLTypes['comercial_Planos_Precos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_Planos_Precos_var_samp_fields']: {
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by var_samp() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_var_samp_order_by']: GraphQLTypes['comercial_Planos_Precos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_Planos_Precos_variance_fields']: {
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by variance() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_variance_order_by']: GraphQLTypes['comercial_Planos_Precos_variance_order_by'];
  /** aggregated selection of "comercial.Planos" */
  ['comercial_Planos_aggregate']: {
    aggregate?: ModelTypes['comercial_Planos_aggregate_fields'];
    nodes: ModelTypes['comercial_Planos'][];
  };
  /** aggregate fields of "comercial.Planos" */
  ['comercial_Planos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Planos_max_fields'];
    min?: ModelTypes['comercial_Planos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Planos" */
  ['comercial_Planos_aggregate_order_by']: GraphQLTypes['comercial_Planos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Planos" */
  ['comercial_Planos_arr_rel_insert_input']: GraphQLTypes['comercial_Planos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.Planos". All fields are combined with a logical 'AND'. */
  ['comercial_Planos_bool_exp']: GraphQLTypes['comercial_Planos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Planos" */
  ['comercial_Planos_constraint']: GraphQLTypes['comercial_Planos_constraint'];
  /** input type for inserting data into table "comercial.Planos" */
  ['comercial_Planos_insert_input']: GraphQLTypes['comercial_Planos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Planos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Planos" */
  ['comercial_Planos_max_order_by']: GraphQLTypes['comercial_Planos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Planos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Planos" */
  ['comercial_Planos_min_order_by']: GraphQLTypes['comercial_Planos_min_order_by'];
  /** response of any mutation on the table "comercial.Planos" */
  ['comercial_Planos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Planos'][];
  };
  /** input type for inserting object relation for remote table "comercial.Planos" */
  ['comercial_Planos_obj_rel_insert_input']: GraphQLTypes['comercial_Planos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Planos" */
  ['comercial_Planos_on_conflict']: GraphQLTypes['comercial_Planos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Planos". */
  ['comercial_Planos_order_by']: GraphQLTypes['comercial_Planos_order_by'];
  /** primary key columns input for table: comercial_Planos */
  ['comercial_Planos_pk_columns_input']: GraphQLTypes['comercial_Planos_pk_columns_input'];
  /** select columns of table "comercial.Planos" */
  ['comercial_Planos_select_column']: GraphQLTypes['comercial_Planos_select_column'];
  /** input type for updating data in table "comercial.Planos" */
  ['comercial_Planos_set_input']: GraphQLTypes['comercial_Planos_set_input'];
  /** update columns of table "comercial.Planos" */
  ['comercial_Planos_update_column']: GraphQLTypes['comercial_Planos_update_column'];
  /** columns and relationships of "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos']: {
    /** An array relationship */
    ContratosBases: ModelTypes['comercial_ContratosBase'][];
    /** An aggregate relationship */
    ContratosBases_aggregate: ModelTypes['comercial_ContratosBase_aggregate'];
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Produtos: ModelTypes['comercial_PrestadoresDeServicos_Produtos'][];
    /** An aggregate relationship */
    Produtos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Produtos_aggregate'];
    /** An array relationship */
    Servicos: ModelTypes['comercial_PrestadoresDeServicos_Servicos'][];
    /** An aggregate relationship */
    Servicos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Servicos_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos']: {
    Fornecedor_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An array relationship */
    Itens: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens'][];
    /** An aggregate relationship */
    Itens_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate'];
    /** An array relationship */
    Precos: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos'][];
    /** An aggregate relationship */
    Precos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate'];
    /** An object relationship */
    PrestadorDeServico: ModelTypes['comercial_PrestadoresDeServicos'];
    /** An object relationship */
    Produto: ModelTypes['comercial_Produtos'];
    Produto_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens']: {
    Id: ModelTypes['uuid'];
    Item_Id: ModelTypes['uuid'];
    /** An object relationship */
    PrestadoresDeServicos_Produto: ModelTypes['comercial_PrestadoresDeServicos_Produtos'];
    PrestadoresDeServicos_Produtos_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate']: {
    aggregate?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_fields'];
    nodes: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens'][];
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens_max_fields'];
    min?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens_min_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_arr_rel_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Produtos_Itens". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp'];
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_constraint']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_constraint'];
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_insert_input'];
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_max_fields']: {
    Id?: ModelTypes['uuid'];
    Item_Id?: ModelTypes['uuid'];
    PrestadoresDeServicos_Produtos_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_max_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_max_order_by'];
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_min_fields']: {
    Id?: ModelTypes['uuid'];
    Item_Id?: ModelTypes['uuid'];
    PrestadoresDeServicos_Produtos_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_min_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_min_order_by'];
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens'][];
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_on_conflict']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_on_conflict'];
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Produtos_Itens". */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_order_by'];
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Produtos_Itens */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_pk_columns_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_pk_columns_input'];
  /** select columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_select_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_select_column'];
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_set_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_set_input'];
  /** update columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_update_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_update_column'];
  /** columns and relationships of "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos']: {
    /** An array relationship */
    CombosProdutos: ModelTypes['comercial_Combos_Produtos'][];
    /** An aggregate relationship */
    CombosProdutos_aggregate: ModelTypes['comercial_Combos_Produtos_aggregate'];
    Fornecedor_Produto_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    PrestadorDeServico_Produto: ModelTypes['comercial_PrestadoresDeServicos_Produtos'];
    /** An array relationship */
    PropostasProdutos: ModelTypes['propostas_Propostas_Produtos'][];
    /** An aggregate relationship */
    PropostasProdutos_aggregate: ModelTypes['propostas_Propostas_Produtos_aggregate'];
    /** An object relationship */
    TipoDePreco?: ModelTypes['vendas_TiposDePrecos'];
    TipoDePreco_Id?: ModelTypes['vendas_TiposDePrecos_enum'];
    TipoDeRecorrencia_Id?: string;
    Valor: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate']: {
    aggregate?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_fields'];
    nodes: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos'][];
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_fields']: {
    avg?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_max_fields'];
    min?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_min_fields'];
    stddev?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_fields'];
    sum?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_sum_fields'];
    var_pop?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_fields'];
    var_samp?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_fields'];
    variance?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_arr_rel_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_avg_fields']: {
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_avg_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Produtos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp'];
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_constraint']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_constraint'];
  /** input type for incrementing numeric columns in table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_inc_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_inc_input'];
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_insert_input'];
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_max_fields']: {
    Fornecedor_Produto_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    TipoDeRecorrencia_Id?: string;
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_max_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_min_fields']: {
    Fornecedor_Produto_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    TipoDeRecorrencia_Id?: string;
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_min_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_min_order_by'];
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos'][];
  };
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_obj_rel_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_on_conflict']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_on_conflict'];
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Produtos_Precos". */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_order_by'];
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Produtos_Precos */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_pk_columns_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_pk_columns_input'];
  /** select columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_select_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_select_column'];
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_set_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_set_input'];
  /** aggregate stddev on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_fields']: {
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_fields']: {
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_fields']: {
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_sum_fields']: {
    Valor?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_sum_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_sum_order_by'];
  /** update columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_update_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_fields']: {
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_fields']: {
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_variance_fields']: {
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_variance_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_variance_order_by'];
  /** aggregated selection of "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_aggregate']: {
    aggregate?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_aggregate_fields'];
    nodes: ModelTypes['comercial_PrestadoresDeServicos_Produtos'][];
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_max_fields'];
    min?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_min_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_aggregate_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_arr_rel_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Produtos_bool_exp']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp'];
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_constraint']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_constraint'];
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_insert_input'];
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Produtos_max_fields']: {
    Fornecedor_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_max_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Produtos_min_fields']: {
    Fornecedor_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_min_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_min_order_by'];
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_PrestadoresDeServicos_Produtos'][];
  };
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_obj_rel_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_on_conflict']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_on_conflict'];
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Produtos". */
  ['comercial_PrestadoresDeServicos_Produtos_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_order_by'];
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Produtos */
  ['comercial_PrestadoresDeServicos_Produtos_pk_columns_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_pk_columns_input'];
  /** select columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_select_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_select_column'];
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_set_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_set_input'];
  /** update columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_update_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_update_column'];
  /** columns and relationships of "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos']: {
    Id: ModelTypes['uuid'];
    /** An array relationship */
    Precos: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'][];
    /** An aggregate relationship */
    Precos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate'];
    /** An object relationship */
    PrestadorDeServico: ModelTypes['comercial_PrestadoresDeServicos'];
    Prestador_Id: ModelTypes['uuid'];
    /** An object relationship */
    Servico: ModelTypes['comercial_Servicos'];
    Servico_Id: ModelTypes['uuid'];
    /** An array relationship */
    Tarifas: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'][];
    /** An aggregate relationship */
    Tarifas_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos']: {
    /** An array relationship */
    CombosServicos: ModelTypes['comercial_Combos_Servicos'][];
    /** An aggregate relationship */
    CombosServicos_aggregate: ModelTypes['comercial_Combos_Servicos_aggregate'];
    Fornecedor_Servico_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An array relationship */
    PlanosPrecos: ModelTypes['comercial_Planos_Precos'][];
    /** An aggregate relationship */
    PlanosPrecos_aggregate: ModelTypes['comercial_Planos_Precos_aggregate'];
    /** An object relationship */
    PrestadorDeServico_Servico: ModelTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** An array relationship */
    PropostasServicos: ModelTypes['propostas_Propostas_Servicos'][];
    /** An aggregate relationship */
    PropostasServicos_aggregate: ModelTypes['propostas_Propostas_Servicos_aggregate'];
    /** An object relationship */
    TipoDePreco?: ModelTypes['vendas_TiposDePrecos'];
    TipoDePreco_Id?: ModelTypes['vendas_TiposDePrecos_enum'];
    TipoDeRecorrencia_Id: string;
    Valor: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate']: {
    aggregate?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_fields'];
    nodes: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'][];
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_fields']: {
    avg?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_max_fields'];
    min?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_min_fields'];
    stddev?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_fields'];
    sum?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_sum_fields'];
    var_pop?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_fields'];
    var_samp?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_fields'];
    variance?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_arr_rel_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_avg_fields']: {
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_avg_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Servicos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'];
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_constraint']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_constraint'];
  /** input type for incrementing numeric columns in table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_inc_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_inc_input'];
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_insert_input'];
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_max_fields']: {
    Fornecedor_Servico_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    TipoDeRecorrencia_Id?: string;
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_max_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_min_fields']: {
    Fornecedor_Servico_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    TipoDeRecorrencia_Id?: string;
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_min_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_min_order_by'];
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'][];
  };
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_obj_rel_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_on_conflict']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_on_conflict'];
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Servicos_Precos". */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by'];
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Servicos_Precos */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_pk_columns_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_pk_columns_input'];
  /** select columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_select_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_select_column'];
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_set_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_set_input'];
  /** aggregate stddev on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_fields']: {
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_fields']: {
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_fields']: {
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_sum_fields']: {
    Valor?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_sum_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_sum_order_by'];
  /** update columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_update_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_fields']: {
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_fields']: {
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_variance_fields']: {
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_variance_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_variance_order_by'];
  /** columns and relationships of "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas']: {
    Fornecedor_Servico_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    PrestadorDeServico_Servico: ModelTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** An object relationship */
    Tarifa: ModelTypes['comercial_Tarifas'];
    Tarifa_Id: ModelTypes['uuid'];
    Valor: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate']: {
    aggregate?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_fields'];
    nodes: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'][];
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_fields']: {
    avg?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_fields'];
    min?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_fields'];
    stddev?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_fields'];
    sum?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_fields'];
    var_pop?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_fields'];
    var_samp?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_fields'];
    variance?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_arr_rel_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_fields']: {
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Servicos_Tarifas". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp'];
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_constraint']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_constraint'];
  /** input type for incrementing numeric columns in table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_inc_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_inc_input'];
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_insert_input'];
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_fields']: {
    Fornecedor_Servico_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Tarifa_Id?: ModelTypes['uuid'];
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_order_by'];
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_fields']: {
    Fornecedor_Servico_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Tarifa_Id?: ModelTypes['uuid'];
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_order_by'];
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'][];
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_on_conflict']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_on_conflict'];
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Servicos_Tarifas". */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_order_by'];
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Servicos_Tarifas */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_pk_columns_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_pk_columns_input'];
  /** select columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column'];
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_set_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_set_input'];
  /** aggregate stddev on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_fields']: {
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_fields']: {
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_fields']: {
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_fields']: {
    Valor?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_order_by'];
  /** update columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_update_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_fields']: {
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_fields']: {
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_fields']: {
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_order_by'];
  /** aggregated selection of "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_aggregate']: {
    aggregate?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_aggregate_fields'];
    nodes: ModelTypes['comercial_PrestadoresDeServicos_Servicos'][];
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_max_fields'];
    min?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_min_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_aggregate_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_arr_rel_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Servicos_bool_exp']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp'];
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_constraint']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_constraint'];
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_insert_input'];
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Servicos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Prestador_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_max_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Servicos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Prestador_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_min_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_min_order_by'];
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_PrestadoresDeServicos_Servicos'][];
  };
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_obj_rel_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_on_conflict']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_on_conflict'];
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Servicos". */
  ['comercial_PrestadoresDeServicos_Servicos_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_order_by'];
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Servicos */
  ['comercial_PrestadoresDeServicos_Servicos_pk_columns_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_pk_columns_input'];
  /** select columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_select_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_select_column'];
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_set_input']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_set_input'];
  /** update columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_update_column']: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_update_column'];
  /** aggregated selection of "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_aggregate']: {
    aggregate?: ModelTypes['comercial_PrestadoresDeServicos_aggregate_fields'];
    nodes: ModelTypes['comercial_PrestadoresDeServicos'][];
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_PrestadoresDeServicos_max_fields'];
    min?: ModelTypes['comercial_PrestadoresDeServicos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_bool_exp']: GraphQLTypes['comercial_PrestadoresDeServicos_bool_exp'];
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_constraint']: GraphQLTypes['comercial_PrestadoresDeServicos_constraint'];
  /** input type for inserting data into table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_insert_input'];
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_PrestadoresDeServicos'][];
  };
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_obj_rel_insert_input']: GraphQLTypes['comercial_PrestadoresDeServicos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_on_conflict']: GraphQLTypes['comercial_PrestadoresDeServicos_on_conflict'];
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos". */
  ['comercial_PrestadoresDeServicos_order_by']: GraphQLTypes['comercial_PrestadoresDeServicos_order_by'];
  /** primary key columns input for table: comercial_PrestadoresDeServicos */
  ['comercial_PrestadoresDeServicos_pk_columns_input']: GraphQLTypes['comercial_PrestadoresDeServicos_pk_columns_input'];
  /** select columns of table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_select_column']: GraphQLTypes['comercial_PrestadoresDeServicos_select_column'];
  /** input type for updating data in table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_set_input']: GraphQLTypes['comercial_PrestadoresDeServicos_set_input'];
  /** update columns of table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_update_column']: GraphQLTypes['comercial_PrestadoresDeServicos_update_column'];
  /** columns and relationships of "comercial.Produtos" */
  ['comercial_Produtos']: {
    /** An array relationship */
    Atributos: ModelTypes['comercial_Produtos_Atributos'][];
    /** An aggregate relationship */
    Atributos_aggregate: ModelTypes['comercial_Produtos_Atributos_aggregate'];
    Categorias: ModelTypes['jsonb'];
    /** An array relationship */
    Combos: ModelTypes['comercial_Combos_Produtos'][];
    /** An aggregate relationship */
    Combos_aggregate: ModelTypes['comercial_Combos_Produtos_aggregate'];
    /** An array relationship */
    Fornecedores: ModelTypes['comercial_PrestadoresDeServicos_Produtos'][];
    /** An aggregate relationship */
    Fornecedores_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Produtos_aggregate'];
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Oportunidades: ModelTypes['comercial_Produtos_Oportunidades'][];
    /** An aggregate relationship */
    Oportunidades_aggregate: ModelTypes['comercial_Produtos_Oportunidades_aggregate'];
    /** An array relationship */
    ProdutosDependentes: ModelTypes['comercial_Produtos_Produtos'][];
    /** An aggregate relationship */
    ProdutosDependentes_aggregate: ModelTypes['comercial_Produtos_Produtos_aggregate'];
    /** An array relationship */
    ProdutosQueDependo: ModelTypes['comercial_Produtos_Produtos'][];
    /** An aggregate relationship */
    ProdutosQueDependo_aggregate: ModelTypes['comercial_Produtos_Produtos_aggregate'];
    /** An array relationship */
    Propostas: ModelTypes['propostas_Propostas_Produtos'][];
    /** An aggregate relationship */
    Propostas_aggregate: ModelTypes['propostas_Propostas_Produtos_aggregate'];
    /** An object relationship */
    ServicoDeDesinstalacao?: ModelTypes['comercial_Servicos'];
    ServicoDeDesinstalacao_Id?: ModelTypes['uuid'];
    /** An object relationship */
    ServicoDeInstalacao?: ModelTypes['comercial_Servicos'];
    ServicoDeInstalacao_Id?: ModelTypes['uuid'];
    /** An array relationship */
    Servicos: ModelTypes['comercial_Produtos_Servicos'][];
    /** An array relationship */
    Servicos_Produtos: ModelTypes['comercial_Servicos_Produtos'][];
    /** An aggregate relationship */
    Servicos_Produtos_aggregate: ModelTypes['comercial_Servicos_Produtos_aggregate'];
    /** An aggregate relationship */
    Servicos_aggregate: ModelTypes['comercial_Produtos_Servicos_aggregate'];
    /** An object relationship */
    Tipo: ModelTypes['comercial_Produtos_Tipos'];
    Tipo_Id: ModelTypes['comercial_Produtos_Tipos_enum'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos']: {
    /** An object relationship */
    Atributo: ModelTypes['comercial_Atributos'];
    Atributo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Produto: ModelTypes['comercial_Produtos'];
    Produto_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_aggregate']: {
    aggregate?: ModelTypes['comercial_Produtos_Atributos_aggregate_fields'];
    nodes: ModelTypes['comercial_Produtos_Atributos'][];
  };
  /** aggregate fields of "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Produtos_Atributos_max_fields'];
    min?: ModelTypes['comercial_Produtos_Atributos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_aggregate_order_by']: GraphQLTypes['comercial_Produtos_Atributos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_arr_rel_insert_input']: GraphQLTypes['comercial_Produtos_Atributos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.Produtos_Atributos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Atributos_bool_exp']: GraphQLTypes['comercial_Produtos_Atributos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_constraint']: GraphQLTypes['comercial_Produtos_Atributos_constraint'];
  /** input type for inserting data into table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_insert_input']: GraphQLTypes['comercial_Produtos_Atributos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Produtos_Atributos_max_fields']: {
    Atributo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_max_order_by']: GraphQLTypes['comercial_Produtos_Atributos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Produtos_Atributos_min_fields']: {
    Atributo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_min_order_by']: GraphQLTypes['comercial_Produtos_Atributos_min_order_by'];
  /** response of any mutation on the table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Produtos_Atributos'][];
  };
  /** on conflict condition type for table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_on_conflict']: GraphQLTypes['comercial_Produtos_Atributos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Produtos_Atributos". */
  ['comercial_Produtos_Atributos_order_by']: GraphQLTypes['comercial_Produtos_Atributos_order_by'];
  /** primary key columns input for table: comercial_Produtos_Atributos */
  ['comercial_Produtos_Atributos_pk_columns_input']: GraphQLTypes['comercial_Produtos_Atributos_pk_columns_input'];
  /** select columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_select_column']: GraphQLTypes['comercial_Produtos_Atributos_select_column'];
  /** input type for updating data in table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_set_input']: GraphQLTypes['comercial_Produtos_Atributos_set_input'];
  /** update columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_update_column']: GraphQLTypes['comercial_Produtos_Atributos_update_column'];
  /** columns and relationships of "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades']: {
    /** An object relationship */
    Combo: ModelTypes['comercial_Combos'];
    Combo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    OportunidadesDePropostas: ModelTypes['propostas_Propostas_Oportunidades'][];
    /** An aggregate relationship */
    OportunidadesDePropostas_aggregate: ModelTypes['propostas_Propostas_Oportunidades_aggregate'];
    /** An object relationship */
    Produto: ModelTypes['comercial_Produtos'];
    Produto_Id: ModelTypes['uuid'];
    Valor: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_aggregate']: {
    aggregate?: ModelTypes['comercial_Produtos_Oportunidades_aggregate_fields'];
    nodes: ModelTypes['comercial_Produtos_Oportunidades'][];
  };
  /** aggregate fields of "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_aggregate_fields']: {
    avg?: ModelTypes['comercial_Produtos_Oportunidades_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_Produtos_Oportunidades_max_fields'];
    min?: ModelTypes['comercial_Produtos_Oportunidades_min_fields'];
    stddev?: ModelTypes['comercial_Produtos_Oportunidades_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_Produtos_Oportunidades_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_Produtos_Oportunidades_stddev_samp_fields'];
    sum?: ModelTypes['comercial_Produtos_Oportunidades_sum_fields'];
    var_pop?: ModelTypes['comercial_Produtos_Oportunidades_var_pop_fields'];
    var_samp?: ModelTypes['comercial_Produtos_Oportunidades_var_samp_fields'];
    variance?: ModelTypes['comercial_Produtos_Oportunidades_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_aggregate_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_arr_rel_insert_input']: GraphQLTypes['comercial_Produtos_Oportunidades_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_Produtos_Oportunidades_avg_fields']: {
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_avg_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.Produtos_Oportunidades". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Oportunidades_bool_exp']: GraphQLTypes['comercial_Produtos_Oportunidades_bool_exp'];
  /** unique or primary key constraints on table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_constraint']: GraphQLTypes['comercial_Produtos_Oportunidades_constraint'];
  /** input type for incrementing numeric columns in table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_inc_input']: GraphQLTypes['comercial_Produtos_Oportunidades_inc_input'];
  /** input type for inserting data into table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_insert_input']: GraphQLTypes['comercial_Produtos_Oportunidades_insert_input'];
  /** aggregate max on columns */
  ['comercial_Produtos_Oportunidades_max_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Produto_Id?: ModelTypes['uuid'];
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_max_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Produtos_Oportunidades_min_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Produto_Id?: ModelTypes['uuid'];
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_min_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_min_order_by'];
  /** response of any mutation on the table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Produtos_Oportunidades'][];
  };
  /** input type for inserting object relation for remote table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_obj_rel_insert_input']: GraphQLTypes['comercial_Produtos_Oportunidades_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_on_conflict']: GraphQLTypes['comercial_Produtos_Oportunidades_on_conflict'];
  /** Ordering options when selecting data from "comercial.Produtos_Oportunidades". */
  ['comercial_Produtos_Oportunidades_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_order_by'];
  /** primary key columns input for table: comercial_Produtos_Oportunidades */
  ['comercial_Produtos_Oportunidades_pk_columns_input']: GraphQLTypes['comercial_Produtos_Oportunidades_pk_columns_input'];
  /** select columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_select_column']: GraphQLTypes['comercial_Produtos_Oportunidades_select_column'];
  /** input type for updating data in table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_set_input']: GraphQLTypes['comercial_Produtos_Oportunidades_set_input'];
  /** aggregate stddev on columns */
  ['comercial_Produtos_Oportunidades_stddev_fields']: {
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_stddev_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_Produtos_Oportunidades_stddev_pop_fields']: {
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_stddev_pop_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_Produtos_Oportunidades_stddev_samp_fields']: {
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_stddev_samp_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_Produtos_Oportunidades_sum_fields']: {
    Valor?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_sum_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_sum_order_by'];
  /** update columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_update_column']: GraphQLTypes['comercial_Produtos_Oportunidades_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_Produtos_Oportunidades_var_pop_fields']: {
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_var_pop_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_Produtos_Oportunidades_var_samp_fields']: {
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_var_samp_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_Produtos_Oportunidades_variance_fields']: {
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_variance_order_by']: GraphQLTypes['comercial_Produtos_Oportunidades_variance_order_by'];
  /** columns and relationships of "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Produto: ModelTypes['comercial_Produtos'];
    /** An object relationship */
    ProdutoDependente: ModelTypes['comercial_Produtos'];
    ProdutoDependente_Id: ModelTypes['uuid'];
    Produto_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_aggregate']: {
    aggregate?: ModelTypes['comercial_Produtos_Produtos_aggregate_fields'];
    nodes: ModelTypes['comercial_Produtos_Produtos'][];
  };
  /** aggregate fields of "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Produtos_Produtos_max_fields'];
    min?: ModelTypes['comercial_Produtos_Produtos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_aggregate_order_by']: GraphQLTypes['comercial_Produtos_Produtos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_arr_rel_insert_input']: GraphQLTypes['comercial_Produtos_Produtos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.Produtos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Produtos_bool_exp']: GraphQLTypes['comercial_Produtos_Produtos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_constraint']: GraphQLTypes['comercial_Produtos_Produtos_constraint'];
  /** input type for inserting data into table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_insert_input']: GraphQLTypes['comercial_Produtos_Produtos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Produtos_Produtos_max_fields']: {
    Id?: ModelTypes['uuid'];
    ProdutoDependente_Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_max_order_by']: GraphQLTypes['comercial_Produtos_Produtos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Produtos_Produtos_min_fields']: {
    Id?: ModelTypes['uuid'];
    ProdutoDependente_Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_min_order_by']: GraphQLTypes['comercial_Produtos_Produtos_min_order_by'];
  /** response of any mutation on the table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Produtos_Produtos'][];
  };
  /** on conflict condition type for table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_on_conflict']: GraphQLTypes['comercial_Produtos_Produtos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Produtos_Produtos". */
  ['comercial_Produtos_Produtos_order_by']: GraphQLTypes['comercial_Produtos_Produtos_order_by'];
  /** primary key columns input for table: comercial_Produtos_Produtos */
  ['comercial_Produtos_Produtos_pk_columns_input']: GraphQLTypes['comercial_Produtos_Produtos_pk_columns_input'];
  /** select columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_select_column']: GraphQLTypes['comercial_Produtos_Produtos_select_column'];
  /** input type for updating data in table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_set_input']: GraphQLTypes['comercial_Produtos_Produtos_set_input'];
  /** update columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_update_column']: GraphQLTypes['comercial_Produtos_Produtos_update_column'];
  /** columns and relationships of "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Produto: ModelTypes['comercial_Produtos'];
    Produto_Id: ModelTypes['uuid'];
    /** An object relationship */
    Servico: ModelTypes['comercial_Servicos'];
    Servico_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_aggregate']: {
    aggregate?: ModelTypes['comercial_Produtos_Servicos_aggregate_fields'];
    nodes: ModelTypes['comercial_Produtos_Servicos'][];
  };
  /** aggregate fields of "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Produtos_Servicos_max_fields'];
    min?: ModelTypes['comercial_Produtos_Servicos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_aggregate_order_by']: GraphQLTypes['comercial_Produtos_Servicos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_arr_rel_insert_input']: GraphQLTypes['comercial_Produtos_Servicos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.Produtos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Servicos_bool_exp']: GraphQLTypes['comercial_Produtos_Servicos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_constraint']: GraphQLTypes['comercial_Produtos_Servicos_constraint'];
  /** input type for inserting data into table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_insert_input']: GraphQLTypes['comercial_Produtos_Servicos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Produtos_Servicos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_max_order_by']: GraphQLTypes['comercial_Produtos_Servicos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Produtos_Servicos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_min_order_by']: GraphQLTypes['comercial_Produtos_Servicos_min_order_by'];
  /** response of any mutation on the table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Produtos_Servicos'][];
  };
  /** on conflict condition type for table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_on_conflict']: GraphQLTypes['comercial_Produtos_Servicos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Produtos_Servicos". */
  ['comercial_Produtos_Servicos_order_by']: GraphQLTypes['comercial_Produtos_Servicos_order_by'];
  /** primary key columns input for table: comercial_Produtos_Servicos */
  ['comercial_Produtos_Servicos_pk_columns_input']: GraphQLTypes['comercial_Produtos_Servicos_pk_columns_input'];
  /** select columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_select_column']: GraphQLTypes['comercial_Produtos_Servicos_select_column'];
  /** input type for updating data in table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_set_input']: GraphQLTypes['comercial_Produtos_Servicos_set_input'];
  /** update columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_update_column']: GraphQLTypes['comercial_Produtos_Servicos_update_column'];
  /** columns and relationships of "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos']: {
    Comentario: string;
    /** An array relationship */
    Produtos: ModelTypes['comercial_Produtos'][];
    /** An aggregate relationship */
    Produtos_aggregate: ModelTypes['comercial_Produtos_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_aggregate']: {
    aggregate?: ModelTypes['comercial_Produtos_Tipos_aggregate_fields'];
    nodes: ModelTypes['comercial_Produtos_Tipos'][];
  };
  /** aggregate fields of "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Produtos_Tipos_max_fields'];
    min?: ModelTypes['comercial_Produtos_Tipos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos_Tipos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Tipos_bool_exp']: GraphQLTypes['comercial_Produtos_Tipos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_constraint']: GraphQLTypes['comercial_Produtos_Tipos_constraint'];
  ['comercial_Produtos_Tipos_enum']: GraphQLTypes['comercial_Produtos_Tipos_enum'];
  /** Boolean expression to compare columns of type "comercial_Produtos_Tipos_enum". All fields are combined with logical 'AND'. */
  ['comercial_Produtos_Tipos_enum_comparison_exp']: GraphQLTypes['comercial_Produtos_Tipos_enum_comparison_exp'];
  /** input type for inserting data into table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_insert_input']: GraphQLTypes['comercial_Produtos_Tipos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Produtos_Tipos_max_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['comercial_Produtos_Tipos_min_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Produtos_Tipos'][];
  };
  /** input type for inserting object relation for remote table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_obj_rel_insert_input']: GraphQLTypes['comercial_Produtos_Tipos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_on_conflict']: GraphQLTypes['comercial_Produtos_Tipos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Produtos_Tipos". */
  ['comercial_Produtos_Tipos_order_by']: GraphQLTypes['comercial_Produtos_Tipos_order_by'];
  /** primary key columns input for table: comercial_Produtos_Tipos */
  ['comercial_Produtos_Tipos_pk_columns_input']: GraphQLTypes['comercial_Produtos_Tipos_pk_columns_input'];
  /** select columns of table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_select_column']: GraphQLTypes['comercial_Produtos_Tipos_select_column'];
  /** input type for updating data in table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_set_input']: GraphQLTypes['comercial_Produtos_Tipos_set_input'];
  /** update columns of table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_update_column']: GraphQLTypes['comercial_Produtos_Tipos_update_column'];
  /** aggregated selection of "comercial.Produtos" */
  ['comercial_Produtos_aggregate']: {
    aggregate?: ModelTypes['comercial_Produtos_aggregate_fields'];
    nodes: ModelTypes['comercial_Produtos'][];
  };
  /** aggregate fields of "comercial.Produtos" */
  ['comercial_Produtos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Produtos_max_fields'];
    min?: ModelTypes['comercial_Produtos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Produtos" */
  ['comercial_Produtos_aggregate_order_by']: GraphQLTypes['comercial_Produtos_aggregate_order_by'];
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Produtos_append_input']: GraphQLTypes['comercial_Produtos_append_input'];
  /** input type for inserting array relation for remote table "comercial.Produtos" */
  ['comercial_Produtos_arr_rel_insert_input']: GraphQLTypes['comercial_Produtos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_bool_exp']: GraphQLTypes['comercial_Produtos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Produtos" */
  ['comercial_Produtos_constraint']: GraphQLTypes['comercial_Produtos_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['comercial_Produtos_delete_at_path_input']: GraphQLTypes['comercial_Produtos_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['comercial_Produtos_delete_elem_input']: GraphQLTypes['comercial_Produtos_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['comercial_Produtos_delete_key_input']: GraphQLTypes['comercial_Produtos_delete_key_input'];
  /** input type for inserting data into table "comercial.Produtos" */
  ['comercial_Produtos_insert_input']: GraphQLTypes['comercial_Produtos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Produtos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    ServicoDeDesinstalacao_Id?: ModelTypes['uuid'];
    ServicoDeInstalacao_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Produtos" */
  ['comercial_Produtos_max_order_by']: GraphQLTypes['comercial_Produtos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Produtos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    ServicoDeDesinstalacao_Id?: ModelTypes['uuid'];
    ServicoDeInstalacao_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Produtos" */
  ['comercial_Produtos_min_order_by']: GraphQLTypes['comercial_Produtos_min_order_by'];
  /** response of any mutation on the table "comercial.Produtos" */
  ['comercial_Produtos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Produtos'][];
  };
  /** input type for inserting object relation for remote table "comercial.Produtos" */
  ['comercial_Produtos_obj_rel_insert_input']: GraphQLTypes['comercial_Produtos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Produtos" */
  ['comercial_Produtos_on_conflict']: GraphQLTypes['comercial_Produtos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Produtos". */
  ['comercial_Produtos_order_by']: GraphQLTypes['comercial_Produtos_order_by'];
  /** primary key columns input for table: comercial_Produtos */
  ['comercial_Produtos_pk_columns_input']: GraphQLTypes['comercial_Produtos_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Produtos_prepend_input']: GraphQLTypes['comercial_Produtos_prepend_input'];
  /** select columns of table "comercial.Produtos" */
  ['comercial_Produtos_select_column']: GraphQLTypes['comercial_Produtos_select_column'];
  /** input type for updating data in table "comercial.Produtos" */
  ['comercial_Produtos_set_input']: GraphQLTypes['comercial_Produtos_set_input'];
  /** update columns of table "comercial.Produtos" */
  ['comercial_Produtos_update_column']: GraphQLTypes['comercial_Produtos_update_column'];
  /** columns and relationships of "comercial.Servicos" */
  ['comercial_Servicos']: {
    /** An array relationship */
    Atributos: ModelTypes['comercial_Servicos_Atributos'][];
    /** An aggregate relationship */
    Atributos_aggregate: ModelTypes['comercial_Servicos_Atributos_aggregate'];
    Categorias: ModelTypes['jsonb'];
    /** An array relationship */
    Combos: ModelTypes['comercial_Combos_Servicos'][];
    /** An aggregate relationship */
    Combos_aggregate: ModelTypes['comercial_Combos_Servicos_aggregate'];
    GeraOS: boolean;
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Oportunidades: ModelTypes['comercial_Servicos_Oportunidades'][];
    /** An aggregate relationship */
    Oportunidades_aggregate: ModelTypes['comercial_Servicos_Oportunidades_aggregate'];
    /** An array relationship */
    Planos: ModelTypes['comercial_Planos'][];
    /** An aggregate relationship */
    Planos_aggregate: ModelTypes['comercial_Planos_aggregate'];
    /** An array relationship */
    PrestadoresDeServicos: ModelTypes['comercial_PrestadoresDeServicos_Servicos'][];
    /** An aggregate relationship */
    PrestadoresDeServicos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Servicos_aggregate'];
    /** An array relationship */
    Produtos_Servicos: ModelTypes['comercial_Produtos_Servicos'][];
    /** An aggregate relationship */
    Produtos_Servicos_aggregate: ModelTypes['comercial_Produtos_Servicos_aggregate'];
    /** An array relationship */
    Propostas: ModelTypes['propostas_Propostas_Servicos'][];
    /** An aggregate relationship */
    Propostas_aggregate: ModelTypes['propostas_Propostas_Servicos_aggregate'];
    /** An array relationship */
    Servicos_Produtos: ModelTypes['comercial_Servicos_Produtos'][];
    /** An aggregate relationship */
    Servicos_Produtos_aggregate: ModelTypes['comercial_Servicos_Produtos_aggregate'];
    /** An array relationship */
    Servicos_ServicosDependente: ModelTypes['comercial_Servicos_Servicos'][];
    /** An aggregate relationship */
    Servicos_ServicosDependente_aggregate: ModelTypes['comercial_Servicos_Servicos_aggregate'];
    /** An array relationship */
    Tarifas: ModelTypes['comercial_Servicos_Tarifas'][];
    /** An aggregate relationship */
    Tarifas_aggregate: ModelTypes['comercial_Servicos_Tarifas_aggregate'];
    /** An object relationship */
    Tipo: ModelTypes['comercial_Servicos_Tipos'];
    Tipo_Id: ModelTypes['comercial_Servicos_Tipos_enum'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    /** An array relationship */
    servicosServicos: ModelTypes['comercial_Servicos_Servicos'][];
    /** An aggregate relationship */
    servicosServicos_aggregate: ModelTypes['comercial_Servicos_Servicos_aggregate'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos']: {
    /** An object relationship */
    Atributo: ModelTypes['comercial_Atributos'];
    Atributo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Servico: ModelTypes['comercial_Servicos'];
    Servico_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_aggregate']: {
    aggregate?: ModelTypes['comercial_Servicos_Atributos_aggregate_fields'];
    nodes: ModelTypes['comercial_Servicos_Atributos'][];
  };
  /** aggregate fields of "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Servicos_Atributos_max_fields'];
    min?: ModelTypes['comercial_Servicos_Atributos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_aggregate_order_by']: GraphQLTypes['comercial_Servicos_Atributos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_arr_rel_insert_input']: GraphQLTypes['comercial_Servicos_Atributos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.Servicos_Atributos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Atributos_bool_exp']: GraphQLTypes['comercial_Servicos_Atributos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_constraint']: GraphQLTypes['comercial_Servicos_Atributos_constraint'];
  /** input type for inserting data into table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_insert_input']: GraphQLTypes['comercial_Servicos_Atributos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Servicos_Atributos_max_fields']: {
    Atributo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_max_order_by']: GraphQLTypes['comercial_Servicos_Atributos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Servicos_Atributos_min_fields']: {
    Atributo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_min_order_by']: GraphQLTypes['comercial_Servicos_Atributos_min_order_by'];
  /** response of any mutation on the table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Servicos_Atributos'][];
  };
  /** on conflict condition type for table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_on_conflict']: GraphQLTypes['comercial_Servicos_Atributos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Servicos_Atributos". */
  ['comercial_Servicos_Atributos_order_by']: GraphQLTypes['comercial_Servicos_Atributos_order_by'];
  /** primary key columns input for table: comercial_Servicos_Atributos */
  ['comercial_Servicos_Atributos_pk_columns_input']: GraphQLTypes['comercial_Servicos_Atributos_pk_columns_input'];
  /** select columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_select_column']: GraphQLTypes['comercial_Servicos_Atributos_select_column'];
  /** input type for updating data in table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_set_input']: GraphQLTypes['comercial_Servicos_Atributos_set_input'];
  /** update columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_update_column']: GraphQLTypes['comercial_Servicos_Atributos_update_column'];
  /** columns and relationships of "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades']: {
    /** An object relationship */
    Combo: ModelTypes['comercial_Combos'];
    Combo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    OportunidadesDePropostas: ModelTypes['propostas_Propostas_Oportunidades'][];
    /** An aggregate relationship */
    OportunidadesDePropostas_aggregate: ModelTypes['propostas_Propostas_Oportunidades_aggregate'];
    /** An object relationship */
    Servico: ModelTypes['comercial_Servicos'];
    Servico_Id: ModelTypes['uuid'];
    Valor: ModelTypes['float8'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_aggregate']: {
    aggregate?: ModelTypes['comercial_Servicos_Oportunidades_aggregate_fields'];
    nodes: ModelTypes['comercial_Servicos_Oportunidades'][];
  };
  /** aggregate fields of "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_aggregate_fields']: {
    avg?: ModelTypes['comercial_Servicos_Oportunidades_avg_fields'];
    count: number;
    max?: ModelTypes['comercial_Servicos_Oportunidades_max_fields'];
    min?: ModelTypes['comercial_Servicos_Oportunidades_min_fields'];
    stddev?: ModelTypes['comercial_Servicos_Oportunidades_stddev_fields'];
    stddev_pop?: ModelTypes['comercial_Servicos_Oportunidades_stddev_pop_fields'];
    stddev_samp?: ModelTypes['comercial_Servicos_Oportunidades_stddev_samp_fields'];
    sum?: ModelTypes['comercial_Servicos_Oportunidades_sum_fields'];
    var_pop?: ModelTypes['comercial_Servicos_Oportunidades_var_pop_fields'];
    var_samp?: ModelTypes['comercial_Servicos_Oportunidades_var_samp_fields'];
    variance?: ModelTypes['comercial_Servicos_Oportunidades_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_aggregate_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_arr_rel_insert_input']: GraphQLTypes['comercial_Servicos_Oportunidades_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['comercial_Servicos_Oportunidades_avg_fields']: {
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_avg_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_avg_order_by'];
  /** Boolean expression to filter rows from the table "comercial.Servicos_Oportunidades". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Oportunidades_bool_exp']: GraphQLTypes['comercial_Servicos_Oportunidades_bool_exp'];
  /** unique or primary key constraints on table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_constraint']: GraphQLTypes['comercial_Servicos_Oportunidades_constraint'];
  /** input type for incrementing numeric columns in table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_inc_input']: GraphQLTypes['comercial_Servicos_Oportunidades_inc_input'];
  /** input type for inserting data into table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_insert_input']: GraphQLTypes['comercial_Servicos_Oportunidades_insert_input'];
  /** aggregate max on columns */
  ['comercial_Servicos_Oportunidades_max_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Servico_Id?: ModelTypes['uuid'];
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_max_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Servicos_Oportunidades_min_fields']: {
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Nome?: string;
    Servico_Id?: ModelTypes['uuid'];
    Valor?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_min_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_min_order_by'];
  /** response of any mutation on the table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Servicos_Oportunidades'][];
  };
  /** input type for inserting object relation for remote table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_obj_rel_insert_input']: GraphQLTypes['comercial_Servicos_Oportunidades_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_on_conflict']: GraphQLTypes['comercial_Servicos_Oportunidades_on_conflict'];
  /** Ordering options when selecting data from "comercial.Servicos_Oportunidades". */
  ['comercial_Servicos_Oportunidades_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_order_by'];
  /** primary key columns input for table: comercial_Servicos_Oportunidades */
  ['comercial_Servicos_Oportunidades_pk_columns_input']: GraphQLTypes['comercial_Servicos_Oportunidades_pk_columns_input'];
  /** select columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_select_column']: GraphQLTypes['comercial_Servicos_Oportunidades_select_column'];
  /** input type for updating data in table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_set_input']: GraphQLTypes['comercial_Servicos_Oportunidades_set_input'];
  /** aggregate stddev on columns */
  ['comercial_Servicos_Oportunidades_stddev_fields']: {
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_stddev_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['comercial_Servicos_Oportunidades_stddev_pop_fields']: {
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_stddev_pop_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['comercial_Servicos_Oportunidades_stddev_samp_fields']: {
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_stddev_samp_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['comercial_Servicos_Oportunidades_sum_fields']: {
    Valor?: ModelTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_sum_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_sum_order_by'];
  /** update columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_update_column']: GraphQLTypes['comercial_Servicos_Oportunidades_update_column'];
  /** aggregate var_pop on columns */
  ['comercial_Servicos_Oportunidades_var_pop_fields']: {
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_var_pop_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['comercial_Servicos_Oportunidades_var_samp_fields']: {
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_var_samp_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_var_samp_order_by'];
  /** aggregate variance on columns */
  ['comercial_Servicos_Oportunidades_variance_fields']: {
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_variance_order_by']: GraphQLTypes['comercial_Servicos_Oportunidades_variance_order_by'];
  /** columns and relationships of "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Produto: ModelTypes['comercial_Produtos'];
    Produto_Id: ModelTypes['uuid'];
    /** An object relationship */
    Servico: ModelTypes['comercial_Servicos'];
    Servico_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_aggregate']: {
    aggregate?: ModelTypes['comercial_Servicos_Produtos_aggregate_fields'];
    nodes: ModelTypes['comercial_Servicos_Produtos'][];
  };
  /** aggregate fields of "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Servicos_Produtos_max_fields'];
    min?: ModelTypes['comercial_Servicos_Produtos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_aggregate_order_by']: GraphQLTypes['comercial_Servicos_Produtos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_arr_rel_insert_input']: GraphQLTypes['comercial_Servicos_Produtos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.Servicos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Produtos_bool_exp']: GraphQLTypes['comercial_Servicos_Produtos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_constraint']: GraphQLTypes['comercial_Servicos_Produtos_constraint'];
  /** input type for inserting data into table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_insert_input']: GraphQLTypes['comercial_Servicos_Produtos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Servicos_Produtos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_max_order_by']: GraphQLTypes['comercial_Servicos_Produtos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Servicos_Produtos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_min_order_by']: GraphQLTypes['comercial_Servicos_Produtos_min_order_by'];
  /** response of any mutation on the table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Servicos_Produtos'][];
  };
  /** on conflict condition type for table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_on_conflict']: GraphQLTypes['comercial_Servicos_Produtos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Servicos_Produtos". */
  ['comercial_Servicos_Produtos_order_by']: GraphQLTypes['comercial_Servicos_Produtos_order_by'];
  /** primary key columns input for table: comercial_Servicos_Produtos */
  ['comercial_Servicos_Produtos_pk_columns_input']: GraphQLTypes['comercial_Servicos_Produtos_pk_columns_input'];
  /** select columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_select_column']: GraphQLTypes['comercial_Servicos_Produtos_select_column'];
  /** input type for updating data in table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_set_input']: GraphQLTypes['comercial_Servicos_Produtos_set_input'];
  /** update columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_update_column']: GraphQLTypes['comercial_Servicos_Produtos_update_column'];
  /** columns and relationships of "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Servico: ModelTypes['comercial_Servicos'];
    /** An object relationship */
    ServicoDependente: ModelTypes['comercial_Servicos'];
    ServicoDependente_Id: ModelTypes['uuid'];
    Servico_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_aggregate']: {
    aggregate?: ModelTypes['comercial_Servicos_Servicos_aggregate_fields'];
    nodes: ModelTypes['comercial_Servicos_Servicos'][];
  };
  /** aggregate fields of "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Servicos_Servicos_max_fields'];
    min?: ModelTypes['comercial_Servicos_Servicos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_aggregate_order_by']: GraphQLTypes['comercial_Servicos_Servicos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_arr_rel_insert_input']: GraphQLTypes['comercial_Servicos_Servicos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.Servicos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Servicos_bool_exp']: GraphQLTypes['comercial_Servicos_Servicos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_constraint']: GraphQLTypes['comercial_Servicos_Servicos_constraint'];
  /** input type for inserting data into table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_insert_input']: GraphQLTypes['comercial_Servicos_Servicos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Servicos_Servicos_max_fields']: {
    Id?: ModelTypes['uuid'];
    ServicoDependente_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_max_order_by']: GraphQLTypes['comercial_Servicos_Servicos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Servicos_Servicos_min_fields']: {
    Id?: ModelTypes['uuid'];
    ServicoDependente_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_min_order_by']: GraphQLTypes['comercial_Servicos_Servicos_min_order_by'];
  /** response of any mutation on the table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Servicos_Servicos'][];
  };
  /** on conflict condition type for table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_on_conflict']: GraphQLTypes['comercial_Servicos_Servicos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Servicos_Servicos". */
  ['comercial_Servicos_Servicos_order_by']: GraphQLTypes['comercial_Servicos_Servicos_order_by'];
  /** primary key columns input for table: comercial_Servicos_Servicos */
  ['comercial_Servicos_Servicos_pk_columns_input']: GraphQLTypes['comercial_Servicos_Servicos_pk_columns_input'];
  /** select columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_select_column']: GraphQLTypes['comercial_Servicos_Servicos_select_column'];
  /** input type for updating data in table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_set_input']: GraphQLTypes['comercial_Servicos_Servicos_set_input'];
  /** update columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_update_column']: GraphQLTypes['comercial_Servicos_Servicos_update_column'];
  /** columns and relationships of "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Servico: ModelTypes['comercial_Servicos'];
    Servico_Id: ModelTypes['uuid'];
    /** An object relationship */
    Tarifa: ModelTypes['comercial_Tarifas'];
    Tarifa_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_aggregate']: {
    aggregate?: ModelTypes['comercial_Servicos_Tarifas_aggregate_fields'];
    nodes: ModelTypes['comercial_Servicos_Tarifas'][];
  };
  /** aggregate fields of "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Servicos_Tarifas_max_fields'];
    min?: ModelTypes['comercial_Servicos_Tarifas_min_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_aggregate_order_by']: GraphQLTypes['comercial_Servicos_Tarifas_aggregate_order_by'];
  /** input type for inserting array relation for remote table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_arr_rel_insert_input']: GraphQLTypes['comercial_Servicos_Tarifas_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.Servicos_Tarifas". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Tarifas_bool_exp']: GraphQLTypes['comercial_Servicos_Tarifas_bool_exp'];
  /** unique or primary key constraints on table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_constraint']: GraphQLTypes['comercial_Servicos_Tarifas_constraint'];
  /** input type for inserting data into table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_insert_input']: GraphQLTypes['comercial_Servicos_Tarifas_insert_input'];
  /** aggregate max on columns */
  ['comercial_Servicos_Tarifas_max_fields']: {
    Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    Tarifa_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_max_order_by']: GraphQLTypes['comercial_Servicos_Tarifas_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Servicos_Tarifas_min_fields']: {
    Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    Tarifa_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_min_order_by']: GraphQLTypes['comercial_Servicos_Tarifas_min_order_by'];
  /** response of any mutation on the table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Servicos_Tarifas'][];
  };
  /** on conflict condition type for table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_on_conflict']: GraphQLTypes['comercial_Servicos_Tarifas_on_conflict'];
  /** Ordering options when selecting data from "comercial.Servicos_Tarifas". */
  ['comercial_Servicos_Tarifas_order_by']: GraphQLTypes['comercial_Servicos_Tarifas_order_by'];
  /** primary key columns input for table: comercial_Servicos_Tarifas */
  ['comercial_Servicos_Tarifas_pk_columns_input']: GraphQLTypes['comercial_Servicos_Tarifas_pk_columns_input'];
  /** select columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_select_column']: GraphQLTypes['comercial_Servicos_Tarifas_select_column'];
  /** input type for updating data in table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_set_input']: GraphQLTypes['comercial_Servicos_Tarifas_set_input'];
  /** update columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_update_column']: GraphQLTypes['comercial_Servicos_Tarifas_update_column'];
  /** columns and relationships of "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos']: {
    Comentario: string;
    /** An array relationship */
    Servicos: ModelTypes['comercial_Servicos'][];
    /** An aggregate relationship */
    Servicos_aggregate: ModelTypes['comercial_Servicos_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_aggregate']: {
    aggregate?: ModelTypes['comercial_Servicos_Tipos_aggregate_fields'];
    nodes: ModelTypes['comercial_Servicos_Tipos'][];
  };
  /** aggregate fields of "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Servicos_Tipos_max_fields'];
    min?: ModelTypes['comercial_Servicos_Tipos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Tipos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Tipos_bool_exp']: GraphQLTypes['comercial_Servicos_Tipos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_constraint']: GraphQLTypes['comercial_Servicos_Tipos_constraint'];
  ['comercial_Servicos_Tipos_enum']: GraphQLTypes['comercial_Servicos_Tipos_enum'];
  /** Boolean expression to compare columns of type "comercial_Servicos_Tipos_enum". All fields are combined with logical 'AND'. */
  ['comercial_Servicos_Tipos_enum_comparison_exp']: GraphQLTypes['comercial_Servicos_Tipos_enum_comparison_exp'];
  /** input type for inserting data into table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_insert_input']: GraphQLTypes['comercial_Servicos_Tipos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Servicos_Tipos_max_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Tipos_min_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Servicos_Tipos'][];
  };
  /** input type for inserting object relation for remote table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_obj_rel_insert_input']: GraphQLTypes['comercial_Servicos_Tipos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_on_conflict']: GraphQLTypes['comercial_Servicos_Tipos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Servicos_Tipos". */
  ['comercial_Servicos_Tipos_order_by']: GraphQLTypes['comercial_Servicos_Tipos_order_by'];
  /** primary key columns input for table: comercial_Servicos_Tipos */
  ['comercial_Servicos_Tipos_pk_columns_input']: GraphQLTypes['comercial_Servicos_Tipos_pk_columns_input'];
  /** select columns of table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_select_column']: GraphQLTypes['comercial_Servicos_Tipos_select_column'];
  /** input type for updating data in table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_set_input']: GraphQLTypes['comercial_Servicos_Tipos_set_input'];
  /** update columns of table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_update_column']: GraphQLTypes['comercial_Servicos_Tipos_update_column'];
  /** aggregated selection of "comercial.Servicos" */
  ['comercial_Servicos_aggregate']: {
    aggregate?: ModelTypes['comercial_Servicos_aggregate_fields'];
    nodes: ModelTypes['comercial_Servicos'][];
  };
  /** aggregate fields of "comercial.Servicos" */
  ['comercial_Servicos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Servicos_max_fields'];
    min?: ModelTypes['comercial_Servicos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos" */
  ['comercial_Servicos_aggregate_order_by']: GraphQLTypes['comercial_Servicos_aggregate_order_by'];
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Servicos_append_input']: GraphQLTypes['comercial_Servicos_append_input'];
  /** input type for inserting array relation for remote table "comercial.Servicos" */
  ['comercial_Servicos_arr_rel_insert_input']: GraphQLTypes['comercial_Servicos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "comercial.Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_bool_exp']: GraphQLTypes['comercial_Servicos_bool_exp'];
  /** unique or primary key constraints on table "comercial.Servicos" */
  ['comercial_Servicos_constraint']: GraphQLTypes['comercial_Servicos_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['comercial_Servicos_delete_at_path_input']: GraphQLTypes['comercial_Servicos_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['comercial_Servicos_delete_elem_input']: GraphQLTypes['comercial_Servicos_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['comercial_Servicos_delete_key_input']: GraphQLTypes['comercial_Servicos_delete_key_input'];
  /** input type for inserting data into table "comercial.Servicos" */
  ['comercial_Servicos_insert_input']: GraphQLTypes['comercial_Servicos_insert_input'];
  /** aggregate max on columns */
  ['comercial_Servicos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos" */
  ['comercial_Servicos_max_order_by']: GraphQLTypes['comercial_Servicos_max_order_by'];
  /** aggregate min on columns */
  ['comercial_Servicos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos" */
  ['comercial_Servicos_min_order_by']: GraphQLTypes['comercial_Servicos_min_order_by'];
  /** response of any mutation on the table "comercial.Servicos" */
  ['comercial_Servicos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Servicos'][];
  };
  /** input type for inserting object relation for remote table "comercial.Servicos" */
  ['comercial_Servicos_obj_rel_insert_input']: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Servicos" */
  ['comercial_Servicos_on_conflict']: GraphQLTypes['comercial_Servicos_on_conflict'];
  /** Ordering options when selecting data from "comercial.Servicos". */
  ['comercial_Servicos_order_by']: GraphQLTypes['comercial_Servicos_order_by'];
  /** primary key columns input for table: comercial_Servicos */
  ['comercial_Servicos_pk_columns_input']: GraphQLTypes['comercial_Servicos_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Servicos_prepend_input']: GraphQLTypes['comercial_Servicos_prepend_input'];
  /** select columns of table "comercial.Servicos" */
  ['comercial_Servicos_select_column']: GraphQLTypes['comercial_Servicos_select_column'];
  /** input type for updating data in table "comercial.Servicos" */
  ['comercial_Servicos_set_input']: GraphQLTypes['comercial_Servicos_set_input'];
  /** update columns of table "comercial.Servicos" */
  ['comercial_Servicos_update_column']: GraphQLTypes['comercial_Servicos_update_column'];
  /** columns and relationships of "comercial.Tarifas" */
  ['comercial_Tarifas']: {
    /** An array relationship */
    Fornecedores_Servicos: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'][];
    /** An aggregate relationship */
    Fornecedores_Servicos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate'];
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Servicos: ModelTypes['comercial_Servicos_Tarifas'][];
    /** An aggregate relationship */
    Servicos_aggregate: ModelTypes['comercial_Servicos_Tarifas_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Tarifas" */
  ['comercial_Tarifas_aggregate']: {
    aggregate?: ModelTypes['comercial_Tarifas_aggregate_fields'];
    nodes: ModelTypes['comercial_Tarifas'][];
  };
  /** aggregate fields of "comercial.Tarifas" */
  ['comercial_Tarifas_aggregate_fields']: {
    count: number;
    max?: ModelTypes['comercial_Tarifas_max_fields'];
    min?: ModelTypes['comercial_Tarifas_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Tarifas". All fields are combined with a logical 'AND'. */
  ['comercial_Tarifas_bool_exp']: GraphQLTypes['comercial_Tarifas_bool_exp'];
  /** unique or primary key constraints on table "comercial.Tarifas" */
  ['comercial_Tarifas_constraint']: GraphQLTypes['comercial_Tarifas_constraint'];
  /** input type for inserting data into table "comercial.Tarifas" */
  ['comercial_Tarifas_insert_input']: GraphQLTypes['comercial_Tarifas_insert_input'];
  /** aggregate max on columns */
  ['comercial_Tarifas_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_Tarifas_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.Tarifas" */
  ['comercial_Tarifas_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['comercial_Tarifas'][];
  };
  /** input type for inserting object relation for remote table "comercial.Tarifas" */
  ['comercial_Tarifas_obj_rel_insert_input']: GraphQLTypes['comercial_Tarifas_obj_rel_insert_input'];
  /** on conflict condition type for table "comercial.Tarifas" */
  ['comercial_Tarifas_on_conflict']: GraphQLTypes['comercial_Tarifas_on_conflict'];
  /** Ordering options when selecting data from "comercial.Tarifas". */
  ['comercial_Tarifas_order_by']: GraphQLTypes['comercial_Tarifas_order_by'];
  /** primary key columns input for table: comercial_Tarifas */
  ['comercial_Tarifas_pk_columns_input']: GraphQLTypes['comercial_Tarifas_pk_columns_input'];
  /** select columns of table "comercial.Tarifas" */
  ['comercial_Tarifas_select_column']: GraphQLTypes['comercial_Tarifas_select_column'];
  /** input type for updating data in table "comercial.Tarifas" */
  ['comercial_Tarifas_set_input']: GraphQLTypes['comercial_Tarifas_set_input'];
  /** update columns of table "comercial.Tarifas" */
  ['comercial_Tarifas_update_column']: GraphQLTypes['comercial_Tarifas_update_column'];
  /** columns and relationships of "contatos.Emails" */
  ['contatos_Emails']: {
    Categorias: ModelTypes['jsonb'];
    Email: string;
    Id: ModelTypes['uuid'];
    Identidades: ModelTypes['jsonb'];
    NomeDoResponsavel?: string;
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "contatos.Emails" */
  ['contatos_Emails_aggregate']: {
    aggregate?: ModelTypes['contatos_Emails_aggregate_fields'];
    nodes: ModelTypes['contatos_Emails'][];
  };
  /** aggregate fields of "contatos.Emails" */
  ['contatos_Emails_aggregate_fields']: {
    count: number;
    max?: ModelTypes['contatos_Emails_max_fields'];
    min?: ModelTypes['contatos_Emails_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Emails_append_input']: GraphQLTypes['contatos_Emails_append_input'];
  /** Boolean expression to filter rows from the table "contatos.Emails". All fields are combined with a logical 'AND'. */
  ['contatos_Emails_bool_exp']: GraphQLTypes['contatos_Emails_bool_exp'];
  /** unique or primary key constraints on table "contatos.Emails" */
  ['contatos_Emails_constraint']: GraphQLTypes['contatos_Emails_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Emails_delete_at_path_input']: GraphQLTypes['contatos_Emails_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Emails_delete_elem_input']: GraphQLTypes['contatos_Emails_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Emails_delete_key_input']: GraphQLTypes['contatos_Emails_delete_key_input'];
  /** input type for inserting data into table "contatos.Emails" */
  ['contatos_Emails_insert_input']: GraphQLTypes['contatos_Emails_insert_input'];
  /** aggregate max on columns */
  ['contatos_Emails_max_fields']: {
    Email?: string;
    Id?: ModelTypes['uuid'];
    NomeDoResponsavel?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['contatos_Emails_min_fields']: {
    Email?: string;
    Id?: ModelTypes['uuid'];
    NomeDoResponsavel?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "contatos.Emails" */
  ['contatos_Emails_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['contatos_Emails'][];
  };
  /** on conflict condition type for table "contatos.Emails" */
  ['contatos_Emails_on_conflict']: GraphQLTypes['contatos_Emails_on_conflict'];
  /** Ordering options when selecting data from "contatos.Emails". */
  ['contatos_Emails_order_by']: GraphQLTypes['contatos_Emails_order_by'];
  /** primary key columns input for table: contatos_Emails */
  ['contatos_Emails_pk_columns_input']: GraphQLTypes['contatos_Emails_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Emails_prepend_input']: GraphQLTypes['contatos_Emails_prepend_input'];
  /** select columns of table "contatos.Emails" */
  ['contatos_Emails_select_column']: GraphQLTypes['contatos_Emails_select_column'];
  /** input type for updating data in table "contatos.Emails" */
  ['contatos_Emails_set_input']: GraphQLTypes['contatos_Emails_set_input'];
  /** update columns of table "contatos.Emails" */
  ['contatos_Emails_update_column']: GraphQLTypes['contatos_Emails_update_column'];
  /** columns and relationships of "contatos.Enderecos" */
  ['contatos_Enderecos']: {
    Bairro: string;
    Categorias: ModelTypes['jsonb'];
    Cep?: string;
    /** An object relationship */
    Cidade: ModelTypes['EstadosEMunicipios'];
    Cidade_Id: ModelTypes['uuid'];
    Complemento?: string;
    /** An object relationship */
    Estado: ModelTypes['EstadosEMunicipios'];
    Estado_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    Identidades: ModelTypes['jsonb'];
    Logradouro: string;
    Numero?: string;
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "contatos.Enderecos" */
  ['contatos_Enderecos_aggregate']: {
    aggregate?: ModelTypes['contatos_Enderecos_aggregate_fields'];
    nodes: ModelTypes['contatos_Enderecos'][];
  };
  /** aggregate fields of "contatos.Enderecos" */
  ['contatos_Enderecos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['contatos_Enderecos_max_fields'];
    min?: ModelTypes['contatos_Enderecos_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Enderecos_append_input']: GraphQLTypes['contatos_Enderecos_append_input'];
  /** Boolean expression to filter rows from the table "contatos.Enderecos". All fields are combined with a logical 'AND'. */
  ['contatos_Enderecos_bool_exp']: GraphQLTypes['contatos_Enderecos_bool_exp'];
  /** unique or primary key constraints on table "contatos.Enderecos" */
  ['contatos_Enderecos_constraint']: GraphQLTypes['contatos_Enderecos_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Enderecos_delete_at_path_input']: GraphQLTypes['contatos_Enderecos_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Enderecos_delete_elem_input']: GraphQLTypes['contatos_Enderecos_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Enderecos_delete_key_input']: GraphQLTypes['contatos_Enderecos_delete_key_input'];
  /** input type for inserting data into table "contatos.Enderecos" */
  ['contatos_Enderecos_insert_input']: GraphQLTypes['contatos_Enderecos_insert_input'];
  /** aggregate max on columns */
  ['contatos_Enderecos_max_fields']: {
    Bairro?: string;
    Cep?: string;
    Cidade_Id?: ModelTypes['uuid'];
    Complemento?: string;
    Estado_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Logradouro?: string;
    Numero?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['contatos_Enderecos_min_fields']: {
    Bairro?: string;
    Cep?: string;
    Cidade_Id?: ModelTypes['uuid'];
    Complemento?: string;
    Estado_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Logradouro?: string;
    Numero?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "contatos.Enderecos" */
  ['contatos_Enderecos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['contatos_Enderecos'][];
  };
  /** on conflict condition type for table "contatos.Enderecos" */
  ['contatos_Enderecos_on_conflict']: GraphQLTypes['contatos_Enderecos_on_conflict'];
  /** Ordering options when selecting data from "contatos.Enderecos". */
  ['contatos_Enderecos_order_by']: GraphQLTypes['contatos_Enderecos_order_by'];
  /** primary key columns input for table: contatos_Enderecos */
  ['contatos_Enderecos_pk_columns_input']: GraphQLTypes['contatos_Enderecos_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Enderecos_prepend_input']: GraphQLTypes['contatos_Enderecos_prepend_input'];
  /** select columns of table "contatos.Enderecos" */
  ['contatos_Enderecos_select_column']: GraphQLTypes['contatos_Enderecos_select_column'];
  /** input type for updating data in table "contatos.Enderecos" */
  ['contatos_Enderecos_set_input']: GraphQLTypes['contatos_Enderecos_set_input'];
  /** update columns of table "contatos.Enderecos" */
  ['contatos_Enderecos_update_column']: GraphQLTypes['contatos_Enderecos_update_column'];
  /** columns and relationships of "contatos.Logs" */
  ['contatos_Logs']: {
    DadosAntigos: ModelTypes['jsonb'];
    DadosNovos: ModelTypes['jsonb'];
    Id: ModelTypes['uuid'];
    Operacao: string;
    Tipo: string;
    Tipo_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "contatos.Logs" */
  ['contatos_Logs_aggregate']: {
    aggregate?: ModelTypes['contatos_Logs_aggregate_fields'];
    nodes: ModelTypes['contatos_Logs'][];
  };
  /** aggregate fields of "contatos.Logs" */
  ['contatos_Logs_aggregate_fields']: {
    count: number;
    max?: ModelTypes['contatos_Logs_max_fields'];
    min?: ModelTypes['contatos_Logs_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Logs_append_input']: GraphQLTypes['contatos_Logs_append_input'];
  /** Boolean expression to filter rows from the table "contatos.Logs". All fields are combined with a logical 'AND'. */
  ['contatos_Logs_bool_exp']: GraphQLTypes['contatos_Logs_bool_exp'];
  /** unique or primary key constraints on table "contatos.Logs" */
  ['contatos_Logs_constraint']: GraphQLTypes['contatos_Logs_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Logs_delete_at_path_input']: GraphQLTypes['contatos_Logs_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Logs_delete_elem_input']: GraphQLTypes['contatos_Logs_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Logs_delete_key_input']: GraphQLTypes['contatos_Logs_delete_key_input'];
  /** input type for inserting data into table "contatos.Logs" */
  ['contatos_Logs_insert_input']: GraphQLTypes['contatos_Logs_insert_input'];
  /** aggregate max on columns */
  ['contatos_Logs_max_fields']: {
    Id?: ModelTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['contatos_Logs_min_fields']: {
    Id?: ModelTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "contatos.Logs" */
  ['contatos_Logs_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['contatos_Logs'][];
  };
  /** on conflict condition type for table "contatos.Logs" */
  ['contatos_Logs_on_conflict']: GraphQLTypes['contatos_Logs_on_conflict'];
  /** Ordering options when selecting data from "contatos.Logs". */
  ['contatos_Logs_order_by']: GraphQLTypes['contatos_Logs_order_by'];
  /** primary key columns input for table: contatos_Logs */
  ['contatos_Logs_pk_columns_input']: GraphQLTypes['contatos_Logs_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Logs_prepend_input']: GraphQLTypes['contatos_Logs_prepend_input'];
  /** select columns of table "contatos.Logs" */
  ['contatos_Logs_select_column']: GraphQLTypes['contatos_Logs_select_column'];
  /** input type for updating data in table "contatos.Logs" */
  ['contatos_Logs_set_input']: GraphQLTypes['contatos_Logs_set_input'];
  /** update columns of table "contatos.Logs" */
  ['contatos_Logs_update_column']: GraphQLTypes['contatos_Logs_update_column'];
  /** columns and relationships of "contatos.Telefones" */
  ['contatos_Telefones']: {
    Categorias: ModelTypes['jsonb'];
    Id: ModelTypes['uuid'];
    Identidades: ModelTypes['jsonb'];
    NomeDoResponsavel?: string;
    Telefone: ModelTypes['bigint'];
    Tipos: ModelTypes['jsonb'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "contatos.Telefones" */
  ['contatos_Telefones_aggregate']: {
    aggregate?: ModelTypes['contatos_Telefones_aggregate_fields'];
    nodes: ModelTypes['contatos_Telefones'][];
  };
  /** aggregate fields of "contatos.Telefones" */
  ['contatos_Telefones_aggregate_fields']: {
    avg?: ModelTypes['contatos_Telefones_avg_fields'];
    count: number;
    max?: ModelTypes['contatos_Telefones_max_fields'];
    min?: ModelTypes['contatos_Telefones_min_fields'];
    stddev?: ModelTypes['contatos_Telefones_stddev_fields'];
    stddev_pop?: ModelTypes['contatos_Telefones_stddev_pop_fields'];
    stddev_samp?: ModelTypes['contatos_Telefones_stddev_samp_fields'];
    sum?: ModelTypes['contatos_Telefones_sum_fields'];
    var_pop?: ModelTypes['contatos_Telefones_var_pop_fields'];
    var_samp?: ModelTypes['contatos_Telefones_var_samp_fields'];
    variance?: ModelTypes['contatos_Telefones_variance_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Telefones_append_input']: GraphQLTypes['contatos_Telefones_append_input'];
  /** aggregate avg on columns */
  ['contatos_Telefones_avg_fields']: {
    Telefone?: number;
  };
  /** Boolean expression to filter rows from the table "contatos.Telefones". All fields are combined with a logical 'AND'. */
  ['contatos_Telefones_bool_exp']: GraphQLTypes['contatos_Telefones_bool_exp'];
  /** unique or primary key constraints on table "contatos.Telefones" */
  ['contatos_Telefones_constraint']: GraphQLTypes['contatos_Telefones_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Telefones_delete_at_path_input']: GraphQLTypes['contatos_Telefones_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Telefones_delete_elem_input']: GraphQLTypes['contatos_Telefones_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Telefones_delete_key_input']: GraphQLTypes['contatos_Telefones_delete_key_input'];
  /** input type for incrementing numeric columns in table "contatos.Telefones" */
  ['contatos_Telefones_inc_input']: GraphQLTypes['contatos_Telefones_inc_input'];
  /** input type for inserting data into table "contatos.Telefones" */
  ['contatos_Telefones_insert_input']: GraphQLTypes['contatos_Telefones_insert_input'];
  /** aggregate max on columns */
  ['contatos_Telefones_max_fields']: {
    Id?: ModelTypes['uuid'];
    NomeDoResponsavel?: string;
    Telefone?: ModelTypes['bigint'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['contatos_Telefones_min_fields']: {
    Id?: ModelTypes['uuid'];
    NomeDoResponsavel?: string;
    Telefone?: ModelTypes['bigint'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "contatos.Telefones" */
  ['contatos_Telefones_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['contatos_Telefones'][];
  };
  /** on conflict condition type for table "contatos.Telefones" */
  ['contatos_Telefones_on_conflict']: GraphQLTypes['contatos_Telefones_on_conflict'];
  /** Ordering options when selecting data from "contatos.Telefones". */
  ['contatos_Telefones_order_by']: GraphQLTypes['contatos_Telefones_order_by'];
  /** primary key columns input for table: contatos_Telefones */
  ['contatos_Telefones_pk_columns_input']: GraphQLTypes['contatos_Telefones_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Telefones_prepend_input']: GraphQLTypes['contatos_Telefones_prepend_input'];
  /** select columns of table "contatos.Telefones" */
  ['contatos_Telefones_select_column']: GraphQLTypes['contatos_Telefones_select_column'];
  /** input type for updating data in table "contatos.Telefones" */
  ['contatos_Telefones_set_input']: GraphQLTypes['contatos_Telefones_set_input'];
  /** aggregate stddev on columns */
  ['contatos_Telefones_stddev_fields']: {
    Telefone?: number;
  };
  /** aggregate stddev_pop on columns */
  ['contatos_Telefones_stddev_pop_fields']: {
    Telefone?: number;
  };
  /** aggregate stddev_samp on columns */
  ['contatos_Telefones_stddev_samp_fields']: {
    Telefone?: number;
  };
  /** aggregate sum on columns */
  ['contatos_Telefones_sum_fields']: {
    Telefone?: ModelTypes['bigint'];
  };
  /** update columns of table "contatos.Telefones" */
  ['contatos_Telefones_update_column']: GraphQLTypes['contatos_Telefones_update_column'];
  /** aggregate var_pop on columns */
  ['contatos_Telefones_var_pop_fields']: {
    Telefone?: number;
  };
  /** aggregate var_samp on columns */
  ['contatos_Telefones_var_samp_fields']: {
    Telefone?: number;
  };
  /** aggregate variance on columns */
  ['contatos_Telefones_variance_fields']: {
    Telefone?: number;
  };
  ['float8']: any;
  /** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
  ['float8_comparison_exp']: GraphQLTypes['float8_comparison_exp'];
  /** columns and relationships of "identidades.Clientes" */
  ['identidades_Clientes']: {
    Id: ModelTypes['uuid'];
    /** An array relationship */
    Leads: ModelTypes['clientes_Leads'][];
    /** An aggregate relationship */
    Leads_aggregate: ModelTypes['clientes_Leads_aggregate'];
    /** An object relationship */
    Pessoa: ModelTypes['identidades_Pessoas'];
    Pessoa_Id: ModelTypes['uuid'];
    /** An array relationship */
    Usuarios: ModelTypes['autenticacao_Usuarios'][];
    /** An aggregate relationship */
    Usuarios_aggregate: ModelTypes['autenticacao_Usuarios_aggregate'];
    /** An array relationship */
    Veiculos: ModelTypes['clientes_Veiculos'][];
    /** An array relationship */
    VeiculosAtivos: ModelTypes['clientes_VeiculosAtivos'][];
    /** An aggregate relationship */
    VeiculosAtivos_aggregate: ModelTypes['clientes_VeiculosAtivos_aggregate'];
    /** An aggregate relationship */
    Veiculos_aggregate: ModelTypes['clientes_Veiculos_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos']: {
    DataAprovado?: ModelTypes['timestamptz'];
    DataRecusado?: ModelTypes['timestamptz'];
    Id: ModelTypes['uuid'];
    MotivoRecusa?: string;
    Nome: string;
    /** An object relationship */
    Pessoa: ModelTypes['identidades_Pessoas'];
    Pessoa_Id: ModelTypes['uuid'];
    /** An object relationship */
    Situacao?: ModelTypes['identidades_Clientes_Documentos_Situacoes'];
    Situacao_Id?: ModelTypes['identidades_Clientes_Documentos_Situacoes_enum'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes']: {
    /** An array relationship */
    Clientes_Documentos: ModelTypes['identidades_Clientes_Documentos'][];
    /** An aggregate relationship */
    Clientes_Documentos_aggregate: ModelTypes['identidades_Clientes_Documentos_aggregate'];
    Comentario: string;
    Valor: string;
  };
  /** aggregated selection of "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_aggregate']: {
    aggregate?: ModelTypes['identidades_Clientes_Documentos_Situacoes_aggregate_fields'];
    nodes: ModelTypes['identidades_Clientes_Documentos_Situacoes'][];
  };
  /** aggregate fields of "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_aggregate_fields']: {
    count: number;
    max?: ModelTypes['identidades_Clientes_Documentos_Situacoes_max_fields'];
    min?: ModelTypes['identidades_Clientes_Documentos_Situacoes_min_fields'];
  };
  /** Boolean expression to filter rows from the table "identidades.Clientes_Documentos_Situacoes". All fields are combined with a logical 'AND'. */
  ['identidades_Clientes_Documentos_Situacoes_bool_exp']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_bool_exp'];
  /** unique or primary key constraints on table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_constraint']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_constraint'];
  ['identidades_Clientes_Documentos_Situacoes_enum']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_enum'];
  /** Boolean expression to compare columns of type "identidades_Clientes_Documentos_Situacoes_enum". All fields are combined with logical 'AND'. */
  ['identidades_Clientes_Documentos_Situacoes_enum_comparison_exp']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_enum_comparison_exp'];
  /** input type for inserting data into table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_insert_input']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_insert_input'];
  /** aggregate max on columns */
  ['identidades_Clientes_Documentos_Situacoes_max_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['identidades_Clientes_Documentos_Situacoes_min_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['identidades_Clientes_Documentos_Situacoes'][];
  };
  /** input type for inserting object relation for remote table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_obj_rel_insert_input']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_obj_rel_insert_input'];
  /** on conflict condition type for table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_on_conflict']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_on_conflict'];
  /** Ordering options when selecting data from "identidades.Clientes_Documentos_Situacoes". */
  ['identidades_Clientes_Documentos_Situacoes_order_by']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_order_by'];
  /** primary key columns input for table: identidades_Clientes_Documentos_Situacoes */
  ['identidades_Clientes_Documentos_Situacoes_pk_columns_input']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_pk_columns_input'];
  /** select columns of table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_select_column']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_select_column'];
  /** input type for updating data in table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_set_input']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_set_input'];
  /** update columns of table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_update_column']: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_update_column'];
  /** aggregated selection of "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_aggregate']: {
    aggregate?: ModelTypes['identidades_Clientes_Documentos_aggregate_fields'];
    nodes: ModelTypes['identidades_Clientes_Documentos'][];
  };
  /** aggregate fields of "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['identidades_Clientes_Documentos_max_fields'];
    min?: ModelTypes['identidades_Clientes_Documentos_min_fields'];
  };
  /** order by aggregate values of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_aggregate_order_by']: GraphQLTypes['identidades_Clientes_Documentos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_arr_rel_insert_input']: GraphQLTypes['identidades_Clientes_Documentos_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "identidades.Clientes_Documentos". All fields are combined with a logical 'AND'. */
  ['identidades_Clientes_Documentos_bool_exp']: GraphQLTypes['identidades_Clientes_Documentos_bool_exp'];
  /** unique or primary key constraints on table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_constraint']: GraphQLTypes['identidades_Clientes_Documentos_constraint'];
  /** input type for inserting data into table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_insert_input']: GraphQLTypes['identidades_Clientes_Documentos_insert_input'];
  /** aggregate max on columns */
  ['identidades_Clientes_Documentos_max_fields']: {
    DataAprovado?: ModelTypes['timestamptz'];
    DataRecusado?: ModelTypes['timestamptz'];
    Id?: ModelTypes['uuid'];
    MotivoRecusa?: string;
    Nome?: string;
    Pessoa_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_max_order_by']: GraphQLTypes['identidades_Clientes_Documentos_max_order_by'];
  /** aggregate min on columns */
  ['identidades_Clientes_Documentos_min_fields']: {
    DataAprovado?: ModelTypes['timestamptz'];
    DataRecusado?: ModelTypes['timestamptz'];
    Id?: ModelTypes['uuid'];
    MotivoRecusa?: string;
    Nome?: string;
    Pessoa_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_min_order_by']: GraphQLTypes['identidades_Clientes_Documentos_min_order_by'];
  /** response of any mutation on the table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['identidades_Clientes_Documentos'][];
  };
  /** on conflict condition type for table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_on_conflict']: GraphQLTypes['identidades_Clientes_Documentos_on_conflict'];
  /** Ordering options when selecting data from "identidades.Clientes_Documentos". */
  ['identidades_Clientes_Documentos_order_by']: GraphQLTypes['identidades_Clientes_Documentos_order_by'];
  /** primary key columns input for table: identidades_Clientes_Documentos */
  ['identidades_Clientes_Documentos_pk_columns_input']: GraphQLTypes['identidades_Clientes_Documentos_pk_columns_input'];
  /** select columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_select_column']: GraphQLTypes['identidades_Clientes_Documentos_select_column'];
  /** input type for updating data in table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_set_input']: GraphQLTypes['identidades_Clientes_Documentos_set_input'];
  /** update columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_update_column']: GraphQLTypes['identidades_Clientes_Documentos_update_column'];
  /** aggregated selection of "identidades.Clientes" */
  ['identidades_Clientes_aggregate']: {
    aggregate?: ModelTypes['identidades_Clientes_aggregate_fields'];
    nodes: ModelTypes['identidades_Clientes'][];
  };
  /** aggregate fields of "identidades.Clientes" */
  ['identidades_Clientes_aggregate_fields']: {
    count: number;
    max?: ModelTypes['identidades_Clientes_max_fields'];
    min?: ModelTypes['identidades_Clientes_min_fields'];
  };
  /** Boolean expression to filter rows from the table "identidades.Clientes". All fields are combined with a logical 'AND'. */
  ['identidades_Clientes_bool_exp']: GraphQLTypes['identidades_Clientes_bool_exp'];
  /** unique or primary key constraints on table "identidades.Clientes" */
  ['identidades_Clientes_constraint']: GraphQLTypes['identidades_Clientes_constraint'];
  /** input type for inserting data into table "identidades.Clientes" */
  ['identidades_Clientes_insert_input']: GraphQLTypes['identidades_Clientes_insert_input'];
  /** aggregate max on columns */
  ['identidades_Clientes_max_fields']: {
    Id?: ModelTypes['uuid'];
    Pessoa_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['identidades_Clientes_min_fields']: {
    Id?: ModelTypes['uuid'];
    Pessoa_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "identidades.Clientes" */
  ['identidades_Clientes_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['identidades_Clientes'][];
  };
  /** input type for inserting object relation for remote table "identidades.Clientes" */
  ['identidades_Clientes_obj_rel_insert_input']: GraphQLTypes['identidades_Clientes_obj_rel_insert_input'];
  /** on conflict condition type for table "identidades.Clientes" */
  ['identidades_Clientes_on_conflict']: GraphQLTypes['identidades_Clientes_on_conflict'];
  /** Ordering options when selecting data from "identidades.Clientes". */
  ['identidades_Clientes_order_by']: GraphQLTypes['identidades_Clientes_order_by'];
  /** primary key columns input for table: identidades_Clientes */
  ['identidades_Clientes_pk_columns_input']: GraphQLTypes['identidades_Clientes_pk_columns_input'];
  /** select columns of table "identidades.Clientes" */
  ['identidades_Clientes_select_column']: GraphQLTypes['identidades_Clientes_select_column'];
  /** input type for updating data in table "identidades.Clientes" */
  ['identidades_Clientes_set_input']: GraphQLTypes['identidades_Clientes_set_input'];
  /** update columns of table "identidades.Clientes" */
  ['identidades_Clientes_update_column']: GraphQLTypes['identidades_Clientes_update_column'];
  /** columns and relationships of "identidades.Colaboradores" */
  ['identidades_Colaboradores']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Pessoa: ModelTypes['identidades_Pessoas'];
    Pessoa_Id: ModelTypes['uuid'];
    /** An array relationship */
    Usuarios: ModelTypes['autenticacao_Usuarios'][];
    /** An aggregate relationship */
    Usuarios_aggregate: ModelTypes['autenticacao_Usuarios_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Colaboradores" */
  ['identidades_Colaboradores_aggregate']: {
    aggregate?: ModelTypes['identidades_Colaboradores_aggregate_fields'];
    nodes: ModelTypes['identidades_Colaboradores'][];
  };
  /** aggregate fields of "identidades.Colaboradores" */
  ['identidades_Colaboradores_aggregate_fields']: {
    count: number;
    max?: ModelTypes['identidades_Colaboradores_max_fields'];
    min?: ModelTypes['identidades_Colaboradores_min_fields'];
  };
  /** order by aggregate values of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_aggregate_order_by']: GraphQLTypes['identidades_Colaboradores_aggregate_order_by'];
  /** input type for inserting array relation for remote table "identidades.Colaboradores" */
  ['identidades_Colaboradores_arr_rel_insert_input']: GraphQLTypes['identidades_Colaboradores_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "identidades.Colaboradores". All fields are combined with a logical 'AND'. */
  ['identidades_Colaboradores_bool_exp']: GraphQLTypes['identidades_Colaboradores_bool_exp'];
  /** unique or primary key constraints on table "identidades.Colaboradores" */
  ['identidades_Colaboradores_constraint']: GraphQLTypes['identidades_Colaboradores_constraint'];
  /** input type for inserting data into table "identidades.Colaboradores" */
  ['identidades_Colaboradores_insert_input']: GraphQLTypes['identidades_Colaboradores_insert_input'];
  /** aggregate max on columns */
  ['identidades_Colaboradores_max_fields']: {
    Id?: ModelTypes['uuid'];
    Pessoa_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_max_order_by']: GraphQLTypes['identidades_Colaboradores_max_order_by'];
  /** aggregate min on columns */
  ['identidades_Colaboradores_min_fields']: {
    Id?: ModelTypes['uuid'];
    Pessoa_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_min_order_by']: GraphQLTypes['identidades_Colaboradores_min_order_by'];
  /** response of any mutation on the table "identidades.Colaboradores" */
  ['identidades_Colaboradores_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['identidades_Colaboradores'][];
  };
  /** input type for inserting object relation for remote table "identidades.Colaboradores" */
  ['identidades_Colaboradores_obj_rel_insert_input']: GraphQLTypes['identidades_Colaboradores_obj_rel_insert_input'];
  /** on conflict condition type for table "identidades.Colaboradores" */
  ['identidades_Colaboradores_on_conflict']: GraphQLTypes['identidades_Colaboradores_on_conflict'];
  /** Ordering options when selecting data from "identidades.Colaboradores". */
  ['identidades_Colaboradores_order_by']: GraphQLTypes['identidades_Colaboradores_order_by'];
  /** primary key columns input for table: identidades_Colaboradores */
  ['identidades_Colaboradores_pk_columns_input']: GraphQLTypes['identidades_Colaboradores_pk_columns_input'];
  /** select columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_select_column']: GraphQLTypes['identidades_Colaboradores_select_column'];
  /** input type for updating data in table "identidades.Colaboradores" */
  ['identidades_Colaboradores_set_input']: GraphQLTypes['identidades_Colaboradores_set_input'];
  /** update columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_update_column']: GraphQLTypes['identidades_Colaboradores_update_column'];
  /** columns and relationships of "identidades.Fornecedores" */
  ['identidades_Fornecedores']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Pessoa: ModelTypes['identidades_Pessoas'];
    Pessoa_Id: ModelTypes['uuid'];
    PrecoDoKm?: ModelTypes['float8'];
    PrestadorDeServico: boolean;
    /** An array relationship */
    Vendedores: ModelTypes['identidades_Vendedores'][];
    /** An aggregate relationship */
    Vendedores_aggregate: ModelTypes['identidades_Vendedores_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Fornecedores" */
  ['identidades_Fornecedores_aggregate']: {
    aggregate?: ModelTypes['identidades_Fornecedores_aggregate_fields'];
    nodes: ModelTypes['identidades_Fornecedores'][];
  };
  /** aggregate fields of "identidades.Fornecedores" */
  ['identidades_Fornecedores_aggregate_fields']: {
    avg?: ModelTypes['identidades_Fornecedores_avg_fields'];
    count: number;
    max?: ModelTypes['identidades_Fornecedores_max_fields'];
    min?: ModelTypes['identidades_Fornecedores_min_fields'];
    stddev?: ModelTypes['identidades_Fornecedores_stddev_fields'];
    stddev_pop?: ModelTypes['identidades_Fornecedores_stddev_pop_fields'];
    stddev_samp?: ModelTypes['identidades_Fornecedores_stddev_samp_fields'];
    sum?: ModelTypes['identidades_Fornecedores_sum_fields'];
    var_pop?: ModelTypes['identidades_Fornecedores_var_pop_fields'];
    var_samp?: ModelTypes['identidades_Fornecedores_var_samp_fields'];
    variance?: ModelTypes['identidades_Fornecedores_variance_fields'];
  };
  /** aggregate avg on columns */
  ['identidades_Fornecedores_avg_fields']: {
    PrecoDoKm?: number;
  };
  /** Boolean expression to filter rows from the table "identidades.Fornecedores". All fields are combined with a logical 'AND'. */
  ['identidades_Fornecedores_bool_exp']: GraphQLTypes['identidades_Fornecedores_bool_exp'];
  /** unique or primary key constraints on table "identidades.Fornecedores" */
  ['identidades_Fornecedores_constraint']: GraphQLTypes['identidades_Fornecedores_constraint'];
  /** input type for incrementing numeric columns in table "identidades.Fornecedores" */
  ['identidades_Fornecedores_inc_input']: GraphQLTypes['identidades_Fornecedores_inc_input'];
  /** input type for inserting data into table "identidades.Fornecedores" */
  ['identidades_Fornecedores_insert_input']: GraphQLTypes['identidades_Fornecedores_insert_input'];
  /** aggregate max on columns */
  ['identidades_Fornecedores_max_fields']: {
    Id?: ModelTypes['uuid'];
    Pessoa_Id?: ModelTypes['uuid'];
    PrecoDoKm?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['identidades_Fornecedores_min_fields']: {
    Id?: ModelTypes['uuid'];
    Pessoa_Id?: ModelTypes['uuid'];
    PrecoDoKm?: ModelTypes['float8'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "identidades.Fornecedores" */
  ['identidades_Fornecedores_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['identidades_Fornecedores'][];
  };
  /** input type for inserting object relation for remote table "identidades.Fornecedores" */
  ['identidades_Fornecedores_obj_rel_insert_input']: GraphQLTypes['identidades_Fornecedores_obj_rel_insert_input'];
  /** on conflict condition type for table "identidades.Fornecedores" */
  ['identidades_Fornecedores_on_conflict']: GraphQLTypes['identidades_Fornecedores_on_conflict'];
  /** Ordering options when selecting data from "identidades.Fornecedores". */
  ['identidades_Fornecedores_order_by']: GraphQLTypes['identidades_Fornecedores_order_by'];
  /** primary key columns input for table: identidades_Fornecedores */
  ['identidades_Fornecedores_pk_columns_input']: GraphQLTypes['identidades_Fornecedores_pk_columns_input'];
  /** select columns of table "identidades.Fornecedores" */
  ['identidades_Fornecedores_select_column']: GraphQLTypes['identidades_Fornecedores_select_column'];
  /** input type for updating data in table "identidades.Fornecedores" */
  ['identidades_Fornecedores_set_input']: GraphQLTypes['identidades_Fornecedores_set_input'];
  /** aggregate stddev on columns */
  ['identidades_Fornecedores_stddev_fields']: {
    PrecoDoKm?: number;
  };
  /** aggregate stddev_pop on columns */
  ['identidades_Fornecedores_stddev_pop_fields']: {
    PrecoDoKm?: number;
  };
  /** aggregate stddev_samp on columns */
  ['identidades_Fornecedores_stddev_samp_fields']: {
    PrecoDoKm?: number;
  };
  /** aggregate sum on columns */
  ['identidades_Fornecedores_sum_fields']: {
    PrecoDoKm?: ModelTypes['float8'];
  };
  /** update columns of table "identidades.Fornecedores" */
  ['identidades_Fornecedores_update_column']: GraphQLTypes['identidades_Fornecedores_update_column'];
  /** aggregate var_pop on columns */
  ['identidades_Fornecedores_var_pop_fields']: {
    PrecoDoKm?: number;
  };
  /** aggregate var_samp on columns */
  ['identidades_Fornecedores_var_samp_fields']: {
    PrecoDoKm?: number;
  };
  /** aggregate variance on columns */
  ['identidades_Fornecedores_variance_fields']: {
    PrecoDoKm?: number;
  };
  /** columns and relationships of "identidades.Logs" */
  ['identidades_Logs']: {
    DadosAntigos: ModelTypes['jsonb'];
    DadosNovos: ModelTypes['jsonb'];
    Id: ModelTypes['uuid'];
    Operacao: string;
    Tipo: string;
    Tipo_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Logs" */
  ['identidades_Logs_aggregate']: {
    aggregate?: ModelTypes['identidades_Logs_aggregate_fields'];
    nodes: ModelTypes['identidades_Logs'][];
  };
  /** aggregate fields of "identidades.Logs" */
  ['identidades_Logs_aggregate_fields']: {
    count: number;
    max?: ModelTypes['identidades_Logs_max_fields'];
    min?: ModelTypes['identidades_Logs_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Logs_append_input']: GraphQLTypes['identidades_Logs_append_input'];
  /** Boolean expression to filter rows from the table "identidades.Logs". All fields are combined with a logical 'AND'. */
  ['identidades_Logs_bool_exp']: GraphQLTypes['identidades_Logs_bool_exp'];
  /** unique or primary key constraints on table "identidades.Logs" */
  ['identidades_Logs_constraint']: GraphQLTypes['identidades_Logs_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['identidades_Logs_delete_at_path_input']: GraphQLTypes['identidades_Logs_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['identidades_Logs_delete_elem_input']: GraphQLTypes['identidades_Logs_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['identidades_Logs_delete_key_input']: GraphQLTypes['identidades_Logs_delete_key_input'];
  /** input type for inserting data into table "identidades.Logs" */
  ['identidades_Logs_insert_input']: GraphQLTypes['identidades_Logs_insert_input'];
  /** aggregate max on columns */
  ['identidades_Logs_max_fields']: {
    Id?: ModelTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['identidades_Logs_min_fields']: {
    Id?: ModelTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "identidades.Logs" */
  ['identidades_Logs_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['identidades_Logs'][];
  };
  /** on conflict condition type for table "identidades.Logs" */
  ['identidades_Logs_on_conflict']: GraphQLTypes['identidades_Logs_on_conflict'];
  /** Ordering options when selecting data from "identidades.Logs". */
  ['identidades_Logs_order_by']: GraphQLTypes['identidades_Logs_order_by'];
  /** primary key columns input for table: identidades_Logs */
  ['identidades_Logs_pk_columns_input']: GraphQLTypes['identidades_Logs_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Logs_prepend_input']: GraphQLTypes['identidades_Logs_prepend_input'];
  /** select columns of table "identidades.Logs" */
  ['identidades_Logs_select_column']: GraphQLTypes['identidades_Logs_select_column'];
  /** input type for updating data in table "identidades.Logs" */
  ['identidades_Logs_set_input']: GraphQLTypes['identidades_Logs_set_input'];
  /** update columns of table "identidades.Logs" */
  ['identidades_Logs_update_column']: GraphQLTypes['identidades_Logs_update_column'];
  /** columns and relationships of "identidades.Pessoas" */
  ['identidades_Pessoas']: {
    /** An object relationship */
    Cliente?: ModelTypes['identidades_Clientes'];
    /** An array relationship */
    Colaboradores: ModelTypes['identidades_Colaboradores'][];
    /** An aggregate relationship */
    Colaboradores_aggregate: ModelTypes['identidades_Colaboradores_aggregate'];
    DadosDaApi: ModelTypes['jsonb'];
    /** An array relationship */
    Documentos: ModelTypes['identidades_Clientes_Documentos'][];
    /** An aggregate relationship */
    Documentos_aggregate: ModelTypes['identidades_Clientes_Documentos_aggregate'];
    /** An object relationship */
    Fornecedor?: ModelTypes['identidades_Fornecedores'];
    Id: ModelTypes['uuid'];
    Identificador: string;
    Nome: string;
    PessoaJuridica: boolean;
    /** An array relationship */
    Representantes: ModelTypes['identidades_Representantes'][];
    /** An aggregate relationship */
    Representantes_aggregate: ModelTypes['identidades_Representantes_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Pessoas" */
  ['identidades_Pessoas_aggregate']: {
    aggregate?: ModelTypes['identidades_Pessoas_aggregate_fields'];
    nodes: ModelTypes['identidades_Pessoas'][];
  };
  /** aggregate fields of "identidades.Pessoas" */
  ['identidades_Pessoas_aggregate_fields']: {
    count: number;
    max?: ModelTypes['identidades_Pessoas_max_fields'];
    min?: ModelTypes['identidades_Pessoas_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Pessoas_append_input']: GraphQLTypes['identidades_Pessoas_append_input'];
  /** Boolean expression to filter rows from the table "identidades.Pessoas". All fields are combined with a logical 'AND'. */
  ['identidades_Pessoas_bool_exp']: GraphQLTypes['identidades_Pessoas_bool_exp'];
  /** unique or primary key constraints on table "identidades.Pessoas" */
  ['identidades_Pessoas_constraint']: GraphQLTypes['identidades_Pessoas_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['identidades_Pessoas_delete_at_path_input']: GraphQLTypes['identidades_Pessoas_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['identidades_Pessoas_delete_elem_input']: GraphQLTypes['identidades_Pessoas_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['identidades_Pessoas_delete_key_input']: GraphQLTypes['identidades_Pessoas_delete_key_input'];
  /** input type for inserting data into table "identidades.Pessoas" */
  ['identidades_Pessoas_insert_input']: GraphQLTypes['identidades_Pessoas_insert_input'];
  /** aggregate max on columns */
  ['identidades_Pessoas_max_fields']: {
    Id?: ModelTypes['uuid'];
    Identificador?: string;
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['identidades_Pessoas_min_fields']: {
    Id?: ModelTypes['uuid'];
    Identificador?: string;
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "identidades.Pessoas" */
  ['identidades_Pessoas_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['identidades_Pessoas'][];
  };
  /** input type for inserting object relation for remote table "identidades.Pessoas" */
  ['identidades_Pessoas_obj_rel_insert_input']: GraphQLTypes['identidades_Pessoas_obj_rel_insert_input'];
  /** on conflict condition type for table "identidades.Pessoas" */
  ['identidades_Pessoas_on_conflict']: GraphQLTypes['identidades_Pessoas_on_conflict'];
  /** Ordering options when selecting data from "identidades.Pessoas". */
  ['identidades_Pessoas_order_by']: GraphQLTypes['identidades_Pessoas_order_by'];
  /** primary key columns input for table: identidades_Pessoas */
  ['identidades_Pessoas_pk_columns_input']: GraphQLTypes['identidades_Pessoas_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Pessoas_prepend_input']: GraphQLTypes['identidades_Pessoas_prepend_input'];
  /** select columns of table "identidades.Pessoas" */
  ['identidades_Pessoas_select_column']: GraphQLTypes['identidades_Pessoas_select_column'];
  /** input type for updating data in table "identidades.Pessoas" */
  ['identidades_Pessoas_set_input']: GraphQLTypes['identidades_Pessoas_set_input'];
  /** update columns of table "identidades.Pessoas" */
  ['identidades_Pessoas_update_column']: GraphQLTypes['identidades_Pessoas_update_column'];
  /** columns and relationships of "identidades.Representantes" */
  ['identidades_Representantes']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Pessoa: ModelTypes['identidades_Pessoas'];
    /** An object relationship */
    PessoaRepresentada?: ModelTypes['identidades_Pessoas'];
    PessoaRepresentada_Id: ModelTypes['uuid'];
    Pessoa_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Representantes" */
  ['identidades_Representantes_aggregate']: {
    aggregate?: ModelTypes['identidades_Representantes_aggregate_fields'];
    nodes: ModelTypes['identidades_Representantes'][];
  };
  /** aggregate fields of "identidades.Representantes" */
  ['identidades_Representantes_aggregate_fields']: {
    count: number;
    max?: ModelTypes['identidades_Representantes_max_fields'];
    min?: ModelTypes['identidades_Representantes_min_fields'];
  };
  /** order by aggregate values of table "identidades.Representantes" */
  ['identidades_Representantes_aggregate_order_by']: GraphQLTypes['identidades_Representantes_aggregate_order_by'];
  /** input type for inserting array relation for remote table "identidades.Representantes" */
  ['identidades_Representantes_arr_rel_insert_input']: GraphQLTypes['identidades_Representantes_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "identidades.Representantes". All fields are combined with a logical 'AND'. */
  ['identidades_Representantes_bool_exp']: GraphQLTypes['identidades_Representantes_bool_exp'];
  /** unique or primary key constraints on table "identidades.Representantes" */
  ['identidades_Representantes_constraint']: GraphQLTypes['identidades_Representantes_constraint'];
  /** input type for inserting data into table "identidades.Representantes" */
  ['identidades_Representantes_insert_input']: GraphQLTypes['identidades_Representantes_insert_input'];
  /** aggregate max on columns */
  ['identidades_Representantes_max_fields']: {
    Id?: ModelTypes['uuid'];
    PessoaRepresentada_Id?: ModelTypes['uuid'];
    Pessoa_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "identidades.Representantes" */
  ['identidades_Representantes_max_order_by']: GraphQLTypes['identidades_Representantes_max_order_by'];
  /** aggregate min on columns */
  ['identidades_Representantes_min_fields']: {
    Id?: ModelTypes['uuid'];
    PessoaRepresentada_Id?: ModelTypes['uuid'];
    Pessoa_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "identidades.Representantes" */
  ['identidades_Representantes_min_order_by']: GraphQLTypes['identidades_Representantes_min_order_by'];
  /** response of any mutation on the table "identidades.Representantes" */
  ['identidades_Representantes_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['identidades_Representantes'][];
  };
  /** on conflict condition type for table "identidades.Representantes" */
  ['identidades_Representantes_on_conflict']: GraphQLTypes['identidades_Representantes_on_conflict'];
  /** Ordering options when selecting data from "identidades.Representantes". */
  ['identidades_Representantes_order_by']: GraphQLTypes['identidades_Representantes_order_by'];
  /** primary key columns input for table: identidades_Representantes */
  ['identidades_Representantes_pk_columns_input']: GraphQLTypes['identidades_Representantes_pk_columns_input'];
  /** select columns of table "identidades.Representantes" */
  ['identidades_Representantes_select_column']: GraphQLTypes['identidades_Representantes_select_column'];
  /** input type for updating data in table "identidades.Representantes" */
  ['identidades_Representantes_set_input']: GraphQLTypes['identidades_Representantes_set_input'];
  /** update columns of table "identidades.Representantes" */
  ['identidades_Representantes_update_column']: GraphQLTypes['identidades_Representantes_update_column'];
  /** columns and relationships of "identidades.Vendedores" */
  ['identidades_Vendedores']: {
    Emails?: ModelTypes['jsonb'];
    /** An object relationship */
    Fornecedor: ModelTypes['identidades_Fornecedores'];
    Fornecedor_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    Nome: string;
    Telefones?: ModelTypes['jsonb'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Vendedores" */
  ['identidades_Vendedores_aggregate']: {
    aggregate?: ModelTypes['identidades_Vendedores_aggregate_fields'];
    nodes: ModelTypes['identidades_Vendedores'][];
  };
  /** aggregate fields of "identidades.Vendedores" */
  ['identidades_Vendedores_aggregate_fields']: {
    count: number;
    max?: ModelTypes['identidades_Vendedores_max_fields'];
    min?: ModelTypes['identidades_Vendedores_min_fields'];
  };
  /** order by aggregate values of table "identidades.Vendedores" */
  ['identidades_Vendedores_aggregate_order_by']: GraphQLTypes['identidades_Vendedores_aggregate_order_by'];
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Vendedores_append_input']: GraphQLTypes['identidades_Vendedores_append_input'];
  /** input type for inserting array relation for remote table "identidades.Vendedores" */
  ['identidades_Vendedores_arr_rel_insert_input']: GraphQLTypes['identidades_Vendedores_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "identidades.Vendedores". All fields are combined with a logical 'AND'. */
  ['identidades_Vendedores_bool_exp']: GraphQLTypes['identidades_Vendedores_bool_exp'];
  /** unique or primary key constraints on table "identidades.Vendedores" */
  ['identidades_Vendedores_constraint']: GraphQLTypes['identidades_Vendedores_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['identidades_Vendedores_delete_at_path_input']: GraphQLTypes['identidades_Vendedores_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['identidades_Vendedores_delete_elem_input']: GraphQLTypes['identidades_Vendedores_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['identidades_Vendedores_delete_key_input']: GraphQLTypes['identidades_Vendedores_delete_key_input'];
  /** input type for inserting data into table "identidades.Vendedores" */
  ['identidades_Vendedores_insert_input']: GraphQLTypes['identidades_Vendedores_insert_input'];
  /** aggregate max on columns */
  ['identidades_Vendedores_max_fields']: {
    Fornecedor_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_max_order_by']: GraphQLTypes['identidades_Vendedores_max_order_by'];
  /** aggregate min on columns */
  ['identidades_Vendedores_min_fields']: {
    Fornecedor_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_min_order_by']: GraphQLTypes['identidades_Vendedores_min_order_by'];
  /** response of any mutation on the table "identidades.Vendedores" */
  ['identidades_Vendedores_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['identidades_Vendedores'][];
  };
  /** on conflict condition type for table "identidades.Vendedores" */
  ['identidades_Vendedores_on_conflict']: GraphQLTypes['identidades_Vendedores_on_conflict'];
  /** Ordering options when selecting data from "identidades.Vendedores". */
  ['identidades_Vendedores_order_by']: GraphQLTypes['identidades_Vendedores_order_by'];
  /** primary key columns input for table: identidades_Vendedores */
  ['identidades_Vendedores_pk_columns_input']: GraphQLTypes['identidades_Vendedores_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Vendedores_prepend_input']: GraphQLTypes['identidades_Vendedores_prepend_input'];
  /** select columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_select_column']: GraphQLTypes['identidades_Vendedores_select_column'];
  /** input type for updating data in table "identidades.Vendedores" */
  ['identidades_Vendedores_set_input']: GraphQLTypes['identidades_Vendedores_set_input'];
  /** update columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_update_column']: GraphQLTypes['identidades_Vendedores_update_column'];
  ['jsonb']: any;
  /** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
  ['jsonb_comparison_exp']: GraphQLTypes['jsonb_comparison_exp'];
  /** mutation root */
  ['mutation_root']: {
    CadastrarCliente?: ModelTypes['CadastrarClienteOutput'];
    CadastrarColaborador?: ModelTypes['CadastrarColaboradorOutput'];
    CadastrarFornecedor?: ModelTypes['CadastrarFornecedorOutput'];
    CadastrarRepresentante?: ModelTypes['CadastrarRepresentanteOutput'];
    /** delete data from the table: "CategoriasDeVeiculos" */
    delete_CategoriasDeVeiculos?: ModelTypes['CategoriasDeVeiculos_mutation_response'];
    /** delete single row from the table: "CategoriasDeVeiculos" */
    delete_CategoriasDeVeiculos_by_pk?: ModelTypes['CategoriasDeVeiculos'];
    /** delete data from the table: "EstadosEMunicipios" */
    delete_EstadosEMunicipios?: ModelTypes['EstadosEMunicipios_mutation_response'];
    /** delete single row from the table: "EstadosEMunicipios" */
    delete_EstadosEMunicipios_by_pk?: ModelTypes['EstadosEMunicipios'];
    /** delete data from the table: "atendimentos.EtapasDosFluxos" */
    delete_atendimentos_EtapasDosFluxos?: ModelTypes['atendimentos_EtapasDosFluxos_mutation_response'];
    /** delete single row from the table: "atendimentos.EtapasDosFluxos" */
    delete_atendimentos_EtapasDosFluxos_by_pk?: ModelTypes['atendimentos_EtapasDosFluxos'];
    /** delete data from the table: "atendimentos.Fluxos" */
    delete_atendimentos_Fluxos?: ModelTypes['atendimentos_Fluxos_mutation_response'];
    /** delete single row from the table: "atendimentos.Fluxos" */
    delete_atendimentos_Fluxos_by_pk?: ModelTypes['atendimentos_Fluxos'];
    /** delete data from the table: "atendimentos.Tickets" */
    delete_atendimentos_Tickets?: ModelTypes['atendimentos_Tickets_mutation_response'];
    /** delete single row from the table: "atendimentos.Tickets" */
    delete_atendimentos_Tickets_by_pk?: ModelTypes['atendimentos_Tickets'];
    /** delete data from the table: "atendimentos.TiposDeTickets" */
    delete_atendimentos_TiposDeTickets?: ModelTypes['atendimentos_TiposDeTickets_mutation_response'];
    /** delete single row from the table: "atendimentos.TiposDeTickets" */
    delete_atendimentos_TiposDeTickets_by_pk?: ModelTypes['atendimentos_TiposDeTickets'];
    /** delete data from the table: "autenticacao.Atendentes" */
    delete_autenticacao_Atendentes?: ModelTypes['autenticacao_Atendentes_mutation_response'];
    /** delete single row from the table: "autenticacao.Atendentes" */
    delete_autenticacao_Atendentes_by_pk?: ModelTypes['autenticacao_Atendentes'];
    /** delete data from the table: "autenticacao.Usuarios" */
    delete_autenticacao_Usuarios?: ModelTypes['autenticacao_Usuarios_mutation_response'];
    /** delete single row from the table: "autenticacao.Usuarios" */
    delete_autenticacao_Usuarios_by_pk?: ModelTypes['autenticacao_Usuarios'];
    /** delete data from the table: "clientes.Leads" */
    delete_clientes_Leads?: ModelTypes['clientes_Leads_mutation_response'];
    /** delete single row from the table: "clientes.Leads" */
    delete_clientes_Leads_by_pk?: ModelTypes['clientes_Leads'];
    /** delete data from the table: "clientes.PerfisComerciais" */
    delete_clientes_PerfisComerciais?: ModelTypes['clientes_PerfisComerciais_mutation_response'];
    /** delete single row from the table: "clientes.PerfisComerciais" */
    delete_clientes_PerfisComerciais_by_pk?: ModelTypes['clientes_PerfisComerciais'];
    /** delete data from the table: "clientes.Veiculos" */
    delete_clientes_Veiculos?: ModelTypes['clientes_Veiculos_mutation_response'];
    /** delete data from the table: "clientes.VeiculosAtivos" */
    delete_clientes_VeiculosAtivos?: ModelTypes['clientes_VeiculosAtivos_mutation_response'];
    /** delete data from the table: "clientes.VeiculosAtivos_Beneficios" */
    delete_clientes_VeiculosAtivos_Beneficios?: ModelTypes['clientes_VeiculosAtivos_Beneficios_mutation_response'];
    /** delete single row from the table: "clientes.VeiculosAtivos_Beneficios" */
    delete_clientes_VeiculosAtivos_Beneficios_by_pk?: ModelTypes['clientes_VeiculosAtivos_Beneficios'];
    /** delete data from the table: "clientes.VeiculosAtivos_Produtos" */
    delete_clientes_VeiculosAtivos_Produtos?: ModelTypes['clientes_VeiculosAtivos_Produtos_mutation_response'];
    /** delete single row from the table: "clientes.VeiculosAtivos_Produtos" */
    delete_clientes_VeiculosAtivos_Produtos_by_pk?: ModelTypes['clientes_VeiculosAtivos_Produtos'];
    /** delete data from the table: "clientes.VeiculosAtivos_Servicos" */
    delete_clientes_VeiculosAtivos_Servicos?: ModelTypes['clientes_VeiculosAtivos_Servicos_mutation_response'];
    /** delete single row from the table: "clientes.VeiculosAtivos_Servicos" */
    delete_clientes_VeiculosAtivos_Servicos_by_pk?: ModelTypes['clientes_VeiculosAtivos_Servicos'];
    /** delete data from the table: "clientes.VeiculosAtivos_Situacao" */
    delete_clientes_VeiculosAtivos_Situacao?: ModelTypes['clientes_VeiculosAtivos_Situacao_mutation_response'];
    /** delete single row from the table: "clientes.VeiculosAtivos_Situacao" */
    delete_clientes_VeiculosAtivos_Situacao_by_pk?: ModelTypes['clientes_VeiculosAtivos_Situacao'];
    /** delete single row from the table: "clientes.VeiculosAtivos" */
    delete_clientes_VeiculosAtivos_by_pk?: ModelTypes['clientes_VeiculosAtivos'];
    /** delete single row from the table: "clientes.Veiculos" */
    delete_clientes_Veiculos_by_pk?: ModelTypes['clientes_Veiculos'];
    /** delete data from the table: "comercial.Acoes" */
    delete_comercial_Acoes?: ModelTypes['comercial_Acoes_mutation_response'];
    /** delete single row from the table: "comercial.Acoes" */
    delete_comercial_Acoes_by_pk?: ModelTypes['comercial_Acoes'];
    /** delete data from the table: "comercial.Atributos" */
    delete_comercial_Atributos?: ModelTypes['comercial_Atributos_mutation_response'];
    /** delete single row from the table: "comercial.Atributos" */
    delete_comercial_Atributos_by_pk?: ModelTypes['comercial_Atributos'];
    /** delete data from the table: "comercial.Coberturas" */
    delete_comercial_Coberturas?: ModelTypes['comercial_Coberturas_mutation_response'];
    /** delete single row from the table: "comercial.Coberturas" */
    delete_comercial_Coberturas_by_pk?: ModelTypes['comercial_Coberturas'];
    /** delete data from the table: "comercial.Combos" */
    delete_comercial_Combos?: ModelTypes['comercial_Combos_mutation_response'];
    /** delete data from the table: "comercial.Combos_Combos" */
    delete_comercial_Combos_Combos?: ModelTypes['comercial_Combos_Combos_mutation_response'];
    /** delete single row from the table: "comercial.Combos_Combos" */
    delete_comercial_Combos_Combos_by_pk?: ModelTypes['comercial_Combos_Combos'];
    /** delete data from the table: "comercial.Combos_Planos" */
    delete_comercial_Combos_Planos?: ModelTypes['comercial_Combos_Planos_mutation_response'];
    /** delete single row from the table: "comercial.Combos_Planos" */
    delete_comercial_Combos_Planos_by_pk?: ModelTypes['comercial_Combos_Planos'];
    /** delete data from the table: "comercial.Combos_Precos" */
    delete_comercial_Combos_Precos?: ModelTypes['comercial_Combos_Precos_mutation_response'];
    /** delete single row from the table: "comercial.Combos_Precos" */
    delete_comercial_Combos_Precos_by_pk?: ModelTypes['comercial_Combos_Precos'];
    /** delete data from the table: "comercial.Combos_Produtos" */
    delete_comercial_Combos_Produtos?: ModelTypes['comercial_Combos_Produtos_mutation_response'];
    /** delete single row from the table: "comercial.Combos_Produtos" */
    delete_comercial_Combos_Produtos_by_pk?: ModelTypes['comercial_Combos_Produtos'];
    /** delete data from the table: "comercial.Combos_Servicos" */
    delete_comercial_Combos_Servicos?: ModelTypes['comercial_Combos_Servicos_mutation_response'];
    /** delete single row from the table: "comercial.Combos_Servicos" */
    delete_comercial_Combos_Servicos_by_pk?: ModelTypes['comercial_Combos_Servicos'];
    /** delete single row from the table: "comercial.Combos" */
    delete_comercial_Combos_by_pk?: ModelTypes['comercial_Combos'];
    /** delete data from the table: "comercial.Condicionais" */
    delete_comercial_Condicionais?: ModelTypes['comercial_Condicionais_mutation_response'];
    /** delete data from the table: "comercial.CondicionaisSituacoes" */
    delete_comercial_CondicionaisSituacoes?: ModelTypes['comercial_CondicionaisSituacoes_mutation_response'];
    /** delete single row from the table: "comercial.CondicionaisSituacoes" */
    delete_comercial_CondicionaisSituacoes_by_pk?: ModelTypes['comercial_CondicionaisSituacoes'];
    /** delete single row from the table: "comercial.Condicionais" */
    delete_comercial_Condicionais_by_pk?: ModelTypes['comercial_Condicionais'];
    /** delete data from the table: "comercial.ContratosBase" */
    delete_comercial_ContratosBase?: ModelTypes['comercial_ContratosBase_mutation_response'];
    /** delete data from the table: "comercial.ContratosBase_Versoes" */
    delete_comercial_ContratosBase_Versoes?: ModelTypes['comercial_ContratosBase_Versoes_mutation_response'];
    /** delete single row from the table: "comercial.ContratosBase_Versoes" */
    delete_comercial_ContratosBase_Versoes_by_pk?: ModelTypes['comercial_ContratosBase_Versoes'];
    /** delete single row from the table: "comercial.ContratosBase" */
    delete_comercial_ContratosBase_by_pk?: ModelTypes['comercial_ContratosBase'];
    /** delete data from the table: "comercial.Planos" */
    delete_comercial_Planos?: ModelTypes['comercial_Planos_mutation_response'];
    /** delete data from the table: "comercial.Planos_Condicionais" */
    delete_comercial_Planos_Condicionais?: ModelTypes['comercial_Planos_Condicionais_mutation_response'];
    /** delete single row from the table: "comercial.Planos_Condicionais" */
    delete_comercial_Planos_Condicionais_by_pk?: ModelTypes['comercial_Planos_Condicionais'];
    /** delete data from the table: "comercial.Planos_Precos" */
    delete_comercial_Planos_Precos?: ModelTypes['comercial_Planos_Precos_mutation_response'];
    /** delete single row from the table: "comercial.Planos_Precos" */
    delete_comercial_Planos_Precos_by_pk?: ModelTypes['comercial_Planos_Precos'];
    /** delete single row from the table: "comercial.Planos" */
    delete_comercial_Planos_by_pk?: ModelTypes['comercial_Planos'];
    /** delete data from the table: "comercial.PrestadoresDeServicos" */
    delete_comercial_PrestadoresDeServicos?: ModelTypes['comercial_PrestadoresDeServicos_mutation_response'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Produtos" */
    delete_comercial_PrestadoresDeServicos_Produtos?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_mutation_response'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    delete_comercial_PrestadoresDeServicos_Produtos_Itens?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    delete_comercial_PrestadoresDeServicos_Produtos_Itens_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    delete_comercial_PrestadoresDeServicos_Produtos_Precos?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    delete_comercial_PrestadoresDeServicos_Produtos_Precos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Produtos" */
    delete_comercial_PrestadoresDeServicos_Produtos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Produtos'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Servicos" */
    delete_comercial_PrestadoresDeServicos_Servicos?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_mutation_response'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    delete_comercial_PrestadoresDeServicos_Servicos_Precos?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    delete_comercial_PrestadoresDeServicos_Servicos_Precos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    delete_comercial_PrestadoresDeServicos_Servicos_Tarifas?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    delete_comercial_PrestadoresDeServicos_Servicos_Tarifas_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Servicos" */
    delete_comercial_PrestadoresDeServicos_Servicos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos" */
    delete_comercial_PrestadoresDeServicos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos'];
    /** delete data from the table: "comercial.Produtos" */
    delete_comercial_Produtos?: ModelTypes['comercial_Produtos_mutation_response'];
    /** delete data from the table: "comercial.Produtos_Atributos" */
    delete_comercial_Produtos_Atributos?: ModelTypes['comercial_Produtos_Atributos_mutation_response'];
    /** delete single row from the table: "comercial.Produtos_Atributos" */
    delete_comercial_Produtos_Atributos_by_pk?: ModelTypes['comercial_Produtos_Atributos'];
    /** delete data from the table: "comercial.Produtos_Oportunidades" */
    delete_comercial_Produtos_Oportunidades?: ModelTypes['comercial_Produtos_Oportunidades_mutation_response'];
    /** delete single row from the table: "comercial.Produtos_Oportunidades" */
    delete_comercial_Produtos_Oportunidades_by_pk?: ModelTypes['comercial_Produtos_Oportunidades'];
    /** delete data from the table: "comercial.Produtos_Produtos" */
    delete_comercial_Produtos_Produtos?: ModelTypes['comercial_Produtos_Produtos_mutation_response'];
    /** delete single row from the table: "comercial.Produtos_Produtos" */
    delete_comercial_Produtos_Produtos_by_pk?: ModelTypes['comercial_Produtos_Produtos'];
    /** delete data from the table: "comercial.Produtos_Servicos" */
    delete_comercial_Produtos_Servicos?: ModelTypes['comercial_Produtos_Servicos_mutation_response'];
    /** delete single row from the table: "comercial.Produtos_Servicos" */
    delete_comercial_Produtos_Servicos_by_pk?: ModelTypes['comercial_Produtos_Servicos'];
    /** delete data from the table: "comercial.Produtos_Tipos" */
    delete_comercial_Produtos_Tipos?: ModelTypes['comercial_Produtos_Tipos_mutation_response'];
    /** delete single row from the table: "comercial.Produtos_Tipos" */
    delete_comercial_Produtos_Tipos_by_pk?: ModelTypes['comercial_Produtos_Tipos'];
    /** delete single row from the table: "comercial.Produtos" */
    delete_comercial_Produtos_by_pk?: ModelTypes['comercial_Produtos'];
    /** delete data from the table: "comercial.Servicos" */
    delete_comercial_Servicos?: ModelTypes['comercial_Servicos_mutation_response'];
    /** delete data from the table: "comercial.Servicos_Atributos" */
    delete_comercial_Servicos_Atributos?: ModelTypes['comercial_Servicos_Atributos_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Atributos" */
    delete_comercial_Servicos_Atributos_by_pk?: ModelTypes['comercial_Servicos_Atributos'];
    /** delete data from the table: "comercial.Servicos_Oportunidades" */
    delete_comercial_Servicos_Oportunidades?: ModelTypes['comercial_Servicos_Oportunidades_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Oportunidades" */
    delete_comercial_Servicos_Oportunidades_by_pk?: ModelTypes['comercial_Servicos_Oportunidades'];
    /** delete data from the table: "comercial.Servicos_Produtos" */
    delete_comercial_Servicos_Produtos?: ModelTypes['comercial_Servicos_Produtos_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Produtos" */
    delete_comercial_Servicos_Produtos_by_pk?: ModelTypes['comercial_Servicos_Produtos'];
    /** delete data from the table: "comercial.Servicos_Servicos" */
    delete_comercial_Servicos_Servicos?: ModelTypes['comercial_Servicos_Servicos_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Servicos" */
    delete_comercial_Servicos_Servicos_by_pk?: ModelTypes['comercial_Servicos_Servicos'];
    /** delete data from the table: "comercial.Servicos_Tarifas" */
    delete_comercial_Servicos_Tarifas?: ModelTypes['comercial_Servicos_Tarifas_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Tarifas" */
    delete_comercial_Servicos_Tarifas_by_pk?: ModelTypes['comercial_Servicos_Tarifas'];
    /** delete data from the table: "comercial.Servicos_Tipos" */
    delete_comercial_Servicos_Tipos?: ModelTypes['comercial_Servicos_Tipos_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Tipos" */
    delete_comercial_Servicos_Tipos_by_pk?: ModelTypes['comercial_Servicos_Tipos'];
    /** delete single row from the table: "comercial.Servicos" */
    delete_comercial_Servicos_by_pk?: ModelTypes['comercial_Servicos'];
    /** delete data from the table: "comercial.Tarifas" */
    delete_comercial_Tarifas?: ModelTypes['comercial_Tarifas_mutation_response'];
    /** delete single row from the table: "comercial.Tarifas" */
    delete_comercial_Tarifas_by_pk?: ModelTypes['comercial_Tarifas'];
    /** delete data from the table: "contatos.Emails" */
    delete_contatos_Emails?: ModelTypes['contatos_Emails_mutation_response'];
    /** delete single row from the table: "contatos.Emails" */
    delete_contatos_Emails_by_pk?: ModelTypes['contatos_Emails'];
    /** delete data from the table: "contatos.Enderecos" */
    delete_contatos_Enderecos?: ModelTypes['contatos_Enderecos_mutation_response'];
    /** delete single row from the table: "contatos.Enderecos" */
    delete_contatos_Enderecos_by_pk?: ModelTypes['contatos_Enderecos'];
    /** delete data from the table: "contatos.Logs" */
    delete_contatos_Logs?: ModelTypes['contatos_Logs_mutation_response'];
    /** delete single row from the table: "contatos.Logs" */
    delete_contatos_Logs_by_pk?: ModelTypes['contatos_Logs'];
    /** delete data from the table: "contatos.Telefones" */
    delete_contatos_Telefones?: ModelTypes['contatos_Telefones_mutation_response'];
    /** delete single row from the table: "contatos.Telefones" */
    delete_contatos_Telefones_by_pk?: ModelTypes['contatos_Telefones'];
    /** delete data from the table: "identidades.Clientes" */
    delete_identidades_Clientes?: ModelTypes['identidades_Clientes_mutation_response'];
    /** delete data from the table: "identidades.Clientes_Documentos" */
    delete_identidades_Clientes_Documentos?: ModelTypes['identidades_Clientes_Documentos_mutation_response'];
    /** delete data from the table: "identidades.Clientes_Documentos_Situacoes" */
    delete_identidades_Clientes_Documentos_Situacoes?: ModelTypes['identidades_Clientes_Documentos_Situacoes_mutation_response'];
    /** delete single row from the table: "identidades.Clientes_Documentos_Situacoes" */
    delete_identidades_Clientes_Documentos_Situacoes_by_pk?: ModelTypes['identidades_Clientes_Documentos_Situacoes'];
    /** delete single row from the table: "identidades.Clientes_Documentos" */
    delete_identidades_Clientes_Documentos_by_pk?: ModelTypes['identidades_Clientes_Documentos'];
    /** delete single row from the table: "identidades.Clientes" */
    delete_identidades_Clientes_by_pk?: ModelTypes['identidades_Clientes'];
    /** delete data from the table: "identidades.Colaboradores" */
    delete_identidades_Colaboradores?: ModelTypes['identidades_Colaboradores_mutation_response'];
    /** delete single row from the table: "identidades.Colaboradores" */
    delete_identidades_Colaboradores_by_pk?: ModelTypes['identidades_Colaboradores'];
    /** delete data from the table: "identidades.Fornecedores" */
    delete_identidades_Fornecedores?: ModelTypes['identidades_Fornecedores_mutation_response'];
    /** delete single row from the table: "identidades.Fornecedores" */
    delete_identidades_Fornecedores_by_pk?: ModelTypes['identidades_Fornecedores'];
    /** delete data from the table: "identidades.Logs" */
    delete_identidades_Logs?: ModelTypes['identidades_Logs_mutation_response'];
    /** delete single row from the table: "identidades.Logs" */
    delete_identidades_Logs_by_pk?: ModelTypes['identidades_Logs'];
    /** delete data from the table: "identidades.Pessoas" */
    delete_identidades_Pessoas?: ModelTypes['identidades_Pessoas_mutation_response'];
    /** delete single row from the table: "identidades.Pessoas" */
    delete_identidades_Pessoas_by_pk?: ModelTypes['identidades_Pessoas'];
    /** delete data from the table: "identidades.Representantes" */
    delete_identidades_Representantes?: ModelTypes['identidades_Representantes_mutation_response'];
    /** delete single row from the table: "identidades.Representantes" */
    delete_identidades_Representantes_by_pk?: ModelTypes['identidades_Representantes'];
    /** delete data from the table: "identidades.Vendedores" */
    delete_identidades_Vendedores?: ModelTypes['identidades_Vendedores_mutation_response'];
    /** delete single row from the table: "identidades.Vendedores" */
    delete_identidades_Vendedores_by_pk?: ModelTypes['identidades_Vendedores'];
    /** delete data from the table: "propostas.Propostas" */
    delete_propostas_Propostas?: ModelTypes['propostas_Propostas_mutation_response'];
    /** delete data from the table: "propostas.Propostas_Combos" */
    delete_propostas_Propostas_Combos?: ModelTypes['propostas_Propostas_Combos_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Combos" */
    delete_propostas_Propostas_Combos_by_pk?: ModelTypes['propostas_Propostas_Combos'];
    /** delete data from the table: "propostas.Propostas_Instalacoes" */
    delete_propostas_Propostas_Instalacoes?: ModelTypes['propostas_Propostas_Instalacoes_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Instalacoes" */
    delete_propostas_Propostas_Instalacoes_by_pk?: ModelTypes['propostas_Propostas_Instalacoes'];
    /** delete data from the table: "propostas.Propostas_Oportunidades" */
    delete_propostas_Propostas_Oportunidades?: ModelTypes['propostas_Propostas_Oportunidades_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Oportunidades" */
    delete_propostas_Propostas_Oportunidades_by_pk?: ModelTypes['propostas_Propostas_Oportunidades'];
    /** delete data from the table: "propostas.Propostas_Planos" */
    delete_propostas_Propostas_Planos?: ModelTypes['propostas_Propostas_Planos_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Planos" */
    delete_propostas_Propostas_Planos_by_pk?: ModelTypes['propostas_Propostas_Planos'];
    /** delete data from the table: "propostas.Propostas_Produtos" */
    delete_propostas_Propostas_Produtos?: ModelTypes['propostas_Propostas_Produtos_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Produtos" */
    delete_propostas_Propostas_Produtos_by_pk?: ModelTypes['propostas_Propostas_Produtos'];
    /** delete data from the table: "propostas.Propostas_Servicos" */
    delete_propostas_Propostas_Servicos?: ModelTypes['propostas_Propostas_Servicos_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Servicos" */
    delete_propostas_Propostas_Servicos_by_pk?: ModelTypes['propostas_Propostas_Servicos'];
    /** delete data from the table: "propostas.Propostas_Situacoes" */
    delete_propostas_Propostas_Situacoes?: ModelTypes['propostas_Propostas_Situacoes_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Situacoes" */
    delete_propostas_Propostas_Situacoes_by_pk?: ModelTypes['propostas_Propostas_Situacoes'];
    /** delete single row from the table: "propostas.Propostas" */
    delete_propostas_Propostas_by_pk?: ModelTypes['propostas_Propostas'];
    /** delete data from the table: "vendas.GruposDePerguntas" */
    delete_vendas_GruposDePerguntas?: ModelTypes['vendas_GruposDePerguntas_mutation_response'];
    /** delete data from the table: "vendas.GruposDePerguntas_Perguntas" */
    delete_vendas_GruposDePerguntas_Perguntas?: ModelTypes['vendas_GruposDePerguntas_Perguntas_mutation_response'];
    /** delete single row from the table: "vendas.GruposDePerguntas_Perguntas" */
    delete_vendas_GruposDePerguntas_Perguntas_by_pk?: ModelTypes['vendas_GruposDePerguntas_Perguntas'];
    /** delete single row from the table: "vendas.GruposDePerguntas" */
    delete_vendas_GruposDePerguntas_by_pk?: ModelTypes['vendas_GruposDePerguntas'];
    /** delete data from the table: "vendas.Perguntas" */
    delete_vendas_Perguntas?: ModelTypes['vendas_Perguntas_mutation_response'];
    /** delete single row from the table: "vendas.Perguntas" */
    delete_vendas_Perguntas_by_pk?: ModelTypes['vendas_Perguntas'];
    /** delete data from the table: "vendas.TiposDePagamento" */
    delete_vendas_TiposDePagamento?: ModelTypes['vendas_TiposDePagamento_mutation_response'];
    /** delete single row from the table: "vendas.TiposDePagamento" */
    delete_vendas_TiposDePagamento_by_pk?: ModelTypes['vendas_TiposDePagamento'];
    /** delete data from the table: "vendas.TiposDePrecos" */
    delete_vendas_TiposDePrecos?: ModelTypes['vendas_TiposDePrecos_mutation_response'];
    /** delete single row from the table: "vendas.TiposDePrecos" */
    delete_vendas_TiposDePrecos_by_pk?: ModelTypes['vendas_TiposDePrecos'];
    /** delete data from the table: "vendas.TiposDeRecorrencia" */
    delete_vendas_TiposDeRecorrencia?: ModelTypes['vendas_TiposDeRecorrencia_mutation_response'];
    /** delete single row from the table: "vendas.TiposDeRecorrencia" */
    delete_vendas_TiposDeRecorrencia_by_pk?: ModelTypes['vendas_TiposDeRecorrencia'];
    /** insert data into the table: "CategoriasDeVeiculos" */
    insert_CategoriasDeVeiculos?: ModelTypes['CategoriasDeVeiculos_mutation_response'];
    /** insert a single row into the table: "CategoriasDeVeiculos" */
    insert_CategoriasDeVeiculos_one?: ModelTypes['CategoriasDeVeiculos'];
    /** insert data into the table: "EstadosEMunicipios" */
    insert_EstadosEMunicipios?: ModelTypes['EstadosEMunicipios_mutation_response'];
    /** insert a single row into the table: "EstadosEMunicipios" */
    insert_EstadosEMunicipios_one?: ModelTypes['EstadosEMunicipios'];
    /** insert data into the table: "atendimentos.EtapasDosFluxos" */
    insert_atendimentos_EtapasDosFluxos?: ModelTypes['atendimentos_EtapasDosFluxos_mutation_response'];
    /** insert a single row into the table: "atendimentos.EtapasDosFluxos" */
    insert_atendimentos_EtapasDosFluxos_one?: ModelTypes['atendimentos_EtapasDosFluxos'];
    /** insert data into the table: "atendimentos.Fluxos" */
    insert_atendimentos_Fluxos?: ModelTypes['atendimentos_Fluxos_mutation_response'];
    /** insert a single row into the table: "atendimentos.Fluxos" */
    insert_atendimentos_Fluxos_one?: ModelTypes['atendimentos_Fluxos'];
    /** insert data into the table: "atendimentos.Tickets" */
    insert_atendimentos_Tickets?: ModelTypes['atendimentos_Tickets_mutation_response'];
    /** insert a single row into the table: "atendimentos.Tickets" */
    insert_atendimentos_Tickets_one?: ModelTypes['atendimentos_Tickets'];
    /** insert data into the table: "atendimentos.TiposDeTickets" */
    insert_atendimentos_TiposDeTickets?: ModelTypes['atendimentos_TiposDeTickets_mutation_response'];
    /** insert a single row into the table: "atendimentos.TiposDeTickets" */
    insert_atendimentos_TiposDeTickets_one?: ModelTypes['atendimentos_TiposDeTickets'];
    /** insert data into the table: "autenticacao.Atendentes" */
    insert_autenticacao_Atendentes?: ModelTypes['autenticacao_Atendentes_mutation_response'];
    /** insert a single row into the table: "autenticacao.Atendentes" */
    insert_autenticacao_Atendentes_one?: ModelTypes['autenticacao_Atendentes'];
    /** insert data into the table: "autenticacao.Usuarios" */
    insert_autenticacao_Usuarios?: ModelTypes['autenticacao_Usuarios_mutation_response'];
    /** insert a single row into the table: "autenticacao.Usuarios" */
    insert_autenticacao_Usuarios_one?: ModelTypes['autenticacao_Usuarios'];
    /** insert data into the table: "clientes.Leads" */
    insert_clientes_Leads?: ModelTypes['clientes_Leads_mutation_response'];
    /** insert a single row into the table: "clientes.Leads" */
    insert_clientes_Leads_one?: ModelTypes['clientes_Leads'];
    /** insert data into the table: "clientes.PerfisComerciais" */
    insert_clientes_PerfisComerciais?: ModelTypes['clientes_PerfisComerciais_mutation_response'];
    /** insert a single row into the table: "clientes.PerfisComerciais" */
    insert_clientes_PerfisComerciais_one?: ModelTypes['clientes_PerfisComerciais'];
    /** insert data into the table: "clientes.Veiculos" */
    insert_clientes_Veiculos?: ModelTypes['clientes_Veiculos_mutation_response'];
    /** insert data into the table: "clientes.VeiculosAtivos" */
    insert_clientes_VeiculosAtivos?: ModelTypes['clientes_VeiculosAtivos_mutation_response'];
    /** insert data into the table: "clientes.VeiculosAtivos_Beneficios" */
    insert_clientes_VeiculosAtivos_Beneficios?: ModelTypes['clientes_VeiculosAtivos_Beneficios_mutation_response'];
    /** insert a single row into the table: "clientes.VeiculosAtivos_Beneficios" */
    insert_clientes_VeiculosAtivos_Beneficios_one?: ModelTypes['clientes_VeiculosAtivos_Beneficios'];
    /** insert data into the table: "clientes.VeiculosAtivos_Produtos" */
    insert_clientes_VeiculosAtivos_Produtos?: ModelTypes['clientes_VeiculosAtivos_Produtos_mutation_response'];
    /** insert a single row into the table: "clientes.VeiculosAtivos_Produtos" */
    insert_clientes_VeiculosAtivos_Produtos_one?: ModelTypes['clientes_VeiculosAtivos_Produtos'];
    /** insert data into the table: "clientes.VeiculosAtivos_Servicos" */
    insert_clientes_VeiculosAtivos_Servicos?: ModelTypes['clientes_VeiculosAtivos_Servicos_mutation_response'];
    /** insert a single row into the table: "clientes.VeiculosAtivos_Servicos" */
    insert_clientes_VeiculosAtivos_Servicos_one?: ModelTypes['clientes_VeiculosAtivos_Servicos'];
    /** insert data into the table: "clientes.VeiculosAtivos_Situacao" */
    insert_clientes_VeiculosAtivos_Situacao?: ModelTypes['clientes_VeiculosAtivos_Situacao_mutation_response'];
    /** insert a single row into the table: "clientes.VeiculosAtivos_Situacao" */
    insert_clientes_VeiculosAtivos_Situacao_one?: ModelTypes['clientes_VeiculosAtivos_Situacao'];
    /** insert a single row into the table: "clientes.VeiculosAtivos" */
    insert_clientes_VeiculosAtivos_one?: ModelTypes['clientes_VeiculosAtivos'];
    /** insert a single row into the table: "clientes.Veiculos" */
    insert_clientes_Veiculos_one?: ModelTypes['clientes_Veiculos'];
    /** insert data into the table: "comercial.Acoes" */
    insert_comercial_Acoes?: ModelTypes['comercial_Acoes_mutation_response'];
    /** insert a single row into the table: "comercial.Acoes" */
    insert_comercial_Acoes_one?: ModelTypes['comercial_Acoes'];
    /** insert data into the table: "comercial.Atributos" */
    insert_comercial_Atributos?: ModelTypes['comercial_Atributos_mutation_response'];
    /** insert a single row into the table: "comercial.Atributos" */
    insert_comercial_Atributos_one?: ModelTypes['comercial_Atributos'];
    /** insert data into the table: "comercial.Coberturas" */
    insert_comercial_Coberturas?: ModelTypes['comercial_Coberturas_mutation_response'];
    /** insert a single row into the table: "comercial.Coberturas" */
    insert_comercial_Coberturas_one?: ModelTypes['comercial_Coberturas'];
    /** insert data into the table: "comercial.Combos" */
    insert_comercial_Combos?: ModelTypes['comercial_Combos_mutation_response'];
    /** insert data into the table: "comercial.Combos_Combos" */
    insert_comercial_Combos_Combos?: ModelTypes['comercial_Combos_Combos_mutation_response'];
    /** insert a single row into the table: "comercial.Combos_Combos" */
    insert_comercial_Combos_Combos_one?: ModelTypes['comercial_Combos_Combos'];
    /** insert data into the table: "comercial.Combos_Planos" */
    insert_comercial_Combos_Planos?: ModelTypes['comercial_Combos_Planos_mutation_response'];
    /** insert a single row into the table: "comercial.Combos_Planos" */
    insert_comercial_Combos_Planos_one?: ModelTypes['comercial_Combos_Planos'];
    /** insert data into the table: "comercial.Combos_Precos" */
    insert_comercial_Combos_Precos?: ModelTypes['comercial_Combos_Precos_mutation_response'];
    /** insert a single row into the table: "comercial.Combos_Precos" */
    insert_comercial_Combos_Precos_one?: ModelTypes['comercial_Combos_Precos'];
    /** insert data into the table: "comercial.Combos_Produtos" */
    insert_comercial_Combos_Produtos?: ModelTypes['comercial_Combos_Produtos_mutation_response'];
    /** insert a single row into the table: "comercial.Combos_Produtos" */
    insert_comercial_Combos_Produtos_one?: ModelTypes['comercial_Combos_Produtos'];
    /** insert data into the table: "comercial.Combos_Servicos" */
    insert_comercial_Combos_Servicos?: ModelTypes['comercial_Combos_Servicos_mutation_response'];
    /** insert a single row into the table: "comercial.Combos_Servicos" */
    insert_comercial_Combos_Servicos_one?: ModelTypes['comercial_Combos_Servicos'];
    /** insert a single row into the table: "comercial.Combos" */
    insert_comercial_Combos_one?: ModelTypes['comercial_Combos'];
    /** insert data into the table: "comercial.Condicionais" */
    insert_comercial_Condicionais?: ModelTypes['comercial_Condicionais_mutation_response'];
    /** insert data into the table: "comercial.CondicionaisSituacoes" */
    insert_comercial_CondicionaisSituacoes?: ModelTypes['comercial_CondicionaisSituacoes_mutation_response'];
    /** insert a single row into the table: "comercial.CondicionaisSituacoes" */
    insert_comercial_CondicionaisSituacoes_one?: ModelTypes['comercial_CondicionaisSituacoes'];
    /** insert a single row into the table: "comercial.Condicionais" */
    insert_comercial_Condicionais_one?: ModelTypes['comercial_Condicionais'];
    /** insert data into the table: "comercial.ContratosBase" */
    insert_comercial_ContratosBase?: ModelTypes['comercial_ContratosBase_mutation_response'];
    /** insert data into the table: "comercial.ContratosBase_Versoes" */
    insert_comercial_ContratosBase_Versoes?: ModelTypes['comercial_ContratosBase_Versoes_mutation_response'];
    /** insert a single row into the table: "comercial.ContratosBase_Versoes" */
    insert_comercial_ContratosBase_Versoes_one?: ModelTypes['comercial_ContratosBase_Versoes'];
    /** insert a single row into the table: "comercial.ContratosBase" */
    insert_comercial_ContratosBase_one?: ModelTypes['comercial_ContratosBase'];
    /** insert data into the table: "comercial.Planos" */
    insert_comercial_Planos?: ModelTypes['comercial_Planos_mutation_response'];
    /** insert data into the table: "comercial.Planos_Condicionais" */
    insert_comercial_Planos_Condicionais?: ModelTypes['comercial_Planos_Condicionais_mutation_response'];
    /** insert a single row into the table: "comercial.Planos_Condicionais" */
    insert_comercial_Planos_Condicionais_one?: ModelTypes['comercial_Planos_Condicionais'];
    /** insert data into the table: "comercial.Planos_Precos" */
    insert_comercial_Planos_Precos?: ModelTypes['comercial_Planos_Precos_mutation_response'];
    /** insert a single row into the table: "comercial.Planos_Precos" */
    insert_comercial_Planos_Precos_one?: ModelTypes['comercial_Planos_Precos'];
    /** insert a single row into the table: "comercial.Planos" */
    insert_comercial_Planos_one?: ModelTypes['comercial_Planos'];
    /** insert data into the table: "comercial.PrestadoresDeServicos" */
    insert_comercial_PrestadoresDeServicos?: ModelTypes['comercial_PrestadoresDeServicos_mutation_response'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Produtos" */
    insert_comercial_PrestadoresDeServicos_Produtos?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_mutation_response'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    insert_comercial_PrestadoresDeServicos_Produtos_Itens?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    insert_comercial_PrestadoresDeServicos_Produtos_Itens_one?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    insert_comercial_PrestadoresDeServicos_Produtos_Precos?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    insert_comercial_PrestadoresDeServicos_Produtos_Precos_one?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Produtos" */
    insert_comercial_PrestadoresDeServicos_Produtos_one?: ModelTypes['comercial_PrestadoresDeServicos_Produtos'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Servicos" */
    insert_comercial_PrestadoresDeServicos_Servicos?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_mutation_response'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    insert_comercial_PrestadoresDeServicos_Servicos_Precos?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    insert_comercial_PrestadoresDeServicos_Servicos_Precos_one?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    insert_comercial_PrestadoresDeServicos_Servicos_Tarifas?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    insert_comercial_PrestadoresDeServicos_Servicos_Tarifas_one?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Servicos" */
    insert_comercial_PrestadoresDeServicos_Servicos_one?: ModelTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos" */
    insert_comercial_PrestadoresDeServicos_one?: ModelTypes['comercial_PrestadoresDeServicos'];
    /** insert data into the table: "comercial.Produtos" */
    insert_comercial_Produtos?: ModelTypes['comercial_Produtos_mutation_response'];
    /** insert data into the table: "comercial.Produtos_Atributos" */
    insert_comercial_Produtos_Atributos?: ModelTypes['comercial_Produtos_Atributos_mutation_response'];
    /** insert a single row into the table: "comercial.Produtos_Atributos" */
    insert_comercial_Produtos_Atributos_one?: ModelTypes['comercial_Produtos_Atributos'];
    /** insert data into the table: "comercial.Produtos_Oportunidades" */
    insert_comercial_Produtos_Oportunidades?: ModelTypes['comercial_Produtos_Oportunidades_mutation_response'];
    /** insert a single row into the table: "comercial.Produtos_Oportunidades" */
    insert_comercial_Produtos_Oportunidades_one?: ModelTypes['comercial_Produtos_Oportunidades'];
    /** insert data into the table: "comercial.Produtos_Produtos" */
    insert_comercial_Produtos_Produtos?: ModelTypes['comercial_Produtos_Produtos_mutation_response'];
    /** insert a single row into the table: "comercial.Produtos_Produtos" */
    insert_comercial_Produtos_Produtos_one?: ModelTypes['comercial_Produtos_Produtos'];
    /** insert data into the table: "comercial.Produtos_Servicos" */
    insert_comercial_Produtos_Servicos?: ModelTypes['comercial_Produtos_Servicos_mutation_response'];
    /** insert a single row into the table: "comercial.Produtos_Servicos" */
    insert_comercial_Produtos_Servicos_one?: ModelTypes['comercial_Produtos_Servicos'];
    /** insert data into the table: "comercial.Produtos_Tipos" */
    insert_comercial_Produtos_Tipos?: ModelTypes['comercial_Produtos_Tipos_mutation_response'];
    /** insert a single row into the table: "comercial.Produtos_Tipos" */
    insert_comercial_Produtos_Tipos_one?: ModelTypes['comercial_Produtos_Tipos'];
    /** insert a single row into the table: "comercial.Produtos" */
    insert_comercial_Produtos_one?: ModelTypes['comercial_Produtos'];
    /** insert data into the table: "comercial.Servicos" */
    insert_comercial_Servicos?: ModelTypes['comercial_Servicos_mutation_response'];
    /** insert data into the table: "comercial.Servicos_Atributos" */
    insert_comercial_Servicos_Atributos?: ModelTypes['comercial_Servicos_Atributos_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Atributos" */
    insert_comercial_Servicos_Atributos_one?: ModelTypes['comercial_Servicos_Atributos'];
    /** insert data into the table: "comercial.Servicos_Oportunidades" */
    insert_comercial_Servicos_Oportunidades?: ModelTypes['comercial_Servicos_Oportunidades_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Oportunidades" */
    insert_comercial_Servicos_Oportunidades_one?: ModelTypes['comercial_Servicos_Oportunidades'];
    /** insert data into the table: "comercial.Servicos_Produtos" */
    insert_comercial_Servicos_Produtos?: ModelTypes['comercial_Servicos_Produtos_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Produtos" */
    insert_comercial_Servicos_Produtos_one?: ModelTypes['comercial_Servicos_Produtos'];
    /** insert data into the table: "comercial.Servicos_Servicos" */
    insert_comercial_Servicos_Servicos?: ModelTypes['comercial_Servicos_Servicos_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Servicos" */
    insert_comercial_Servicos_Servicos_one?: ModelTypes['comercial_Servicos_Servicos'];
    /** insert data into the table: "comercial.Servicos_Tarifas" */
    insert_comercial_Servicos_Tarifas?: ModelTypes['comercial_Servicos_Tarifas_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Tarifas" */
    insert_comercial_Servicos_Tarifas_one?: ModelTypes['comercial_Servicos_Tarifas'];
    /** insert data into the table: "comercial.Servicos_Tipos" */
    insert_comercial_Servicos_Tipos?: ModelTypes['comercial_Servicos_Tipos_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Tipos" */
    insert_comercial_Servicos_Tipos_one?: ModelTypes['comercial_Servicos_Tipos'];
    /** insert a single row into the table: "comercial.Servicos" */
    insert_comercial_Servicos_one?: ModelTypes['comercial_Servicos'];
    /** insert data into the table: "comercial.Tarifas" */
    insert_comercial_Tarifas?: ModelTypes['comercial_Tarifas_mutation_response'];
    /** insert a single row into the table: "comercial.Tarifas" */
    insert_comercial_Tarifas_one?: ModelTypes['comercial_Tarifas'];
    /** insert data into the table: "contatos.Emails" */
    insert_contatos_Emails?: ModelTypes['contatos_Emails_mutation_response'];
    /** insert a single row into the table: "contatos.Emails" */
    insert_contatos_Emails_one?: ModelTypes['contatos_Emails'];
    /** insert data into the table: "contatos.Enderecos" */
    insert_contatos_Enderecos?: ModelTypes['contatos_Enderecos_mutation_response'];
    /** insert a single row into the table: "contatos.Enderecos" */
    insert_contatos_Enderecos_one?: ModelTypes['contatos_Enderecos'];
    /** insert data into the table: "contatos.Logs" */
    insert_contatos_Logs?: ModelTypes['contatos_Logs_mutation_response'];
    /** insert a single row into the table: "contatos.Logs" */
    insert_contatos_Logs_one?: ModelTypes['contatos_Logs'];
    /** insert data into the table: "contatos.Telefones" */
    insert_contatos_Telefones?: ModelTypes['contatos_Telefones_mutation_response'];
    /** insert a single row into the table: "contatos.Telefones" */
    insert_contatos_Telefones_one?: ModelTypes['contatos_Telefones'];
    /** insert data into the table: "identidades.Clientes" */
    insert_identidades_Clientes?: ModelTypes['identidades_Clientes_mutation_response'];
    /** insert data into the table: "identidades.Clientes_Documentos" */
    insert_identidades_Clientes_Documentos?: ModelTypes['identidades_Clientes_Documentos_mutation_response'];
    /** insert data into the table: "identidades.Clientes_Documentos_Situacoes" */
    insert_identidades_Clientes_Documentos_Situacoes?: ModelTypes['identidades_Clientes_Documentos_Situacoes_mutation_response'];
    /** insert a single row into the table: "identidades.Clientes_Documentos_Situacoes" */
    insert_identidades_Clientes_Documentos_Situacoes_one?: ModelTypes['identidades_Clientes_Documentos_Situacoes'];
    /** insert a single row into the table: "identidades.Clientes_Documentos" */
    insert_identidades_Clientes_Documentos_one?: ModelTypes['identidades_Clientes_Documentos'];
    /** insert a single row into the table: "identidades.Clientes" */
    insert_identidades_Clientes_one?: ModelTypes['identidades_Clientes'];
    /** insert data into the table: "identidades.Colaboradores" */
    insert_identidades_Colaboradores?: ModelTypes['identidades_Colaboradores_mutation_response'];
    /** insert a single row into the table: "identidades.Colaboradores" */
    insert_identidades_Colaboradores_one?: ModelTypes['identidades_Colaboradores'];
    /** insert data into the table: "identidades.Fornecedores" */
    insert_identidades_Fornecedores?: ModelTypes['identidades_Fornecedores_mutation_response'];
    /** insert a single row into the table: "identidades.Fornecedores" */
    insert_identidades_Fornecedores_one?: ModelTypes['identidades_Fornecedores'];
    /** insert data into the table: "identidades.Logs" */
    insert_identidades_Logs?: ModelTypes['identidades_Logs_mutation_response'];
    /** insert a single row into the table: "identidades.Logs" */
    insert_identidades_Logs_one?: ModelTypes['identidades_Logs'];
    /** insert data into the table: "identidades.Pessoas" */
    insert_identidades_Pessoas?: ModelTypes['identidades_Pessoas_mutation_response'];
    /** insert a single row into the table: "identidades.Pessoas" */
    insert_identidades_Pessoas_one?: ModelTypes['identidades_Pessoas'];
    /** insert data into the table: "identidades.Representantes" */
    insert_identidades_Representantes?: ModelTypes['identidades_Representantes_mutation_response'];
    /** insert a single row into the table: "identidades.Representantes" */
    insert_identidades_Representantes_one?: ModelTypes['identidades_Representantes'];
    /** insert data into the table: "identidades.Vendedores" */
    insert_identidades_Vendedores?: ModelTypes['identidades_Vendedores_mutation_response'];
    /** insert a single row into the table: "identidades.Vendedores" */
    insert_identidades_Vendedores_one?: ModelTypes['identidades_Vendedores'];
    /** insert data into the table: "propostas.Propostas" */
    insert_propostas_Propostas?: ModelTypes['propostas_Propostas_mutation_response'];
    /** insert data into the table: "propostas.Propostas_Combos" */
    insert_propostas_Propostas_Combos?: ModelTypes['propostas_Propostas_Combos_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Combos" */
    insert_propostas_Propostas_Combos_one?: ModelTypes['propostas_Propostas_Combos'];
    /** insert data into the table: "propostas.Propostas_Instalacoes" */
    insert_propostas_Propostas_Instalacoes?: ModelTypes['propostas_Propostas_Instalacoes_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Instalacoes" */
    insert_propostas_Propostas_Instalacoes_one?: ModelTypes['propostas_Propostas_Instalacoes'];
    /** insert data into the table: "propostas.Propostas_Oportunidades" */
    insert_propostas_Propostas_Oportunidades?: ModelTypes['propostas_Propostas_Oportunidades_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Oportunidades" */
    insert_propostas_Propostas_Oportunidades_one?: ModelTypes['propostas_Propostas_Oportunidades'];
    /** insert data into the table: "propostas.Propostas_Planos" */
    insert_propostas_Propostas_Planos?: ModelTypes['propostas_Propostas_Planos_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Planos" */
    insert_propostas_Propostas_Planos_one?: ModelTypes['propostas_Propostas_Planos'];
    /** insert data into the table: "propostas.Propostas_Produtos" */
    insert_propostas_Propostas_Produtos?: ModelTypes['propostas_Propostas_Produtos_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Produtos" */
    insert_propostas_Propostas_Produtos_one?: ModelTypes['propostas_Propostas_Produtos'];
    /** insert data into the table: "propostas.Propostas_Servicos" */
    insert_propostas_Propostas_Servicos?: ModelTypes['propostas_Propostas_Servicos_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Servicos" */
    insert_propostas_Propostas_Servicos_one?: ModelTypes['propostas_Propostas_Servicos'];
    /** insert data into the table: "propostas.Propostas_Situacoes" */
    insert_propostas_Propostas_Situacoes?: ModelTypes['propostas_Propostas_Situacoes_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Situacoes" */
    insert_propostas_Propostas_Situacoes_one?: ModelTypes['propostas_Propostas_Situacoes'];
    /** insert a single row into the table: "propostas.Propostas" */
    insert_propostas_Propostas_one?: ModelTypes['propostas_Propostas'];
    /** insert data into the table: "vendas.GruposDePerguntas" */
    insert_vendas_GruposDePerguntas?: ModelTypes['vendas_GruposDePerguntas_mutation_response'];
    /** insert data into the table: "vendas.GruposDePerguntas_Perguntas" */
    insert_vendas_GruposDePerguntas_Perguntas?: ModelTypes['vendas_GruposDePerguntas_Perguntas_mutation_response'];
    /** insert a single row into the table: "vendas.GruposDePerguntas_Perguntas" */
    insert_vendas_GruposDePerguntas_Perguntas_one?: ModelTypes['vendas_GruposDePerguntas_Perguntas'];
    /** insert a single row into the table: "vendas.GruposDePerguntas" */
    insert_vendas_GruposDePerguntas_one?: ModelTypes['vendas_GruposDePerguntas'];
    /** insert data into the table: "vendas.Perguntas" */
    insert_vendas_Perguntas?: ModelTypes['vendas_Perguntas_mutation_response'];
    /** insert a single row into the table: "vendas.Perguntas" */
    insert_vendas_Perguntas_one?: ModelTypes['vendas_Perguntas'];
    /** insert data into the table: "vendas.TiposDePagamento" */
    insert_vendas_TiposDePagamento?: ModelTypes['vendas_TiposDePagamento_mutation_response'];
    /** insert a single row into the table: "vendas.TiposDePagamento" */
    insert_vendas_TiposDePagamento_one?: ModelTypes['vendas_TiposDePagamento'];
    /** insert data into the table: "vendas.TiposDePrecos" */
    insert_vendas_TiposDePrecos?: ModelTypes['vendas_TiposDePrecos_mutation_response'];
    /** insert a single row into the table: "vendas.TiposDePrecos" */
    insert_vendas_TiposDePrecos_one?: ModelTypes['vendas_TiposDePrecos'];
    /** insert data into the table: "vendas.TiposDeRecorrencia" */
    insert_vendas_TiposDeRecorrencia?: ModelTypes['vendas_TiposDeRecorrencia_mutation_response'];
    /** insert a single row into the table: "vendas.TiposDeRecorrencia" */
    insert_vendas_TiposDeRecorrencia_one?: ModelTypes['vendas_TiposDeRecorrencia'];
    /** update data of the table: "CategoriasDeVeiculos" */
    update_CategoriasDeVeiculos?: ModelTypes['CategoriasDeVeiculos_mutation_response'];
    /** update single row of the table: "CategoriasDeVeiculos" */
    update_CategoriasDeVeiculos_by_pk?: ModelTypes['CategoriasDeVeiculos'];
    /** update data of the table: "EstadosEMunicipios" */
    update_EstadosEMunicipios?: ModelTypes['EstadosEMunicipios_mutation_response'];
    /** update single row of the table: "EstadosEMunicipios" */
    update_EstadosEMunicipios_by_pk?: ModelTypes['EstadosEMunicipios'];
    /** update data of the table: "atendimentos.EtapasDosFluxos" */
    update_atendimentos_EtapasDosFluxos?: ModelTypes['atendimentos_EtapasDosFluxos_mutation_response'];
    /** update single row of the table: "atendimentos.EtapasDosFluxos" */
    update_atendimentos_EtapasDosFluxos_by_pk?: ModelTypes['atendimentos_EtapasDosFluxos'];
    /** update data of the table: "atendimentos.Fluxos" */
    update_atendimentos_Fluxos?: ModelTypes['atendimentos_Fluxos_mutation_response'];
    /** update single row of the table: "atendimentos.Fluxos" */
    update_atendimentos_Fluxos_by_pk?: ModelTypes['atendimentos_Fluxos'];
    /** update data of the table: "atendimentos.Tickets" */
    update_atendimentos_Tickets?: ModelTypes['atendimentos_Tickets_mutation_response'];
    /** update single row of the table: "atendimentos.Tickets" */
    update_atendimentos_Tickets_by_pk?: ModelTypes['atendimentos_Tickets'];
    /** update data of the table: "atendimentos.TiposDeTickets" */
    update_atendimentos_TiposDeTickets?: ModelTypes['atendimentos_TiposDeTickets_mutation_response'];
    /** update single row of the table: "atendimentos.TiposDeTickets" */
    update_atendimentos_TiposDeTickets_by_pk?: ModelTypes['atendimentos_TiposDeTickets'];
    /** update data of the table: "autenticacao.Atendentes" */
    update_autenticacao_Atendentes?: ModelTypes['autenticacao_Atendentes_mutation_response'];
    /** update single row of the table: "autenticacao.Atendentes" */
    update_autenticacao_Atendentes_by_pk?: ModelTypes['autenticacao_Atendentes'];
    /** update data of the table: "autenticacao.Usuarios" */
    update_autenticacao_Usuarios?: ModelTypes['autenticacao_Usuarios_mutation_response'];
    /** update single row of the table: "autenticacao.Usuarios" */
    update_autenticacao_Usuarios_by_pk?: ModelTypes['autenticacao_Usuarios'];
    /** update data of the table: "clientes.Leads" */
    update_clientes_Leads?: ModelTypes['clientes_Leads_mutation_response'];
    /** update single row of the table: "clientes.Leads" */
    update_clientes_Leads_by_pk?: ModelTypes['clientes_Leads'];
    /** update data of the table: "clientes.PerfisComerciais" */
    update_clientes_PerfisComerciais?: ModelTypes['clientes_PerfisComerciais_mutation_response'];
    /** update single row of the table: "clientes.PerfisComerciais" */
    update_clientes_PerfisComerciais_by_pk?: ModelTypes['clientes_PerfisComerciais'];
    /** update data of the table: "clientes.Veiculos" */
    update_clientes_Veiculos?: ModelTypes['clientes_Veiculos_mutation_response'];
    /** update data of the table: "clientes.VeiculosAtivos" */
    update_clientes_VeiculosAtivos?: ModelTypes['clientes_VeiculosAtivos_mutation_response'];
    /** update data of the table: "clientes.VeiculosAtivos_Beneficios" */
    update_clientes_VeiculosAtivos_Beneficios?: ModelTypes['clientes_VeiculosAtivos_Beneficios_mutation_response'];
    /** update single row of the table: "clientes.VeiculosAtivos_Beneficios" */
    update_clientes_VeiculosAtivos_Beneficios_by_pk?: ModelTypes['clientes_VeiculosAtivos_Beneficios'];
    /** update data of the table: "clientes.VeiculosAtivos_Produtos" */
    update_clientes_VeiculosAtivos_Produtos?: ModelTypes['clientes_VeiculosAtivos_Produtos_mutation_response'];
    /** update single row of the table: "clientes.VeiculosAtivos_Produtos" */
    update_clientes_VeiculosAtivos_Produtos_by_pk?: ModelTypes['clientes_VeiculosAtivos_Produtos'];
    /** update data of the table: "clientes.VeiculosAtivos_Servicos" */
    update_clientes_VeiculosAtivos_Servicos?: ModelTypes['clientes_VeiculosAtivos_Servicos_mutation_response'];
    /** update single row of the table: "clientes.VeiculosAtivos_Servicos" */
    update_clientes_VeiculosAtivos_Servicos_by_pk?: ModelTypes['clientes_VeiculosAtivos_Servicos'];
    /** update data of the table: "clientes.VeiculosAtivos_Situacao" */
    update_clientes_VeiculosAtivos_Situacao?: ModelTypes['clientes_VeiculosAtivos_Situacao_mutation_response'];
    /** update single row of the table: "clientes.VeiculosAtivos_Situacao" */
    update_clientes_VeiculosAtivos_Situacao_by_pk?: ModelTypes['clientes_VeiculosAtivos_Situacao'];
    /** update single row of the table: "clientes.VeiculosAtivos" */
    update_clientes_VeiculosAtivos_by_pk?: ModelTypes['clientes_VeiculosAtivos'];
    /** update single row of the table: "clientes.Veiculos" */
    update_clientes_Veiculos_by_pk?: ModelTypes['clientes_Veiculos'];
    /** update data of the table: "comercial.Acoes" */
    update_comercial_Acoes?: ModelTypes['comercial_Acoes_mutation_response'];
    /** update single row of the table: "comercial.Acoes" */
    update_comercial_Acoes_by_pk?: ModelTypes['comercial_Acoes'];
    /** update data of the table: "comercial.Atributos" */
    update_comercial_Atributos?: ModelTypes['comercial_Atributos_mutation_response'];
    /** update single row of the table: "comercial.Atributos" */
    update_comercial_Atributos_by_pk?: ModelTypes['comercial_Atributos'];
    /** update data of the table: "comercial.Coberturas" */
    update_comercial_Coberturas?: ModelTypes['comercial_Coberturas_mutation_response'];
    /** update single row of the table: "comercial.Coberturas" */
    update_comercial_Coberturas_by_pk?: ModelTypes['comercial_Coberturas'];
    /** update data of the table: "comercial.Combos" */
    update_comercial_Combos?: ModelTypes['comercial_Combos_mutation_response'];
    /** update data of the table: "comercial.Combos_Combos" */
    update_comercial_Combos_Combos?: ModelTypes['comercial_Combos_Combos_mutation_response'];
    /** update single row of the table: "comercial.Combos_Combos" */
    update_comercial_Combos_Combos_by_pk?: ModelTypes['comercial_Combos_Combos'];
    /** update data of the table: "comercial.Combos_Planos" */
    update_comercial_Combos_Planos?: ModelTypes['comercial_Combos_Planos_mutation_response'];
    /** update single row of the table: "comercial.Combos_Planos" */
    update_comercial_Combos_Planos_by_pk?: ModelTypes['comercial_Combos_Planos'];
    /** update data of the table: "comercial.Combos_Precos" */
    update_comercial_Combos_Precos?: ModelTypes['comercial_Combos_Precos_mutation_response'];
    /** update single row of the table: "comercial.Combos_Precos" */
    update_comercial_Combos_Precos_by_pk?: ModelTypes['comercial_Combos_Precos'];
    /** update data of the table: "comercial.Combos_Produtos" */
    update_comercial_Combos_Produtos?: ModelTypes['comercial_Combos_Produtos_mutation_response'];
    /** update single row of the table: "comercial.Combos_Produtos" */
    update_comercial_Combos_Produtos_by_pk?: ModelTypes['comercial_Combos_Produtos'];
    /** update data of the table: "comercial.Combos_Servicos" */
    update_comercial_Combos_Servicos?: ModelTypes['comercial_Combos_Servicos_mutation_response'];
    /** update single row of the table: "comercial.Combos_Servicos" */
    update_comercial_Combos_Servicos_by_pk?: ModelTypes['comercial_Combos_Servicos'];
    /** update single row of the table: "comercial.Combos" */
    update_comercial_Combos_by_pk?: ModelTypes['comercial_Combos'];
    /** update data of the table: "comercial.Condicionais" */
    update_comercial_Condicionais?: ModelTypes['comercial_Condicionais_mutation_response'];
    /** update data of the table: "comercial.CondicionaisSituacoes" */
    update_comercial_CondicionaisSituacoes?: ModelTypes['comercial_CondicionaisSituacoes_mutation_response'];
    /** update single row of the table: "comercial.CondicionaisSituacoes" */
    update_comercial_CondicionaisSituacoes_by_pk?: ModelTypes['comercial_CondicionaisSituacoes'];
    /** update single row of the table: "comercial.Condicionais" */
    update_comercial_Condicionais_by_pk?: ModelTypes['comercial_Condicionais'];
    /** update data of the table: "comercial.ContratosBase" */
    update_comercial_ContratosBase?: ModelTypes['comercial_ContratosBase_mutation_response'];
    /** update data of the table: "comercial.ContratosBase_Versoes" */
    update_comercial_ContratosBase_Versoes?: ModelTypes['comercial_ContratosBase_Versoes_mutation_response'];
    /** update single row of the table: "comercial.ContratosBase_Versoes" */
    update_comercial_ContratosBase_Versoes_by_pk?: ModelTypes['comercial_ContratosBase_Versoes'];
    /** update single row of the table: "comercial.ContratosBase" */
    update_comercial_ContratosBase_by_pk?: ModelTypes['comercial_ContratosBase'];
    /** update data of the table: "comercial.Planos" */
    update_comercial_Planos?: ModelTypes['comercial_Planos_mutation_response'];
    /** update data of the table: "comercial.Planos_Condicionais" */
    update_comercial_Planos_Condicionais?: ModelTypes['comercial_Planos_Condicionais_mutation_response'];
    /** update single row of the table: "comercial.Planos_Condicionais" */
    update_comercial_Planos_Condicionais_by_pk?: ModelTypes['comercial_Planos_Condicionais'];
    /** update data of the table: "comercial.Planos_Precos" */
    update_comercial_Planos_Precos?: ModelTypes['comercial_Planos_Precos_mutation_response'];
    /** update single row of the table: "comercial.Planos_Precos" */
    update_comercial_Planos_Precos_by_pk?: ModelTypes['comercial_Planos_Precos'];
    /** update single row of the table: "comercial.Planos" */
    update_comercial_Planos_by_pk?: ModelTypes['comercial_Planos'];
    /** update data of the table: "comercial.PrestadoresDeServicos" */
    update_comercial_PrestadoresDeServicos?: ModelTypes['comercial_PrestadoresDeServicos_mutation_response'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Produtos" */
    update_comercial_PrestadoresDeServicos_Produtos?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_mutation_response'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    update_comercial_PrestadoresDeServicos_Produtos_Itens?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    update_comercial_PrestadoresDeServicos_Produtos_Itens_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    update_comercial_PrestadoresDeServicos_Produtos_Precos?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    update_comercial_PrestadoresDeServicos_Produtos_Precos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Produtos" */
    update_comercial_PrestadoresDeServicos_Produtos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Produtos'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Servicos" */
    update_comercial_PrestadoresDeServicos_Servicos?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_mutation_response'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    update_comercial_PrestadoresDeServicos_Servicos_Precos?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    update_comercial_PrestadoresDeServicos_Servicos_Precos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    update_comercial_PrestadoresDeServicos_Servicos_Tarifas?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    update_comercial_PrestadoresDeServicos_Servicos_Tarifas_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Servicos" */
    update_comercial_PrestadoresDeServicos_Servicos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** update single row of the table: "comercial.PrestadoresDeServicos" */
    update_comercial_PrestadoresDeServicos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos'];
    /** update data of the table: "comercial.Produtos" */
    update_comercial_Produtos?: ModelTypes['comercial_Produtos_mutation_response'];
    /** update data of the table: "comercial.Produtos_Atributos" */
    update_comercial_Produtos_Atributos?: ModelTypes['comercial_Produtos_Atributos_mutation_response'];
    /** update single row of the table: "comercial.Produtos_Atributos" */
    update_comercial_Produtos_Atributos_by_pk?: ModelTypes['comercial_Produtos_Atributos'];
    /** update data of the table: "comercial.Produtos_Oportunidades" */
    update_comercial_Produtos_Oportunidades?: ModelTypes['comercial_Produtos_Oportunidades_mutation_response'];
    /** update single row of the table: "comercial.Produtos_Oportunidades" */
    update_comercial_Produtos_Oportunidades_by_pk?: ModelTypes['comercial_Produtos_Oportunidades'];
    /** update data of the table: "comercial.Produtos_Produtos" */
    update_comercial_Produtos_Produtos?: ModelTypes['comercial_Produtos_Produtos_mutation_response'];
    /** update single row of the table: "comercial.Produtos_Produtos" */
    update_comercial_Produtos_Produtos_by_pk?: ModelTypes['comercial_Produtos_Produtos'];
    /** update data of the table: "comercial.Produtos_Servicos" */
    update_comercial_Produtos_Servicos?: ModelTypes['comercial_Produtos_Servicos_mutation_response'];
    /** update single row of the table: "comercial.Produtos_Servicos" */
    update_comercial_Produtos_Servicos_by_pk?: ModelTypes['comercial_Produtos_Servicos'];
    /** update data of the table: "comercial.Produtos_Tipos" */
    update_comercial_Produtos_Tipos?: ModelTypes['comercial_Produtos_Tipos_mutation_response'];
    /** update single row of the table: "comercial.Produtos_Tipos" */
    update_comercial_Produtos_Tipos_by_pk?: ModelTypes['comercial_Produtos_Tipos'];
    /** update single row of the table: "comercial.Produtos" */
    update_comercial_Produtos_by_pk?: ModelTypes['comercial_Produtos'];
    /** update data of the table: "comercial.Servicos" */
    update_comercial_Servicos?: ModelTypes['comercial_Servicos_mutation_response'];
    /** update data of the table: "comercial.Servicos_Atributos" */
    update_comercial_Servicos_Atributos?: ModelTypes['comercial_Servicos_Atributos_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Atributos" */
    update_comercial_Servicos_Atributos_by_pk?: ModelTypes['comercial_Servicos_Atributos'];
    /** update data of the table: "comercial.Servicos_Oportunidades" */
    update_comercial_Servicos_Oportunidades?: ModelTypes['comercial_Servicos_Oportunidades_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Oportunidades" */
    update_comercial_Servicos_Oportunidades_by_pk?: ModelTypes['comercial_Servicos_Oportunidades'];
    /** update data of the table: "comercial.Servicos_Produtos" */
    update_comercial_Servicos_Produtos?: ModelTypes['comercial_Servicos_Produtos_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Produtos" */
    update_comercial_Servicos_Produtos_by_pk?: ModelTypes['comercial_Servicos_Produtos'];
    /** update data of the table: "comercial.Servicos_Servicos" */
    update_comercial_Servicos_Servicos?: ModelTypes['comercial_Servicos_Servicos_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Servicos" */
    update_comercial_Servicos_Servicos_by_pk?: ModelTypes['comercial_Servicos_Servicos'];
    /** update data of the table: "comercial.Servicos_Tarifas" */
    update_comercial_Servicos_Tarifas?: ModelTypes['comercial_Servicos_Tarifas_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Tarifas" */
    update_comercial_Servicos_Tarifas_by_pk?: ModelTypes['comercial_Servicos_Tarifas'];
    /** update data of the table: "comercial.Servicos_Tipos" */
    update_comercial_Servicos_Tipos?: ModelTypes['comercial_Servicos_Tipos_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Tipos" */
    update_comercial_Servicos_Tipos_by_pk?: ModelTypes['comercial_Servicos_Tipos'];
    /** update single row of the table: "comercial.Servicos" */
    update_comercial_Servicos_by_pk?: ModelTypes['comercial_Servicos'];
    /** update data of the table: "comercial.Tarifas" */
    update_comercial_Tarifas?: ModelTypes['comercial_Tarifas_mutation_response'];
    /** update single row of the table: "comercial.Tarifas" */
    update_comercial_Tarifas_by_pk?: ModelTypes['comercial_Tarifas'];
    /** update data of the table: "contatos.Emails" */
    update_contatos_Emails?: ModelTypes['contatos_Emails_mutation_response'];
    /** update single row of the table: "contatos.Emails" */
    update_contatos_Emails_by_pk?: ModelTypes['contatos_Emails'];
    /** update data of the table: "contatos.Enderecos" */
    update_contatos_Enderecos?: ModelTypes['contatos_Enderecos_mutation_response'];
    /** update single row of the table: "contatos.Enderecos" */
    update_contatos_Enderecos_by_pk?: ModelTypes['contatos_Enderecos'];
    /** update data of the table: "contatos.Logs" */
    update_contatos_Logs?: ModelTypes['contatos_Logs_mutation_response'];
    /** update single row of the table: "contatos.Logs" */
    update_contatos_Logs_by_pk?: ModelTypes['contatos_Logs'];
    /** update data of the table: "contatos.Telefones" */
    update_contatos_Telefones?: ModelTypes['contatos_Telefones_mutation_response'];
    /** update single row of the table: "contatos.Telefones" */
    update_contatos_Telefones_by_pk?: ModelTypes['contatos_Telefones'];
    /** update data of the table: "identidades.Clientes" */
    update_identidades_Clientes?: ModelTypes['identidades_Clientes_mutation_response'];
    /** update data of the table: "identidades.Clientes_Documentos" */
    update_identidades_Clientes_Documentos?: ModelTypes['identidades_Clientes_Documentos_mutation_response'];
    /** update data of the table: "identidades.Clientes_Documentos_Situacoes" */
    update_identidades_Clientes_Documentos_Situacoes?: ModelTypes['identidades_Clientes_Documentos_Situacoes_mutation_response'];
    /** update single row of the table: "identidades.Clientes_Documentos_Situacoes" */
    update_identidades_Clientes_Documentos_Situacoes_by_pk?: ModelTypes['identidades_Clientes_Documentos_Situacoes'];
    /** update single row of the table: "identidades.Clientes_Documentos" */
    update_identidades_Clientes_Documentos_by_pk?: ModelTypes['identidades_Clientes_Documentos'];
    /** update single row of the table: "identidades.Clientes" */
    update_identidades_Clientes_by_pk?: ModelTypes['identidades_Clientes'];
    /** update data of the table: "identidades.Colaboradores" */
    update_identidades_Colaboradores?: ModelTypes['identidades_Colaboradores_mutation_response'];
    /** update single row of the table: "identidades.Colaboradores" */
    update_identidades_Colaboradores_by_pk?: ModelTypes['identidades_Colaboradores'];
    /** update data of the table: "identidades.Fornecedores" */
    update_identidades_Fornecedores?: ModelTypes['identidades_Fornecedores_mutation_response'];
    /** update single row of the table: "identidades.Fornecedores" */
    update_identidades_Fornecedores_by_pk?: ModelTypes['identidades_Fornecedores'];
    /** update data of the table: "identidades.Logs" */
    update_identidades_Logs?: ModelTypes['identidades_Logs_mutation_response'];
    /** update single row of the table: "identidades.Logs" */
    update_identidades_Logs_by_pk?: ModelTypes['identidades_Logs'];
    /** update data of the table: "identidades.Pessoas" */
    update_identidades_Pessoas?: ModelTypes['identidades_Pessoas_mutation_response'];
    /** update single row of the table: "identidades.Pessoas" */
    update_identidades_Pessoas_by_pk?: ModelTypes['identidades_Pessoas'];
    /** update data of the table: "identidades.Representantes" */
    update_identidades_Representantes?: ModelTypes['identidades_Representantes_mutation_response'];
    /** update single row of the table: "identidades.Representantes" */
    update_identidades_Representantes_by_pk?: ModelTypes['identidades_Representantes'];
    /** update data of the table: "identidades.Vendedores" */
    update_identidades_Vendedores?: ModelTypes['identidades_Vendedores_mutation_response'];
    /** update single row of the table: "identidades.Vendedores" */
    update_identidades_Vendedores_by_pk?: ModelTypes['identidades_Vendedores'];
    /** update data of the table: "propostas.Propostas" */
    update_propostas_Propostas?: ModelTypes['propostas_Propostas_mutation_response'];
    /** update data of the table: "propostas.Propostas_Combos" */
    update_propostas_Propostas_Combos?: ModelTypes['propostas_Propostas_Combos_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Combos" */
    update_propostas_Propostas_Combos_by_pk?: ModelTypes['propostas_Propostas_Combos'];
    /** update data of the table: "propostas.Propostas_Instalacoes" */
    update_propostas_Propostas_Instalacoes?: ModelTypes['propostas_Propostas_Instalacoes_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Instalacoes" */
    update_propostas_Propostas_Instalacoes_by_pk?: ModelTypes['propostas_Propostas_Instalacoes'];
    /** update data of the table: "propostas.Propostas_Oportunidades" */
    update_propostas_Propostas_Oportunidades?: ModelTypes['propostas_Propostas_Oportunidades_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Oportunidades" */
    update_propostas_Propostas_Oportunidades_by_pk?: ModelTypes['propostas_Propostas_Oportunidades'];
    /** update data of the table: "propostas.Propostas_Planos" */
    update_propostas_Propostas_Planos?: ModelTypes['propostas_Propostas_Planos_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Planos" */
    update_propostas_Propostas_Planos_by_pk?: ModelTypes['propostas_Propostas_Planos'];
    /** update data of the table: "propostas.Propostas_Produtos" */
    update_propostas_Propostas_Produtos?: ModelTypes['propostas_Propostas_Produtos_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Produtos" */
    update_propostas_Propostas_Produtos_by_pk?: ModelTypes['propostas_Propostas_Produtos'];
    /** update data of the table: "propostas.Propostas_Servicos" */
    update_propostas_Propostas_Servicos?: ModelTypes['propostas_Propostas_Servicos_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Servicos" */
    update_propostas_Propostas_Servicos_by_pk?: ModelTypes['propostas_Propostas_Servicos'];
    /** update data of the table: "propostas.Propostas_Situacoes" */
    update_propostas_Propostas_Situacoes?: ModelTypes['propostas_Propostas_Situacoes_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Situacoes" */
    update_propostas_Propostas_Situacoes_by_pk?: ModelTypes['propostas_Propostas_Situacoes'];
    /** update single row of the table: "propostas.Propostas" */
    update_propostas_Propostas_by_pk?: ModelTypes['propostas_Propostas'];
    /** update data of the table: "vendas.GruposDePerguntas" */
    update_vendas_GruposDePerguntas?: ModelTypes['vendas_GruposDePerguntas_mutation_response'];
    /** update data of the table: "vendas.GruposDePerguntas_Perguntas" */
    update_vendas_GruposDePerguntas_Perguntas?: ModelTypes['vendas_GruposDePerguntas_Perguntas_mutation_response'];
    /** update single row of the table: "vendas.GruposDePerguntas_Perguntas" */
    update_vendas_GruposDePerguntas_Perguntas_by_pk?: ModelTypes['vendas_GruposDePerguntas_Perguntas'];
    /** update single row of the table: "vendas.GruposDePerguntas" */
    update_vendas_GruposDePerguntas_by_pk?: ModelTypes['vendas_GruposDePerguntas'];
    /** update data of the table: "vendas.Perguntas" */
    update_vendas_Perguntas?: ModelTypes['vendas_Perguntas_mutation_response'];
    /** update single row of the table: "vendas.Perguntas" */
    update_vendas_Perguntas_by_pk?: ModelTypes['vendas_Perguntas'];
    /** update data of the table: "vendas.TiposDePagamento" */
    update_vendas_TiposDePagamento?: ModelTypes['vendas_TiposDePagamento_mutation_response'];
    /** update single row of the table: "vendas.TiposDePagamento" */
    update_vendas_TiposDePagamento_by_pk?: ModelTypes['vendas_TiposDePagamento'];
    /** update data of the table: "vendas.TiposDePrecos" */
    update_vendas_TiposDePrecos?: ModelTypes['vendas_TiposDePrecos_mutation_response'];
    /** update single row of the table: "vendas.TiposDePrecos" */
    update_vendas_TiposDePrecos_by_pk?: ModelTypes['vendas_TiposDePrecos'];
    /** update data of the table: "vendas.TiposDeRecorrencia" */
    update_vendas_TiposDeRecorrencia?: ModelTypes['vendas_TiposDeRecorrencia_mutation_response'];
    /** update single row of the table: "vendas.TiposDeRecorrencia" */
    update_vendas_TiposDeRecorrencia_by_pk?: ModelTypes['vendas_TiposDeRecorrencia'];
  };
  /** column ordering options */
  ['order_by']: GraphQLTypes['order_by'];
  /** columns and relationships of "propostas.Propostas" */
  ['propostas_Propostas']: {
    Cliente_Id?: ModelTypes['uuid'];
    /** An array relationship */
    Combos: ModelTypes['propostas_Propostas_Combos'][];
    /** An aggregate relationship */
    Combos_aggregate: ModelTypes['propostas_Propostas_Combos_aggregate'];
    DataAceito?: ModelTypes['timestamptz'];
    Id: ModelTypes['uuid'];
    /** An array relationship */
    Instalacoes: ModelTypes['propostas_Propostas_Instalacoes'][];
    /** An aggregate relationship */
    Instalacoes_aggregate: ModelTypes['propostas_Propostas_Instalacoes_aggregate'];
    Lead_Id?: ModelTypes['uuid'];
    /** An array relationship */
    Oportunidades: ModelTypes['propostas_Propostas_Oportunidades'][];
    /** An aggregate relationship */
    Oportunidades_aggregate: ModelTypes['propostas_Propostas_Oportunidades_aggregate'];
    /** An array relationship */
    Planos: ModelTypes['propostas_Propostas_Planos'][];
    /** An aggregate relationship */
    Planos_aggregate: ModelTypes['propostas_Propostas_Planos_aggregate'];
    /** An array relationship */
    Produtos: ModelTypes['propostas_Propostas_Produtos'][];
    /** An aggregate relationship */
    Produtos_aggregate: ModelTypes['propostas_Propostas_Produtos_aggregate'];
    /** An array relationship */
    Servicos: ModelTypes['propostas_Propostas_Servicos'][];
    /** An aggregate relationship */
    Servicos_aggregate: ModelTypes['propostas_Propostas_Servicos_aggregate'];
    /** An object relationship */
    Situacao: ModelTypes['propostas_Propostas_Situacoes'];
    Situacao_Id: ModelTypes['propostas_Propostas_Situacoes_enum'];
    Ticket_Id: ModelTypes['uuid'];
    TipoDePagamento_Id: string;
    TipoDeRecorrencia_Id: string;
    Usuario_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos']: {
    /** An object relationship */
    Combo: ModelTypes['comercial_Combos'];
    /** An object relationship */
    ComboPreco: ModelTypes['comercial_Combos_Precos'];
    ComboPreco_Id: ModelTypes['uuid'];
    Combo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Proposta: ModelTypes['propostas_Propostas'];
    Proposta_Id: ModelTypes['uuid'];
    Veiculo: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_aggregate']: {
    aggregate?: ModelTypes['propostas_Propostas_Combos_aggregate_fields'];
    nodes: ModelTypes['propostas_Propostas_Combos'][];
  };
  /** aggregate fields of "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_aggregate_fields']: {
    avg?: ModelTypes['propostas_Propostas_Combos_avg_fields'];
    count: number;
    max?: ModelTypes['propostas_Propostas_Combos_max_fields'];
    min?: ModelTypes['propostas_Propostas_Combos_min_fields'];
    stddev?: ModelTypes['propostas_Propostas_Combos_stddev_fields'];
    stddev_pop?: ModelTypes['propostas_Propostas_Combos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['propostas_Propostas_Combos_stddev_samp_fields'];
    sum?: ModelTypes['propostas_Propostas_Combos_sum_fields'];
    var_pop?: ModelTypes['propostas_Propostas_Combos_var_pop_fields'];
    var_samp?: ModelTypes['propostas_Propostas_Combos_var_samp_fields'];
    variance?: ModelTypes['propostas_Propostas_Combos_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_aggregate_order_by']: GraphQLTypes['propostas_Propostas_Combos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_arr_rel_insert_input']: GraphQLTypes['propostas_Propostas_Combos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['propostas_Propostas_Combos_avg_fields']: {
    Veiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_avg_order_by']: GraphQLTypes['propostas_Propostas_Combos_avg_order_by'];
  /** Boolean expression to filter rows from the table "propostas.Propostas_Combos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Combos_bool_exp']: GraphQLTypes['propostas_Propostas_Combos_bool_exp'];
  /** unique or primary key constraints on table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_constraint']: GraphQLTypes['propostas_Propostas_Combos_constraint'];
  /** input type for incrementing numeric columns in table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_inc_input']: GraphQLTypes['propostas_Propostas_Combos_inc_input'];
  /** input type for inserting data into table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_insert_input']: GraphQLTypes['propostas_Propostas_Combos_insert_input'];
  /** aggregate max on columns */
  ['propostas_Propostas_Combos_max_fields']: {
    ComboPreco_Id?: ModelTypes['uuid'];
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Proposta_Id?: ModelTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_max_order_by']: GraphQLTypes['propostas_Propostas_Combos_max_order_by'];
  /** aggregate min on columns */
  ['propostas_Propostas_Combos_min_fields']: {
    ComboPreco_Id?: ModelTypes['uuid'];
    Combo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Proposta_Id?: ModelTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_min_order_by']: GraphQLTypes['propostas_Propostas_Combos_min_order_by'];
  /** response of any mutation on the table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['propostas_Propostas_Combos'][];
  };
  /** on conflict condition type for table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_on_conflict']: GraphQLTypes['propostas_Propostas_Combos_on_conflict'];
  /** Ordering options when selecting data from "propostas.Propostas_Combos". */
  ['propostas_Propostas_Combos_order_by']: GraphQLTypes['propostas_Propostas_Combos_order_by'];
  /** primary key columns input for table: propostas_Propostas_Combos */
  ['propostas_Propostas_Combos_pk_columns_input']: GraphQLTypes['propostas_Propostas_Combos_pk_columns_input'];
  /** select columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_select_column']: GraphQLTypes['propostas_Propostas_Combos_select_column'];
  /** input type for updating data in table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_set_input']: GraphQLTypes['propostas_Propostas_Combos_set_input'];
  /** aggregate stddev on columns */
  ['propostas_Propostas_Combos_stddev_fields']: {
    Veiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_stddev_order_by']: GraphQLTypes['propostas_Propostas_Combos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Combos_stddev_pop_fields']: {
    Veiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_stddev_pop_order_by']: GraphQLTypes['propostas_Propostas_Combos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Combos_stddev_samp_fields']: {
    Veiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_stddev_samp_order_by']: GraphQLTypes['propostas_Propostas_Combos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['propostas_Propostas_Combos_sum_fields']: {
    Veiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_sum_order_by']: GraphQLTypes['propostas_Propostas_Combos_sum_order_by'];
  /** update columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_update_column']: GraphQLTypes['propostas_Propostas_Combos_update_column'];
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Combos_var_pop_fields']: {
    Veiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_var_pop_order_by']: GraphQLTypes['propostas_Propostas_Combos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Combos_var_samp_fields']: {
    Veiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_var_samp_order_by']: GraphQLTypes['propostas_Propostas_Combos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['propostas_Propostas_Combos_variance_fields']: {
    Veiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_variance_order_by']: GraphQLTypes['propostas_Propostas_Combos_variance_order_by'];
  /** columns and relationships of "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes']: {
    Endereco: ModelTypes['jsonb'];
    Id: ModelTypes['uuid'];
    PosicaoDoVeiculo: number;
    /** An object relationship */
    Proposta: ModelTypes['propostas_Propostas'];
    Proposta_Id: ModelTypes['uuid'];
    Veiculo_Id?: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_aggregate']: {
    aggregate?: ModelTypes['propostas_Propostas_Instalacoes_aggregate_fields'];
    nodes: ModelTypes['propostas_Propostas_Instalacoes'][];
  };
  /** aggregate fields of "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_aggregate_fields']: {
    avg?: ModelTypes['propostas_Propostas_Instalacoes_avg_fields'];
    count: number;
    max?: ModelTypes['propostas_Propostas_Instalacoes_max_fields'];
    min?: ModelTypes['propostas_Propostas_Instalacoes_min_fields'];
    stddev?: ModelTypes['propostas_Propostas_Instalacoes_stddev_fields'];
    stddev_pop?: ModelTypes['propostas_Propostas_Instalacoes_stddev_pop_fields'];
    stddev_samp?: ModelTypes['propostas_Propostas_Instalacoes_stddev_samp_fields'];
    sum?: ModelTypes['propostas_Propostas_Instalacoes_sum_fields'];
    var_pop?: ModelTypes['propostas_Propostas_Instalacoes_var_pop_fields'];
    var_samp?: ModelTypes['propostas_Propostas_Instalacoes_var_samp_fields'];
    variance?: ModelTypes['propostas_Propostas_Instalacoes_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_aggregate_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_aggregate_order_by'];
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['propostas_Propostas_Instalacoes_append_input']: GraphQLTypes['propostas_Propostas_Instalacoes_append_input'];
  /** input type for inserting array relation for remote table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_arr_rel_insert_input']: GraphQLTypes['propostas_Propostas_Instalacoes_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['propostas_Propostas_Instalacoes_avg_fields']: {
    PosicaoDoVeiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_avg_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_avg_order_by'];
  /** Boolean expression to filter rows from the table "propostas.Propostas_Instalacoes". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Instalacoes_bool_exp']: GraphQLTypes['propostas_Propostas_Instalacoes_bool_exp'];
  /** unique or primary key constraints on table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_constraint']: GraphQLTypes['propostas_Propostas_Instalacoes_constraint'];
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['propostas_Propostas_Instalacoes_delete_at_path_input']: GraphQLTypes['propostas_Propostas_Instalacoes_delete_at_path_input'];
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['propostas_Propostas_Instalacoes_delete_elem_input']: GraphQLTypes['propostas_Propostas_Instalacoes_delete_elem_input'];
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['propostas_Propostas_Instalacoes_delete_key_input']: GraphQLTypes['propostas_Propostas_Instalacoes_delete_key_input'];
  /** input type for incrementing numeric columns in table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_inc_input']: GraphQLTypes['propostas_Propostas_Instalacoes_inc_input'];
  /** input type for inserting data into table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_insert_input']: GraphQLTypes['propostas_Propostas_Instalacoes_insert_input'];
  /** aggregate max on columns */
  ['propostas_Propostas_Instalacoes_max_fields']: {
    Id?: ModelTypes['uuid'];
    PosicaoDoVeiculo?: number;
    Proposta_Id?: ModelTypes['uuid'];
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_max_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_max_order_by'];
  /** aggregate min on columns */
  ['propostas_Propostas_Instalacoes_min_fields']: {
    Id?: ModelTypes['uuid'];
    PosicaoDoVeiculo?: number;
    Proposta_Id?: ModelTypes['uuid'];
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_min_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_min_order_by'];
  /** response of any mutation on the table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['propostas_Propostas_Instalacoes'][];
  };
  /** on conflict condition type for table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_on_conflict']: GraphQLTypes['propostas_Propostas_Instalacoes_on_conflict'];
  /** Ordering options when selecting data from "propostas.Propostas_Instalacoes". */
  ['propostas_Propostas_Instalacoes_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_order_by'];
  /** primary key columns input for table: propostas_Propostas_Instalacoes */
  ['propostas_Propostas_Instalacoes_pk_columns_input']: GraphQLTypes['propostas_Propostas_Instalacoes_pk_columns_input'];
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['propostas_Propostas_Instalacoes_prepend_input']: GraphQLTypes['propostas_Propostas_Instalacoes_prepend_input'];
  /** select columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_select_column']: GraphQLTypes['propostas_Propostas_Instalacoes_select_column'];
  /** input type for updating data in table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_set_input']: GraphQLTypes['propostas_Propostas_Instalacoes_set_input'];
  /** aggregate stddev on columns */
  ['propostas_Propostas_Instalacoes_stddev_fields']: {
    PosicaoDoVeiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_stddev_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Instalacoes_stddev_pop_fields']: {
    PosicaoDoVeiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_stddev_pop_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Instalacoes_stddev_samp_fields']: {
    PosicaoDoVeiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_stddev_samp_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['propostas_Propostas_Instalacoes_sum_fields']: {
    PosicaoDoVeiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_sum_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_sum_order_by'];
  /** update columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_update_column']: GraphQLTypes['propostas_Propostas_Instalacoes_update_column'];
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Instalacoes_var_pop_fields']: {
    PosicaoDoVeiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_var_pop_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Instalacoes_var_samp_fields']: {
    PosicaoDoVeiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_var_samp_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_var_samp_order_by'];
  /** aggregate variance on columns */
  ['propostas_Propostas_Instalacoes_variance_fields']: {
    PosicaoDoVeiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_variance_order_by']: GraphQLTypes['propostas_Propostas_Instalacoes_variance_order_by'];
  /** columns and relationships of "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    OportunidadeDeProduto?: ModelTypes['comercial_Produtos_Oportunidades'];
    /** An object relationship */
    OportunidadeDeServico?: ModelTypes['comercial_Servicos_Oportunidades'];
    OportunidadeProduto_Id?: ModelTypes['uuid'];
    OportunidadeServico_Id?: ModelTypes['uuid'];
    /** An object relationship */
    Proposta: ModelTypes['propostas_Propostas'];
    Proposta_Id: ModelTypes['uuid'];
    Veiculo: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_aggregate']: {
    aggregate?: ModelTypes['propostas_Propostas_Oportunidades_aggregate_fields'];
    nodes: ModelTypes['propostas_Propostas_Oportunidades'][];
  };
  /** aggregate fields of "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_aggregate_fields']: {
    avg?: ModelTypes['propostas_Propostas_Oportunidades_avg_fields'];
    count: number;
    max?: ModelTypes['propostas_Propostas_Oportunidades_max_fields'];
    min?: ModelTypes['propostas_Propostas_Oportunidades_min_fields'];
    stddev?: ModelTypes['propostas_Propostas_Oportunidades_stddev_fields'];
    stddev_pop?: ModelTypes['propostas_Propostas_Oportunidades_stddev_pop_fields'];
    stddev_samp?: ModelTypes['propostas_Propostas_Oportunidades_stddev_samp_fields'];
    sum?: ModelTypes['propostas_Propostas_Oportunidades_sum_fields'];
    var_pop?: ModelTypes['propostas_Propostas_Oportunidades_var_pop_fields'];
    var_samp?: ModelTypes['propostas_Propostas_Oportunidades_var_samp_fields'];
    variance?: ModelTypes['propostas_Propostas_Oportunidades_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_aggregate_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_aggregate_order_by'];
  /** input type for inserting array relation for remote table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_arr_rel_insert_input']: GraphQLTypes['propostas_Propostas_Oportunidades_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['propostas_Propostas_Oportunidades_avg_fields']: {
    Veiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_avg_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_avg_order_by'];
  /** Boolean expression to filter rows from the table "propostas.Propostas_Oportunidades". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Oportunidades_bool_exp']: GraphQLTypes['propostas_Propostas_Oportunidades_bool_exp'];
  /** unique or primary key constraints on table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_constraint']: GraphQLTypes['propostas_Propostas_Oportunidades_constraint'];
  /** input type for incrementing numeric columns in table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_inc_input']: GraphQLTypes['propostas_Propostas_Oportunidades_inc_input'];
  /** input type for inserting data into table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_insert_input']: GraphQLTypes['propostas_Propostas_Oportunidades_insert_input'];
  /** aggregate max on columns */
  ['propostas_Propostas_Oportunidades_max_fields']: {
    Id?: ModelTypes['uuid'];
    OportunidadeProduto_Id?: ModelTypes['uuid'];
    OportunidadeServico_Id?: ModelTypes['uuid'];
    Proposta_Id?: ModelTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_max_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_max_order_by'];
  /** aggregate min on columns */
  ['propostas_Propostas_Oportunidades_min_fields']: {
    Id?: ModelTypes['uuid'];
    OportunidadeProduto_Id?: ModelTypes['uuid'];
    OportunidadeServico_Id?: ModelTypes['uuid'];
    Proposta_Id?: ModelTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_min_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_min_order_by'];
  /** response of any mutation on the table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['propostas_Propostas_Oportunidades'][];
  };
  /** on conflict condition type for table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_on_conflict']: GraphQLTypes['propostas_Propostas_Oportunidades_on_conflict'];
  /** Ordering options when selecting data from "propostas.Propostas_Oportunidades". */
  ['propostas_Propostas_Oportunidades_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_order_by'];
  /** primary key columns input for table: propostas_Propostas_Oportunidades */
  ['propostas_Propostas_Oportunidades_pk_columns_input']: GraphQLTypes['propostas_Propostas_Oportunidades_pk_columns_input'];
  /** select columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_select_column']: GraphQLTypes['propostas_Propostas_Oportunidades_select_column'];
  /** input type for updating data in table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_set_input']: GraphQLTypes['propostas_Propostas_Oportunidades_set_input'];
  /** aggregate stddev on columns */
  ['propostas_Propostas_Oportunidades_stddev_fields']: {
    Veiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_stddev_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Oportunidades_stddev_pop_fields']: {
    Veiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_stddev_pop_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Oportunidades_stddev_samp_fields']: {
    Veiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_stddev_samp_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['propostas_Propostas_Oportunidades_sum_fields']: {
    Veiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_sum_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_sum_order_by'];
  /** update columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_update_column']: GraphQLTypes['propostas_Propostas_Oportunidades_update_column'];
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Oportunidades_var_pop_fields']: {
    Veiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_var_pop_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Oportunidades_var_samp_fields']: {
    Veiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_var_samp_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_var_samp_order_by'];
  /** aggregate variance on columns */
  ['propostas_Propostas_Oportunidades_variance_fields']: {
    Veiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_variance_order_by']: GraphQLTypes['propostas_Propostas_Oportunidades_variance_order_by'];
  /** columns and relationships of "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Plano: ModelTypes['comercial_Planos'];
    /** An object relationship */
    PlanoPreco: ModelTypes['comercial_Planos_Precos'];
    PlanoPreco_Id: ModelTypes['uuid'];
    Plano_Id: ModelTypes['uuid'];
    /** An object relationship */
    Proposta: ModelTypes['propostas_Propostas'];
    Proposta_Id: ModelTypes['uuid'];
    Veiculo: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_aggregate']: {
    aggregate?: ModelTypes['propostas_Propostas_Planos_aggregate_fields'];
    nodes: ModelTypes['propostas_Propostas_Planos'][];
  };
  /** aggregate fields of "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_aggregate_fields']: {
    avg?: ModelTypes['propostas_Propostas_Planos_avg_fields'];
    count: number;
    max?: ModelTypes['propostas_Propostas_Planos_max_fields'];
    min?: ModelTypes['propostas_Propostas_Planos_min_fields'];
    stddev?: ModelTypes['propostas_Propostas_Planos_stddev_fields'];
    stddev_pop?: ModelTypes['propostas_Propostas_Planos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['propostas_Propostas_Planos_stddev_samp_fields'];
    sum?: ModelTypes['propostas_Propostas_Planos_sum_fields'];
    var_pop?: ModelTypes['propostas_Propostas_Planos_var_pop_fields'];
    var_samp?: ModelTypes['propostas_Propostas_Planos_var_samp_fields'];
    variance?: ModelTypes['propostas_Propostas_Planos_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_aggregate_order_by']: GraphQLTypes['propostas_Propostas_Planos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_arr_rel_insert_input']: GraphQLTypes['propostas_Propostas_Planos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['propostas_Propostas_Planos_avg_fields']: {
    Veiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_avg_order_by']: GraphQLTypes['propostas_Propostas_Planos_avg_order_by'];
  /** Boolean expression to filter rows from the table "propostas.Propostas_Planos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Planos_bool_exp']: GraphQLTypes['propostas_Propostas_Planos_bool_exp'];
  /** unique or primary key constraints on table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_constraint']: GraphQLTypes['propostas_Propostas_Planos_constraint'];
  /** input type for incrementing numeric columns in table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_inc_input']: GraphQLTypes['propostas_Propostas_Planos_inc_input'];
  /** input type for inserting data into table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_insert_input']: GraphQLTypes['propostas_Propostas_Planos_insert_input'];
  /** aggregate max on columns */
  ['propostas_Propostas_Planos_max_fields']: {
    Id?: ModelTypes['uuid'];
    PlanoPreco_Id?: ModelTypes['uuid'];
    Plano_Id?: ModelTypes['uuid'];
    Proposta_Id?: ModelTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_max_order_by']: GraphQLTypes['propostas_Propostas_Planos_max_order_by'];
  /** aggregate min on columns */
  ['propostas_Propostas_Planos_min_fields']: {
    Id?: ModelTypes['uuid'];
    PlanoPreco_Id?: ModelTypes['uuid'];
    Plano_Id?: ModelTypes['uuid'];
    Proposta_Id?: ModelTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_min_order_by']: GraphQLTypes['propostas_Propostas_Planos_min_order_by'];
  /** response of any mutation on the table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['propostas_Propostas_Planos'][];
  };
  /** on conflict condition type for table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_on_conflict']: GraphQLTypes['propostas_Propostas_Planos_on_conflict'];
  /** Ordering options when selecting data from "propostas.Propostas_Planos". */
  ['propostas_Propostas_Planos_order_by']: GraphQLTypes['propostas_Propostas_Planos_order_by'];
  /** primary key columns input for table: propostas_Propostas_Planos */
  ['propostas_Propostas_Planos_pk_columns_input']: GraphQLTypes['propostas_Propostas_Planos_pk_columns_input'];
  /** select columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_select_column']: GraphQLTypes['propostas_Propostas_Planos_select_column'];
  /** input type for updating data in table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_set_input']: GraphQLTypes['propostas_Propostas_Planos_set_input'];
  /** aggregate stddev on columns */
  ['propostas_Propostas_Planos_stddev_fields']: {
    Veiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_stddev_order_by']: GraphQLTypes['propostas_Propostas_Planos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Planos_stddev_pop_fields']: {
    Veiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_stddev_pop_order_by']: GraphQLTypes['propostas_Propostas_Planos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Planos_stddev_samp_fields']: {
    Veiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_stddev_samp_order_by']: GraphQLTypes['propostas_Propostas_Planos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['propostas_Propostas_Planos_sum_fields']: {
    Veiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_sum_order_by']: GraphQLTypes['propostas_Propostas_Planos_sum_order_by'];
  /** update columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_update_column']: GraphQLTypes['propostas_Propostas_Planos_update_column'];
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Planos_var_pop_fields']: {
    Veiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_var_pop_order_by']: GraphQLTypes['propostas_Propostas_Planos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Planos_var_samp_fields']: {
    Veiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_var_samp_order_by']: GraphQLTypes['propostas_Propostas_Planos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['propostas_Propostas_Planos_variance_fields']: {
    Veiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_variance_order_by']: GraphQLTypes['propostas_Propostas_Planos_variance_order_by'];
  /** columns and relationships of "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Produto: ModelTypes['comercial_Produtos'];
    /** An object relationship */
    ProdutoPreco: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    ProdutoPreco_Id: ModelTypes['uuid'];
    Produto_Id: ModelTypes['uuid'];
    /** An object relationship */
    Proposta: ModelTypes['propostas_Propostas'];
    Proposta_Id: ModelTypes['uuid'];
    Veiculo: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_aggregate']: {
    aggregate?: ModelTypes['propostas_Propostas_Produtos_aggregate_fields'];
    nodes: ModelTypes['propostas_Propostas_Produtos'][];
  };
  /** aggregate fields of "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_aggregate_fields']: {
    avg?: ModelTypes['propostas_Propostas_Produtos_avg_fields'];
    count: number;
    max?: ModelTypes['propostas_Propostas_Produtos_max_fields'];
    min?: ModelTypes['propostas_Propostas_Produtos_min_fields'];
    stddev?: ModelTypes['propostas_Propostas_Produtos_stddev_fields'];
    stddev_pop?: ModelTypes['propostas_Propostas_Produtos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['propostas_Propostas_Produtos_stddev_samp_fields'];
    sum?: ModelTypes['propostas_Propostas_Produtos_sum_fields'];
    var_pop?: ModelTypes['propostas_Propostas_Produtos_var_pop_fields'];
    var_samp?: ModelTypes['propostas_Propostas_Produtos_var_samp_fields'];
    variance?: ModelTypes['propostas_Propostas_Produtos_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_aggregate_order_by']: GraphQLTypes['propostas_Propostas_Produtos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_arr_rel_insert_input']: GraphQLTypes['propostas_Propostas_Produtos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['propostas_Propostas_Produtos_avg_fields']: {
    Veiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_avg_order_by']: GraphQLTypes['propostas_Propostas_Produtos_avg_order_by'];
  /** Boolean expression to filter rows from the table "propostas.Propostas_Produtos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Produtos_bool_exp']: GraphQLTypes['propostas_Propostas_Produtos_bool_exp'];
  /** unique or primary key constraints on table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_constraint']: GraphQLTypes['propostas_Propostas_Produtos_constraint'];
  /** input type for incrementing numeric columns in table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_inc_input']: GraphQLTypes['propostas_Propostas_Produtos_inc_input'];
  /** input type for inserting data into table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_insert_input']: GraphQLTypes['propostas_Propostas_Produtos_insert_input'];
  /** aggregate max on columns */
  ['propostas_Propostas_Produtos_max_fields']: {
    Id?: ModelTypes['uuid'];
    ProdutoPreco_Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    Proposta_Id?: ModelTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_max_order_by']: GraphQLTypes['propostas_Propostas_Produtos_max_order_by'];
  /** aggregate min on columns */
  ['propostas_Propostas_Produtos_min_fields']: {
    Id?: ModelTypes['uuid'];
    ProdutoPreco_Id?: ModelTypes['uuid'];
    Produto_Id?: ModelTypes['uuid'];
    Proposta_Id?: ModelTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_min_order_by']: GraphQLTypes['propostas_Propostas_Produtos_min_order_by'];
  /** response of any mutation on the table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['propostas_Propostas_Produtos'][];
  };
  /** on conflict condition type for table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_on_conflict']: GraphQLTypes['propostas_Propostas_Produtos_on_conflict'];
  /** Ordering options when selecting data from "propostas.Propostas_Produtos". */
  ['propostas_Propostas_Produtos_order_by']: GraphQLTypes['propostas_Propostas_Produtos_order_by'];
  /** primary key columns input for table: propostas_Propostas_Produtos */
  ['propostas_Propostas_Produtos_pk_columns_input']: GraphQLTypes['propostas_Propostas_Produtos_pk_columns_input'];
  /** select columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_select_column']: GraphQLTypes['propostas_Propostas_Produtos_select_column'];
  /** input type for updating data in table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_set_input']: GraphQLTypes['propostas_Propostas_Produtos_set_input'];
  /** aggregate stddev on columns */
  ['propostas_Propostas_Produtos_stddev_fields']: {
    Veiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_stddev_order_by']: GraphQLTypes['propostas_Propostas_Produtos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Produtos_stddev_pop_fields']: {
    Veiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_stddev_pop_order_by']: GraphQLTypes['propostas_Propostas_Produtos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Produtos_stddev_samp_fields']: {
    Veiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_stddev_samp_order_by']: GraphQLTypes['propostas_Propostas_Produtos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['propostas_Propostas_Produtos_sum_fields']: {
    Veiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_sum_order_by']: GraphQLTypes['propostas_Propostas_Produtos_sum_order_by'];
  /** update columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_update_column']: GraphQLTypes['propostas_Propostas_Produtos_update_column'];
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Produtos_var_pop_fields']: {
    Veiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_var_pop_order_by']: GraphQLTypes['propostas_Propostas_Produtos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Produtos_var_samp_fields']: {
    Veiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_var_samp_order_by']: GraphQLTypes['propostas_Propostas_Produtos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['propostas_Propostas_Produtos_variance_fields']: {
    Veiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_variance_order_by']: GraphQLTypes['propostas_Propostas_Produtos_variance_order_by'];
  /** columns and relationships of "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos']: {
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Proposta: ModelTypes['propostas_Propostas'];
    Proposta_Id: ModelTypes['uuid'];
    /** An object relationship */
    Servico: ModelTypes['comercial_Servicos'];
    Servico_Id: ModelTypes['uuid'];
    /** An object relationship */
    ServicosPreco: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    ServicosPreco_Id: ModelTypes['uuid'];
    Veiculo: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_aggregate']: {
    aggregate?: ModelTypes['propostas_Propostas_Servicos_aggregate_fields'];
    nodes: ModelTypes['propostas_Propostas_Servicos'][];
  };
  /** aggregate fields of "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_aggregate_fields']: {
    avg?: ModelTypes['propostas_Propostas_Servicos_avg_fields'];
    count: number;
    max?: ModelTypes['propostas_Propostas_Servicos_max_fields'];
    min?: ModelTypes['propostas_Propostas_Servicos_min_fields'];
    stddev?: ModelTypes['propostas_Propostas_Servicos_stddev_fields'];
    stddev_pop?: ModelTypes['propostas_Propostas_Servicos_stddev_pop_fields'];
    stddev_samp?: ModelTypes['propostas_Propostas_Servicos_stddev_samp_fields'];
    sum?: ModelTypes['propostas_Propostas_Servicos_sum_fields'];
    var_pop?: ModelTypes['propostas_Propostas_Servicos_var_pop_fields'];
    var_samp?: ModelTypes['propostas_Propostas_Servicos_var_samp_fields'];
    variance?: ModelTypes['propostas_Propostas_Servicos_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_aggregate_order_by']: GraphQLTypes['propostas_Propostas_Servicos_aggregate_order_by'];
  /** input type for inserting array relation for remote table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_arr_rel_insert_input']: GraphQLTypes['propostas_Propostas_Servicos_arr_rel_insert_input'];
  /** aggregate avg on columns */
  ['propostas_Propostas_Servicos_avg_fields']: {
    Veiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_avg_order_by']: GraphQLTypes['propostas_Propostas_Servicos_avg_order_by'];
  /** Boolean expression to filter rows from the table "propostas.Propostas_Servicos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Servicos_bool_exp']: GraphQLTypes['propostas_Propostas_Servicos_bool_exp'];
  /** unique or primary key constraints on table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_constraint']: GraphQLTypes['propostas_Propostas_Servicos_constraint'];
  /** input type for incrementing numeric columns in table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_inc_input']: GraphQLTypes['propostas_Propostas_Servicos_inc_input'];
  /** input type for inserting data into table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_insert_input']: GraphQLTypes['propostas_Propostas_Servicos_insert_input'];
  /** aggregate max on columns */
  ['propostas_Propostas_Servicos_max_fields']: {
    Id?: ModelTypes['uuid'];
    Proposta_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    ServicosPreco_Id?: ModelTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_max_order_by']: GraphQLTypes['propostas_Propostas_Servicos_max_order_by'];
  /** aggregate min on columns */
  ['propostas_Propostas_Servicos_min_fields']: {
    Id?: ModelTypes['uuid'];
    Proposta_Id?: ModelTypes['uuid'];
    Servico_Id?: ModelTypes['uuid'];
    ServicosPreco_Id?: ModelTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_min_order_by']: GraphQLTypes['propostas_Propostas_Servicos_min_order_by'];
  /** response of any mutation on the table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['propostas_Propostas_Servicos'][];
  };
  /** on conflict condition type for table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_on_conflict']: GraphQLTypes['propostas_Propostas_Servicos_on_conflict'];
  /** Ordering options when selecting data from "propostas.Propostas_Servicos". */
  ['propostas_Propostas_Servicos_order_by']: GraphQLTypes['propostas_Propostas_Servicos_order_by'];
  /** primary key columns input for table: propostas_Propostas_Servicos */
  ['propostas_Propostas_Servicos_pk_columns_input']: GraphQLTypes['propostas_Propostas_Servicos_pk_columns_input'];
  /** select columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_select_column']: GraphQLTypes['propostas_Propostas_Servicos_select_column'];
  /** input type for updating data in table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_set_input']: GraphQLTypes['propostas_Propostas_Servicos_set_input'];
  /** aggregate stddev on columns */
  ['propostas_Propostas_Servicos_stddev_fields']: {
    Veiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_stddev_order_by']: GraphQLTypes['propostas_Propostas_Servicos_stddev_order_by'];
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Servicos_stddev_pop_fields']: {
    Veiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_stddev_pop_order_by']: GraphQLTypes['propostas_Propostas_Servicos_stddev_pop_order_by'];
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Servicos_stddev_samp_fields']: {
    Veiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_stddev_samp_order_by']: GraphQLTypes['propostas_Propostas_Servicos_stddev_samp_order_by'];
  /** aggregate sum on columns */
  ['propostas_Propostas_Servicos_sum_fields']: {
    Veiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_sum_order_by']: GraphQLTypes['propostas_Propostas_Servicos_sum_order_by'];
  /** update columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_update_column']: GraphQLTypes['propostas_Propostas_Servicos_update_column'];
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Servicos_var_pop_fields']: {
    Veiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_var_pop_order_by']: GraphQLTypes['propostas_Propostas_Servicos_var_pop_order_by'];
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Servicos_var_samp_fields']: {
    Veiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_var_samp_order_by']: GraphQLTypes['propostas_Propostas_Servicos_var_samp_order_by'];
  /** aggregate variance on columns */
  ['propostas_Propostas_Servicos_variance_fields']: {
    Veiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_variance_order_by']: GraphQLTypes['propostas_Propostas_Servicos_variance_order_by'];
  /** columns and relationships of "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes']: {
    Comentario: string;
    /** An array relationship */
    Propostas: ModelTypes['propostas_Propostas'][];
    /** An aggregate relationship */
    Propostas_aggregate: ModelTypes['propostas_Propostas_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_aggregate']: {
    aggregate?: ModelTypes['propostas_Propostas_Situacoes_aggregate_fields'];
    nodes: ModelTypes['propostas_Propostas_Situacoes'][];
  };
  /** aggregate fields of "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_aggregate_fields']: {
    count: number;
    max?: ModelTypes['propostas_Propostas_Situacoes_max_fields'];
    min?: ModelTypes['propostas_Propostas_Situacoes_min_fields'];
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Situacoes". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Situacoes_bool_exp']: GraphQLTypes['propostas_Propostas_Situacoes_bool_exp'];
  /** unique or primary key constraints on table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_constraint']: GraphQLTypes['propostas_Propostas_Situacoes_constraint'];
  ['propostas_Propostas_Situacoes_enum']: GraphQLTypes['propostas_Propostas_Situacoes_enum'];
  /** Boolean expression to compare columns of type "propostas_Propostas_Situacoes_enum". All fields are combined with logical 'AND'. */
  ['propostas_Propostas_Situacoes_enum_comparison_exp']: GraphQLTypes['propostas_Propostas_Situacoes_enum_comparison_exp'];
  /** input type for inserting data into table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_insert_input']: GraphQLTypes['propostas_Propostas_Situacoes_insert_input'];
  /** aggregate max on columns */
  ['propostas_Propostas_Situacoes_max_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Situacoes_min_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['propostas_Propostas_Situacoes'][];
  };
  /** input type for inserting object relation for remote table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_obj_rel_insert_input']: GraphQLTypes['propostas_Propostas_Situacoes_obj_rel_insert_input'];
  /** on conflict condition type for table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_on_conflict']: GraphQLTypes['propostas_Propostas_Situacoes_on_conflict'];
  /** Ordering options when selecting data from "propostas.Propostas_Situacoes". */
  ['propostas_Propostas_Situacoes_order_by']: GraphQLTypes['propostas_Propostas_Situacoes_order_by'];
  /** primary key columns input for table: propostas_Propostas_Situacoes */
  ['propostas_Propostas_Situacoes_pk_columns_input']: GraphQLTypes['propostas_Propostas_Situacoes_pk_columns_input'];
  /** select columns of table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_select_column']: GraphQLTypes['propostas_Propostas_Situacoes_select_column'];
  /** input type for updating data in table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_set_input']: GraphQLTypes['propostas_Propostas_Situacoes_set_input'];
  /** update columns of table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_update_column']: GraphQLTypes['propostas_Propostas_Situacoes_update_column'];
  /** aggregated selection of "propostas.Propostas" */
  ['propostas_Propostas_aggregate']: {
    aggregate?: ModelTypes['propostas_Propostas_aggregate_fields'];
    nodes: ModelTypes['propostas_Propostas'][];
  };
  /** aggregate fields of "propostas.Propostas" */
  ['propostas_Propostas_aggregate_fields']: {
    count: number;
    max?: ModelTypes['propostas_Propostas_max_fields'];
    min?: ModelTypes['propostas_Propostas_min_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas" */
  ['propostas_Propostas_aggregate_order_by']: GraphQLTypes['propostas_Propostas_aggregate_order_by'];
  /** input type for inserting array relation for remote table "propostas.Propostas" */
  ['propostas_Propostas_arr_rel_insert_input']: GraphQLTypes['propostas_Propostas_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "propostas.Propostas". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_bool_exp']: GraphQLTypes['propostas_Propostas_bool_exp'];
  /** unique or primary key constraints on table "propostas.Propostas" */
  ['propostas_Propostas_constraint']: GraphQLTypes['propostas_Propostas_constraint'];
  /** input type for inserting data into table "propostas.Propostas" */
  ['propostas_Propostas_insert_input']: GraphQLTypes['propostas_Propostas_insert_input'];
  /** aggregate max on columns */
  ['propostas_Propostas_max_fields']: {
    Cliente_Id?: ModelTypes['uuid'];
    DataAceito?: ModelTypes['timestamptz'];
    Id?: ModelTypes['uuid'];
    Lead_Id?: ModelTypes['uuid'];
    Ticket_Id?: ModelTypes['uuid'];
    TipoDePagamento_Id?: string;
    TipoDeRecorrencia_Id?: string;
    Usuario_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas" */
  ['propostas_Propostas_max_order_by']: GraphQLTypes['propostas_Propostas_max_order_by'];
  /** aggregate min on columns */
  ['propostas_Propostas_min_fields']: {
    Cliente_Id?: ModelTypes['uuid'];
    DataAceito?: ModelTypes['timestamptz'];
    Id?: ModelTypes['uuid'];
    Lead_Id?: ModelTypes['uuid'];
    Ticket_Id?: ModelTypes['uuid'];
    TipoDePagamento_Id?: string;
    TipoDeRecorrencia_Id?: string;
    Usuario_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas" */
  ['propostas_Propostas_min_order_by']: GraphQLTypes['propostas_Propostas_min_order_by'];
  /** response of any mutation on the table "propostas.Propostas" */
  ['propostas_Propostas_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['propostas_Propostas'][];
  };
  /** input type for inserting object relation for remote table "propostas.Propostas" */
  ['propostas_Propostas_obj_rel_insert_input']: GraphQLTypes['propostas_Propostas_obj_rel_insert_input'];
  /** on conflict condition type for table "propostas.Propostas" */
  ['propostas_Propostas_on_conflict']: GraphQLTypes['propostas_Propostas_on_conflict'];
  /** Ordering options when selecting data from "propostas.Propostas". */
  ['propostas_Propostas_order_by']: GraphQLTypes['propostas_Propostas_order_by'];
  /** primary key columns input for table: propostas_Propostas */
  ['propostas_Propostas_pk_columns_input']: GraphQLTypes['propostas_Propostas_pk_columns_input'];
  /** select columns of table "propostas.Propostas" */
  ['propostas_Propostas_select_column']: GraphQLTypes['propostas_Propostas_select_column'];
  /** input type for updating data in table "propostas.Propostas" */
  ['propostas_Propostas_set_input']: GraphQLTypes['propostas_Propostas_set_input'];
  /** update columns of table "propostas.Propostas" */
  ['propostas_Propostas_update_column']: GraphQLTypes['propostas_Propostas_update_column'];
  ['query_root']: {
    /** fetch data from the table: "CategoriasDeVeiculos" */
    CategoriasDeVeiculos: ModelTypes['CategoriasDeVeiculos'][];
    /** fetch aggregated fields from the table: "CategoriasDeVeiculos" */
    CategoriasDeVeiculos_aggregate: ModelTypes['CategoriasDeVeiculos_aggregate'];
    /** fetch data from the table: "CategoriasDeVeiculos" using primary key columns */
    CategoriasDeVeiculos_by_pk?: ModelTypes['CategoriasDeVeiculos'];
    /** fetch data from the table: "EstadosEMunicipios" */
    EstadosEMunicipios: ModelTypes['EstadosEMunicipios'][];
    /** fetch aggregated fields from the table: "EstadosEMunicipios" */
    EstadosEMunicipios_aggregate: ModelTypes['EstadosEMunicipios_aggregate'];
    /** fetch data from the table: "EstadosEMunicipios" using primary key columns */
    EstadosEMunicipios_by_pk?: ModelTypes['EstadosEMunicipios'];
    /** fetch data from the table: "atendimentos.EtapasDosFluxos" */
    atendimentos_EtapasDosFluxos: ModelTypes['atendimentos_EtapasDosFluxos'][];
    /** fetch aggregated fields from the table: "atendimentos.EtapasDosFluxos" */
    atendimentos_EtapasDosFluxos_aggregate: ModelTypes['atendimentos_EtapasDosFluxos_aggregate'];
    /** fetch data from the table: "atendimentos.EtapasDosFluxos" using primary key columns */
    atendimentos_EtapasDosFluxos_by_pk?: ModelTypes['atendimentos_EtapasDosFluxos'];
    /** fetch data from the table: "atendimentos.Fluxos" */
    atendimentos_Fluxos: ModelTypes['atendimentos_Fluxos'][];
    /** fetch aggregated fields from the table: "atendimentos.Fluxos" */
    atendimentos_Fluxos_aggregate: ModelTypes['atendimentos_Fluxos_aggregate'];
    /** fetch data from the table: "atendimentos.Fluxos" using primary key columns */
    atendimentos_Fluxos_by_pk?: ModelTypes['atendimentos_Fluxos'];
    /** fetch data from the table: "atendimentos.Tickets" */
    atendimentos_Tickets: ModelTypes['atendimentos_Tickets'][];
    /** fetch aggregated fields from the table: "atendimentos.Tickets" */
    atendimentos_Tickets_aggregate: ModelTypes['atendimentos_Tickets_aggregate'];
    /** fetch data from the table: "atendimentos.Tickets" using primary key columns */
    atendimentos_Tickets_by_pk?: ModelTypes['atendimentos_Tickets'];
    /** fetch data from the table: "atendimentos.TiposDeTickets" */
    atendimentos_TiposDeTickets: ModelTypes['atendimentos_TiposDeTickets'][];
    /** fetch aggregated fields from the table: "atendimentos.TiposDeTickets" */
    atendimentos_TiposDeTickets_aggregate: ModelTypes['atendimentos_TiposDeTickets_aggregate'];
    /** fetch data from the table: "atendimentos.TiposDeTickets" using primary key columns */
    atendimentos_TiposDeTickets_by_pk?: ModelTypes['atendimentos_TiposDeTickets'];
    /** fetch data from the table: "autenticacao.Atendentes" */
    autenticacao_Atendentes: ModelTypes['autenticacao_Atendentes'][];
    /** fetch aggregated fields from the table: "autenticacao.Atendentes" */
    autenticacao_Atendentes_aggregate: ModelTypes['autenticacao_Atendentes_aggregate'];
    /** fetch data from the table: "autenticacao.Atendentes" using primary key columns */
    autenticacao_Atendentes_by_pk?: ModelTypes['autenticacao_Atendentes'];
    /** fetch data from the table: "autenticacao.Usuarios" */
    autenticacao_Usuarios: ModelTypes['autenticacao_Usuarios'][];
    /** fetch aggregated fields from the table: "autenticacao.Usuarios" */
    autenticacao_Usuarios_aggregate: ModelTypes['autenticacao_Usuarios_aggregate'];
    /** fetch data from the table: "autenticacao.Usuarios" using primary key columns */
    autenticacao_Usuarios_by_pk?: ModelTypes['autenticacao_Usuarios'];
    /** fetch data from the table: "clientes.Leads" */
    clientes_Leads: ModelTypes['clientes_Leads'][];
    /** fetch aggregated fields from the table: "clientes.Leads" */
    clientes_Leads_aggregate: ModelTypes['clientes_Leads_aggregate'];
    /** fetch data from the table: "clientes.Leads" using primary key columns */
    clientes_Leads_by_pk?: ModelTypes['clientes_Leads'];
    /** fetch data from the table: "clientes.PerfisComerciais" */
    clientes_PerfisComerciais: ModelTypes['clientes_PerfisComerciais'][];
    /** fetch aggregated fields from the table: "clientes.PerfisComerciais" */
    clientes_PerfisComerciais_aggregate: ModelTypes['clientes_PerfisComerciais_aggregate'];
    /** fetch data from the table: "clientes.PerfisComerciais" using primary key columns */
    clientes_PerfisComerciais_by_pk?: ModelTypes['clientes_PerfisComerciais'];
    /** fetch data from the table: "clientes.Veiculos" */
    clientes_Veiculos: ModelTypes['clientes_Veiculos'][];
    /** fetch data from the table: "clientes.VeiculosAtivos" */
    clientes_VeiculosAtivos: ModelTypes['clientes_VeiculosAtivos'][];
    /** fetch data from the table: "clientes.VeiculosAtivos_Beneficios" */
    clientes_VeiculosAtivos_Beneficios: ModelTypes['clientes_VeiculosAtivos_Beneficios'][];
    /** fetch aggregated fields from the table: "clientes.VeiculosAtivos_Beneficios" */
    clientes_VeiculosAtivos_Beneficios_aggregate: ModelTypes['clientes_VeiculosAtivos_Beneficios_aggregate'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Beneficios" using primary key columns */
    clientes_VeiculosAtivos_Beneficios_by_pk?: ModelTypes['clientes_VeiculosAtivos_Beneficios'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Produtos" */
    clientes_VeiculosAtivos_Produtos: ModelTypes['clientes_VeiculosAtivos_Produtos'][];
    /** fetch aggregated fields from the table: "clientes.VeiculosAtivos_Produtos" */
    clientes_VeiculosAtivos_Produtos_aggregate: ModelTypes['clientes_VeiculosAtivos_Produtos_aggregate'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Produtos" using primary key columns */
    clientes_VeiculosAtivos_Produtos_by_pk?: ModelTypes['clientes_VeiculosAtivos_Produtos'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Servicos" */
    clientes_VeiculosAtivos_Servicos: ModelTypes['clientes_VeiculosAtivos_Servicos'][];
    /** fetch aggregated fields from the table: "clientes.VeiculosAtivos_Servicos" */
    clientes_VeiculosAtivos_Servicos_aggregate: ModelTypes['clientes_VeiculosAtivos_Servicos_aggregate'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Servicos" using primary key columns */
    clientes_VeiculosAtivos_Servicos_by_pk?: ModelTypes['clientes_VeiculosAtivos_Servicos'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Situacao" */
    clientes_VeiculosAtivos_Situacao: ModelTypes['clientes_VeiculosAtivos_Situacao'][];
    /** fetch aggregated fields from the table: "clientes.VeiculosAtivos_Situacao" */
    clientes_VeiculosAtivos_Situacao_aggregate: ModelTypes['clientes_VeiculosAtivos_Situacao_aggregate'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Situacao" using primary key columns */
    clientes_VeiculosAtivos_Situacao_by_pk?: ModelTypes['clientes_VeiculosAtivos_Situacao'];
    /** fetch aggregated fields from the table: "clientes.VeiculosAtivos" */
    clientes_VeiculosAtivos_aggregate: ModelTypes['clientes_VeiculosAtivos_aggregate'];
    /** fetch data from the table: "clientes.VeiculosAtivos" using primary key columns */
    clientes_VeiculosAtivos_by_pk?: ModelTypes['clientes_VeiculosAtivos'];
    /** fetch aggregated fields from the table: "clientes.Veiculos" */
    clientes_Veiculos_aggregate: ModelTypes['clientes_Veiculos_aggregate'];
    /** fetch data from the table: "clientes.Veiculos" using primary key columns */
    clientes_Veiculos_by_pk?: ModelTypes['clientes_Veiculos'];
    /** fetch data from the table: "comercial.Acoes" */
    comercial_Acoes: ModelTypes['comercial_Acoes'][];
    /** fetch aggregated fields from the table: "comercial.Acoes" */
    comercial_Acoes_aggregate: ModelTypes['comercial_Acoes_aggregate'];
    /** fetch data from the table: "comercial.Acoes" using primary key columns */
    comercial_Acoes_by_pk?: ModelTypes['comercial_Acoes'];
    /** fetch data from the table: "comercial.Atributos" */
    comercial_Atributos: ModelTypes['comercial_Atributos'][];
    /** fetch aggregated fields from the table: "comercial.Atributos" */
    comercial_Atributos_aggregate: ModelTypes['comercial_Atributos_aggregate'];
    /** fetch data from the table: "comercial.Atributos" using primary key columns */
    comercial_Atributos_by_pk?: ModelTypes['comercial_Atributos'];
    /** fetch data from the table: "comercial.Coberturas" */
    comercial_Coberturas: ModelTypes['comercial_Coberturas'][];
    /** fetch aggregated fields from the table: "comercial.Coberturas" */
    comercial_Coberturas_aggregate: ModelTypes['comercial_Coberturas_aggregate'];
    /** fetch data from the table: "comercial.Coberturas" using primary key columns */
    comercial_Coberturas_by_pk?: ModelTypes['comercial_Coberturas'];
    /** fetch data from the table: "comercial.Combos" */
    comercial_Combos: ModelTypes['comercial_Combos'][];
    /** fetch data from the table: "comercial.Combos_Combos" */
    comercial_Combos_Combos: ModelTypes['comercial_Combos_Combos'][];
    /** fetch aggregated fields from the table: "comercial.Combos_Combos" */
    comercial_Combos_Combos_aggregate: ModelTypes['comercial_Combos_Combos_aggregate'];
    /** fetch data from the table: "comercial.Combos_Combos" using primary key columns */
    comercial_Combos_Combos_by_pk?: ModelTypes['comercial_Combos_Combos'];
    /** fetch data from the table: "comercial.Combos_Planos" */
    comercial_Combos_Planos: ModelTypes['comercial_Combos_Planos'][];
    /** fetch aggregated fields from the table: "comercial.Combos_Planos" */
    comercial_Combos_Planos_aggregate: ModelTypes['comercial_Combos_Planos_aggregate'];
    /** fetch data from the table: "comercial.Combos_Planos" using primary key columns */
    comercial_Combos_Planos_by_pk?: ModelTypes['comercial_Combos_Planos'];
    /** fetch data from the table: "comercial.Combos_Precos" */
    comercial_Combos_Precos: ModelTypes['comercial_Combos_Precos'][];
    /** fetch aggregated fields from the table: "comercial.Combos_Precos" */
    comercial_Combos_Precos_aggregate: ModelTypes['comercial_Combos_Precos_aggregate'];
    /** fetch data from the table: "comercial.Combos_Precos" using primary key columns */
    comercial_Combos_Precos_by_pk?: ModelTypes['comercial_Combos_Precos'];
    /** fetch data from the table: "comercial.Combos_Produtos" */
    comercial_Combos_Produtos: ModelTypes['comercial_Combos_Produtos'][];
    /** fetch aggregated fields from the table: "comercial.Combos_Produtos" */
    comercial_Combos_Produtos_aggregate: ModelTypes['comercial_Combos_Produtos_aggregate'];
    /** fetch data from the table: "comercial.Combos_Produtos" using primary key columns */
    comercial_Combos_Produtos_by_pk?: ModelTypes['comercial_Combos_Produtos'];
    /** fetch data from the table: "comercial.Combos_Servicos" */
    comercial_Combos_Servicos: ModelTypes['comercial_Combos_Servicos'][];
    /** fetch aggregated fields from the table: "comercial.Combos_Servicos" */
    comercial_Combos_Servicos_aggregate: ModelTypes['comercial_Combos_Servicos_aggregate'];
    /** fetch data from the table: "comercial.Combos_Servicos" using primary key columns */
    comercial_Combos_Servicos_by_pk?: ModelTypes['comercial_Combos_Servicos'];
    /** fetch aggregated fields from the table: "comercial.Combos" */
    comercial_Combos_aggregate: ModelTypes['comercial_Combos_aggregate'];
    /** fetch data from the table: "comercial.Combos" using primary key columns */
    comercial_Combos_by_pk?: ModelTypes['comercial_Combos'];
    /** fetch data from the table: "comercial.Condicionais" */
    comercial_Condicionais: ModelTypes['comercial_Condicionais'][];
    /** fetch data from the table: "comercial.CondicionaisSituacoes" */
    comercial_CondicionaisSituacoes: ModelTypes['comercial_CondicionaisSituacoes'][];
    /** fetch aggregated fields from the table: "comercial.CondicionaisSituacoes" */
    comercial_CondicionaisSituacoes_aggregate: ModelTypes['comercial_CondicionaisSituacoes_aggregate'];
    /** fetch data from the table: "comercial.CondicionaisSituacoes" using primary key columns */
    comercial_CondicionaisSituacoes_by_pk?: ModelTypes['comercial_CondicionaisSituacoes'];
    /** fetch aggregated fields from the table: "comercial.Condicionais" */
    comercial_Condicionais_aggregate: ModelTypes['comercial_Condicionais_aggregate'];
    /** fetch data from the table: "comercial.Condicionais" using primary key columns */
    comercial_Condicionais_by_pk?: ModelTypes['comercial_Condicionais'];
    /** fetch data from the table: "comercial.ContratosBase" */
    comercial_ContratosBase: ModelTypes['comercial_ContratosBase'][];
    /** fetch data from the table: "comercial.ContratosBase_Versoes" */
    comercial_ContratosBase_Versoes: ModelTypes['comercial_ContratosBase_Versoes'][];
    /** fetch aggregated fields from the table: "comercial.ContratosBase_Versoes" */
    comercial_ContratosBase_Versoes_aggregate: ModelTypes['comercial_ContratosBase_Versoes_aggregate'];
    /** fetch data from the table: "comercial.ContratosBase_Versoes" using primary key columns */
    comercial_ContratosBase_Versoes_by_pk?: ModelTypes['comercial_ContratosBase_Versoes'];
    /** fetch aggregated fields from the table: "comercial.ContratosBase" */
    comercial_ContratosBase_aggregate: ModelTypes['comercial_ContratosBase_aggregate'];
    /** fetch data from the table: "comercial.ContratosBase" using primary key columns */
    comercial_ContratosBase_by_pk?: ModelTypes['comercial_ContratosBase'];
    /** fetch data from the table: "comercial.Planos" */
    comercial_Planos: ModelTypes['comercial_Planos'][];
    /** fetch data from the table: "comercial.Planos_Condicionais" */
    comercial_Planos_Condicionais: ModelTypes['comercial_Planos_Condicionais'][];
    /** fetch aggregated fields from the table: "comercial.Planos_Condicionais" */
    comercial_Planos_Condicionais_aggregate: ModelTypes['comercial_Planos_Condicionais_aggregate'];
    /** fetch data from the table: "comercial.Planos_Condicionais" using primary key columns */
    comercial_Planos_Condicionais_by_pk?: ModelTypes['comercial_Planos_Condicionais'];
    /** fetch data from the table: "comercial.Planos_Precos" */
    comercial_Planos_Precos: ModelTypes['comercial_Planos_Precos'][];
    /** fetch aggregated fields from the table: "comercial.Planos_Precos" */
    comercial_Planos_Precos_aggregate: ModelTypes['comercial_Planos_Precos_aggregate'];
    /** fetch data from the table: "comercial.Planos_Precos" using primary key columns */
    comercial_Planos_Precos_by_pk?: ModelTypes['comercial_Planos_Precos'];
    /** fetch aggregated fields from the table: "comercial.Planos" */
    comercial_Planos_aggregate: ModelTypes['comercial_Planos_aggregate'];
    /** fetch data from the table: "comercial.Planos" using primary key columns */
    comercial_Planos_by_pk?: ModelTypes['comercial_Planos'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos" */
    comercial_PrestadoresDeServicos: ModelTypes['comercial_PrestadoresDeServicos'][];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos" */
    comercial_PrestadoresDeServicos_Produtos: ModelTypes['comercial_PrestadoresDeServicos_Produtos'][];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    comercial_PrestadoresDeServicos_Produtos_Itens: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens'][];
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    comercial_PrestadoresDeServicos_Produtos_Itens_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos_Itens" using primary key columns */
    comercial_PrestadoresDeServicos_Produtos_Itens_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Itens'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    comercial_PrestadoresDeServicos_Produtos_Precos: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos'][];
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    comercial_PrestadoresDeServicos_Produtos_Precos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos_Precos" using primary key columns */
    comercial_PrestadoresDeServicos_Produtos_Precos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Produtos" */
    comercial_PrestadoresDeServicos_Produtos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Produtos_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos" using primary key columns */
    comercial_PrestadoresDeServicos_Produtos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Produtos'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos" */
    comercial_PrestadoresDeServicos_Servicos: ModelTypes['comercial_PrestadoresDeServicos_Servicos'][];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    comercial_PrestadoresDeServicos_Servicos_Precos: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'][];
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    comercial_PrestadoresDeServicos_Servicos_Precos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos_Precos" using primary key columns */
    comercial_PrestadoresDeServicos_Servicos_Precos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    comercial_PrestadoresDeServicos_Servicos_Tarifas: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'][];
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" using primary key columns */
    comercial_PrestadoresDeServicos_Servicos_Tarifas_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'];
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Servicos" */
    comercial_PrestadoresDeServicos_Servicos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Servicos_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos" using primary key columns */
    comercial_PrestadoresDeServicos_Servicos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos" */
    comercial_PrestadoresDeServicos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos" using primary key columns */
    comercial_PrestadoresDeServicos_by_pk?: ModelTypes['comercial_PrestadoresDeServicos'];
    /** fetch data from the table: "comercial.Produtos" */
    comercial_Produtos: ModelTypes['comercial_Produtos'][];
    /** fetch data from the table: "comercial.Produtos_Atributos" */
    comercial_Produtos_Atributos: ModelTypes['comercial_Produtos_Atributos'][];
    /** fetch aggregated fields from the table: "comercial.Produtos_Atributos" */
    comercial_Produtos_Atributos_aggregate: ModelTypes['comercial_Produtos_Atributos_aggregate'];
    /** fetch data from the table: "comercial.Produtos_Atributos" using primary key columns */
    comercial_Produtos_Atributos_by_pk?: ModelTypes['comercial_Produtos_Atributos'];
    /** fetch data from the table: "comercial.Produtos_Oportunidades" */
    comercial_Produtos_Oportunidades: ModelTypes['comercial_Produtos_Oportunidades'][];
    /** fetch aggregated fields from the table: "comercial.Produtos_Oportunidades" */
    comercial_Produtos_Oportunidades_aggregate: ModelTypes['comercial_Produtos_Oportunidades_aggregate'];
    /** fetch data from the table: "comercial.Produtos_Oportunidades" using primary key columns */
    comercial_Produtos_Oportunidades_by_pk?: ModelTypes['comercial_Produtos_Oportunidades'];
    /** fetch data from the table: "comercial.Produtos_Produtos" */
    comercial_Produtos_Produtos: ModelTypes['comercial_Produtos_Produtos'][];
    /** fetch aggregated fields from the table: "comercial.Produtos_Produtos" */
    comercial_Produtos_Produtos_aggregate: ModelTypes['comercial_Produtos_Produtos_aggregate'];
    /** fetch data from the table: "comercial.Produtos_Produtos" using primary key columns */
    comercial_Produtos_Produtos_by_pk?: ModelTypes['comercial_Produtos_Produtos'];
    /** fetch data from the table: "comercial.Produtos_Servicos" */
    comercial_Produtos_Servicos: ModelTypes['comercial_Produtos_Servicos'][];
    /** fetch aggregated fields from the table: "comercial.Produtos_Servicos" */
    comercial_Produtos_Servicos_aggregate: ModelTypes['comercial_Produtos_Servicos_aggregate'];
    /** fetch data from the table: "comercial.Produtos_Servicos" using primary key columns */
    comercial_Produtos_Servicos_by_pk?: ModelTypes['comercial_Produtos_Servicos'];
    /** fetch data from the table: "comercial.Produtos_Tipos" */
    comercial_Produtos_Tipos: ModelTypes['comercial_Produtos_Tipos'][];
    /** fetch aggregated fields from the table: "comercial.Produtos_Tipos" */
    comercial_Produtos_Tipos_aggregate: ModelTypes['comercial_Produtos_Tipos_aggregate'];
    /** fetch data from the table: "comercial.Produtos_Tipos" using primary key columns */
    comercial_Produtos_Tipos_by_pk?: ModelTypes['comercial_Produtos_Tipos'];
    /** fetch aggregated fields from the table: "comercial.Produtos" */
    comercial_Produtos_aggregate: ModelTypes['comercial_Produtos_aggregate'];
    /** fetch data from the table: "comercial.Produtos" using primary key columns */
    comercial_Produtos_by_pk?: ModelTypes['comercial_Produtos'];
    /** fetch data from the table: "comercial.Servicos" */
    comercial_Servicos: ModelTypes['comercial_Servicos'][];
    /** fetch data from the table: "comercial.Servicos_Atributos" */
    comercial_Servicos_Atributos: ModelTypes['comercial_Servicos_Atributos'][];
    /** fetch aggregated fields from the table: "comercial.Servicos_Atributos" */
    comercial_Servicos_Atributos_aggregate: ModelTypes['comercial_Servicos_Atributos_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Atributos" using primary key columns */
    comercial_Servicos_Atributos_by_pk?: ModelTypes['comercial_Servicos_Atributos'];
    /** fetch data from the table: "comercial.Servicos_Oportunidades" */
    comercial_Servicos_Oportunidades: ModelTypes['comercial_Servicos_Oportunidades'][];
    /** fetch aggregated fields from the table: "comercial.Servicos_Oportunidades" */
    comercial_Servicos_Oportunidades_aggregate: ModelTypes['comercial_Servicos_Oportunidades_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Oportunidades" using primary key columns */
    comercial_Servicos_Oportunidades_by_pk?: ModelTypes['comercial_Servicos_Oportunidades'];
    /** fetch data from the table: "comercial.Servicos_Produtos" */
    comercial_Servicos_Produtos: ModelTypes['comercial_Servicos_Produtos'][];
    /** fetch aggregated fields from the table: "comercial.Servicos_Produtos" */
    comercial_Servicos_Produtos_aggregate: ModelTypes['comercial_Servicos_Produtos_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Produtos" using primary key columns */
    comercial_Servicos_Produtos_by_pk?: ModelTypes['comercial_Servicos_Produtos'];
    /** fetch data from the table: "comercial.Servicos_Servicos" */
    comercial_Servicos_Servicos: ModelTypes['comercial_Servicos_Servicos'][];
    /** fetch aggregated fields from the table: "comercial.Servicos_Servicos" */
    comercial_Servicos_Servicos_aggregate: ModelTypes['comercial_Servicos_Servicos_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Servicos" using primary key columns */
    comercial_Servicos_Servicos_by_pk?: ModelTypes['comercial_Servicos_Servicos'];
    /** fetch data from the table: "comercial.Servicos_Tarifas" */
    comercial_Servicos_Tarifas: ModelTypes['comercial_Servicos_Tarifas'][];
    /** fetch aggregated fields from the table: "comercial.Servicos_Tarifas" */
    comercial_Servicos_Tarifas_aggregate: ModelTypes['comercial_Servicos_Tarifas_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Tarifas" using primary key columns */
    comercial_Servicos_Tarifas_by_pk?: ModelTypes['comercial_Servicos_Tarifas'];
    /** fetch data from the table: "comercial.Servicos_Tipos" */
    comercial_Servicos_Tipos: ModelTypes['comercial_Servicos_Tipos'][];
    /** fetch aggregated fields from the table: "comercial.Servicos_Tipos" */
    comercial_Servicos_Tipos_aggregate: ModelTypes['comercial_Servicos_Tipos_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Tipos" using primary key columns */
    comercial_Servicos_Tipos_by_pk?: ModelTypes['comercial_Servicos_Tipos'];
    /** fetch aggregated fields from the table: "comercial.Servicos" */
    comercial_Servicos_aggregate: ModelTypes['comercial_Servicos_aggregate'];
    /** fetch data from the table: "comercial.Servicos" using primary key columns */
    comercial_Servicos_by_pk?: ModelTypes['comercial_Servicos'];
    /** fetch data from the table: "comercial.Tarifas" */
    comercial_Tarifas: ModelTypes['comercial_Tarifas'][];
    /** fetch aggregated fields from the table: "comercial.Tarifas" */
    comercial_Tarifas_aggregate: ModelTypes['comercial_Tarifas_aggregate'];
    /** fetch data from the table: "comercial.Tarifas" using primary key columns */
    comercial_Tarifas_by_pk?: ModelTypes['comercial_Tarifas'];
    /** fetch data from the table: "contatos.Emails" */
    contatos_Emails: ModelTypes['contatos_Emails'][];
    /** fetch aggregated fields from the table: "contatos.Emails" */
    contatos_Emails_aggregate: ModelTypes['contatos_Emails_aggregate'];
    /** fetch data from the table: "contatos.Emails" using primary key columns */
    contatos_Emails_by_pk?: ModelTypes['contatos_Emails'];
    /** fetch data from the table: "contatos.Enderecos" */
    contatos_Enderecos: ModelTypes['contatos_Enderecos'][];
    /** fetch aggregated fields from the table: "contatos.Enderecos" */
    contatos_Enderecos_aggregate: ModelTypes['contatos_Enderecos_aggregate'];
    /** fetch data from the table: "contatos.Enderecos" using primary key columns */
    contatos_Enderecos_by_pk?: ModelTypes['contatos_Enderecos'];
    /** fetch data from the table: "contatos.Logs" */
    contatos_Logs: ModelTypes['contatos_Logs'][];
    /** fetch aggregated fields from the table: "contatos.Logs" */
    contatos_Logs_aggregate: ModelTypes['contatos_Logs_aggregate'];
    /** fetch data from the table: "contatos.Logs" using primary key columns */
    contatos_Logs_by_pk?: ModelTypes['contatos_Logs'];
    /** fetch data from the table: "contatos.Telefones" */
    contatos_Telefones: ModelTypes['contatos_Telefones'][];
    /** fetch aggregated fields from the table: "contatos.Telefones" */
    contatos_Telefones_aggregate: ModelTypes['contatos_Telefones_aggregate'];
    /** fetch data from the table: "contatos.Telefones" using primary key columns */
    contatos_Telefones_by_pk?: ModelTypes['contatos_Telefones'];
    /** fetch data from the table: "identidades.Clientes" */
    identidades_Clientes: ModelTypes['identidades_Clientes'][];
    /** fetch data from the table: "identidades.Clientes_Documentos" */
    identidades_Clientes_Documentos: ModelTypes['identidades_Clientes_Documentos'][];
    /** fetch data from the table: "identidades.Clientes_Documentos_Situacoes" */
    identidades_Clientes_Documentos_Situacoes: ModelTypes['identidades_Clientes_Documentos_Situacoes'][];
    /** fetch aggregated fields from the table: "identidades.Clientes_Documentos_Situacoes" */
    identidades_Clientes_Documentos_Situacoes_aggregate: ModelTypes['identidades_Clientes_Documentos_Situacoes_aggregate'];
    /** fetch data from the table: "identidades.Clientes_Documentos_Situacoes" using primary key columns */
    identidades_Clientes_Documentos_Situacoes_by_pk?: ModelTypes['identidades_Clientes_Documentos_Situacoes'];
    /** fetch aggregated fields from the table: "identidades.Clientes_Documentos" */
    identidades_Clientes_Documentos_aggregate: ModelTypes['identidades_Clientes_Documentos_aggregate'];
    /** fetch data from the table: "identidades.Clientes_Documentos" using primary key columns */
    identidades_Clientes_Documentos_by_pk?: ModelTypes['identidades_Clientes_Documentos'];
    /** fetch aggregated fields from the table: "identidades.Clientes" */
    identidades_Clientes_aggregate: ModelTypes['identidades_Clientes_aggregate'];
    /** fetch data from the table: "identidades.Clientes" using primary key columns */
    identidades_Clientes_by_pk?: ModelTypes['identidades_Clientes'];
    /** fetch data from the table: "identidades.Colaboradores" */
    identidades_Colaboradores: ModelTypes['identidades_Colaboradores'][];
    /** fetch aggregated fields from the table: "identidades.Colaboradores" */
    identidades_Colaboradores_aggregate: ModelTypes['identidades_Colaboradores_aggregate'];
    /** fetch data from the table: "identidades.Colaboradores" using primary key columns */
    identidades_Colaboradores_by_pk?: ModelTypes['identidades_Colaboradores'];
    /** fetch data from the table: "identidades.Fornecedores" */
    identidades_Fornecedores: ModelTypes['identidades_Fornecedores'][];
    /** fetch aggregated fields from the table: "identidades.Fornecedores" */
    identidades_Fornecedores_aggregate: ModelTypes['identidades_Fornecedores_aggregate'];
    /** fetch data from the table: "identidades.Fornecedores" using primary key columns */
    identidades_Fornecedores_by_pk?: ModelTypes['identidades_Fornecedores'];
    /** fetch data from the table: "identidades.Logs" */
    identidades_Logs: ModelTypes['identidades_Logs'][];
    /** fetch aggregated fields from the table: "identidades.Logs" */
    identidades_Logs_aggregate: ModelTypes['identidades_Logs_aggregate'];
    /** fetch data from the table: "identidades.Logs" using primary key columns */
    identidades_Logs_by_pk?: ModelTypes['identidades_Logs'];
    /** fetch data from the table: "identidades.Pessoas" */
    identidades_Pessoas: ModelTypes['identidades_Pessoas'][];
    /** fetch aggregated fields from the table: "identidades.Pessoas" */
    identidades_Pessoas_aggregate: ModelTypes['identidades_Pessoas_aggregate'];
    /** fetch data from the table: "identidades.Pessoas" using primary key columns */
    identidades_Pessoas_by_pk?: ModelTypes['identidades_Pessoas'];
    /** fetch data from the table: "identidades.Representantes" */
    identidades_Representantes: ModelTypes['identidades_Representantes'][];
    /** fetch aggregated fields from the table: "identidades.Representantes" */
    identidades_Representantes_aggregate: ModelTypes['identidades_Representantes_aggregate'];
    /** fetch data from the table: "identidades.Representantes" using primary key columns */
    identidades_Representantes_by_pk?: ModelTypes['identidades_Representantes'];
    /** fetch data from the table: "identidades.Vendedores" */
    identidades_Vendedores: ModelTypes['identidades_Vendedores'][];
    /** fetch aggregated fields from the table: "identidades.Vendedores" */
    identidades_Vendedores_aggregate: ModelTypes['identidades_Vendedores_aggregate'];
    /** fetch data from the table: "identidades.Vendedores" using primary key columns */
    identidades_Vendedores_by_pk?: ModelTypes['identidades_Vendedores'];
    /** fetch data from the table: "propostas.Propostas" */
    propostas_Propostas: ModelTypes['propostas_Propostas'][];
    /** fetch data from the table: "propostas.Propostas_Combos" */
    propostas_Propostas_Combos: ModelTypes['propostas_Propostas_Combos'][];
    /** fetch aggregated fields from the table: "propostas.Propostas_Combos" */
    propostas_Propostas_Combos_aggregate: ModelTypes['propostas_Propostas_Combos_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Combos" using primary key columns */
    propostas_Propostas_Combos_by_pk?: ModelTypes['propostas_Propostas_Combos'];
    /** fetch data from the table: "propostas.Propostas_Instalacoes" */
    propostas_Propostas_Instalacoes: ModelTypes['propostas_Propostas_Instalacoes'][];
    /** fetch aggregated fields from the table: "propostas.Propostas_Instalacoes" */
    propostas_Propostas_Instalacoes_aggregate: ModelTypes['propostas_Propostas_Instalacoes_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Instalacoes" using primary key columns */
    propostas_Propostas_Instalacoes_by_pk?: ModelTypes['propostas_Propostas_Instalacoes'];
    /** fetch data from the table: "propostas.Propostas_Oportunidades" */
    propostas_Propostas_Oportunidades: ModelTypes['propostas_Propostas_Oportunidades'][];
    /** fetch aggregated fields from the table: "propostas.Propostas_Oportunidades" */
    propostas_Propostas_Oportunidades_aggregate: ModelTypes['propostas_Propostas_Oportunidades_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Oportunidades" using primary key columns */
    propostas_Propostas_Oportunidades_by_pk?: ModelTypes['propostas_Propostas_Oportunidades'];
    /** fetch data from the table: "propostas.Propostas_Planos" */
    propostas_Propostas_Planos: ModelTypes['propostas_Propostas_Planos'][];
    /** fetch aggregated fields from the table: "propostas.Propostas_Planos" */
    propostas_Propostas_Planos_aggregate: ModelTypes['propostas_Propostas_Planos_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Planos" using primary key columns */
    propostas_Propostas_Planos_by_pk?: ModelTypes['propostas_Propostas_Planos'];
    /** fetch data from the table: "propostas.Propostas_Produtos" */
    propostas_Propostas_Produtos: ModelTypes['propostas_Propostas_Produtos'][];
    /** fetch aggregated fields from the table: "propostas.Propostas_Produtos" */
    propostas_Propostas_Produtos_aggregate: ModelTypes['propostas_Propostas_Produtos_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Produtos" using primary key columns */
    propostas_Propostas_Produtos_by_pk?: ModelTypes['propostas_Propostas_Produtos'];
    /** fetch data from the table: "propostas.Propostas_Servicos" */
    propostas_Propostas_Servicos: ModelTypes['propostas_Propostas_Servicos'][];
    /** fetch aggregated fields from the table: "propostas.Propostas_Servicos" */
    propostas_Propostas_Servicos_aggregate: ModelTypes['propostas_Propostas_Servicos_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Servicos" using primary key columns */
    propostas_Propostas_Servicos_by_pk?: ModelTypes['propostas_Propostas_Servicos'];
    /** fetch data from the table: "propostas.Propostas_Situacoes" */
    propostas_Propostas_Situacoes: ModelTypes['propostas_Propostas_Situacoes'][];
    /** fetch aggregated fields from the table: "propostas.Propostas_Situacoes" */
    propostas_Propostas_Situacoes_aggregate: ModelTypes['propostas_Propostas_Situacoes_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Situacoes" using primary key columns */
    propostas_Propostas_Situacoes_by_pk?: ModelTypes['propostas_Propostas_Situacoes'];
    /** fetch aggregated fields from the table: "propostas.Propostas" */
    propostas_Propostas_aggregate: ModelTypes['propostas_Propostas_aggregate'];
    /** fetch data from the table: "propostas.Propostas" using primary key columns */
    propostas_Propostas_by_pk?: ModelTypes['propostas_Propostas'];
    /** fetch data from the table: "vendas.GruposDePerguntas" */
    vendas_GruposDePerguntas: ModelTypes['vendas_GruposDePerguntas'][];
    /** fetch data from the table: "vendas.GruposDePerguntas_Perguntas" */
    vendas_GruposDePerguntas_Perguntas: ModelTypes['vendas_GruposDePerguntas_Perguntas'][];
    /** fetch aggregated fields from the table: "vendas.GruposDePerguntas_Perguntas" */
    vendas_GruposDePerguntas_Perguntas_aggregate: ModelTypes['vendas_GruposDePerguntas_Perguntas_aggregate'];
    /** fetch data from the table: "vendas.GruposDePerguntas_Perguntas" using primary key columns */
    vendas_GruposDePerguntas_Perguntas_by_pk?: ModelTypes['vendas_GruposDePerguntas_Perguntas'];
    /** fetch aggregated fields from the table: "vendas.GruposDePerguntas" */
    vendas_GruposDePerguntas_aggregate: ModelTypes['vendas_GruposDePerguntas_aggregate'];
    /** fetch data from the table: "vendas.GruposDePerguntas" using primary key columns */
    vendas_GruposDePerguntas_by_pk?: ModelTypes['vendas_GruposDePerguntas'];
    /** fetch data from the table: "vendas.Perguntas" */
    vendas_Perguntas: ModelTypes['vendas_Perguntas'][];
    /** fetch aggregated fields from the table: "vendas.Perguntas" */
    vendas_Perguntas_aggregate: ModelTypes['vendas_Perguntas_aggregate'];
    /** fetch data from the table: "vendas.Perguntas" using primary key columns */
    vendas_Perguntas_by_pk?: ModelTypes['vendas_Perguntas'];
    /** fetch data from the table: "vendas.TiposDePagamento" */
    vendas_TiposDePagamento: ModelTypes['vendas_TiposDePagamento'][];
    /** fetch aggregated fields from the table: "vendas.TiposDePagamento" */
    vendas_TiposDePagamento_aggregate: ModelTypes['vendas_TiposDePagamento_aggregate'];
    /** fetch data from the table: "vendas.TiposDePagamento" using primary key columns */
    vendas_TiposDePagamento_by_pk?: ModelTypes['vendas_TiposDePagamento'];
    /** fetch data from the table: "vendas.TiposDePrecos" */
    vendas_TiposDePrecos: ModelTypes['vendas_TiposDePrecos'][];
    /** fetch aggregated fields from the table: "vendas.TiposDePrecos" */
    vendas_TiposDePrecos_aggregate: ModelTypes['vendas_TiposDePrecos_aggregate'];
    /** fetch data from the table: "vendas.TiposDePrecos" using primary key columns */
    vendas_TiposDePrecos_by_pk?: ModelTypes['vendas_TiposDePrecos'];
    /** fetch data from the table: "vendas.TiposDeRecorrencia" */
    vendas_TiposDeRecorrencia: ModelTypes['vendas_TiposDeRecorrencia'][];
    /** fetch aggregated fields from the table: "vendas.TiposDeRecorrencia" */
    vendas_TiposDeRecorrencia_aggregate: ModelTypes['vendas_TiposDeRecorrencia_aggregate'];
    /** fetch data from the table: "vendas.TiposDeRecorrencia" using primary key columns */
    vendas_TiposDeRecorrencia_by_pk?: ModelTypes['vendas_TiposDeRecorrencia'];
  };
  ['subscription_root']: {
    /** fetch data from the table: "CategoriasDeVeiculos" */
    CategoriasDeVeiculos: ModelTypes['CategoriasDeVeiculos'][];
    /** fetch aggregated fields from the table: "CategoriasDeVeiculos" */
    CategoriasDeVeiculos_aggregate: ModelTypes['CategoriasDeVeiculos_aggregate'];
    /** fetch data from the table: "CategoriasDeVeiculos" using primary key columns */
    CategoriasDeVeiculos_by_pk?: ModelTypes['CategoriasDeVeiculos'];
    /** fetch data from the table: "EstadosEMunicipios" */
    EstadosEMunicipios: ModelTypes['EstadosEMunicipios'][];
    /** fetch aggregated fields from the table: "EstadosEMunicipios" */
    EstadosEMunicipios_aggregate: ModelTypes['EstadosEMunicipios_aggregate'];
    /** fetch data from the table: "EstadosEMunicipios" using primary key columns */
    EstadosEMunicipios_by_pk?: ModelTypes['EstadosEMunicipios'];
    /** fetch data from the table: "atendimentos.EtapasDosFluxos" */
    atendimentos_EtapasDosFluxos: ModelTypes['atendimentos_EtapasDosFluxos'][];
    /** fetch aggregated fields from the table: "atendimentos.EtapasDosFluxos" */
    atendimentos_EtapasDosFluxos_aggregate: ModelTypes['atendimentos_EtapasDosFluxos_aggregate'];
    /** fetch data from the table: "atendimentos.EtapasDosFluxos" using primary key columns */
    atendimentos_EtapasDosFluxos_by_pk?: ModelTypes['atendimentos_EtapasDosFluxos'];
    /** fetch data from the table: "atendimentos.Fluxos" */
    atendimentos_Fluxos: ModelTypes['atendimentos_Fluxos'][];
    /** fetch aggregated fields from the table: "atendimentos.Fluxos" */
    atendimentos_Fluxos_aggregate: ModelTypes['atendimentos_Fluxos_aggregate'];
    /** fetch data from the table: "atendimentos.Fluxos" using primary key columns */
    atendimentos_Fluxos_by_pk?: ModelTypes['atendimentos_Fluxos'];
    /** fetch data from the table: "atendimentos.Tickets" */
    atendimentos_Tickets: ModelTypes['atendimentos_Tickets'][];
    /** fetch aggregated fields from the table: "atendimentos.Tickets" */
    atendimentos_Tickets_aggregate: ModelTypes['atendimentos_Tickets_aggregate'];
    /** fetch data from the table: "atendimentos.Tickets" using primary key columns */
    atendimentos_Tickets_by_pk?: ModelTypes['atendimentos_Tickets'];
    /** fetch data from the table: "atendimentos.TiposDeTickets" */
    atendimentos_TiposDeTickets: ModelTypes['atendimentos_TiposDeTickets'][];
    /** fetch aggregated fields from the table: "atendimentos.TiposDeTickets" */
    atendimentos_TiposDeTickets_aggregate: ModelTypes['atendimentos_TiposDeTickets_aggregate'];
    /** fetch data from the table: "atendimentos.TiposDeTickets" using primary key columns */
    atendimentos_TiposDeTickets_by_pk?: ModelTypes['atendimentos_TiposDeTickets'];
    /** fetch data from the table: "comercial.Acoes" */
    comercial_Acoes: ModelTypes['comercial_Acoes'][];
    /** fetch aggregated fields from the table: "comercial.Acoes" */
    comercial_Acoes_aggregate: ModelTypes['comercial_Acoes_aggregate'];
    /** fetch data from the table: "comercial.Acoes" using primary key columns */
    comercial_Acoes_by_pk?: ModelTypes['comercial_Acoes'];
    /** fetch data from the table: "comercial.Coberturas" */
    comercial_Coberturas: ModelTypes['comercial_Coberturas'][];
    /** fetch aggregated fields from the table: "comercial.Coberturas" */
    comercial_Coberturas_aggregate: ModelTypes['comercial_Coberturas_aggregate'];
    /** fetch data from the table: "comercial.Coberturas" using primary key columns */
    comercial_Coberturas_by_pk?: ModelTypes['comercial_Coberturas'];
    /** fetch data from the table: "contatos.Emails" */
    contatos_Emails: ModelTypes['contatos_Emails'][];
    /** fetch aggregated fields from the table: "contatos.Emails" */
    contatos_Emails_aggregate: ModelTypes['contatos_Emails_aggregate'];
    /** fetch data from the table: "contatos.Emails" using primary key columns */
    contatos_Emails_by_pk?: ModelTypes['contatos_Emails'];
    /** fetch data from the table: "contatos.Enderecos" */
    contatos_Enderecos: ModelTypes['contatos_Enderecos'][];
    /** fetch aggregated fields from the table: "contatos.Enderecos" */
    contatos_Enderecos_aggregate: ModelTypes['contatos_Enderecos_aggregate'];
    /** fetch data from the table: "contatos.Enderecos" using primary key columns */
    contatos_Enderecos_by_pk?: ModelTypes['contatos_Enderecos'];
    /** fetch data from the table: "contatos.Logs" */
    contatos_Logs: ModelTypes['contatos_Logs'][];
    /** fetch aggregated fields from the table: "contatos.Logs" */
    contatos_Logs_aggregate: ModelTypes['contatos_Logs_aggregate'];
    /** fetch data from the table: "contatos.Logs" using primary key columns */
    contatos_Logs_by_pk?: ModelTypes['contatos_Logs'];
    /** fetch data from the table: "contatos.Telefones" */
    contatos_Telefones: ModelTypes['contatos_Telefones'][];
    /** fetch aggregated fields from the table: "contatos.Telefones" */
    contatos_Telefones_aggregate: ModelTypes['contatos_Telefones_aggregate'];
    /** fetch data from the table: "contatos.Telefones" using primary key columns */
    contatos_Telefones_by_pk?: ModelTypes['contatos_Telefones'];
    /** fetch data from the table: "vendas.GruposDePerguntas" */
    vendas_GruposDePerguntas: ModelTypes['vendas_GruposDePerguntas'][];
    /** fetch data from the table: "vendas.GruposDePerguntas_Perguntas" */
    vendas_GruposDePerguntas_Perguntas: ModelTypes['vendas_GruposDePerguntas_Perguntas'][];
    /** fetch aggregated fields from the table: "vendas.GruposDePerguntas_Perguntas" */
    vendas_GruposDePerguntas_Perguntas_aggregate: ModelTypes['vendas_GruposDePerguntas_Perguntas_aggregate'];
    /** fetch data from the table: "vendas.GruposDePerguntas_Perguntas" using primary key columns */
    vendas_GruposDePerguntas_Perguntas_by_pk?: ModelTypes['vendas_GruposDePerguntas_Perguntas'];
    /** fetch aggregated fields from the table: "vendas.GruposDePerguntas" */
    vendas_GruposDePerguntas_aggregate: ModelTypes['vendas_GruposDePerguntas_aggregate'];
    /** fetch data from the table: "vendas.GruposDePerguntas" using primary key columns */
    vendas_GruposDePerguntas_by_pk?: ModelTypes['vendas_GruposDePerguntas'];
    /** fetch data from the table: "vendas.Perguntas" */
    vendas_Perguntas: ModelTypes['vendas_Perguntas'][];
    /** fetch aggregated fields from the table: "vendas.Perguntas" */
    vendas_Perguntas_aggregate: ModelTypes['vendas_Perguntas_aggregate'];
    /** fetch data from the table: "vendas.Perguntas" using primary key columns */
    vendas_Perguntas_by_pk?: ModelTypes['vendas_Perguntas'];
    /** fetch data from the table: "vendas.TiposDePagamento" */
    vendas_TiposDePagamento: ModelTypes['vendas_TiposDePagamento'][];
    /** fetch aggregated fields from the table: "vendas.TiposDePagamento" */
    vendas_TiposDePagamento_aggregate: ModelTypes['vendas_TiposDePagamento_aggregate'];
    /** fetch data from the table: "vendas.TiposDePagamento" using primary key columns */
    vendas_TiposDePagamento_by_pk?: ModelTypes['vendas_TiposDePagamento'];
  };
  ['timestamptz']: any;
  /** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
  ['timestamptz_comparison_exp']: GraphQLTypes['timestamptz_comparison_exp'];
  ['uuid']: any;
  /** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
  ['uuid_comparison_exp']: GraphQLTypes['uuid_comparison_exp'];
  /** columns and relationships of "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas']: {
    Id: ModelTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Perguntas: ModelTypes['vendas_GruposDePerguntas_Perguntas'][];
    /** An aggregate relationship */
    Perguntas_aggregate: ModelTypes['vendas_GruposDePerguntas_Perguntas_aggregate'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** columns and relationships of "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas']: {
    /** An object relationship */
    Grupo: ModelTypes['vendas_GruposDePerguntas'];
    Grupo_Id: ModelTypes['uuid'];
    Id: ModelTypes['uuid'];
    /** An object relationship */
    Pergunta: ModelTypes['vendas_Perguntas'];
    Pergunta_Id: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_aggregate']: {
    aggregate?: ModelTypes['vendas_GruposDePerguntas_Perguntas_aggregate_fields'];
    nodes: ModelTypes['vendas_GruposDePerguntas_Perguntas'][];
  };
  /** aggregate fields of "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_aggregate_fields']: {
    count: number;
    max?: ModelTypes['vendas_GruposDePerguntas_Perguntas_max_fields'];
    min?: ModelTypes['vendas_GruposDePerguntas_Perguntas_min_fields'];
  };
  /** order by aggregate values of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_aggregate_order_by']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_aggregate_order_by'];
  /** input type for inserting array relation for remote table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_arr_rel_insert_input']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_arr_rel_insert_input'];
  /** Boolean expression to filter rows from the table "vendas.GruposDePerguntas_Perguntas". All fields are combined with a logical 'AND'. */
  ['vendas_GruposDePerguntas_Perguntas_bool_exp']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'];
  /** unique or primary key constraints on table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_constraint']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_constraint'];
  /** input type for inserting data into table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_insert_input']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_insert_input'];
  /** aggregate max on columns */
  ['vendas_GruposDePerguntas_Perguntas_max_fields']: {
    Grupo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Pergunta_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by max() on columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_max_order_by']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_max_order_by'];
  /** aggregate min on columns */
  ['vendas_GruposDePerguntas_Perguntas_min_fields']: {
    Grupo_Id?: ModelTypes['uuid'];
    Id?: ModelTypes['uuid'];
    Pergunta_Id?: ModelTypes['uuid'];
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** order by min() on columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_min_order_by']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_min_order_by'];
  /** response of any mutation on the table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['vendas_GruposDePerguntas_Perguntas'][];
  };
  /** on conflict condition type for table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_on_conflict']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_on_conflict'];
  /** Ordering options when selecting data from "vendas.GruposDePerguntas_Perguntas". */
  ['vendas_GruposDePerguntas_Perguntas_order_by']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_order_by'];
  /** primary key columns input for table: vendas_GruposDePerguntas_Perguntas */
  ['vendas_GruposDePerguntas_Perguntas_pk_columns_input']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_pk_columns_input'];
  /** select columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_select_column']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_select_column'];
  /** input type for updating data in table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_set_input']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_set_input'];
  /** update columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_update_column']: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_update_column'];
  /** aggregated selection of "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_aggregate']: {
    aggregate?: ModelTypes['vendas_GruposDePerguntas_aggregate_fields'];
    nodes: ModelTypes['vendas_GruposDePerguntas'][];
  };
  /** aggregate fields of "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_aggregate_fields']: {
    count: number;
    max?: ModelTypes['vendas_GruposDePerguntas_max_fields'];
    min?: ModelTypes['vendas_GruposDePerguntas_min_fields'];
  };
  /** Boolean expression to filter rows from the table "vendas.GruposDePerguntas". All fields are combined with a logical 'AND'. */
  ['vendas_GruposDePerguntas_bool_exp']: GraphQLTypes['vendas_GruposDePerguntas_bool_exp'];
  /** unique or primary key constraints on table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_constraint']: GraphQLTypes['vendas_GruposDePerguntas_constraint'];
  /** input type for inserting data into table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_insert_input']: GraphQLTypes['vendas_GruposDePerguntas_insert_input'];
  /** aggregate max on columns */
  ['vendas_GruposDePerguntas_max_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['vendas_GruposDePerguntas_min_fields']: {
    Id?: ModelTypes['uuid'];
    Nome?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['vendas_GruposDePerguntas'][];
  };
  /** input type for inserting object relation for remote table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_obj_rel_insert_input']: GraphQLTypes['vendas_GruposDePerguntas_obj_rel_insert_input'];
  /** on conflict condition type for table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_on_conflict']: GraphQLTypes['vendas_GruposDePerguntas_on_conflict'];
  /** Ordering options when selecting data from "vendas.GruposDePerguntas". */
  ['vendas_GruposDePerguntas_order_by']: GraphQLTypes['vendas_GruposDePerguntas_order_by'];
  /** primary key columns input for table: vendas_GruposDePerguntas */
  ['vendas_GruposDePerguntas_pk_columns_input']: GraphQLTypes['vendas_GruposDePerguntas_pk_columns_input'];
  /** select columns of table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_select_column']: GraphQLTypes['vendas_GruposDePerguntas_select_column'];
  /** input type for updating data in table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_set_input']: GraphQLTypes['vendas_GruposDePerguntas_set_input'];
  /** update columns of table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_update_column']: GraphQLTypes['vendas_GruposDePerguntas_update_column'];
  /** columns and relationships of "vendas.Perguntas" */
  ['vendas_Perguntas']: {
    Descricao: string;
    /** An array relationship */
    Grupos: ModelTypes['vendas_GruposDePerguntas_Perguntas'][];
    /** An aggregate relationship */
    Grupos_aggregate: ModelTypes['vendas_GruposDePerguntas_Perguntas_aggregate'];
    Id: ModelTypes['uuid'];
    Titulo: string;
    created_at: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at: ModelTypes['timestamptz'];
  };
  /** aggregated selection of "vendas.Perguntas" */
  ['vendas_Perguntas_aggregate']: {
    aggregate?: ModelTypes['vendas_Perguntas_aggregate_fields'];
    nodes: ModelTypes['vendas_Perguntas'][];
  };
  /** aggregate fields of "vendas.Perguntas" */
  ['vendas_Perguntas_aggregate_fields']: {
    count: number;
    max?: ModelTypes['vendas_Perguntas_max_fields'];
    min?: ModelTypes['vendas_Perguntas_min_fields'];
  };
  /** Boolean expression to filter rows from the table "vendas.Perguntas". All fields are combined with a logical 'AND'. */
  ['vendas_Perguntas_bool_exp']: GraphQLTypes['vendas_Perguntas_bool_exp'];
  /** unique or primary key constraints on table "vendas.Perguntas" */
  ['vendas_Perguntas_constraint']: GraphQLTypes['vendas_Perguntas_constraint'];
  /** input type for inserting data into table "vendas.Perguntas" */
  ['vendas_Perguntas_insert_input']: GraphQLTypes['vendas_Perguntas_insert_input'];
  /** aggregate max on columns */
  ['vendas_Perguntas_max_fields']: {
    Descricao?: string;
    Id?: ModelTypes['uuid'];
    Titulo?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['vendas_Perguntas_min_fields']: {
    Descricao?: string;
    Id?: ModelTypes['uuid'];
    Titulo?: string;
    created_at?: ModelTypes['timestamptz'];
    deleted_at?: ModelTypes['timestamptz'];
    updated_at?: ModelTypes['timestamptz'];
  };
  /** response of any mutation on the table "vendas.Perguntas" */
  ['vendas_Perguntas_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['vendas_Perguntas'][];
  };
  /** input type for inserting object relation for remote table "vendas.Perguntas" */
  ['vendas_Perguntas_obj_rel_insert_input']: GraphQLTypes['vendas_Perguntas_obj_rel_insert_input'];
  /** on conflict condition type for table "vendas.Perguntas" */
  ['vendas_Perguntas_on_conflict']: GraphQLTypes['vendas_Perguntas_on_conflict'];
  /** Ordering options when selecting data from "vendas.Perguntas". */
  ['vendas_Perguntas_order_by']: GraphQLTypes['vendas_Perguntas_order_by'];
  /** primary key columns input for table: vendas_Perguntas */
  ['vendas_Perguntas_pk_columns_input']: GraphQLTypes['vendas_Perguntas_pk_columns_input'];
  /** select columns of table "vendas.Perguntas" */
  ['vendas_Perguntas_select_column']: GraphQLTypes['vendas_Perguntas_select_column'];
  /** input type for updating data in table "vendas.Perguntas" */
  ['vendas_Perguntas_set_input']: GraphQLTypes['vendas_Perguntas_set_input'];
  /** update columns of table "vendas.Perguntas" */
  ['vendas_Perguntas_update_column']: GraphQLTypes['vendas_Perguntas_update_column'];
  /** columns and relationships of "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento']: {
    Comentario: string;
    Valor: string;
  };
  /** aggregated selection of "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_aggregate']: {
    aggregate?: ModelTypes['vendas_TiposDePagamento_aggregate_fields'];
    nodes: ModelTypes['vendas_TiposDePagamento'][];
  };
  /** aggregate fields of "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_aggregate_fields']: {
    count: number;
    max?: ModelTypes['vendas_TiposDePagamento_max_fields'];
    min?: ModelTypes['vendas_TiposDePagamento_min_fields'];
  };
  /** Boolean expression to filter rows from the table "vendas.TiposDePagamento". All fields are combined with a logical 'AND'. */
  ['vendas_TiposDePagamento_bool_exp']: GraphQLTypes['vendas_TiposDePagamento_bool_exp'];
  /** unique or primary key constraints on table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_constraint']: GraphQLTypes['vendas_TiposDePagamento_constraint'];
  /** input type for inserting data into table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_insert_input']: GraphQLTypes['vendas_TiposDePagamento_insert_input'];
  /** aggregate max on columns */
  ['vendas_TiposDePagamento_max_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['vendas_TiposDePagamento_min_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['vendas_TiposDePagamento'][];
  };
  /** on conflict condition type for table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_on_conflict']: GraphQLTypes['vendas_TiposDePagamento_on_conflict'];
  /** Ordering options when selecting data from "vendas.TiposDePagamento". */
  ['vendas_TiposDePagamento_order_by']: GraphQLTypes['vendas_TiposDePagamento_order_by'];
  /** primary key columns input for table: vendas_TiposDePagamento */
  ['vendas_TiposDePagamento_pk_columns_input']: GraphQLTypes['vendas_TiposDePagamento_pk_columns_input'];
  /** select columns of table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_select_column']: GraphQLTypes['vendas_TiposDePagamento_select_column'];
  /** input type for updating data in table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_set_input']: GraphQLTypes['vendas_TiposDePagamento_set_input'];
  /** update columns of table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_update_column']: GraphQLTypes['vendas_TiposDePagamento_update_column'];
  /** columns and relationships of "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos']: {
    Comentario: string;
    /** An array relationship */
    PrestadoresDeServicos_Produtos_Precos: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos'][];
    /** An aggregate relationship */
    PrestadoresDeServicos_Produtos_Precos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate'];
    /** An array relationship */
    PrestadoresDeServicos_Servicos_Precos: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos'][];
    /** An aggregate relationship */
    PrestadoresDeServicos_Servicos_Precos_aggregate: ModelTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_aggregate']: {
    aggregate?: ModelTypes['vendas_TiposDePrecos_aggregate_fields'];
    nodes: ModelTypes['vendas_TiposDePrecos'][];
  };
  /** aggregate fields of "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_aggregate_fields']: {
    count: number;
    max?: ModelTypes['vendas_TiposDePrecos_max_fields'];
    min?: ModelTypes['vendas_TiposDePrecos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "vendas.TiposDePrecos". All fields are combined with a logical 'AND'. */
  ['vendas_TiposDePrecos_bool_exp']: GraphQLTypes['vendas_TiposDePrecos_bool_exp'];
  /** unique or primary key constraints on table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_constraint']: GraphQLTypes['vendas_TiposDePrecos_constraint'];
  ['vendas_TiposDePrecos_enum']: GraphQLTypes['vendas_TiposDePrecos_enum'];
  /** Boolean expression to compare columns of type "vendas_TiposDePrecos_enum". All fields are combined with logical 'AND'. */
  ['vendas_TiposDePrecos_enum_comparison_exp']: GraphQLTypes['vendas_TiposDePrecos_enum_comparison_exp'];
  /** input type for inserting data into table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_insert_input']: GraphQLTypes['vendas_TiposDePrecos_insert_input'];
  /** aggregate max on columns */
  ['vendas_TiposDePrecos_max_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['vendas_TiposDePrecos_min_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['vendas_TiposDePrecos'][];
  };
  /** input type for inserting object relation for remote table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_obj_rel_insert_input']: GraphQLTypes['vendas_TiposDePrecos_obj_rel_insert_input'];
  /** on conflict condition type for table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_on_conflict']: GraphQLTypes['vendas_TiposDePrecos_on_conflict'];
  /** Ordering options when selecting data from "vendas.TiposDePrecos". */
  ['vendas_TiposDePrecos_order_by']: GraphQLTypes['vendas_TiposDePrecos_order_by'];
  /** primary key columns input for table: vendas_TiposDePrecos */
  ['vendas_TiposDePrecos_pk_columns_input']: GraphQLTypes['vendas_TiposDePrecos_pk_columns_input'];
  /** select columns of table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_select_column']: GraphQLTypes['vendas_TiposDePrecos_select_column'];
  /** input type for updating data in table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_set_input']: GraphQLTypes['vendas_TiposDePrecos_set_input'];
  /** update columns of table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_update_column']: GraphQLTypes['vendas_TiposDePrecos_update_column'];
  /** columns and relationships of "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia']: {
    Comentario: string;
    Valor: string;
  };
  /** aggregated selection of "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_aggregate']: {
    aggregate?: ModelTypes['vendas_TiposDeRecorrencia_aggregate_fields'];
    nodes: ModelTypes['vendas_TiposDeRecorrencia'][];
  };
  /** aggregate fields of "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_aggregate_fields']: {
    count: number;
    max?: ModelTypes['vendas_TiposDeRecorrencia_max_fields'];
    min?: ModelTypes['vendas_TiposDeRecorrencia_min_fields'];
  };
  /** Boolean expression to filter rows from the table "vendas.TiposDeRecorrencia". All fields are combined with a logical 'AND'. */
  ['vendas_TiposDeRecorrencia_bool_exp']: GraphQLTypes['vendas_TiposDeRecorrencia_bool_exp'];
  /** unique or primary key constraints on table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_constraint']: GraphQLTypes['vendas_TiposDeRecorrencia_constraint'];
  /** input type for inserting data into table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_insert_input']: GraphQLTypes['vendas_TiposDeRecorrencia_insert_input'];
  /** aggregate max on columns */
  ['vendas_TiposDeRecorrencia_max_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['vendas_TiposDeRecorrencia_min_fields']: {
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: ModelTypes['vendas_TiposDeRecorrencia'][];
  };
  /** on conflict condition type for table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_on_conflict']: GraphQLTypes['vendas_TiposDeRecorrencia_on_conflict'];
  /** Ordering options when selecting data from "vendas.TiposDeRecorrencia". */
  ['vendas_TiposDeRecorrencia_order_by']: GraphQLTypes['vendas_TiposDeRecorrencia_order_by'];
  /** primary key columns input for table: vendas_TiposDeRecorrencia */
  ['vendas_TiposDeRecorrencia_pk_columns_input']: GraphQLTypes['vendas_TiposDeRecorrencia_pk_columns_input'];
  /** select columns of table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_select_column']: GraphQLTypes['vendas_TiposDeRecorrencia_select_column'];
  /** input type for updating data in table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_set_input']: GraphQLTypes['vendas_TiposDeRecorrencia_set_input'];
  /** update columns of table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_update_column']: GraphQLTypes['vendas_TiposDeRecorrencia_update_column'];
};

export type GraphQLTypes = {
  /** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
  ['Boolean_comparison_exp']: {
    _eq?: boolean;
    _gt?: boolean;
    _gte?: boolean;
    _in?: Array<boolean>;
    _is_null?: boolean;
    _lt?: boolean;
    _lte?: boolean;
    _neq?: boolean;
    _nin?: Array<boolean>;
  };
  ['CadastrarClienteOutput']: {
    __typename: 'CadastrarClienteOutput';
    Id: GraphQLTypes['uuid'];
  };
  ['CadastrarColaboradorOutput']: {
    __typename: 'CadastrarColaboradorOutput';
    Id: GraphQLTypes['uuid'];
  };
  ['CadastrarFornecedorOutput']: {
    __typename: 'CadastrarFornecedorOutput';
    Id: GraphQLTypes['uuid'];
  };
  ['CadastrarRepresentanteOutput']: {
    __typename: 'CadastrarRepresentanteOutput';
    Id: GraphQLTypes['uuid'];
  };
  /** columns and relationships of "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos']: {
    __typename: 'CategoriasDeVeiculos';
    Id: GraphQLTypes['uuid'];
    Nome: string;
  };
  /** aggregated selection of "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_aggregate']: {
    __typename: 'CategoriasDeVeiculos_aggregate';
    aggregate?: GraphQLTypes['CategoriasDeVeiculos_aggregate_fields'];
    nodes: Array<GraphQLTypes['CategoriasDeVeiculos']>;
  };
  /** aggregate fields of "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_aggregate_fields']: {
    __typename: 'CategoriasDeVeiculos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['CategoriasDeVeiculos_max_fields'];
    min?: GraphQLTypes['CategoriasDeVeiculos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "CategoriasDeVeiculos". All fields are combined with a logical 'AND'. */
  ['CategoriasDeVeiculos_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['CategoriasDeVeiculos_bool_exp']>;
    _not?: GraphQLTypes['CategoriasDeVeiculos_bool_exp'];
    _or?: Array<GraphQLTypes['CategoriasDeVeiculos_bool_exp']>;
  };
  /** unique or primary key constraints on table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_constraint']: CategoriasDeVeiculos_constraint;
  /** input type for inserting data into table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
  };
  /** aggregate max on columns */
  ['CategoriasDeVeiculos_max_fields']: {
    __typename: 'CategoriasDeVeiculos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
  };
  /** aggregate min on columns */
  ['CategoriasDeVeiculos_min_fields']: {
    __typename: 'CategoriasDeVeiculos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
  };
  /** response of any mutation on the table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_mutation_response']: {
    __typename: 'CategoriasDeVeiculos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['CategoriasDeVeiculos']>;
  };
  /** on conflict condition type for table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_on_conflict']: {
    constraint: GraphQLTypes['CategoriasDeVeiculos_constraint'];
    update_columns: Array<GraphQLTypes['CategoriasDeVeiculos_update_column']>;
    where?: GraphQLTypes['CategoriasDeVeiculos_bool_exp'];
  };
  /** Ordering options when selecting data from "CategoriasDeVeiculos". */
  ['CategoriasDeVeiculos_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: CategoriasDeVeiculos */
  ['CategoriasDeVeiculos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_select_column']: CategoriasDeVeiculos_select_column;
  /** input type for updating data in table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
  };
  /** update columns of table "CategoriasDeVeiculos" */
  ['CategoriasDeVeiculos_update_column']: CategoriasDeVeiculos_update_column;
  /** columns and relationships of "EstadosEMunicipios" */
  ['EstadosEMunicipios']: {
    __typename: 'EstadosEMunicipios';
    /** An array relationship */
    Cidades: Array<GraphQLTypes['EstadosEMunicipios']>;
    /** An aggregate relationship */
    Cidades_aggregate: GraphQLTypes['EstadosEMunicipios_aggregate'];
    CodigoIbge?: GraphQLTypes['bigint'];
    /** An object relationship */
    Estado?: GraphQLTypes['EstadosEMunicipios'];
    Id: GraphQLTypes['uuid'];
    Nome: string;
    Pai_Id?: GraphQLTypes['uuid'];
    Sigla?: string;
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "EstadosEMunicipios" */
  ['EstadosEMunicipios_aggregate']: {
    __typename: 'EstadosEMunicipios_aggregate';
    aggregate?: GraphQLTypes['EstadosEMunicipios_aggregate_fields'];
    nodes: Array<GraphQLTypes['EstadosEMunicipios']>;
  };
  /** aggregate fields of "EstadosEMunicipios" */
  ['EstadosEMunicipios_aggregate_fields']: {
    __typename: 'EstadosEMunicipios_aggregate_fields';
    avg?: GraphQLTypes['EstadosEMunicipios_avg_fields'];
    count: number;
    max?: GraphQLTypes['EstadosEMunicipios_max_fields'];
    min?: GraphQLTypes['EstadosEMunicipios_min_fields'];
    stddev?: GraphQLTypes['EstadosEMunicipios_stddev_fields'];
    stddev_pop?: GraphQLTypes['EstadosEMunicipios_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['EstadosEMunicipios_stddev_samp_fields'];
    sum?: GraphQLTypes['EstadosEMunicipios_sum_fields'];
    var_pop?: GraphQLTypes['EstadosEMunicipios_var_pop_fields'];
    var_samp?: GraphQLTypes['EstadosEMunicipios_var_samp_fields'];
    variance?: GraphQLTypes['EstadosEMunicipios_variance_fields'];
  };
  /** order by aggregate values of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_aggregate_order_by']: {
    avg?: GraphQLTypes['EstadosEMunicipios_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['EstadosEMunicipios_max_order_by'];
    min?: GraphQLTypes['EstadosEMunicipios_min_order_by'];
    stddev?: GraphQLTypes['EstadosEMunicipios_stddev_order_by'];
    stddev_pop?: GraphQLTypes['EstadosEMunicipios_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['EstadosEMunicipios_stddev_samp_order_by'];
    sum?: GraphQLTypes['EstadosEMunicipios_sum_order_by'];
    var_pop?: GraphQLTypes['EstadosEMunicipios_var_pop_order_by'];
    var_samp?: GraphQLTypes['EstadosEMunicipios_var_samp_order_by'];
    variance?: GraphQLTypes['EstadosEMunicipios_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "EstadosEMunicipios" */
  ['EstadosEMunicipios_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['EstadosEMunicipios_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['EstadosEMunicipios_on_conflict'];
  };
  /** aggregate avg on columns */
  ['EstadosEMunicipios_avg_fields']: {
    __typename: 'EstadosEMunicipios_avg_fields';
    CodigoIbge?: number;
  };
  /** order by avg() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_avg_order_by']: {
    CodigoIbge?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "EstadosEMunicipios". All fields are combined with a logical 'AND'. */
  ['EstadosEMunicipios_bool_exp']: {
    Cidades?: GraphQLTypes['EstadosEMunicipios_bool_exp'];
    CodigoIbge?: GraphQLTypes['bigint_comparison_exp'];
    Estado?: GraphQLTypes['EstadosEMunicipios_bool_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Pai_Id?: GraphQLTypes['uuid_comparison_exp'];
    Sigla?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['EstadosEMunicipios_bool_exp']>;
    _not?: GraphQLTypes['EstadosEMunicipios_bool_exp'];
    _or?: Array<GraphQLTypes['EstadosEMunicipios_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "EstadosEMunicipios" */
  ['EstadosEMunicipios_constraint']: EstadosEMunicipios_constraint;
  /** input type for incrementing numeric columns in table "EstadosEMunicipios" */
  ['EstadosEMunicipios_inc_input']: {
    CodigoIbge?: GraphQLTypes['bigint'];
  };
  /** input type for inserting data into table "EstadosEMunicipios" */
  ['EstadosEMunicipios_insert_input']: {
    Cidades?: GraphQLTypes['EstadosEMunicipios_arr_rel_insert_input'];
    CodigoIbge?: GraphQLTypes['bigint'];
    Estado?: GraphQLTypes['EstadosEMunicipios_obj_rel_insert_input'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Pai_Id?: GraphQLTypes['uuid'];
    Sigla?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['EstadosEMunicipios_max_fields']: {
    __typename: 'EstadosEMunicipios_max_fields';
    CodigoIbge?: GraphQLTypes['bigint'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Pai_Id?: GraphQLTypes['uuid'];
    Sigla?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_max_order_by']: {
    CodigoIbge?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Pai_Id?: GraphQLTypes['order_by'];
    Sigla?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['EstadosEMunicipios_min_fields']: {
    __typename: 'EstadosEMunicipios_min_fields';
    CodigoIbge?: GraphQLTypes['bigint'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Pai_Id?: GraphQLTypes['uuid'];
    Sigla?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_min_order_by']: {
    CodigoIbge?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Pai_Id?: GraphQLTypes['order_by'];
    Sigla?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "EstadosEMunicipios" */
  ['EstadosEMunicipios_mutation_response']: {
    __typename: 'EstadosEMunicipios_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['EstadosEMunicipios']>;
  };
  /** input type for inserting object relation for remote table "EstadosEMunicipios" */
  ['EstadosEMunicipios_obj_rel_insert_input']: {
    data: GraphQLTypes['EstadosEMunicipios_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['EstadosEMunicipios_on_conflict'];
  };
  /** on conflict condition type for table "EstadosEMunicipios" */
  ['EstadosEMunicipios_on_conflict']: {
    constraint: GraphQLTypes['EstadosEMunicipios_constraint'];
    update_columns: Array<GraphQLTypes['EstadosEMunicipios_update_column']>;
    where?: GraphQLTypes['EstadosEMunicipios_bool_exp'];
  };
  /** Ordering options when selecting data from "EstadosEMunicipios". */
  ['EstadosEMunicipios_order_by']: {
    Cidades_aggregate?: GraphQLTypes['EstadosEMunicipios_aggregate_order_by'];
    CodigoIbge?: GraphQLTypes['order_by'];
    Estado?: GraphQLTypes['EstadosEMunicipios_order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Pai_Id?: GraphQLTypes['order_by'];
    Sigla?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: EstadosEMunicipios */
  ['EstadosEMunicipios_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_select_column']: EstadosEMunicipios_select_column;
  /** input type for updating data in table "EstadosEMunicipios" */
  ['EstadosEMunicipios_set_input']: {
    CodigoIbge?: GraphQLTypes['bigint'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Pai_Id?: GraphQLTypes['uuid'];
    Sigla?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['EstadosEMunicipios_stddev_fields']: {
    __typename: 'EstadosEMunicipios_stddev_fields';
    CodigoIbge?: number;
  };
  /** order by stddev() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_stddev_order_by']: {
    CodigoIbge?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['EstadosEMunicipios_stddev_pop_fields']: {
    __typename: 'EstadosEMunicipios_stddev_pop_fields';
    CodigoIbge?: number;
  };
  /** order by stddev_pop() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_stddev_pop_order_by']: {
    CodigoIbge?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['EstadosEMunicipios_stddev_samp_fields']: {
    __typename: 'EstadosEMunicipios_stddev_samp_fields';
    CodigoIbge?: number;
  };
  /** order by stddev_samp() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_stddev_samp_order_by']: {
    CodigoIbge?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['EstadosEMunicipios_sum_fields']: {
    __typename: 'EstadosEMunicipios_sum_fields';
    CodigoIbge?: GraphQLTypes['bigint'];
  };
  /** order by sum() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_sum_order_by']: {
    CodigoIbge?: GraphQLTypes['order_by'];
  };
  /** update columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_update_column']: EstadosEMunicipios_update_column;
  /** aggregate var_pop on columns */
  ['EstadosEMunicipios_var_pop_fields']: {
    __typename: 'EstadosEMunicipios_var_pop_fields';
    CodigoIbge?: number;
  };
  /** order by var_pop() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_var_pop_order_by']: {
    CodigoIbge?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['EstadosEMunicipios_var_samp_fields']: {
    __typename: 'EstadosEMunicipios_var_samp_fields';
    CodigoIbge?: number;
  };
  /** order by var_samp() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_var_samp_order_by']: {
    CodigoIbge?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['EstadosEMunicipios_variance_fields']: {
    __typename: 'EstadosEMunicipios_variance_fields';
    CodigoIbge?: number;
  };
  /** order by variance() on columns of table "EstadosEMunicipios" */
  ['EstadosEMunicipios_variance_order_by']: {
    CodigoIbge?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
  ['Int_comparison_exp']: {
    _eq?: number;
    _gt?: number;
    _gte?: number;
    _in?: Array<number>;
    _is_null?: boolean;
    _lt?: number;
    _lte?: number;
    _neq?: number;
    _nin?: Array<number>;
  };
  /** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
  ['String_comparison_exp']: {
    _eq?: string;
    _gt?: string;
    _gte?: string;
    /** does the column match the given case-insensitive pattern */
    _ilike?: string;
    _in?: Array<string>;
    /** does the column match the given POSIX regular expression, case insensitive */
    _iregex?: string;
    _is_null?: boolean;
    /** does the column match the given pattern */
    _like?: string;
    _lt?: string;
    _lte?: string;
    _neq?: string;
    /** does the column NOT match the given case-insensitive pattern */
    _nilike?: string;
    _nin?: Array<string>;
    /** does the column NOT match the given POSIX regular expression, case insensitive */
    _niregex?: string;
    /** does the column NOT match the given pattern */
    _nlike?: string;
    /** does the column NOT match the given POSIX regular expression, case sensitive */
    _nregex?: string;
    /** does the column NOT match the given SQL regular expression */
    _nsimilar?: string;
    /** does the column match the given POSIX regular expression, case sensitive */
    _regex?: string;
    /** does the column match the given SQL regular expression */
    _similar?: string;
  };
  /** columns and relationships of "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos']: {
    __typename: 'atendimentos_EtapasDosFluxos';
    /** An object relationship */
    Fluxo: GraphQLTypes['atendimentos_Fluxos'];
    Fluxo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    Nome: string;
    Posicao: number;
    /** An array relationship */
    Tickets: Array<GraphQLTypes['atendimentos_Tickets']>;
    /** An aggregate relationship */
    Tickets_aggregate: GraphQLTypes['atendimentos_Tickets_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_aggregate']: {
    __typename: 'atendimentos_EtapasDosFluxos_aggregate';
    aggregate?: GraphQLTypes['atendimentos_EtapasDosFluxos_aggregate_fields'];
    nodes: Array<GraphQLTypes['atendimentos_EtapasDosFluxos']>;
  };
  /** aggregate fields of "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_aggregate_fields']: {
    __typename: 'atendimentos_EtapasDosFluxos_aggregate_fields';
    avg?: GraphQLTypes['atendimentos_EtapasDosFluxos_avg_fields'];
    count: number;
    max?: GraphQLTypes['atendimentos_EtapasDosFluxos_max_fields'];
    min?: GraphQLTypes['atendimentos_EtapasDosFluxos_min_fields'];
    stddev?: GraphQLTypes['atendimentos_EtapasDosFluxos_stddev_fields'];
    stddev_pop?: GraphQLTypes['atendimentos_EtapasDosFluxos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['atendimentos_EtapasDosFluxos_stddev_samp_fields'];
    sum?: GraphQLTypes['atendimentos_EtapasDosFluxos_sum_fields'];
    var_pop?: GraphQLTypes['atendimentos_EtapasDosFluxos_var_pop_fields'];
    var_samp?: GraphQLTypes['atendimentos_EtapasDosFluxos_var_samp_fields'];
    variance?: GraphQLTypes['atendimentos_EtapasDosFluxos_variance_fields'];
  };
  /** order by aggregate values of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_aggregate_order_by']: {
    avg?: GraphQLTypes['atendimentos_EtapasDosFluxos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['atendimentos_EtapasDosFluxos_max_order_by'];
    min?: GraphQLTypes['atendimentos_EtapasDosFluxos_min_order_by'];
    stddev?: GraphQLTypes['atendimentos_EtapasDosFluxos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['atendimentos_EtapasDosFluxos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['atendimentos_EtapasDosFluxos_stddev_samp_order_by'];
    sum?: GraphQLTypes['atendimentos_EtapasDosFluxos_sum_order_by'];
    var_pop?: GraphQLTypes['atendimentos_EtapasDosFluxos_var_pop_order_by'];
    var_samp?: GraphQLTypes['atendimentos_EtapasDosFluxos_var_samp_order_by'];
    variance?: GraphQLTypes['atendimentos_EtapasDosFluxos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['atendimentos_EtapasDosFluxos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['atendimentos_EtapasDosFluxos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['atendimentos_EtapasDosFluxos_avg_fields']: {
    __typename: 'atendimentos_EtapasDosFluxos_avg_fields';
    Posicao?: number;
  };
  /** order by avg() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_avg_order_by']: {
    Posicao?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "atendimentos.EtapasDosFluxos". All fields are combined with a logical 'AND'. */
  ['atendimentos_EtapasDosFluxos_bool_exp']: {
    Fluxo?: GraphQLTypes['atendimentos_Fluxos_bool_exp'];
    Fluxo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Posicao?: GraphQLTypes['Int_comparison_exp'];
    Tickets?: GraphQLTypes['atendimentos_Tickets_bool_exp'];
    _and?: Array<GraphQLTypes['atendimentos_EtapasDosFluxos_bool_exp']>;
    _not?: GraphQLTypes['atendimentos_EtapasDosFluxos_bool_exp'];
    _or?: Array<GraphQLTypes['atendimentos_EtapasDosFluxos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_constraint']: atendimentos_EtapasDosFluxos_constraint;
  /** input type for incrementing numeric columns in table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_inc_input']: {
    Posicao?: number;
  };
  /** input type for inserting data into table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_insert_input']: {
    Fluxo?: GraphQLTypes['atendimentos_Fluxos_obj_rel_insert_input'];
    Fluxo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Posicao?: number;
    Tickets?: GraphQLTypes['atendimentos_Tickets_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['atendimentos_EtapasDosFluxos_max_fields']: {
    __typename: 'atendimentos_EtapasDosFluxos_max_fields';
    Fluxo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Posicao?: number;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_max_order_by']: {
    Fluxo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Posicao?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['atendimentos_EtapasDosFluxos_min_fields']: {
    __typename: 'atendimentos_EtapasDosFluxos_min_fields';
    Fluxo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Posicao?: number;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_min_order_by']: {
    Fluxo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Posicao?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_mutation_response']: {
    __typename: 'atendimentos_EtapasDosFluxos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['atendimentos_EtapasDosFluxos']>;
  };
  /** input type for inserting object relation for remote table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_obj_rel_insert_input']: {
    data: GraphQLTypes['atendimentos_EtapasDosFluxos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['atendimentos_EtapasDosFluxos_on_conflict'];
  };
  /** on conflict condition type for table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_on_conflict']: {
    constraint: GraphQLTypes['atendimentos_EtapasDosFluxos_constraint'];
    update_columns: Array<
      GraphQLTypes['atendimentos_EtapasDosFluxos_update_column']
    >;
    where?: GraphQLTypes['atendimentos_EtapasDosFluxos_bool_exp'];
  };
  /** Ordering options when selecting data from "atendimentos.EtapasDosFluxos". */
  ['atendimentos_EtapasDosFluxos_order_by']: {
    Fluxo?: GraphQLTypes['atendimentos_Fluxos_order_by'];
    Fluxo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Posicao?: GraphQLTypes['order_by'];
    Tickets_aggregate?: GraphQLTypes['atendimentos_Tickets_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: atendimentos_EtapasDosFluxos */
  ['atendimentos_EtapasDosFluxos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_select_column']: atendimentos_EtapasDosFluxos_select_column;
  /** input type for updating data in table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_set_input']: {
    Fluxo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Posicao?: number;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['atendimentos_EtapasDosFluxos_stddev_fields']: {
    __typename: 'atendimentos_EtapasDosFluxos_stddev_fields';
    Posicao?: number;
  };
  /** order by stddev() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_stddev_order_by']: {
    Posicao?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['atendimentos_EtapasDosFluxos_stddev_pop_fields']: {
    __typename: 'atendimentos_EtapasDosFluxos_stddev_pop_fields';
    Posicao?: number;
  };
  /** order by stddev_pop() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_stddev_pop_order_by']: {
    Posicao?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['atendimentos_EtapasDosFluxos_stddev_samp_fields']: {
    __typename: 'atendimentos_EtapasDosFluxos_stddev_samp_fields';
    Posicao?: number;
  };
  /** order by stddev_samp() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_stddev_samp_order_by']: {
    Posicao?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['atendimentos_EtapasDosFluxos_sum_fields']: {
    __typename: 'atendimentos_EtapasDosFluxos_sum_fields';
    Posicao?: number;
  };
  /** order by sum() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_sum_order_by']: {
    Posicao?: GraphQLTypes['order_by'];
  };
  /** update columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_update_column']: atendimentos_EtapasDosFluxos_update_column;
  /** aggregate var_pop on columns */
  ['atendimentos_EtapasDosFluxos_var_pop_fields']: {
    __typename: 'atendimentos_EtapasDosFluxos_var_pop_fields';
    Posicao?: number;
  };
  /** order by var_pop() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_var_pop_order_by']: {
    Posicao?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['atendimentos_EtapasDosFluxos_var_samp_fields']: {
    __typename: 'atendimentos_EtapasDosFluxos_var_samp_fields';
    Posicao?: number;
  };
  /** order by var_samp() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_var_samp_order_by']: {
    Posicao?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['atendimentos_EtapasDosFluxos_variance_fields']: {
    __typename: 'atendimentos_EtapasDosFluxos_variance_fields';
    Posicao?: number;
  };
  /** order by variance() on columns of table "atendimentos.EtapasDosFluxos" */
  ['atendimentos_EtapasDosFluxos_variance_order_by']: {
    Posicao?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "atendimentos.Fluxos" */
  ['atendimentos_Fluxos']: {
    __typename: 'atendimentos_Fluxos';
    /** An array relationship */
    Etapas: Array<GraphQLTypes['atendimentos_EtapasDosFluxos']>;
    /** An aggregate relationship */
    Etapas_aggregate: GraphQLTypes['atendimentos_EtapasDosFluxos_aggregate'];
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Tickets: Array<GraphQLTypes['atendimentos_Tickets']>;
    /** An aggregate relationship */
    Tickets_aggregate: GraphQLTypes['atendimentos_Tickets_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_aggregate']: {
    __typename: 'atendimentos_Fluxos_aggregate';
    aggregate?: GraphQLTypes['atendimentos_Fluxos_aggregate_fields'];
    nodes: Array<GraphQLTypes['atendimentos_Fluxos']>;
  };
  /** aggregate fields of "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_aggregate_fields']: {
    __typename: 'atendimentos_Fluxos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['atendimentos_Fluxos_max_fields'];
    min?: GraphQLTypes['atendimentos_Fluxos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "atendimentos.Fluxos". All fields are combined with a logical 'AND'. */
  ['atendimentos_Fluxos_bool_exp']: {
    Etapas?: GraphQLTypes['atendimentos_EtapasDosFluxos_bool_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Tickets?: GraphQLTypes['atendimentos_Tickets_bool_exp'];
    _and?: Array<GraphQLTypes['atendimentos_Fluxos_bool_exp']>;
    _not?: GraphQLTypes['atendimentos_Fluxos_bool_exp'];
    _or?: Array<GraphQLTypes['atendimentos_Fluxos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_constraint']: atendimentos_Fluxos_constraint;
  /** input type for inserting data into table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_insert_input']: {
    Etapas?: GraphQLTypes['atendimentos_EtapasDosFluxos_arr_rel_insert_input'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Tickets?: GraphQLTypes['atendimentos_Tickets_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['atendimentos_Fluxos_max_fields']: {
    __typename: 'atendimentos_Fluxos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['atendimentos_Fluxos_min_fields']: {
    __typename: 'atendimentos_Fluxos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_mutation_response']: {
    __typename: 'atendimentos_Fluxos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['atendimentos_Fluxos']>;
  };
  /** input type for inserting object relation for remote table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_obj_rel_insert_input']: {
    data: GraphQLTypes['atendimentos_Fluxos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['atendimentos_Fluxos_on_conflict'];
  };
  /** on conflict condition type for table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_on_conflict']: {
    constraint: GraphQLTypes['atendimentos_Fluxos_constraint'];
    update_columns: Array<GraphQLTypes['atendimentos_Fluxos_update_column']>;
    where?: GraphQLTypes['atendimentos_Fluxos_bool_exp'];
  };
  /** Ordering options when selecting data from "atendimentos.Fluxos". */
  ['atendimentos_Fluxos_order_by']: {
    Etapas_aggregate?: GraphQLTypes['atendimentos_EtapasDosFluxos_aggregate_order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Tickets_aggregate?: GraphQLTypes['atendimentos_Tickets_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: atendimentos_Fluxos */
  ['atendimentos_Fluxos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_select_column']: atendimentos_Fluxos_select_column;
  /** input type for updating data in table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "atendimentos.Fluxos" */
  ['atendimentos_Fluxos_update_column']: atendimentos_Fluxos_update_column;
  /** columns and relationships of "atendimentos.Tickets" */
  ['atendimentos_Tickets']: {
    __typename: 'atendimentos_Tickets';
    Cliente_Id?: GraphQLTypes['uuid'];
    CodigoReferencia: number;
    /** An object relationship */
    Etapa: GraphQLTypes['atendimentos_EtapasDosFluxos'];
    Etapa_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Fluxo: GraphQLTypes['atendimentos_Fluxos'];
    Fluxo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    Lead_Id?: GraphQLTypes['uuid'];
    /** An object relationship */
    Tipo: GraphQLTypes['atendimentos_TiposDeTickets'];
    Tipo_Id: GraphQLTypes['atendimentos_TiposDeTickets_enum'];
    Usuario_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "atendimentos.Tickets" */
  ['atendimentos_Tickets_aggregate']: {
    __typename: 'atendimentos_Tickets_aggregate';
    aggregate?: GraphQLTypes['atendimentos_Tickets_aggregate_fields'];
    nodes: Array<GraphQLTypes['atendimentos_Tickets']>;
  };
  /** aggregate fields of "atendimentos.Tickets" */
  ['atendimentos_Tickets_aggregate_fields']: {
    __typename: 'atendimentos_Tickets_aggregate_fields';
    avg?: GraphQLTypes['atendimentos_Tickets_avg_fields'];
    count: number;
    max?: GraphQLTypes['atendimentos_Tickets_max_fields'];
    min?: GraphQLTypes['atendimentos_Tickets_min_fields'];
    stddev?: GraphQLTypes['atendimentos_Tickets_stddev_fields'];
    stddev_pop?: GraphQLTypes['atendimentos_Tickets_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['atendimentos_Tickets_stddev_samp_fields'];
    sum?: GraphQLTypes['atendimentos_Tickets_sum_fields'];
    var_pop?: GraphQLTypes['atendimentos_Tickets_var_pop_fields'];
    var_samp?: GraphQLTypes['atendimentos_Tickets_var_samp_fields'];
    variance?: GraphQLTypes['atendimentos_Tickets_variance_fields'];
  };
  /** order by aggregate values of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_aggregate_order_by']: {
    avg?: GraphQLTypes['atendimentos_Tickets_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['atendimentos_Tickets_max_order_by'];
    min?: GraphQLTypes['atendimentos_Tickets_min_order_by'];
    stddev?: GraphQLTypes['atendimentos_Tickets_stddev_order_by'];
    stddev_pop?: GraphQLTypes['atendimentos_Tickets_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['atendimentos_Tickets_stddev_samp_order_by'];
    sum?: GraphQLTypes['atendimentos_Tickets_sum_order_by'];
    var_pop?: GraphQLTypes['atendimentos_Tickets_var_pop_order_by'];
    var_samp?: GraphQLTypes['atendimentos_Tickets_var_samp_order_by'];
    variance?: GraphQLTypes['atendimentos_Tickets_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "atendimentos.Tickets" */
  ['atendimentos_Tickets_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['atendimentos_Tickets_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['atendimentos_Tickets_on_conflict'];
  };
  /** aggregate avg on columns */
  ['atendimentos_Tickets_avg_fields']: {
    __typename: 'atendimentos_Tickets_avg_fields';
    CodigoReferencia?: number;
  };
  /** order by avg() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_avg_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "atendimentos.Tickets". All fields are combined with a logical 'AND'. */
  ['atendimentos_Tickets_bool_exp']: {
    Cliente_Id?: GraphQLTypes['uuid_comparison_exp'];
    CodigoReferencia?: GraphQLTypes['Int_comparison_exp'];
    Etapa?: GraphQLTypes['atendimentos_EtapasDosFluxos_bool_exp'];
    Etapa_Id?: GraphQLTypes['uuid_comparison_exp'];
    Fluxo?: GraphQLTypes['atendimentos_Fluxos_bool_exp'];
    Fluxo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Lead_Id?: GraphQLTypes['uuid_comparison_exp'];
    Tipo?: GraphQLTypes['atendimentos_TiposDeTickets_bool_exp'];
    Tipo_Id?: GraphQLTypes['atendimentos_TiposDeTickets_enum_comparison_exp'];
    Usuario_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['atendimentos_Tickets_bool_exp']>;
    _not?: GraphQLTypes['atendimentos_Tickets_bool_exp'];
    _or?: Array<GraphQLTypes['atendimentos_Tickets_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "atendimentos.Tickets" */
  ['atendimentos_Tickets_constraint']: atendimentos_Tickets_constraint;
  /** input type for incrementing numeric columns in table "atendimentos.Tickets" */
  ['atendimentos_Tickets_inc_input']: {
    CodigoReferencia?: number;
  };
  /** input type for inserting data into table "atendimentos.Tickets" */
  ['atendimentos_Tickets_insert_input']: {
    Cliente_Id?: GraphQLTypes['uuid'];
    CodigoReferencia?: number;
    Etapa?: GraphQLTypes['atendimentos_EtapasDosFluxos_obj_rel_insert_input'];
    Etapa_Id?: GraphQLTypes['uuid'];
    Fluxo?: GraphQLTypes['atendimentos_Fluxos_obj_rel_insert_input'];
    Fluxo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Lead_Id?: GraphQLTypes['uuid'];
    Tipo?: GraphQLTypes['atendimentos_TiposDeTickets_obj_rel_insert_input'];
    Tipo_Id?: GraphQLTypes['atendimentos_TiposDeTickets_enum'];
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['atendimentos_Tickets_max_fields']: {
    __typename: 'atendimentos_Tickets_max_fields';
    Cliente_Id?: GraphQLTypes['uuid'];
    CodigoReferencia?: number;
    Etapa_Id?: GraphQLTypes['uuid'];
    Fluxo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Lead_Id?: GraphQLTypes['uuid'];
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_max_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    CodigoReferencia?: GraphQLTypes['order_by'];
    Etapa_Id?: GraphQLTypes['order_by'];
    Fluxo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Lead_Id?: GraphQLTypes['order_by'];
    Usuario_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['atendimentos_Tickets_min_fields']: {
    __typename: 'atendimentos_Tickets_min_fields';
    Cliente_Id?: GraphQLTypes['uuid'];
    CodigoReferencia?: number;
    Etapa_Id?: GraphQLTypes['uuid'];
    Fluxo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Lead_Id?: GraphQLTypes['uuid'];
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_min_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    CodigoReferencia?: GraphQLTypes['order_by'];
    Etapa_Id?: GraphQLTypes['order_by'];
    Fluxo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Lead_Id?: GraphQLTypes['order_by'];
    Usuario_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "atendimentos.Tickets" */
  ['atendimentos_Tickets_mutation_response']: {
    __typename: 'atendimentos_Tickets_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['atendimentos_Tickets']>;
  };
  /** on conflict condition type for table "atendimentos.Tickets" */
  ['atendimentos_Tickets_on_conflict']: {
    constraint: GraphQLTypes['atendimentos_Tickets_constraint'];
    update_columns: Array<GraphQLTypes['atendimentos_Tickets_update_column']>;
    where?: GraphQLTypes['atendimentos_Tickets_bool_exp'];
  };
  /** Ordering options when selecting data from "atendimentos.Tickets". */
  ['atendimentos_Tickets_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    CodigoReferencia?: GraphQLTypes['order_by'];
    Etapa?: GraphQLTypes['atendimentos_EtapasDosFluxos_order_by'];
    Etapa_Id?: GraphQLTypes['order_by'];
    Fluxo?: GraphQLTypes['atendimentos_Fluxos_order_by'];
    Fluxo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Lead_Id?: GraphQLTypes['order_by'];
    Tipo?: GraphQLTypes['atendimentos_TiposDeTickets_order_by'];
    Tipo_Id?: GraphQLTypes['order_by'];
    Usuario_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: atendimentos_Tickets */
  ['atendimentos_Tickets_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_select_column']: atendimentos_Tickets_select_column;
  /** input type for updating data in table "atendimentos.Tickets" */
  ['atendimentos_Tickets_set_input']: {
    Cliente_Id?: GraphQLTypes['uuid'];
    CodigoReferencia?: number;
    Etapa_Id?: GraphQLTypes['uuid'];
    Fluxo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Lead_Id?: GraphQLTypes['uuid'];
    Tipo_Id?: GraphQLTypes['atendimentos_TiposDeTickets_enum'];
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['atendimentos_Tickets_stddev_fields']: {
    __typename: 'atendimentos_Tickets_stddev_fields';
    CodigoReferencia?: number;
  };
  /** order by stddev() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_stddev_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['atendimentos_Tickets_stddev_pop_fields']: {
    __typename: 'atendimentos_Tickets_stddev_pop_fields';
    CodigoReferencia?: number;
  };
  /** order by stddev_pop() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_stddev_pop_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['atendimentos_Tickets_stddev_samp_fields']: {
    __typename: 'atendimentos_Tickets_stddev_samp_fields';
    CodigoReferencia?: number;
  };
  /** order by stddev_samp() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_stddev_samp_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['atendimentos_Tickets_sum_fields']: {
    __typename: 'atendimentos_Tickets_sum_fields';
    CodigoReferencia?: number;
  };
  /** order by sum() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_sum_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** update columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_update_column']: atendimentos_Tickets_update_column;
  /** aggregate var_pop on columns */
  ['atendimentos_Tickets_var_pop_fields']: {
    __typename: 'atendimentos_Tickets_var_pop_fields';
    CodigoReferencia?: number;
  };
  /** order by var_pop() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_var_pop_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['atendimentos_Tickets_var_samp_fields']: {
    __typename: 'atendimentos_Tickets_var_samp_fields';
    CodigoReferencia?: number;
  };
  /** order by var_samp() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_var_samp_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['atendimentos_Tickets_variance_fields']: {
    __typename: 'atendimentos_Tickets_variance_fields';
    CodigoReferencia?: number;
  };
  /** order by variance() on columns of table "atendimentos.Tickets" */
  ['atendimentos_Tickets_variance_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets']: {
    __typename: 'atendimentos_TiposDeTickets';
    Comentario: string;
    /** An array relationship */
    Tickets: Array<GraphQLTypes['atendimentos_Tickets']>;
    /** An aggregate relationship */
    Tickets_aggregate: GraphQLTypes['atendimentos_Tickets_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_aggregate']: {
    __typename: 'atendimentos_TiposDeTickets_aggregate';
    aggregate?: GraphQLTypes['atendimentos_TiposDeTickets_aggregate_fields'];
    nodes: Array<GraphQLTypes['atendimentos_TiposDeTickets']>;
  };
  /** aggregate fields of "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_aggregate_fields']: {
    __typename: 'atendimentos_TiposDeTickets_aggregate_fields';
    count: number;
    max?: GraphQLTypes['atendimentos_TiposDeTickets_max_fields'];
    min?: GraphQLTypes['atendimentos_TiposDeTickets_min_fields'];
  };
  /** Boolean expression to filter rows from the table "atendimentos.TiposDeTickets". All fields are combined with a logical 'AND'. */
  ['atendimentos_TiposDeTickets_bool_exp']: {
    Comentario?: GraphQLTypes['String_comparison_exp'];
    Tickets?: GraphQLTypes['atendimentos_Tickets_bool_exp'];
    Valor?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['atendimentos_TiposDeTickets_bool_exp']>;
    _not?: GraphQLTypes['atendimentos_TiposDeTickets_bool_exp'];
    _or?: Array<GraphQLTypes['atendimentos_TiposDeTickets_bool_exp']>;
  };
  /** unique or primary key constraints on table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_constraint']: atendimentos_TiposDeTickets_constraint;
  ['atendimentos_TiposDeTickets_enum']: atendimentos_TiposDeTickets_enum;
  /** Boolean expression to compare columns of type "atendimentos_TiposDeTickets_enum". All fields are combined with logical 'AND'. */
  ['atendimentos_TiposDeTickets_enum_comparison_exp']: {
    _eq?: GraphQLTypes['atendimentos_TiposDeTickets_enum'];
    _in?: Array<GraphQLTypes['atendimentos_TiposDeTickets_enum']>;
    _is_null?: boolean;
    _neq?: GraphQLTypes['atendimentos_TiposDeTickets_enum'];
    _nin?: Array<GraphQLTypes['atendimentos_TiposDeTickets_enum']>;
  };
  /** input type for inserting data into table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_insert_input']: {
    Comentario?: string;
    Tickets?: GraphQLTypes['atendimentos_Tickets_arr_rel_insert_input'];
    Valor?: string;
  };
  /** aggregate max on columns */
  ['atendimentos_TiposDeTickets_max_fields']: {
    __typename: 'atendimentos_TiposDeTickets_max_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['atendimentos_TiposDeTickets_min_fields']: {
    __typename: 'atendimentos_TiposDeTickets_min_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_mutation_response']: {
    __typename: 'atendimentos_TiposDeTickets_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['atendimentos_TiposDeTickets']>;
  };
  /** input type for inserting object relation for remote table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_obj_rel_insert_input']: {
    data: GraphQLTypes['atendimentos_TiposDeTickets_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['atendimentos_TiposDeTickets_on_conflict'];
  };
  /** on conflict condition type for table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_on_conflict']: {
    constraint: GraphQLTypes['atendimentos_TiposDeTickets_constraint'];
    update_columns: Array<
      GraphQLTypes['atendimentos_TiposDeTickets_update_column']
    >;
    where?: GraphQLTypes['atendimentos_TiposDeTickets_bool_exp'];
  };
  /** Ordering options when selecting data from "atendimentos.TiposDeTickets". */
  ['atendimentos_TiposDeTickets_order_by']: {
    Comentario?: GraphQLTypes['order_by'];
    Tickets_aggregate?: GraphQLTypes['atendimentos_Tickets_aggregate_order_by'];
    Valor?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: atendimentos_TiposDeTickets */
  ['atendimentos_TiposDeTickets_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_select_column']: atendimentos_TiposDeTickets_select_column;
  /** input type for updating data in table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_set_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** update columns of table "atendimentos.TiposDeTickets" */
  ['atendimentos_TiposDeTickets_update_column']: atendimentos_TiposDeTickets_update_column;
  /** columns and relationships of "autenticacao.Atendentes" */
  ['autenticacao_Atendentes']: {
    __typename: 'autenticacao_Atendentes';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Usuario: GraphQLTypes['autenticacao_Usuarios'];
    Usuario_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_aggregate']: {
    __typename: 'autenticacao_Atendentes_aggregate';
    aggregate?: GraphQLTypes['autenticacao_Atendentes_aggregate_fields'];
    nodes: Array<GraphQLTypes['autenticacao_Atendentes']>;
  };
  /** aggregate fields of "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_aggregate_fields']: {
    __typename: 'autenticacao_Atendentes_aggregate_fields';
    count: number;
    max?: GraphQLTypes['autenticacao_Atendentes_max_fields'];
    min?: GraphQLTypes['autenticacao_Atendentes_min_fields'];
  };
  /** Boolean expression to filter rows from the table "autenticacao.Atendentes". All fields are combined with a logical 'AND'. */
  ['autenticacao_Atendentes_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Usuario?: GraphQLTypes['autenticacao_Usuarios_bool_exp'];
    Usuario_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['autenticacao_Atendentes_bool_exp']>;
    _not?: GraphQLTypes['autenticacao_Atendentes_bool_exp'];
    _or?: Array<GraphQLTypes['autenticacao_Atendentes_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_constraint']: autenticacao_Atendentes_constraint;
  /** input type for inserting data into table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Usuario?: GraphQLTypes['autenticacao_Usuarios_obj_rel_insert_input'];
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['autenticacao_Atendentes_max_fields']: {
    __typename: 'autenticacao_Atendentes_max_fields';
    Id?: GraphQLTypes['uuid'];
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['autenticacao_Atendentes_min_fields']: {
    __typename: 'autenticacao_Atendentes_min_fields';
    Id?: GraphQLTypes['uuid'];
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_mutation_response']: {
    __typename: 'autenticacao_Atendentes_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['autenticacao_Atendentes']>;
  };
  /** input type for inserting object relation for remote table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_obj_rel_insert_input']: {
    data: GraphQLTypes['autenticacao_Atendentes_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['autenticacao_Atendentes_on_conflict'];
  };
  /** on conflict condition type for table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_on_conflict']: {
    constraint: GraphQLTypes['autenticacao_Atendentes_constraint'];
    update_columns: Array<
      GraphQLTypes['autenticacao_Atendentes_update_column']
    >;
    where?: GraphQLTypes['autenticacao_Atendentes_bool_exp'];
  };
  /** Ordering options when selecting data from "autenticacao.Atendentes". */
  ['autenticacao_Atendentes_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Usuario?: GraphQLTypes['autenticacao_Usuarios_order_by'];
    Usuario_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: autenticacao_Atendentes */
  ['autenticacao_Atendentes_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_select_column']: autenticacao_Atendentes_select_column;
  /** input type for updating data in table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "autenticacao.Atendentes" */
  ['autenticacao_Atendentes_update_column']: autenticacao_Atendentes_update_column;
  /** columns and relationships of "autenticacao.Usuarios" */
  ['autenticacao_Usuarios']: {
    __typename: 'autenticacao_Usuarios';
    /** An object relationship */
    Atendente?: GraphQLTypes['autenticacao_Atendentes'];
    /** An object relationship */
    Cliente?: GraphQLTypes['identidades_Clientes'];
    Cliente_Id?: GraphQLTypes['uuid'];
    /** An object relationship */
    Colaborador?: GraphQLTypes['identidades_Colaboradores'];
    Colaborador_Id?: GraphQLTypes['uuid'];
    Email: string;
    Id: GraphQLTypes['uuid'];
    Senha: string;
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_aggregate']: {
    __typename: 'autenticacao_Usuarios_aggregate';
    aggregate?: GraphQLTypes['autenticacao_Usuarios_aggregate_fields'];
    nodes: Array<GraphQLTypes['autenticacao_Usuarios']>;
  };
  /** aggregate fields of "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_aggregate_fields']: {
    __typename: 'autenticacao_Usuarios_aggregate_fields';
    count: number;
    max?: GraphQLTypes['autenticacao_Usuarios_max_fields'];
    min?: GraphQLTypes['autenticacao_Usuarios_min_fields'];
  };
  /** order by aggregate values of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['autenticacao_Usuarios_max_order_by'];
    min?: GraphQLTypes['autenticacao_Usuarios_min_order_by'];
  };
  /** input type for inserting array relation for remote table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['autenticacao_Usuarios_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['autenticacao_Usuarios_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "autenticacao.Usuarios". All fields are combined with a logical 'AND'. */
  ['autenticacao_Usuarios_bool_exp']: {
    Atendente?: GraphQLTypes['autenticacao_Atendentes_bool_exp'];
    Cliente?: GraphQLTypes['identidades_Clientes_bool_exp'];
    Cliente_Id?: GraphQLTypes['uuid_comparison_exp'];
    Colaborador?: GraphQLTypes['identidades_Colaboradores_bool_exp'];
    Colaborador_Id?: GraphQLTypes['uuid_comparison_exp'];
    Email?: GraphQLTypes['String_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Senha?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['autenticacao_Usuarios_bool_exp']>;
    _not?: GraphQLTypes['autenticacao_Usuarios_bool_exp'];
    _or?: Array<GraphQLTypes['autenticacao_Usuarios_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_constraint']: autenticacao_Usuarios_constraint;
  /** input type for inserting data into table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_insert_input']: {
    Atendente?: GraphQLTypes['autenticacao_Atendentes_obj_rel_insert_input'];
    Cliente?: GraphQLTypes['identidades_Clientes_obj_rel_insert_input'];
    Cliente_Id?: GraphQLTypes['uuid'];
    Colaborador?: GraphQLTypes['identidades_Colaboradores_obj_rel_insert_input'];
    Colaborador_Id?: GraphQLTypes['uuid'];
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    Senha?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['autenticacao_Usuarios_max_fields']: {
    __typename: 'autenticacao_Usuarios_max_fields';
    Cliente_Id?: GraphQLTypes['uuid'];
    Colaborador_Id?: GraphQLTypes['uuid'];
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    Senha?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_max_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    Colaborador_Id?: GraphQLTypes['order_by'];
    Email?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Senha?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['autenticacao_Usuarios_min_fields']: {
    __typename: 'autenticacao_Usuarios_min_fields';
    Cliente_Id?: GraphQLTypes['uuid'];
    Colaborador_Id?: GraphQLTypes['uuid'];
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    Senha?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_min_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    Colaborador_Id?: GraphQLTypes['order_by'];
    Email?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Senha?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_mutation_response']: {
    __typename: 'autenticacao_Usuarios_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['autenticacao_Usuarios']>;
  };
  /** input type for inserting object relation for remote table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_obj_rel_insert_input']: {
    data: GraphQLTypes['autenticacao_Usuarios_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['autenticacao_Usuarios_on_conflict'];
  };
  /** on conflict condition type for table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_on_conflict']: {
    constraint: GraphQLTypes['autenticacao_Usuarios_constraint'];
    update_columns: Array<GraphQLTypes['autenticacao_Usuarios_update_column']>;
    where?: GraphQLTypes['autenticacao_Usuarios_bool_exp'];
  };
  /** Ordering options when selecting data from "autenticacao.Usuarios". */
  ['autenticacao_Usuarios_order_by']: {
    Atendente?: GraphQLTypes['autenticacao_Atendentes_order_by'];
    Cliente?: GraphQLTypes['identidades_Clientes_order_by'];
    Cliente_Id?: GraphQLTypes['order_by'];
    Colaborador?: GraphQLTypes['identidades_Colaboradores_order_by'];
    Colaborador_Id?: GraphQLTypes['order_by'];
    Email?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Senha?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: autenticacao_Usuarios */
  ['autenticacao_Usuarios_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_select_column']: autenticacao_Usuarios_select_column;
  /** input type for updating data in table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_set_input']: {
    Cliente_Id?: GraphQLTypes['uuid'];
    Colaborador_Id?: GraphQLTypes['uuid'];
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    Senha?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "autenticacao.Usuarios" */
  ['autenticacao_Usuarios_update_column']: autenticacao_Usuarios_update_column;
  ['bigint']: any;
  /** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
  ['bigint_comparison_exp']: {
    _eq?: GraphQLTypes['bigint'];
    _gt?: GraphQLTypes['bigint'];
    _gte?: GraphQLTypes['bigint'];
    _in?: Array<GraphQLTypes['bigint']>;
    _is_null?: boolean;
    _lt?: GraphQLTypes['bigint'];
    _lte?: GraphQLTypes['bigint'];
    _neq?: GraphQLTypes['bigint'];
    _nin?: Array<GraphQLTypes['bigint']>;
  };
  /** columns and relationships of "clientes.Leads" */
  ['clientes_Leads']: {
    __typename: 'clientes_Leads';
    /** An object relationship */
    Cliente?: GraphQLTypes['identidades_Clientes'];
    Cliente_Id?: GraphQLTypes['uuid'];
    Email: string;
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    PerfisComerciais: Array<GraphQLTypes['clientes_PerfisComerciais']>;
    /** An aggregate relationship */
    PerfisComerciais_aggregate: GraphQLTypes['clientes_PerfisComerciais_aggregate'];
    Telefone: string;
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "clientes.Leads" */
  ['clientes_Leads_aggregate']: {
    __typename: 'clientes_Leads_aggregate';
    aggregate?: GraphQLTypes['clientes_Leads_aggregate_fields'];
    nodes: Array<GraphQLTypes['clientes_Leads']>;
  };
  /** aggregate fields of "clientes.Leads" */
  ['clientes_Leads_aggregate_fields']: {
    __typename: 'clientes_Leads_aggregate_fields';
    count: number;
    max?: GraphQLTypes['clientes_Leads_max_fields'];
    min?: GraphQLTypes['clientes_Leads_min_fields'];
  };
  /** order by aggregate values of table "clientes.Leads" */
  ['clientes_Leads_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['clientes_Leads_max_order_by'];
    min?: GraphQLTypes['clientes_Leads_min_order_by'];
  };
  /** input type for inserting array relation for remote table "clientes.Leads" */
  ['clientes_Leads_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['clientes_Leads_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['clientes_Leads_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "clientes.Leads". All fields are combined with a logical 'AND'. */
  ['clientes_Leads_bool_exp']: {
    Cliente?: GraphQLTypes['identidades_Clientes_bool_exp'];
    Cliente_Id?: GraphQLTypes['uuid_comparison_exp'];
    Email?: GraphQLTypes['String_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    PerfisComerciais?: GraphQLTypes['clientes_PerfisComerciais_bool_exp'];
    Telefone?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['clientes_Leads_bool_exp']>;
    _not?: GraphQLTypes['clientes_Leads_bool_exp'];
    _or?: Array<GraphQLTypes['clientes_Leads_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "clientes.Leads" */
  ['clientes_Leads_constraint']: clientes_Leads_constraint;
  /** input type for inserting data into table "clientes.Leads" */
  ['clientes_Leads_insert_input']: {
    Cliente?: GraphQLTypes['identidades_Clientes_obj_rel_insert_input'];
    Cliente_Id?: GraphQLTypes['uuid'];
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    PerfisComerciais?: GraphQLTypes['clientes_PerfisComerciais_arr_rel_insert_input'];
    Telefone?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['clientes_Leads_max_fields']: {
    __typename: 'clientes_Leads_max_fields';
    Cliente_Id?: GraphQLTypes['uuid'];
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Telefone?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.Leads" */
  ['clientes_Leads_max_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    Email?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Telefone?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['clientes_Leads_min_fields']: {
    __typename: 'clientes_Leads_min_fields';
    Cliente_Id?: GraphQLTypes['uuid'];
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Telefone?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.Leads" */
  ['clientes_Leads_min_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    Email?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Telefone?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "clientes.Leads" */
  ['clientes_Leads_mutation_response']: {
    __typename: 'clientes_Leads_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['clientes_Leads']>;
  };
  /** input type for inserting object relation for remote table "clientes.Leads" */
  ['clientes_Leads_obj_rel_insert_input']: {
    data: GraphQLTypes['clientes_Leads_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['clientes_Leads_on_conflict'];
  };
  /** on conflict condition type for table "clientes.Leads" */
  ['clientes_Leads_on_conflict']: {
    constraint: GraphQLTypes['clientes_Leads_constraint'];
    update_columns: Array<GraphQLTypes['clientes_Leads_update_column']>;
    where?: GraphQLTypes['clientes_Leads_bool_exp'];
  };
  /** Ordering options when selecting data from "clientes.Leads". */
  ['clientes_Leads_order_by']: {
    Cliente?: GraphQLTypes['identidades_Clientes_order_by'];
    Cliente_Id?: GraphQLTypes['order_by'];
    Email?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    PerfisComerciais_aggregate?: GraphQLTypes['clientes_PerfisComerciais_aggregate_order_by'];
    Telefone?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: clientes_Leads */
  ['clientes_Leads_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "clientes.Leads" */
  ['clientes_Leads_select_column']: clientes_Leads_select_column;
  /** input type for updating data in table "clientes.Leads" */
  ['clientes_Leads_set_input']: {
    Cliente_Id?: GraphQLTypes['uuid'];
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Telefone?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "clientes.Leads" */
  ['clientes_Leads_update_column']: clientes_Leads_update_column;
  /** columns and relationships of "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais']: {
    __typename: 'clientes_PerfisComerciais';
    Grupo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Lead: GraphQLTypes['clientes_Leads'];
    Lead_Id: GraphQLTypes['uuid'];
    Pergunta_Id: GraphQLTypes['uuid'];
    Resposta: string;
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_aggregate']: {
    __typename: 'clientes_PerfisComerciais_aggregate';
    aggregate?: GraphQLTypes['clientes_PerfisComerciais_aggregate_fields'];
    nodes: Array<GraphQLTypes['clientes_PerfisComerciais']>;
  };
  /** aggregate fields of "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_aggregate_fields']: {
    __typename: 'clientes_PerfisComerciais_aggregate_fields';
    count: number;
    max?: GraphQLTypes['clientes_PerfisComerciais_max_fields'];
    min?: GraphQLTypes['clientes_PerfisComerciais_min_fields'];
  };
  /** order by aggregate values of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['clientes_PerfisComerciais_max_order_by'];
    min?: GraphQLTypes['clientes_PerfisComerciais_min_order_by'];
  };
  /** input type for inserting array relation for remote table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['clientes_PerfisComerciais_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['clientes_PerfisComerciais_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "clientes.PerfisComerciais". All fields are combined with a logical 'AND'. */
  ['clientes_PerfisComerciais_bool_exp']: {
    Grupo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Lead?: GraphQLTypes['clientes_Leads_bool_exp'];
    Lead_Id?: GraphQLTypes['uuid_comparison_exp'];
    Pergunta_Id?: GraphQLTypes['uuid_comparison_exp'];
    Resposta?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['clientes_PerfisComerciais_bool_exp']>;
    _not?: GraphQLTypes['clientes_PerfisComerciais_bool_exp'];
    _or?: Array<GraphQLTypes['clientes_PerfisComerciais_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_constraint']: clientes_PerfisComerciais_constraint;
  /** input type for inserting data into table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_insert_input']: {
    Grupo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Lead?: GraphQLTypes['clientes_Leads_obj_rel_insert_input'];
    Lead_Id?: GraphQLTypes['uuid'];
    Pergunta_Id?: GraphQLTypes['uuid'];
    Resposta?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['clientes_PerfisComerciais_max_fields']: {
    __typename: 'clientes_PerfisComerciais_max_fields';
    Grupo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Lead_Id?: GraphQLTypes['uuid'];
    Pergunta_Id?: GraphQLTypes['uuid'];
    Resposta?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_max_order_by']: {
    Grupo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Lead_Id?: GraphQLTypes['order_by'];
    Pergunta_Id?: GraphQLTypes['order_by'];
    Resposta?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['clientes_PerfisComerciais_min_fields']: {
    __typename: 'clientes_PerfisComerciais_min_fields';
    Grupo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Lead_Id?: GraphQLTypes['uuid'];
    Pergunta_Id?: GraphQLTypes['uuid'];
    Resposta?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_min_order_by']: {
    Grupo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Lead_Id?: GraphQLTypes['order_by'];
    Pergunta_Id?: GraphQLTypes['order_by'];
    Resposta?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_mutation_response']: {
    __typename: 'clientes_PerfisComerciais_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['clientes_PerfisComerciais']>;
  };
  /** on conflict condition type for table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_on_conflict']: {
    constraint: GraphQLTypes['clientes_PerfisComerciais_constraint'];
    update_columns: Array<
      GraphQLTypes['clientes_PerfisComerciais_update_column']
    >;
    where?: GraphQLTypes['clientes_PerfisComerciais_bool_exp'];
  };
  /** Ordering options when selecting data from "clientes.PerfisComerciais". */
  ['clientes_PerfisComerciais_order_by']: {
    Grupo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Lead?: GraphQLTypes['clientes_Leads_order_by'];
    Lead_Id?: GraphQLTypes['order_by'];
    Pergunta_Id?: GraphQLTypes['order_by'];
    Resposta?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: clientes_PerfisComerciais */
  ['clientes_PerfisComerciais_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_select_column']: clientes_PerfisComerciais_select_column;
  /** input type for updating data in table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_set_input']: {
    Grupo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Lead_Id?: GraphQLTypes['uuid'];
    Pergunta_Id?: GraphQLTypes['uuid'];
    Resposta?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "clientes.PerfisComerciais" */
  ['clientes_PerfisComerciais_update_column']: clientes_PerfisComerciais_update_column;
  /** columns and relationships of "clientes.Veiculos" */
  ['clientes_Veiculos']: {
    __typename: 'clientes_Veiculos';
    Apelido?: string;
    Categoria_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Cliente?: GraphQLTypes['identidades_Clientes'];
    Cliente_Id?: GraphQLTypes['uuid'];
    DadosDaApi?: GraphQLTypes['jsonb'];
    Id: GraphQLTypes['uuid'];
    NumeroDoChassi?: string;
    Placa?: string;
    /** An array relationship */
    VeiculosAtivos: Array<GraphQLTypes['clientes_VeiculosAtivos']>;
    /** An aggregate relationship */
    VeiculosAtivos_aggregate: GraphQLTypes['clientes_VeiculosAtivos_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos']: {
    __typename: 'clientes_VeiculosAtivos';
    /** An array relationship */
    Beneficios: Array<GraphQLTypes['clientes_VeiculosAtivos_Beneficios']>;
    /** An aggregate relationship */
    Beneficios_aggregate: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_aggregate'];
    /** An object relationship */
    Cliente: GraphQLTypes['identidades_Clientes'];
    Cliente_Id: GraphQLTypes['uuid'];
    Franquia_Id?: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    OS_Id?: GraphQLTypes['uuid'];
    /** An array relationship */
    Produtos: Array<GraphQLTypes['clientes_VeiculosAtivos_Produtos']>;
    /** An aggregate relationship */
    Produtos_aggregate: GraphQLTypes['clientes_VeiculosAtivos_Produtos_aggregate'];
    /** An array relationship */
    Servicos: Array<GraphQLTypes['clientes_VeiculosAtivos_Servicos']>;
    /** An aggregate relationship */
    Servicos_aggregate: GraphQLTypes['clientes_VeiculosAtivos_Servicos_aggregate'];
    /** An object relationship */
    Situacao: GraphQLTypes['clientes_VeiculosAtivos_Situacao'];
    Situacao_Id: GraphQLTypes['clientes_VeiculosAtivos_Situacao_enum'];
    /** An object relationship */
    Veiculo: GraphQLTypes['clientes_Veiculos'];
    Veiculo_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios']: {
    __typename: 'clientes_VeiculosAtivos_Beneficios';
    Ativo: boolean;
    Id: GraphQLTypes['uuid'];
    PortfolioPreco_Id: GraphQLTypes['uuid'];
    Portfolio_Id: GraphQLTypes['uuid'];
    TipoPortfolio: string;
    /** An object relationship */
    VeiculoAtivo: GraphQLTypes['clientes_VeiculosAtivos'];
    VeiculoAtivo_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_aggregate']: {
    __typename: 'clientes_VeiculosAtivos_Beneficios_aggregate';
    aggregate?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_aggregate_fields'];
    nodes: Array<GraphQLTypes['clientes_VeiculosAtivos_Beneficios']>;
  };
  /** aggregate fields of "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_aggregate_fields']: {
    __typename: 'clientes_VeiculosAtivos_Beneficios_aggregate_fields';
    count: number;
    max?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_max_fields'];
    min?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_min_fields'];
  };
  /** order by aggregate values of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_max_order_by'];
    min?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_min_order_by'];
  };
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_arr_rel_insert_input']: {
    data: Array<
      GraphQLTypes['clientes_VeiculosAtivos_Beneficios_insert_input']
    >;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Beneficios". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Beneficios_bool_exp']: {
    Ativo?: GraphQLTypes['Boolean_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    PortfolioPreco_Id?: GraphQLTypes['uuid_comparison_exp'];
    Portfolio_Id?: GraphQLTypes['uuid_comparison_exp'];
    TipoPortfolio?: GraphQLTypes['String_comparison_exp'];
    VeiculoAtivo?: GraphQLTypes['clientes_VeiculosAtivos_bool_exp'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['clientes_VeiculosAtivos_Beneficios_bool_exp']>;
    _not?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_bool_exp'];
    _or?: Array<GraphQLTypes['clientes_VeiculosAtivos_Beneficios_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_constraint']: clientes_VeiculosAtivos_Beneficios_constraint;
  /** input type for inserting data into table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_insert_input']: {
    Ativo?: boolean;
    Id?: GraphQLTypes['uuid'];
    PortfolioPreco_Id?: GraphQLTypes['uuid'];
    Portfolio_Id?: GraphQLTypes['uuid'];
    TipoPortfolio?: string;
    VeiculoAtivo?: GraphQLTypes['clientes_VeiculosAtivos_obj_rel_insert_input'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Beneficios_max_fields']: {
    __typename: 'clientes_VeiculosAtivos_Beneficios_max_fields';
    Id?: GraphQLTypes['uuid'];
    PortfolioPreco_Id?: GraphQLTypes['uuid'];
    Portfolio_Id?: GraphQLTypes['uuid'];
    TipoPortfolio?: string;
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    PortfolioPreco_Id?: GraphQLTypes['order_by'];
    Portfolio_Id?: GraphQLTypes['order_by'];
    TipoPortfolio?: GraphQLTypes['order_by'];
    VeiculoAtivo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Beneficios_min_fields']: {
    __typename: 'clientes_VeiculosAtivos_Beneficios_min_fields';
    Id?: GraphQLTypes['uuid'];
    PortfolioPreco_Id?: GraphQLTypes['uuid'];
    Portfolio_Id?: GraphQLTypes['uuid'];
    TipoPortfolio?: string;
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    PortfolioPreco_Id?: GraphQLTypes['order_by'];
    Portfolio_Id?: GraphQLTypes['order_by'];
    TipoPortfolio?: GraphQLTypes['order_by'];
    VeiculoAtivo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_mutation_response']: {
    __typename: 'clientes_VeiculosAtivos_Beneficios_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['clientes_VeiculosAtivos_Beneficios']>;
  };
  /** on conflict condition type for table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_on_conflict']: {
    constraint: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_constraint'];
    update_columns: Array<
      GraphQLTypes['clientes_VeiculosAtivos_Beneficios_update_column']
    >;
    where?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_bool_exp'];
  };
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Beneficios". */
  ['clientes_VeiculosAtivos_Beneficios_order_by']: {
    Ativo?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    PortfolioPreco_Id?: GraphQLTypes['order_by'];
    Portfolio_Id?: GraphQLTypes['order_by'];
    TipoPortfolio?: GraphQLTypes['order_by'];
    VeiculoAtivo?: GraphQLTypes['clientes_VeiculosAtivos_order_by'];
    VeiculoAtivo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: clientes_VeiculosAtivos_Beneficios */
  ['clientes_VeiculosAtivos_Beneficios_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_select_column']: clientes_VeiculosAtivos_Beneficios_select_column;
  /** input type for updating data in table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_set_input']: {
    Ativo?: boolean;
    Id?: GraphQLTypes['uuid'];
    PortfolioPreco_Id?: GraphQLTypes['uuid'];
    Portfolio_Id?: GraphQLTypes['uuid'];
    TipoPortfolio?: string;
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "clientes.VeiculosAtivos_Beneficios" */
  ['clientes_VeiculosAtivos_Beneficios_update_column']: clientes_VeiculosAtivos_Beneficios_update_column;
  /** columns and relationships of "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos']: {
    __typename: 'clientes_VeiculosAtivos_Produtos';
    Ativo: boolean;
    Id: GraphQLTypes['uuid'];
    ProdutoPreco_Id: GraphQLTypes['uuid'];
    Produto_Id: GraphQLTypes['uuid'];
    VeiculoAtivo_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    VeiculosAtivo: GraphQLTypes['clientes_VeiculosAtivos'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_aggregate']: {
    __typename: 'clientes_VeiculosAtivos_Produtos_aggregate';
    aggregate?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_aggregate_fields'];
    nodes: Array<GraphQLTypes['clientes_VeiculosAtivos_Produtos']>;
  };
  /** aggregate fields of "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_aggregate_fields']: {
    __typename: 'clientes_VeiculosAtivos_Produtos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_max_fields'];
    min?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_min_fields'];
  };
  /** order by aggregate values of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_max_order_by'];
    min?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['clientes_VeiculosAtivos_Produtos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Produtos". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Produtos_bool_exp']: {
    Ativo?: GraphQLTypes['Boolean_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    ProdutoPreco_Id?: GraphQLTypes['uuid_comparison_exp'];
    Produto_Id?: GraphQLTypes['uuid_comparison_exp'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid_comparison_exp'];
    VeiculosAtivo?: GraphQLTypes['clientes_VeiculosAtivos_bool_exp'];
    _and?: Array<GraphQLTypes['clientes_VeiculosAtivos_Produtos_bool_exp']>;
    _not?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_bool_exp'];
    _or?: Array<GraphQLTypes['clientes_VeiculosAtivos_Produtos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_constraint']: clientes_VeiculosAtivos_Produtos_constraint;
  /** input type for inserting data into table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_insert_input']: {
    Ativo?: boolean;
    Id?: GraphQLTypes['uuid'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    VeiculosAtivo?: GraphQLTypes['clientes_VeiculosAtivos_obj_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Produtos_max_fields']: {
    __typename: 'clientes_VeiculosAtivos_Produtos_max_fields';
    Id?: GraphQLTypes['uuid'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    ProdutoPreco_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    VeiculoAtivo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Produtos_min_fields']: {
    __typename: 'clientes_VeiculosAtivos_Produtos_min_fields';
    Id?: GraphQLTypes['uuid'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    ProdutoPreco_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    VeiculoAtivo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_mutation_response']: {
    __typename: 'clientes_VeiculosAtivos_Produtos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['clientes_VeiculosAtivos_Produtos']>;
  };
  /** on conflict condition type for table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_on_conflict']: {
    constraint: GraphQLTypes['clientes_VeiculosAtivos_Produtos_constraint'];
    update_columns: Array<
      GraphQLTypes['clientes_VeiculosAtivos_Produtos_update_column']
    >;
    where?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_bool_exp'];
  };
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Produtos". */
  ['clientes_VeiculosAtivos_Produtos_order_by']: {
    Ativo?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    ProdutoPreco_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    VeiculoAtivo_Id?: GraphQLTypes['order_by'];
    VeiculosAtivo?: GraphQLTypes['clientes_VeiculosAtivos_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: clientes_VeiculosAtivos_Produtos */
  ['clientes_VeiculosAtivos_Produtos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_select_column']: clientes_VeiculosAtivos_Produtos_select_column;
  /** input type for updating data in table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_set_input']: {
    Ativo?: boolean;
    Id?: GraphQLTypes['uuid'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "clientes.VeiculosAtivos_Produtos" */
  ['clientes_VeiculosAtivos_Produtos_update_column']: clientes_VeiculosAtivos_Produtos_update_column;
  /** columns and relationships of "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos']: {
    __typename: 'clientes_VeiculosAtivos_Servicos';
    Ativo: boolean;
    Id: GraphQLTypes['uuid'];
    ServicoPreco_Id: GraphQLTypes['uuid'];
    Servico_Id: GraphQLTypes['uuid'];
    VeiculoAtivo_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    VeiculosAtivo: GraphQLTypes['clientes_VeiculosAtivos'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_aggregate']: {
    __typename: 'clientes_VeiculosAtivos_Servicos_aggregate';
    aggregate?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_aggregate_fields'];
    nodes: Array<GraphQLTypes['clientes_VeiculosAtivos_Servicos']>;
  };
  /** aggregate fields of "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_aggregate_fields']: {
    __typename: 'clientes_VeiculosAtivos_Servicos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_max_fields'];
    min?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_min_fields'];
  };
  /** order by aggregate values of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_max_order_by'];
    min?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['clientes_VeiculosAtivos_Servicos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Servicos". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Servicos_bool_exp']: {
    Ativo?: GraphQLTypes['Boolean_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    ServicoPreco_Id?: GraphQLTypes['uuid_comparison_exp'];
    Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid_comparison_exp'];
    VeiculosAtivo?: GraphQLTypes['clientes_VeiculosAtivos_bool_exp'];
    _and?: Array<GraphQLTypes['clientes_VeiculosAtivos_Servicos_bool_exp']>;
    _not?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_bool_exp'];
    _or?: Array<GraphQLTypes['clientes_VeiculosAtivos_Servicos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_constraint']: clientes_VeiculosAtivos_Servicos_constraint;
  /** input type for inserting data into table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_insert_input']: {
    Ativo?: boolean;
    Id?: GraphQLTypes['uuid'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    VeiculosAtivo?: GraphQLTypes['clientes_VeiculosAtivos_obj_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Servicos_max_fields']: {
    __typename: 'clientes_VeiculosAtivos_Servicos_max_fields';
    Id?: GraphQLTypes['uuid'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    ServicoPreco_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    VeiculoAtivo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Servicos_min_fields']: {
    __typename: 'clientes_VeiculosAtivos_Servicos_min_fields';
    Id?: GraphQLTypes['uuid'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    ServicoPreco_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    VeiculoAtivo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_mutation_response']: {
    __typename: 'clientes_VeiculosAtivos_Servicos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['clientes_VeiculosAtivos_Servicos']>;
  };
  /** on conflict condition type for table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_on_conflict']: {
    constraint: GraphQLTypes['clientes_VeiculosAtivos_Servicos_constraint'];
    update_columns: Array<
      GraphQLTypes['clientes_VeiculosAtivos_Servicos_update_column']
    >;
    where?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_bool_exp'];
  };
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Servicos". */
  ['clientes_VeiculosAtivos_Servicos_order_by']: {
    Ativo?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    ServicoPreco_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    VeiculoAtivo_Id?: GraphQLTypes['order_by'];
    VeiculosAtivo?: GraphQLTypes['clientes_VeiculosAtivos_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: clientes_VeiculosAtivos_Servicos */
  ['clientes_VeiculosAtivos_Servicos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_select_column']: clientes_VeiculosAtivos_Servicos_select_column;
  /** input type for updating data in table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_set_input']: {
    Ativo?: boolean;
    Id?: GraphQLTypes['uuid'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    VeiculoAtivo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "clientes.VeiculosAtivos_Servicos" */
  ['clientes_VeiculosAtivos_Servicos_update_column']: clientes_VeiculosAtivos_Servicos_update_column;
  /** columns and relationships of "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao']: {
    __typename: 'clientes_VeiculosAtivos_Situacao';
    Comentario: string;
    Valor: string;
    /** An array relationship */
    VeiculosAtivos: Array<GraphQLTypes['clientes_VeiculosAtivos']>;
    /** An aggregate relationship */
    VeiculosAtivos_aggregate: GraphQLTypes['clientes_VeiculosAtivos_aggregate'];
  };
  /** aggregated selection of "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_aggregate']: {
    __typename: 'clientes_VeiculosAtivos_Situacao_aggregate';
    aggregate?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_aggregate_fields'];
    nodes: Array<GraphQLTypes['clientes_VeiculosAtivos_Situacao']>;
  };
  /** aggregate fields of "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_aggregate_fields']: {
    __typename: 'clientes_VeiculosAtivos_Situacao_aggregate_fields';
    count: number;
    max?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_max_fields'];
    min?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_min_fields'];
  };
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos_Situacao". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_Situacao_bool_exp']: {
    Comentario?: GraphQLTypes['String_comparison_exp'];
    Valor?: GraphQLTypes['String_comparison_exp'];
    VeiculosAtivos?: GraphQLTypes['clientes_VeiculosAtivos_bool_exp'];
    _and?: Array<GraphQLTypes['clientes_VeiculosAtivos_Situacao_bool_exp']>;
    _not?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_bool_exp'];
    _or?: Array<GraphQLTypes['clientes_VeiculosAtivos_Situacao_bool_exp']>;
  };
  /** unique or primary key constraints on table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_constraint']: clientes_VeiculosAtivos_Situacao_constraint;
  ['clientes_VeiculosAtivos_Situacao_enum']: clientes_VeiculosAtivos_Situacao_enum;
  /** Boolean expression to compare columns of type "clientes_VeiculosAtivos_Situacao_enum". All fields are combined with logical 'AND'. */
  ['clientes_VeiculosAtivos_Situacao_enum_comparison_exp']: {
    _eq?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_enum'];
    _in?: Array<GraphQLTypes['clientes_VeiculosAtivos_Situacao_enum']>;
    _is_null?: boolean;
    _neq?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_enum'];
    _nin?: Array<GraphQLTypes['clientes_VeiculosAtivos_Situacao_enum']>;
  };
  /** input type for inserting data into table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_insert_input']: {
    Comentario?: string;
    Valor?: string;
    VeiculosAtivos?: GraphQLTypes['clientes_VeiculosAtivos_arr_rel_insert_input'];
  };
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_Situacao_max_fields']: {
    __typename: 'clientes_VeiculosAtivos_Situacao_max_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_Situacao_min_fields']: {
    __typename: 'clientes_VeiculosAtivos_Situacao_min_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_mutation_response']: {
    __typename: 'clientes_VeiculosAtivos_Situacao_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['clientes_VeiculosAtivos_Situacao']>;
  };
  /** input type for inserting object relation for remote table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_obj_rel_insert_input']: {
    data: GraphQLTypes['clientes_VeiculosAtivos_Situacao_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_on_conflict'];
  };
  /** on conflict condition type for table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_on_conflict']: {
    constraint: GraphQLTypes['clientes_VeiculosAtivos_Situacao_constraint'];
    update_columns: Array<
      GraphQLTypes['clientes_VeiculosAtivos_Situacao_update_column']
    >;
    where?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_bool_exp'];
  };
  /** Ordering options when selecting data from "clientes.VeiculosAtivos_Situacao". */
  ['clientes_VeiculosAtivos_Situacao_order_by']: {
    Comentario?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    VeiculosAtivos_aggregate?: GraphQLTypes['clientes_VeiculosAtivos_aggregate_order_by'];
  };
  /** primary key columns input for table: clientes_VeiculosAtivos_Situacao */
  ['clientes_VeiculosAtivos_Situacao_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_select_column']: clientes_VeiculosAtivos_Situacao_select_column;
  /** input type for updating data in table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_set_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** update columns of table "clientes.VeiculosAtivos_Situacao" */
  ['clientes_VeiculosAtivos_Situacao_update_column']: clientes_VeiculosAtivos_Situacao_update_column;
  /** aggregated selection of "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_aggregate']: {
    __typename: 'clientes_VeiculosAtivos_aggregate';
    aggregate?: GraphQLTypes['clientes_VeiculosAtivos_aggregate_fields'];
    nodes: Array<GraphQLTypes['clientes_VeiculosAtivos']>;
  };
  /** aggregate fields of "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_aggregate_fields']: {
    __typename: 'clientes_VeiculosAtivos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['clientes_VeiculosAtivos_max_fields'];
    min?: GraphQLTypes['clientes_VeiculosAtivos_min_fields'];
  };
  /** order by aggregate values of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['clientes_VeiculosAtivos_max_order_by'];
    min?: GraphQLTypes['clientes_VeiculosAtivos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['clientes_VeiculosAtivos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['clientes_VeiculosAtivos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "clientes.VeiculosAtivos". All fields are combined with a logical 'AND'. */
  ['clientes_VeiculosAtivos_bool_exp']: {
    Beneficios?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_bool_exp'];
    Cliente?: GraphQLTypes['identidades_Clientes_bool_exp'];
    Cliente_Id?: GraphQLTypes['uuid_comparison_exp'];
    Franquia_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    OS_Id?: GraphQLTypes['uuid_comparison_exp'];
    Produtos?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_bool_exp'];
    Servicos?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_bool_exp'];
    Situacao?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_bool_exp'];
    Situacao_Id?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_enum_comparison_exp'];
    Veiculo?: GraphQLTypes['clientes_Veiculos_bool_exp'];
    Veiculo_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['clientes_VeiculosAtivos_bool_exp']>;
    _not?: GraphQLTypes['clientes_VeiculosAtivos_bool_exp'];
    _or?: Array<GraphQLTypes['clientes_VeiculosAtivos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_constraint']: clientes_VeiculosAtivos_constraint;
  /** input type for inserting data into table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_insert_input']: {
    Beneficios?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_arr_rel_insert_input'];
    Cliente?: GraphQLTypes['identidades_Clientes_obj_rel_insert_input'];
    Cliente_Id?: GraphQLTypes['uuid'];
    Franquia_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    OS_Id?: GraphQLTypes['uuid'];
    Produtos?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_arr_rel_insert_input'];
    Servicos?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_arr_rel_insert_input'];
    Situacao?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_obj_rel_insert_input'];
    Situacao_Id?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_enum'];
    Veiculo?: GraphQLTypes['clientes_Veiculos_obj_rel_insert_input'];
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['clientes_VeiculosAtivos_max_fields']: {
    __typename: 'clientes_VeiculosAtivos_max_fields';
    Cliente_Id?: GraphQLTypes['uuid'];
    Franquia_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    OS_Id?: GraphQLTypes['uuid'];
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_max_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    Franquia_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    OS_Id?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['clientes_VeiculosAtivos_min_fields']: {
    __typename: 'clientes_VeiculosAtivos_min_fields';
    Cliente_Id?: GraphQLTypes['uuid'];
    Franquia_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    OS_Id?: GraphQLTypes['uuid'];
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_min_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    Franquia_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    OS_Id?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_mutation_response']: {
    __typename: 'clientes_VeiculosAtivos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['clientes_VeiculosAtivos']>;
  };
  /** input type for inserting object relation for remote table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_obj_rel_insert_input']: {
    data: GraphQLTypes['clientes_VeiculosAtivos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['clientes_VeiculosAtivos_on_conflict'];
  };
  /** on conflict condition type for table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_on_conflict']: {
    constraint: GraphQLTypes['clientes_VeiculosAtivos_constraint'];
    update_columns: Array<
      GraphQLTypes['clientes_VeiculosAtivos_update_column']
    >;
    where?: GraphQLTypes['clientes_VeiculosAtivos_bool_exp'];
  };
  /** Ordering options when selecting data from "clientes.VeiculosAtivos". */
  ['clientes_VeiculosAtivos_order_by']: {
    Beneficios_aggregate?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_aggregate_order_by'];
    Cliente?: GraphQLTypes['identidades_Clientes_order_by'];
    Cliente_Id?: GraphQLTypes['order_by'];
    Franquia_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    OS_Id?: GraphQLTypes['order_by'];
    Produtos_aggregate?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_aggregate_order_by'];
    Servicos_aggregate?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_aggregate_order_by'];
    Situacao?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_order_by'];
    Situacao_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['clientes_Veiculos_order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: clientes_VeiculosAtivos */
  ['clientes_VeiculosAtivos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_select_column']: clientes_VeiculosAtivos_select_column;
  /** input type for updating data in table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_set_input']: {
    Cliente_Id?: GraphQLTypes['uuid'];
    Franquia_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    OS_Id?: GraphQLTypes['uuid'];
    Situacao_Id?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_enum'];
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "clientes.VeiculosAtivos" */
  ['clientes_VeiculosAtivos_update_column']: clientes_VeiculosAtivos_update_column;
  /** aggregated selection of "clientes.Veiculos" */
  ['clientes_Veiculos_aggregate']: {
    __typename: 'clientes_Veiculos_aggregate';
    aggregate?: GraphQLTypes['clientes_Veiculos_aggregate_fields'];
    nodes: Array<GraphQLTypes['clientes_Veiculos']>;
  };
  /** aggregate fields of "clientes.Veiculos" */
  ['clientes_Veiculos_aggregate_fields']: {
    __typename: 'clientes_Veiculos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['clientes_Veiculos_max_fields'];
    min?: GraphQLTypes['clientes_Veiculos_min_fields'];
  };
  /** order by aggregate values of table "clientes.Veiculos" */
  ['clientes_Veiculos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['clientes_Veiculos_max_order_by'];
    min?: GraphQLTypes['clientes_Veiculos_min_order_by'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['clientes_Veiculos_append_input']: {
    DadosDaApi?: GraphQLTypes['jsonb'];
  };
  /** input type for inserting array relation for remote table "clientes.Veiculos" */
  ['clientes_Veiculos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['clientes_Veiculos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['clientes_Veiculos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "clientes.Veiculos". All fields are combined with a logical 'AND'. */
  ['clientes_Veiculos_bool_exp']: {
    Apelido?: GraphQLTypes['String_comparison_exp'];
    Categoria_Id?: GraphQLTypes['uuid_comparison_exp'];
    Cliente?: GraphQLTypes['identidades_Clientes_bool_exp'];
    Cliente_Id?: GraphQLTypes['uuid_comparison_exp'];
    DadosDaApi?: GraphQLTypes['jsonb_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    NumeroDoChassi?: GraphQLTypes['String_comparison_exp'];
    Placa?: GraphQLTypes['String_comparison_exp'];
    VeiculosAtivos?: GraphQLTypes['clientes_VeiculosAtivos_bool_exp'];
    _and?: Array<GraphQLTypes['clientes_Veiculos_bool_exp']>;
    _not?: GraphQLTypes['clientes_Veiculos_bool_exp'];
    _or?: Array<GraphQLTypes['clientes_Veiculos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "clientes.Veiculos" */
  ['clientes_Veiculos_constraint']: clientes_Veiculos_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['clientes_Veiculos_delete_at_path_input']: {
    DadosDaApi?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['clientes_Veiculos_delete_elem_input']: {
    DadosDaApi?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['clientes_Veiculos_delete_key_input']: {
    DadosDaApi?: string;
  };
  /** input type for inserting data into table "clientes.Veiculos" */
  ['clientes_Veiculos_insert_input']: {
    Apelido?: string;
    Categoria_Id?: GraphQLTypes['uuid'];
    Cliente?: GraphQLTypes['identidades_Clientes_obj_rel_insert_input'];
    Cliente_Id?: GraphQLTypes['uuid'];
    DadosDaApi?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    NumeroDoChassi?: string;
    Placa?: string;
    VeiculosAtivos?: GraphQLTypes['clientes_VeiculosAtivos_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['clientes_Veiculos_max_fields']: {
    __typename: 'clientes_Veiculos_max_fields';
    Apelido?: string;
    Categoria_Id?: GraphQLTypes['uuid'];
    Cliente_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    NumeroDoChassi?: string;
    Placa?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_max_order_by']: {
    Apelido?: GraphQLTypes['order_by'];
    Categoria_Id?: GraphQLTypes['order_by'];
    Cliente_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    NumeroDoChassi?: GraphQLTypes['order_by'];
    Placa?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['clientes_Veiculos_min_fields']: {
    __typename: 'clientes_Veiculos_min_fields';
    Apelido?: string;
    Categoria_Id?: GraphQLTypes['uuid'];
    Cliente_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    NumeroDoChassi?: string;
    Placa?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_min_order_by']: {
    Apelido?: GraphQLTypes['order_by'];
    Categoria_Id?: GraphQLTypes['order_by'];
    Cliente_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    NumeroDoChassi?: GraphQLTypes['order_by'];
    Placa?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "clientes.Veiculos" */
  ['clientes_Veiculos_mutation_response']: {
    __typename: 'clientes_Veiculos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['clientes_Veiculos']>;
  };
  /** input type for inserting object relation for remote table "clientes.Veiculos" */
  ['clientes_Veiculos_obj_rel_insert_input']: {
    data: GraphQLTypes['clientes_Veiculos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['clientes_Veiculos_on_conflict'];
  };
  /** on conflict condition type for table "clientes.Veiculos" */
  ['clientes_Veiculos_on_conflict']: {
    constraint: GraphQLTypes['clientes_Veiculos_constraint'];
    update_columns: Array<GraphQLTypes['clientes_Veiculos_update_column']>;
    where?: GraphQLTypes['clientes_Veiculos_bool_exp'];
  };
  /** Ordering options when selecting data from "clientes.Veiculos". */
  ['clientes_Veiculos_order_by']: {
    Apelido?: GraphQLTypes['order_by'];
    Categoria_Id?: GraphQLTypes['order_by'];
    Cliente?: GraphQLTypes['identidades_Clientes_order_by'];
    Cliente_Id?: GraphQLTypes['order_by'];
    DadosDaApi?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    NumeroDoChassi?: GraphQLTypes['order_by'];
    Placa?: GraphQLTypes['order_by'];
    VeiculosAtivos_aggregate?: GraphQLTypes['clientes_VeiculosAtivos_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: clientes_Veiculos */
  ['clientes_Veiculos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['clientes_Veiculos_prepend_input']: {
    DadosDaApi?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_select_column']: clientes_Veiculos_select_column;
  /** input type for updating data in table "clientes.Veiculos" */
  ['clientes_Veiculos_set_input']: {
    Apelido?: string;
    Categoria_Id?: GraphQLTypes['uuid'];
    Cliente_Id?: GraphQLTypes['uuid'];
    DadosDaApi?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    NumeroDoChassi?: string;
    Placa?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "clientes.Veiculos" */
  ['clientes_Veiculos_update_column']: clientes_Veiculos_update_column;
  /** columns and relationships of "comercial.Acoes" */
  ['comercial_Acoes']: {
    __typename: 'comercial_Acoes';
    Etapas_Id: GraphQLTypes['jsonb'];
    Id: GraphQLTypes['uuid'];
    Titulo: string;
    Url: string;
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Acoes" */
  ['comercial_Acoes_aggregate']: {
    __typename: 'comercial_Acoes_aggregate';
    aggregate?: GraphQLTypes['comercial_Acoes_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Acoes']>;
  };
  /** aggregate fields of "comercial.Acoes" */
  ['comercial_Acoes_aggregate_fields']: {
    __typename: 'comercial_Acoes_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Acoes_max_fields'];
    min?: GraphQLTypes['comercial_Acoes_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Acoes_append_input']: {
    Etapas_Id?: GraphQLTypes['jsonb'];
  };
  /** Boolean expression to filter rows from the table "comercial.Acoes". All fields are combined with a logical 'AND'. */
  ['comercial_Acoes_bool_exp']: {
    Etapas_Id?: GraphQLTypes['jsonb_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Titulo?: GraphQLTypes['String_comparison_exp'];
    Url?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Acoes_bool_exp']>;
    _not?: GraphQLTypes['comercial_Acoes_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Acoes_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Acoes" */
  ['comercial_Acoes_constraint']: comercial_Acoes_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['comercial_Acoes_delete_at_path_input']: {
    Etapas_Id?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['comercial_Acoes_delete_elem_input']: {
    Etapas_Id?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['comercial_Acoes_delete_key_input']: {
    Etapas_Id?: string;
  };
  /** input type for inserting data into table "comercial.Acoes" */
  ['comercial_Acoes_insert_input']: {
    Etapas_Id?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    Titulo?: string;
    Url?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Acoes_max_fields']: {
    __typename: 'comercial_Acoes_max_fields';
    Id?: GraphQLTypes['uuid'];
    Titulo?: string;
    Url?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_Acoes_min_fields']: {
    __typename: 'comercial_Acoes_min_fields';
    Id?: GraphQLTypes['uuid'];
    Titulo?: string;
    Url?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.Acoes" */
  ['comercial_Acoes_mutation_response']: {
    __typename: 'comercial_Acoes_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Acoes']>;
  };
  /** on conflict condition type for table "comercial.Acoes" */
  ['comercial_Acoes_on_conflict']: {
    constraint: GraphQLTypes['comercial_Acoes_constraint'];
    update_columns: Array<GraphQLTypes['comercial_Acoes_update_column']>;
    where?: GraphQLTypes['comercial_Acoes_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Acoes". */
  ['comercial_Acoes_order_by']: {
    Etapas_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Titulo?: GraphQLTypes['order_by'];
    Url?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Acoes */
  ['comercial_Acoes_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Acoes_prepend_input']: {
    Etapas_Id?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "comercial.Acoes" */
  ['comercial_Acoes_select_column']: comercial_Acoes_select_column;
  /** input type for updating data in table "comercial.Acoes" */
  ['comercial_Acoes_set_input']: {
    Etapas_Id?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    Titulo?: string;
    Url?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Acoes" */
  ['comercial_Acoes_update_column']: comercial_Acoes_update_column;
  /** columns and relationships of "comercial.Atributos" */
  ['comercial_Atributos']: {
    __typename: 'comercial_Atributos';
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Produtos: Array<GraphQLTypes['comercial_Produtos_Atributos']>;
    /** An aggregate relationship */
    Produtos_aggregate: GraphQLTypes['comercial_Produtos_Atributos_aggregate'];
    /** An array relationship */
    Servicos: Array<GraphQLTypes['comercial_Servicos_Atributos']>;
    /** An aggregate relationship */
    Servicos_aggregate: GraphQLTypes['comercial_Servicos_Atributos_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Atributos" */
  ['comercial_Atributos_aggregate']: {
    __typename: 'comercial_Atributos_aggregate';
    aggregate?: GraphQLTypes['comercial_Atributos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Atributos']>;
  };
  /** aggregate fields of "comercial.Atributos" */
  ['comercial_Atributos_aggregate_fields']: {
    __typename: 'comercial_Atributos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Atributos_max_fields'];
    min?: GraphQLTypes['comercial_Atributos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Atributos". All fields are combined with a logical 'AND'. */
  ['comercial_Atributos_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Produtos?: GraphQLTypes['comercial_Produtos_Atributos_bool_exp'];
    Servicos?: GraphQLTypes['comercial_Servicos_Atributos_bool_exp'];
    _and?: Array<GraphQLTypes['comercial_Atributos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Atributos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Atributos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Atributos" */
  ['comercial_Atributos_constraint']: comercial_Atributos_constraint;
  /** input type for inserting data into table "comercial.Atributos" */
  ['comercial_Atributos_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Produtos?: GraphQLTypes['comercial_Produtos_Atributos_arr_rel_insert_input'];
    Servicos?: GraphQLTypes['comercial_Servicos_Atributos_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Atributos_max_fields']: {
    __typename: 'comercial_Atributos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_Atributos_min_fields']: {
    __typename: 'comercial_Atributos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.Atributos" */
  ['comercial_Atributos_mutation_response']: {
    __typename: 'comercial_Atributos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Atributos']>;
  };
  /** input type for inserting object relation for remote table "comercial.Atributos" */
  ['comercial_Atributos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Atributos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Atributos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Atributos" */
  ['comercial_Atributos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Atributos_constraint'];
    update_columns: Array<GraphQLTypes['comercial_Atributos_update_column']>;
    where?: GraphQLTypes['comercial_Atributos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Atributos". */
  ['comercial_Atributos_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Produtos_aggregate?: GraphQLTypes['comercial_Produtos_Atributos_aggregate_order_by'];
    Servicos_aggregate?: GraphQLTypes['comercial_Servicos_Atributos_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Atributos */
  ['comercial_Atributos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Atributos" */
  ['comercial_Atributos_select_column']: comercial_Atributos_select_column;
  /** input type for updating data in table "comercial.Atributos" */
  ['comercial_Atributos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Atributos" */
  ['comercial_Atributos_update_column']: comercial_Atributos_update_column;
  /** columns and relationships of "comercial.Coberturas" */
  ['comercial_Coberturas']: {
    __typename: 'comercial_Coberturas';
    Id: GraphQLTypes['uuid'];
    Nome: string;
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Coberturas" */
  ['comercial_Coberturas_aggregate']: {
    __typename: 'comercial_Coberturas_aggregate';
    aggregate?: GraphQLTypes['comercial_Coberturas_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Coberturas']>;
  };
  /** aggregate fields of "comercial.Coberturas" */
  ['comercial_Coberturas_aggregate_fields']: {
    __typename: 'comercial_Coberturas_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Coberturas_max_fields'];
    min?: GraphQLTypes['comercial_Coberturas_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Coberturas". All fields are combined with a logical 'AND'. */
  ['comercial_Coberturas_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Coberturas_bool_exp']>;
    _not?: GraphQLTypes['comercial_Coberturas_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Coberturas_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Coberturas" */
  ['comercial_Coberturas_constraint']: comercial_Coberturas_constraint;
  /** input type for inserting data into table "comercial.Coberturas" */
  ['comercial_Coberturas_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Coberturas_max_fields']: {
    __typename: 'comercial_Coberturas_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_Coberturas_min_fields']: {
    __typename: 'comercial_Coberturas_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.Coberturas" */
  ['comercial_Coberturas_mutation_response']: {
    __typename: 'comercial_Coberturas_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Coberturas']>;
  };
  /** on conflict condition type for table "comercial.Coberturas" */
  ['comercial_Coberturas_on_conflict']: {
    constraint: GraphQLTypes['comercial_Coberturas_constraint'];
    update_columns: Array<GraphQLTypes['comercial_Coberturas_update_column']>;
    where?: GraphQLTypes['comercial_Coberturas_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Coberturas". */
  ['comercial_Coberturas_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Coberturas */
  ['comercial_Coberturas_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Coberturas" */
  ['comercial_Coberturas_select_column']: comercial_Coberturas_select_column;
  /** input type for updating data in table "comercial.Coberturas" */
  ['comercial_Coberturas_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Coberturas" */
  ['comercial_Coberturas_update_column']: comercial_Coberturas_update_column;
  /** columns and relationships of "comercial.Combos" */
  ['comercial_Combos']: {
    __typename: 'comercial_Combos';
    /** An array relationship */
    ComboPai: Array<GraphQLTypes['comercial_Combos_Combos']>;
    /** An aggregate relationship */
    ComboPai_aggregate: GraphQLTypes['comercial_Combos_Combos_aggregate'];
    /** An array relationship */
    Combos: Array<GraphQLTypes['comercial_Combos_Combos']>;
    /** An aggregate relationship */
    Combos_aggregate: GraphQLTypes['comercial_Combos_Combos_aggregate'];
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    OportunidadesDeProdutos: Array<
      GraphQLTypes['comercial_Produtos_Oportunidades']
    >;
    /** An aggregate relationship */
    OportunidadesDeProdutos_aggregate: GraphQLTypes['comercial_Produtos_Oportunidades_aggregate'];
    /** An array relationship */
    OportunidadesDeServicos: Array<
      GraphQLTypes['comercial_Servicos_Oportunidades']
    >;
    /** An aggregate relationship */
    OportunidadesDeServicos_aggregate: GraphQLTypes['comercial_Servicos_Oportunidades_aggregate'];
    /** An array relationship */
    Planos: Array<GraphQLTypes['comercial_Combos_Planos']>;
    /** An aggregate relationship */
    Planos_aggregate: GraphQLTypes['comercial_Combos_Planos_aggregate'];
    /** An array relationship */
    Precos: Array<GraphQLTypes['comercial_Combos_Precos']>;
    /** An aggregate relationship */
    Precos_aggregate: GraphQLTypes['comercial_Combos_Precos_aggregate'];
    /** An array relationship */
    Produtos: Array<GraphQLTypes['comercial_Combos_Produtos']>;
    /** An aggregate relationship */
    Produtos_aggregate: GraphQLTypes['comercial_Combos_Produtos_aggregate'];
    /** An array relationship */
    Propostas: Array<GraphQLTypes['propostas_Propostas_Combos']>;
    /** An aggregate relationship */
    Propostas_aggregate: GraphQLTypes['propostas_Propostas_Combos_aggregate'];
    /** An array relationship */
    Servicos: Array<GraphQLTypes['comercial_Combos_Servicos']>;
    /** An aggregate relationship */
    Servicos_aggregate: GraphQLTypes['comercial_Combos_Servicos_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.Combos_Combos" */
  ['comercial_Combos_Combos']: {
    __typename: 'comercial_Combos_Combos';
    /** An object relationship */
    Combo: GraphQLTypes['comercial_Combos'];
    /** An object relationship */
    ComboPertencente: GraphQLTypes['comercial_Combos'];
    ComboPertencente_Id: GraphQLTypes['uuid'];
    Combo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    Valor: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_aggregate']: {
    __typename: 'comercial_Combos_Combos_aggregate';
    aggregate?: GraphQLTypes['comercial_Combos_Combos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Combos_Combos']>;
  };
  /** aggregate fields of "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_aggregate_fields']: {
    __typename: 'comercial_Combos_Combos_aggregate_fields';
    avg?: GraphQLTypes['comercial_Combos_Combos_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_Combos_Combos_max_fields'];
    min?: GraphQLTypes['comercial_Combos_Combos_min_fields'];
    stddev?: GraphQLTypes['comercial_Combos_Combos_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_Combos_Combos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_Combos_Combos_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_Combos_Combos_sum_fields'];
    var_pop?: GraphQLTypes['comercial_Combos_Combos_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_Combos_Combos_var_samp_fields'];
    variance?: GraphQLTypes['comercial_Combos_Combos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_Combos_Combos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Combos_Combos_max_order_by'];
    min?: GraphQLTypes['comercial_Combos_Combos_min_order_by'];
    stddev?: GraphQLTypes['comercial_Combos_Combos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_Combos_Combos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_Combos_Combos_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_Combos_Combos_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_Combos_Combos_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_Combos_Combos_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_Combos_Combos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Combos_Combos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Combos_Combos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_Combos_Combos_avg_fields']: {
    __typename: 'comercial_Combos_Combos_avg_fields';
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_avg_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.Combos_Combos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Combos_bool_exp']: {
    Combo?: GraphQLTypes['comercial_Combos_bool_exp'];
    ComboPertencente?: GraphQLTypes['comercial_Combos_bool_exp'];
    ComboPertencente_Id?: GraphQLTypes['uuid_comparison_exp'];
    Combo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Valor?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Combos_Combos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Combos_Combos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Combos_Combos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_constraint']: comercial_Combos_Combos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_inc_input']: {
    Valor?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_insert_input']: {
    Combo?: GraphQLTypes['comercial_Combos_obj_rel_insert_input'];
    ComboPertencente?: GraphQLTypes['comercial_Combos_obj_rel_insert_input'];
    ComboPertencente_Id?: GraphQLTypes['uuid'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Combos_Combos_max_fields']: {
    __typename: 'comercial_Combos_Combos_max_fields';
    ComboPertencente_Id?: GraphQLTypes['uuid'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_max_order_by']: {
    ComboPertencente_Id?: GraphQLTypes['order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Combos_Combos_min_fields']: {
    __typename: 'comercial_Combos_Combos_min_fields';
    ComboPertencente_Id?: GraphQLTypes['uuid'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_min_order_by']: {
    ComboPertencente_Id?: GraphQLTypes['order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_mutation_response']: {
    __typename: 'comercial_Combos_Combos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Combos_Combos']>;
  };
  /** on conflict condition type for table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Combos_Combos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Combos_Combos_update_column']
    >;
    where?: GraphQLTypes['comercial_Combos_Combos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Combos_Combos". */
  ['comercial_Combos_Combos_order_by']: {
    Combo?: GraphQLTypes['comercial_Combos_order_by'];
    ComboPertencente?: GraphQLTypes['comercial_Combos_order_by'];
    ComboPertencente_Id?: GraphQLTypes['order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Combos_Combos */
  ['comercial_Combos_Combos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_select_column']: comercial_Combos_Combos_select_column;
  /** input type for updating data in table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_set_input']: {
    ComboPertencente_Id?: GraphQLTypes['uuid'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_Combos_Combos_stddev_fields']: {
    __typename: 'comercial_Combos_Combos_stddev_fields';
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_stddev_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Combos_stddev_pop_fields']: {
    __typename: 'comercial_Combos_Combos_stddev_pop_fields';
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_stddev_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Combos_stddev_samp_fields']: {
    __typename: 'comercial_Combos_Combos_stddev_samp_fields';
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_stddev_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_Combos_Combos_sum_fields']: {
    __typename: 'comercial_Combos_Combos_sum_fields';
    Valor?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_sum_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_update_column']: comercial_Combos_Combos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Combos_Combos_var_pop_fields']: {
    __typename: 'comercial_Combos_Combos_var_pop_fields';
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_var_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_Combos_Combos_var_samp_fields']: {
    __typename: 'comercial_Combos_Combos_var_samp_fields';
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_var_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_Combos_Combos_variance_fields']: {
    __typename: 'comercial_Combos_Combos_variance_fields';
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.Combos_Combos" */
  ['comercial_Combos_Combos_variance_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "comercial.Combos_Planos" */
  ['comercial_Combos_Planos']: {
    __typename: 'comercial_Combos_Planos';
    /** An object relationship */
    Combo: GraphQLTypes['comercial_Combos'];
    Combo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Plano: GraphQLTypes['comercial_Planos'];
    /** An object relationship */
    PlanoPreco: GraphQLTypes['comercial_Planos_Precos'];
    PlanoPreco_Id: GraphQLTypes['uuid'];
    Plano_Id: GraphQLTypes['uuid'];
    ValorPraticado: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_aggregate']: {
    __typename: 'comercial_Combos_Planos_aggregate';
    aggregate?: GraphQLTypes['comercial_Combos_Planos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Combos_Planos']>;
  };
  /** aggregate fields of "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_aggregate_fields']: {
    __typename: 'comercial_Combos_Planos_aggregate_fields';
    avg?: GraphQLTypes['comercial_Combos_Planos_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_Combos_Planos_max_fields'];
    min?: GraphQLTypes['comercial_Combos_Planos_min_fields'];
    stddev?: GraphQLTypes['comercial_Combos_Planos_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_Combos_Planos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_Combos_Planos_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_Combos_Planos_sum_fields'];
    var_pop?: GraphQLTypes['comercial_Combos_Planos_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_Combos_Planos_var_samp_fields'];
    variance?: GraphQLTypes['comercial_Combos_Planos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_Combos_Planos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Combos_Planos_max_order_by'];
    min?: GraphQLTypes['comercial_Combos_Planos_min_order_by'];
    stddev?: GraphQLTypes['comercial_Combos_Planos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_Combos_Planos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_Combos_Planos_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_Combos_Planos_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_Combos_Planos_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_Combos_Planos_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_Combos_Planos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Combos_Planos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Combos_Planos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_Combos_Planos_avg_fields']: {
    __typename: 'comercial_Combos_Planos_avg_fields';
    ValorPraticado?: number;
  };
  /** order by avg() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_avg_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.Combos_Planos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Planos_bool_exp']: {
    Combo?: GraphQLTypes['comercial_Combos_bool_exp'];
    Combo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Plano?: GraphQLTypes['comercial_Planos_bool_exp'];
    PlanoPreco?: GraphQLTypes['comercial_Planos_Precos_bool_exp'];
    PlanoPreco_Id?: GraphQLTypes['uuid_comparison_exp'];
    Plano_Id?: GraphQLTypes['uuid_comparison_exp'];
    ValorPraticado?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Combos_Planos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Combos_Planos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Combos_Planos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_constraint']: comercial_Combos_Planos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_inc_input']: {
    ValorPraticado?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_insert_input']: {
    Combo?: GraphQLTypes['comercial_Combos_obj_rel_insert_input'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Plano?: GraphQLTypes['comercial_Planos_obj_rel_insert_input'];
    PlanoPreco?: GraphQLTypes['comercial_Planos_Precos_obj_rel_insert_input'];
    PlanoPreco_Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Combos_Planos_max_fields']: {
    __typename: 'comercial_Combos_Planos_max_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    PlanoPreco_Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_max_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    PlanoPreco_Id?: GraphQLTypes['order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Combos_Planos_min_fields']: {
    __typename: 'comercial_Combos_Planos_min_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    PlanoPreco_Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_min_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    PlanoPreco_Id?: GraphQLTypes['order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_mutation_response']: {
    __typename: 'comercial_Combos_Planos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Combos_Planos']>;
  };
  /** on conflict condition type for table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Combos_Planos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Combos_Planos_update_column']
    >;
    where?: GraphQLTypes['comercial_Combos_Planos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Combos_Planos". */
  ['comercial_Combos_Planos_order_by']: {
    Combo?: GraphQLTypes['comercial_Combos_order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Plano?: GraphQLTypes['comercial_Planos_order_by'];
    PlanoPreco?: GraphQLTypes['comercial_Planos_Precos_order_by'];
    PlanoPreco_Id?: GraphQLTypes['order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Combos_Planos */
  ['comercial_Combos_Planos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_select_column']: comercial_Combos_Planos_select_column;
  /** input type for updating data in table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_set_input']: {
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    PlanoPreco_Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_Combos_Planos_stddev_fields']: {
    __typename: 'comercial_Combos_Planos_stddev_fields';
    ValorPraticado?: number;
  };
  /** order by stddev() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_stddev_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Planos_stddev_pop_fields']: {
    __typename: 'comercial_Combos_Planos_stddev_pop_fields';
    ValorPraticado?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_stddev_pop_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Planos_stddev_samp_fields']: {
    __typename: 'comercial_Combos_Planos_stddev_samp_fields';
    ValorPraticado?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_stddev_samp_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_Combos_Planos_sum_fields']: {
    __typename: 'comercial_Combos_Planos_sum_fields';
    ValorPraticado?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_sum_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_update_column']: comercial_Combos_Planos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Combos_Planos_var_pop_fields']: {
    __typename: 'comercial_Combos_Planos_var_pop_fields';
    ValorPraticado?: number;
  };
  /** order by var_pop() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_var_pop_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_Combos_Planos_var_samp_fields']: {
    __typename: 'comercial_Combos_Planos_var_samp_fields';
    ValorPraticado?: number;
  };
  /** order by var_samp() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_var_samp_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_Combos_Planos_variance_fields']: {
    __typename: 'comercial_Combos_Planos_variance_fields';
    ValorPraticado?: number;
  };
  /** order by variance() on columns of table "comercial.Combos_Planos" */
  ['comercial_Combos_Planos_variance_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "comercial.Combos_Precos" */
  ['comercial_Combos_Precos']: {
    __typename: 'comercial_Combos_Precos';
    /** An object relationship */
    Combo: GraphQLTypes['comercial_Combos'];
    Combo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An array relationship */
    PropostasCombos: Array<GraphQLTypes['propostas_Propostas_Combos']>;
    /** An aggregate relationship */
    PropostasCombos_aggregate: GraphQLTypes['propostas_Propostas_Combos_aggregate'];
    ValorBase: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_aggregate']: {
    __typename: 'comercial_Combos_Precos_aggregate';
    aggregate?: GraphQLTypes['comercial_Combos_Precos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Combos_Precos']>;
  };
  /** aggregate fields of "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_aggregate_fields']: {
    __typename: 'comercial_Combos_Precos_aggregate_fields';
    avg?: GraphQLTypes['comercial_Combos_Precos_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_Combos_Precos_max_fields'];
    min?: GraphQLTypes['comercial_Combos_Precos_min_fields'];
    stddev?: GraphQLTypes['comercial_Combos_Precos_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_Combos_Precos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_Combos_Precos_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_Combos_Precos_sum_fields'];
    var_pop?: GraphQLTypes['comercial_Combos_Precos_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_Combos_Precos_var_samp_fields'];
    variance?: GraphQLTypes['comercial_Combos_Precos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_Combos_Precos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Combos_Precos_max_order_by'];
    min?: GraphQLTypes['comercial_Combos_Precos_min_order_by'];
    stddev?: GraphQLTypes['comercial_Combos_Precos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_Combos_Precos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_Combos_Precos_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_Combos_Precos_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_Combos_Precos_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_Combos_Precos_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_Combos_Precos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Combos_Precos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Combos_Precos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_Combos_Precos_avg_fields']: {
    __typename: 'comercial_Combos_Precos_avg_fields';
    ValorBase?: number;
  };
  /** order by avg() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_avg_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.Combos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Precos_bool_exp']: {
    Combo?: GraphQLTypes['comercial_Combos_bool_exp'];
    Combo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    PropostasCombos?: GraphQLTypes['propostas_Propostas_Combos_bool_exp'];
    ValorBase?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Combos_Precos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Combos_Precos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Combos_Precos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_constraint']: comercial_Combos_Precos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_inc_input']: {
    ValorBase?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_insert_input']: {
    Combo?: GraphQLTypes['comercial_Combos_obj_rel_insert_input'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    PropostasCombos?: GraphQLTypes['propostas_Propostas_Combos_arr_rel_insert_input'];
    ValorBase?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Combos_Precos_max_fields']: {
    __typename: 'comercial_Combos_Precos_max_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    ValorBase?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_max_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    ValorBase?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Combos_Precos_min_fields']: {
    __typename: 'comercial_Combos_Precos_min_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    ValorBase?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_min_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    ValorBase?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_mutation_response']: {
    __typename: 'comercial_Combos_Precos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Combos_Precos']>;
  };
  /** input type for inserting object relation for remote table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Combos_Precos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Combos_Precos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Combos_Precos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Combos_Precos_update_column']
    >;
    where?: GraphQLTypes['comercial_Combos_Precos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Combos_Precos". */
  ['comercial_Combos_Precos_order_by']: {
    Combo?: GraphQLTypes['comercial_Combos_order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    PropostasCombos_aggregate?: GraphQLTypes['propostas_Propostas_Combos_aggregate_order_by'];
    ValorBase?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Combos_Precos */
  ['comercial_Combos_Precos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_select_column']: comercial_Combos_Precos_select_column;
  /** input type for updating data in table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_set_input']: {
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    ValorBase?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_Combos_Precos_stddev_fields']: {
    __typename: 'comercial_Combos_Precos_stddev_fields';
    ValorBase?: number;
  };
  /** order by stddev() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_stddev_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Precos_stddev_pop_fields']: {
    __typename: 'comercial_Combos_Precos_stddev_pop_fields';
    ValorBase?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_stddev_pop_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Precos_stddev_samp_fields']: {
    __typename: 'comercial_Combos_Precos_stddev_samp_fields';
    ValorBase?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_stddev_samp_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_Combos_Precos_sum_fields']: {
    __typename: 'comercial_Combos_Precos_sum_fields';
    ValorBase?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_sum_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_update_column']: comercial_Combos_Precos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Combos_Precos_var_pop_fields']: {
    __typename: 'comercial_Combos_Precos_var_pop_fields';
    ValorBase?: number;
  };
  /** order by var_pop() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_var_pop_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_Combos_Precos_var_samp_fields']: {
    __typename: 'comercial_Combos_Precos_var_samp_fields';
    ValorBase?: number;
  };
  /** order by var_samp() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_var_samp_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_Combos_Precos_variance_fields']: {
    __typename: 'comercial_Combos_Precos_variance_fields';
    ValorBase?: number;
  };
  /** order by variance() on columns of table "comercial.Combos_Precos" */
  ['comercial_Combos_Precos_variance_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos']: {
    __typename: 'comercial_Combos_Produtos';
    /** An object relationship */
    Combo: GraphQLTypes['comercial_Combos'];
    Combo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Produto: GraphQLTypes['comercial_Produtos'];
    /** An object relationship */
    ProdutoPreco: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    ProdutoPreco_Id: GraphQLTypes['uuid'];
    Produto_Id: GraphQLTypes['uuid'];
    ValorPraticado: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_aggregate']: {
    __typename: 'comercial_Combos_Produtos_aggregate';
    aggregate?: GraphQLTypes['comercial_Combos_Produtos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Combos_Produtos']>;
  };
  /** aggregate fields of "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_aggregate_fields']: {
    __typename: 'comercial_Combos_Produtos_aggregate_fields';
    avg?: GraphQLTypes['comercial_Combos_Produtos_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_Combos_Produtos_max_fields'];
    min?: GraphQLTypes['comercial_Combos_Produtos_min_fields'];
    stddev?: GraphQLTypes['comercial_Combos_Produtos_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_Combos_Produtos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_Combos_Produtos_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_Combos_Produtos_sum_fields'];
    var_pop?: GraphQLTypes['comercial_Combos_Produtos_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_Combos_Produtos_var_samp_fields'];
    variance?: GraphQLTypes['comercial_Combos_Produtos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_Combos_Produtos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Combos_Produtos_max_order_by'];
    min?: GraphQLTypes['comercial_Combos_Produtos_min_order_by'];
    stddev?: GraphQLTypes['comercial_Combos_Produtos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_Combos_Produtos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_Combos_Produtos_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_Combos_Produtos_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_Combos_Produtos_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_Combos_Produtos_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_Combos_Produtos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Combos_Produtos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Combos_Produtos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_Combos_Produtos_avg_fields']: {
    __typename: 'comercial_Combos_Produtos_avg_fields';
    ValorPraticado?: number;
  };
  /** order by avg() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_avg_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.Combos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Produtos_bool_exp']: {
    Combo?: GraphQLTypes['comercial_Combos_bool_exp'];
    Combo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Produto?: GraphQLTypes['comercial_Produtos_bool_exp'];
    ProdutoPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp'];
    ProdutoPreco_Id?: GraphQLTypes['uuid_comparison_exp'];
    Produto_Id?: GraphQLTypes['uuid_comparison_exp'];
    ValorPraticado?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Combos_Produtos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Combos_Produtos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Combos_Produtos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_constraint']: comercial_Combos_Produtos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_inc_input']: {
    ValorPraticado?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_insert_input']: {
    Combo?: GraphQLTypes['comercial_Combos_obj_rel_insert_input'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Produto?: GraphQLTypes['comercial_Produtos_obj_rel_insert_input'];
    ProdutoPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_obj_rel_insert_input'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Combos_Produtos_max_fields']: {
    __typename: 'comercial_Combos_Produtos_max_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_max_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    ProdutoPreco_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Combos_Produtos_min_fields']: {
    __typename: 'comercial_Combos_Produtos_min_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_min_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    ProdutoPreco_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_mutation_response']: {
    __typename: 'comercial_Combos_Produtos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Combos_Produtos']>;
  };
  /** on conflict condition type for table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Combos_Produtos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Combos_Produtos_update_column']
    >;
    where?: GraphQLTypes['comercial_Combos_Produtos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Combos_Produtos". */
  ['comercial_Combos_Produtos_order_by']: {
    Combo?: GraphQLTypes['comercial_Combos_order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Produto?: GraphQLTypes['comercial_Produtos_order_by'];
    ProdutoPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_order_by'];
    ProdutoPreco_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Combos_Produtos */
  ['comercial_Combos_Produtos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_select_column']: comercial_Combos_Produtos_select_column;
  /** input type for updating data in table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_set_input']: {
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_Combos_Produtos_stddev_fields']: {
    __typename: 'comercial_Combos_Produtos_stddev_fields';
    ValorPraticado?: number;
  };
  /** order by stddev() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_stddev_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Produtos_stddev_pop_fields']: {
    __typename: 'comercial_Combos_Produtos_stddev_pop_fields';
    ValorPraticado?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_stddev_pop_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Produtos_stddev_samp_fields']: {
    __typename: 'comercial_Combos_Produtos_stddev_samp_fields';
    ValorPraticado?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_stddev_samp_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_Combos_Produtos_sum_fields']: {
    __typename: 'comercial_Combos_Produtos_sum_fields';
    ValorPraticado?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_sum_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_update_column']: comercial_Combos_Produtos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Combos_Produtos_var_pop_fields']: {
    __typename: 'comercial_Combos_Produtos_var_pop_fields';
    ValorPraticado?: number;
  };
  /** order by var_pop() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_var_pop_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_Combos_Produtos_var_samp_fields']: {
    __typename: 'comercial_Combos_Produtos_var_samp_fields';
    ValorPraticado?: number;
  };
  /** order by var_samp() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_var_samp_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_Combos_Produtos_variance_fields']: {
    __typename: 'comercial_Combos_Produtos_variance_fields';
    ValorPraticado?: number;
  };
  /** order by variance() on columns of table "comercial.Combos_Produtos" */
  ['comercial_Combos_Produtos_variance_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos']: {
    __typename: 'comercial_Combos_Servicos';
    /** An object relationship */
    Combo: GraphQLTypes['comercial_Combos'];
    Combo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Servico: GraphQLTypes['comercial_Servicos'];
    ServicoPreco_Id: GraphQLTypes['uuid'];
    Servico_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    ServicosPreco: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    ValorPraticado: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_aggregate']: {
    __typename: 'comercial_Combos_Servicos_aggregate';
    aggregate?: GraphQLTypes['comercial_Combos_Servicos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Combos_Servicos']>;
  };
  /** aggregate fields of "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_aggregate_fields']: {
    __typename: 'comercial_Combos_Servicos_aggregate_fields';
    avg?: GraphQLTypes['comercial_Combos_Servicos_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_Combos_Servicos_max_fields'];
    min?: GraphQLTypes['comercial_Combos_Servicos_min_fields'];
    stddev?: GraphQLTypes['comercial_Combos_Servicos_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_Combos_Servicos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_Combos_Servicos_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_Combos_Servicos_sum_fields'];
    var_pop?: GraphQLTypes['comercial_Combos_Servicos_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_Combos_Servicos_var_samp_fields'];
    variance?: GraphQLTypes['comercial_Combos_Servicos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_Combos_Servicos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Combos_Servicos_max_order_by'];
    min?: GraphQLTypes['comercial_Combos_Servicos_min_order_by'];
    stddev?: GraphQLTypes['comercial_Combos_Servicos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_Combos_Servicos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_Combos_Servicos_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_Combos_Servicos_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_Combos_Servicos_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_Combos_Servicos_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_Combos_Servicos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Combos_Servicos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Combos_Servicos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_Combos_Servicos_avg_fields']: {
    __typename: 'comercial_Combos_Servicos_avg_fields';
    ValorPraticado?: number;
  };
  /** order by avg() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_avg_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.Combos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_Servicos_bool_exp']: {
    Combo?: GraphQLTypes['comercial_Combos_bool_exp'];
    Combo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Servico?: GraphQLTypes['comercial_Servicos_bool_exp'];
    ServicoPreco_Id?: GraphQLTypes['uuid_comparison_exp'];
    Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    ServicosPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'];
    ValorPraticado?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Combos_Servicos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Combos_Servicos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Combos_Servicos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_constraint']: comercial_Combos_Servicos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_inc_input']: {
    ValorPraticado?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_insert_input']: {
    Combo?: GraphQLTypes['comercial_Combos_obj_rel_insert_input'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Servico?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    ServicosPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_obj_rel_insert_input'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Combos_Servicos_max_fields']: {
    __typename: 'comercial_Combos_Servicos_max_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_max_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    ServicoPreco_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Combos_Servicos_min_fields']: {
    __typename: 'comercial_Combos_Servicos_min_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_min_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    ServicoPreco_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_mutation_response']: {
    __typename: 'comercial_Combos_Servicos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Combos_Servicos']>;
  };
  /** on conflict condition type for table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Combos_Servicos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Combos_Servicos_update_column']
    >;
    where?: GraphQLTypes['comercial_Combos_Servicos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Combos_Servicos". */
  ['comercial_Combos_Servicos_order_by']: {
    Combo?: GraphQLTypes['comercial_Combos_order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Servico?: GraphQLTypes['comercial_Servicos_order_by'];
    ServicoPreco_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    ServicosPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Combos_Servicos */
  ['comercial_Combos_Servicos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_select_column']: comercial_Combos_Servicos_select_column;
  /** input type for updating data in table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_set_input']: {
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_Combos_Servicos_stddev_fields']: {
    __typename: 'comercial_Combos_Servicos_stddev_fields';
    ValorPraticado?: number;
  };
  /** order by stddev() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_stddev_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Combos_Servicos_stddev_pop_fields']: {
    __typename: 'comercial_Combos_Servicos_stddev_pop_fields';
    ValorPraticado?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_stddev_pop_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Combos_Servicos_stddev_samp_fields']: {
    __typename: 'comercial_Combos_Servicos_stddev_samp_fields';
    ValorPraticado?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_stddev_samp_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_Combos_Servicos_sum_fields']: {
    __typename: 'comercial_Combos_Servicos_sum_fields';
    ValorPraticado?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_sum_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_update_column']: comercial_Combos_Servicos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Combos_Servicos_var_pop_fields']: {
    __typename: 'comercial_Combos_Servicos_var_pop_fields';
    ValorPraticado?: number;
  };
  /** order by var_pop() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_var_pop_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_Combos_Servicos_var_samp_fields']: {
    __typename: 'comercial_Combos_Servicos_var_samp_fields';
    ValorPraticado?: number;
  };
  /** order by var_samp() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_var_samp_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_Combos_Servicos_variance_fields']: {
    __typename: 'comercial_Combos_Servicos_variance_fields';
    ValorPraticado?: number;
  };
  /** order by variance() on columns of table "comercial.Combos_Servicos" */
  ['comercial_Combos_Servicos_variance_order_by']: {
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregated selection of "comercial.Combos" */
  ['comercial_Combos_aggregate']: {
    __typename: 'comercial_Combos_aggregate';
    aggregate?: GraphQLTypes['comercial_Combos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Combos']>;
  };
  /** aggregate fields of "comercial.Combos" */
  ['comercial_Combos_aggregate_fields']: {
    __typename: 'comercial_Combos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Combos_max_fields'];
    min?: GraphQLTypes['comercial_Combos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Combos". All fields are combined with a logical 'AND'. */
  ['comercial_Combos_bool_exp']: {
    ComboPai?: GraphQLTypes['comercial_Combos_Combos_bool_exp'];
    Combos?: GraphQLTypes['comercial_Combos_Combos_bool_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    OportunidadesDeProdutos?: GraphQLTypes['comercial_Produtos_Oportunidades_bool_exp'];
    OportunidadesDeServicos?: GraphQLTypes['comercial_Servicos_Oportunidades_bool_exp'];
    Planos?: GraphQLTypes['comercial_Combos_Planos_bool_exp'];
    Precos?: GraphQLTypes['comercial_Combos_Precos_bool_exp'];
    Produtos?: GraphQLTypes['comercial_Combos_Produtos_bool_exp'];
    Propostas?: GraphQLTypes['propostas_Propostas_Combos_bool_exp'];
    Servicos?: GraphQLTypes['comercial_Combos_Servicos_bool_exp'];
    _and?: Array<GraphQLTypes['comercial_Combos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Combos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Combos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Combos" */
  ['comercial_Combos_constraint']: comercial_Combos_constraint;
  /** input type for inserting data into table "comercial.Combos" */
  ['comercial_Combos_insert_input']: {
    ComboPai?: GraphQLTypes['comercial_Combos_Combos_arr_rel_insert_input'];
    Combos?: GraphQLTypes['comercial_Combos_Combos_arr_rel_insert_input'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    OportunidadesDeProdutos?: GraphQLTypes['comercial_Produtos_Oportunidades_arr_rel_insert_input'];
    OportunidadesDeServicos?: GraphQLTypes['comercial_Servicos_Oportunidades_arr_rel_insert_input'];
    Planos?: GraphQLTypes['comercial_Combos_Planos_arr_rel_insert_input'];
    Precos?: GraphQLTypes['comercial_Combos_Precos_arr_rel_insert_input'];
    Produtos?: GraphQLTypes['comercial_Combos_Produtos_arr_rel_insert_input'];
    Propostas?: GraphQLTypes['propostas_Propostas_Combos_arr_rel_insert_input'];
    Servicos?: GraphQLTypes['comercial_Combos_Servicos_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Combos_max_fields']: {
    __typename: 'comercial_Combos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_Combos_min_fields']: {
    __typename: 'comercial_Combos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.Combos" */
  ['comercial_Combos_mutation_response']: {
    __typename: 'comercial_Combos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Combos']>;
  };
  /** input type for inserting object relation for remote table "comercial.Combos" */
  ['comercial_Combos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Combos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Combos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Combos" */
  ['comercial_Combos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Combos_constraint'];
    update_columns: Array<GraphQLTypes['comercial_Combos_update_column']>;
    where?: GraphQLTypes['comercial_Combos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Combos". */
  ['comercial_Combos_order_by']: {
    ComboPai_aggregate?: GraphQLTypes['comercial_Combos_Combos_aggregate_order_by'];
    Combos_aggregate?: GraphQLTypes['comercial_Combos_Combos_aggregate_order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    OportunidadesDeProdutos_aggregate?: GraphQLTypes['comercial_Produtos_Oportunidades_aggregate_order_by'];
    OportunidadesDeServicos_aggregate?: GraphQLTypes['comercial_Servicos_Oportunidades_aggregate_order_by'];
    Planos_aggregate?: GraphQLTypes['comercial_Combos_Planos_aggregate_order_by'];
    Precos_aggregate?: GraphQLTypes['comercial_Combos_Precos_aggregate_order_by'];
    Produtos_aggregate?: GraphQLTypes['comercial_Combos_Produtos_aggregate_order_by'];
    Propostas_aggregate?: GraphQLTypes['propostas_Propostas_Combos_aggregate_order_by'];
    Servicos_aggregate?: GraphQLTypes['comercial_Combos_Servicos_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Combos */
  ['comercial_Combos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Combos" */
  ['comercial_Combos_select_column']: comercial_Combos_select_column;
  /** input type for updating data in table "comercial.Combos" */
  ['comercial_Combos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Combos" */
  ['comercial_Combos_update_column']: comercial_Combos_update_column;
  /** columns and relationships of "comercial.Condicionais" */
  ['comercial_Condicionais']: {
    __typename: 'comercial_Condicionais';
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Planos: Array<GraphQLTypes['comercial_Planos_Condicionais']>;
    /** An aggregate relationship */
    Planos_aggregate: GraphQLTypes['comercial_Planos_Condicionais_aggregate'];
    /** An object relationship */
    Situacao: GraphQLTypes['comercial_CondicionaisSituacoes'];
    Situacao_Id: GraphQLTypes['comercial_CondicionaisSituacoes_enum'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes']: {
    __typename: 'comercial_CondicionaisSituacoes';
    Comentario: string;
    /** An array relationship */
    Condicionais: Array<GraphQLTypes['comercial_Condicionais']>;
    /** An aggregate relationship */
    Condicionais_aggregate: GraphQLTypes['comercial_Condicionais_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_aggregate']: {
    __typename: 'comercial_CondicionaisSituacoes_aggregate';
    aggregate?: GraphQLTypes['comercial_CondicionaisSituacoes_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_CondicionaisSituacoes']>;
  };
  /** aggregate fields of "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_aggregate_fields']: {
    __typename: 'comercial_CondicionaisSituacoes_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_CondicionaisSituacoes_max_fields'];
    min?: GraphQLTypes['comercial_CondicionaisSituacoes_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.CondicionaisSituacoes". All fields are combined with a logical 'AND'. */
  ['comercial_CondicionaisSituacoes_bool_exp']: {
    Comentario?: GraphQLTypes['String_comparison_exp'];
    Condicionais?: GraphQLTypes['comercial_Condicionais_bool_exp'];
    Valor?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_CondicionaisSituacoes_bool_exp']>;
    _not?: GraphQLTypes['comercial_CondicionaisSituacoes_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_CondicionaisSituacoes_bool_exp']>;
  };
  /** unique or primary key constraints on table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_constraint']: comercial_CondicionaisSituacoes_constraint;
  ['comercial_CondicionaisSituacoes_enum']: comercial_CondicionaisSituacoes_enum;
  /** Boolean expression to compare columns of type "comercial_CondicionaisSituacoes_enum". All fields are combined with logical 'AND'. */
  ['comercial_CondicionaisSituacoes_enum_comparison_exp']: {
    _eq?: GraphQLTypes['comercial_CondicionaisSituacoes_enum'];
    _in?: Array<GraphQLTypes['comercial_CondicionaisSituacoes_enum']>;
    _is_null?: boolean;
    _neq?: GraphQLTypes['comercial_CondicionaisSituacoes_enum'];
    _nin?: Array<GraphQLTypes['comercial_CondicionaisSituacoes_enum']>;
  };
  /** input type for inserting data into table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_insert_input']: {
    Comentario?: string;
    Condicionais?: GraphQLTypes['comercial_Condicionais_arr_rel_insert_input'];
    Valor?: string;
  };
  /** aggregate max on columns */
  ['comercial_CondicionaisSituacoes_max_fields']: {
    __typename: 'comercial_CondicionaisSituacoes_max_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['comercial_CondicionaisSituacoes_min_fields']: {
    __typename: 'comercial_CondicionaisSituacoes_min_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_mutation_response']: {
    __typename: 'comercial_CondicionaisSituacoes_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_CondicionaisSituacoes']>;
  };
  /** input type for inserting object relation for remote table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_CondicionaisSituacoes_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_CondicionaisSituacoes_on_conflict'];
  };
  /** on conflict condition type for table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_on_conflict']: {
    constraint: GraphQLTypes['comercial_CondicionaisSituacoes_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_CondicionaisSituacoes_update_column']
    >;
    where?: GraphQLTypes['comercial_CondicionaisSituacoes_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.CondicionaisSituacoes". */
  ['comercial_CondicionaisSituacoes_order_by']: {
    Comentario?: GraphQLTypes['order_by'];
    Condicionais_aggregate?: GraphQLTypes['comercial_Condicionais_aggregate_order_by'];
    Valor?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_CondicionaisSituacoes */
  ['comercial_CondicionaisSituacoes_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_select_column']: comercial_CondicionaisSituacoes_select_column;
  /** input type for updating data in table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_set_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** update columns of table "comercial.CondicionaisSituacoes" */
  ['comercial_CondicionaisSituacoes_update_column']: comercial_CondicionaisSituacoes_update_column;
  /** aggregated selection of "comercial.Condicionais" */
  ['comercial_Condicionais_aggregate']: {
    __typename: 'comercial_Condicionais_aggregate';
    aggregate?: GraphQLTypes['comercial_Condicionais_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Condicionais']>;
  };
  /** aggregate fields of "comercial.Condicionais" */
  ['comercial_Condicionais_aggregate_fields']: {
    __typename: 'comercial_Condicionais_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Condicionais_max_fields'];
    min?: GraphQLTypes['comercial_Condicionais_min_fields'];
  };
  /** order by aggregate values of table "comercial.Condicionais" */
  ['comercial_Condicionais_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Condicionais_max_order_by'];
    min?: GraphQLTypes['comercial_Condicionais_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Condicionais" */
  ['comercial_Condicionais_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Condicionais_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Condicionais_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.Condicionais". All fields are combined with a logical 'AND'. */
  ['comercial_Condicionais_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Planos?: GraphQLTypes['comercial_Planos_Condicionais_bool_exp'];
    Situacao?: GraphQLTypes['comercial_CondicionaisSituacoes_bool_exp'];
    Situacao_Id?: GraphQLTypes['comercial_CondicionaisSituacoes_enum_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Condicionais_bool_exp']>;
    _not?: GraphQLTypes['comercial_Condicionais_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Condicionais_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Condicionais" */
  ['comercial_Condicionais_constraint']: comercial_Condicionais_constraint;
  /** input type for inserting data into table "comercial.Condicionais" */
  ['comercial_Condicionais_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Planos?: GraphQLTypes['comercial_Planos_Condicionais_arr_rel_insert_input'];
    Situacao?: GraphQLTypes['comercial_CondicionaisSituacoes_obj_rel_insert_input'];
    Situacao_Id?: GraphQLTypes['comercial_CondicionaisSituacoes_enum'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Condicionais_max_fields']: {
    __typename: 'comercial_Condicionais_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Condicionais_min_fields']: {
    __typename: 'comercial_Condicionais_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Condicionais" */
  ['comercial_Condicionais_mutation_response']: {
    __typename: 'comercial_Condicionais_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Condicionais']>;
  };
  /** input type for inserting object relation for remote table "comercial.Condicionais" */
  ['comercial_Condicionais_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Condicionais_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Condicionais_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Condicionais" */
  ['comercial_Condicionais_on_conflict']: {
    constraint: GraphQLTypes['comercial_Condicionais_constraint'];
    update_columns: Array<GraphQLTypes['comercial_Condicionais_update_column']>;
    where?: GraphQLTypes['comercial_Condicionais_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Condicionais". */
  ['comercial_Condicionais_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Planos_aggregate?: GraphQLTypes['comercial_Planos_Condicionais_aggregate_order_by'];
    Situacao?: GraphQLTypes['comercial_CondicionaisSituacoes_order_by'];
    Situacao_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Condicionais */
  ['comercial_Condicionais_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_select_column']: comercial_Condicionais_select_column;
  /** input type for updating data in table "comercial.Condicionais" */
  ['comercial_Condicionais_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Situacao_Id?: GraphQLTypes['comercial_CondicionaisSituacoes_enum'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Condicionais" */
  ['comercial_Condicionais_update_column']: comercial_Condicionais_update_column;
  /** columns and relationships of "comercial.ContratosBase" */
  ['comercial_ContratosBase']: {
    __typename: 'comercial_ContratosBase';
    CodigoReferencia: number;
    Id: GraphQLTypes['uuid'];
    Nome: string;
    Parceiro_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    PrestadorDeServico: GraphQLTypes['comercial_PrestadoresDeServicos'];
    /** An array relationship */
    Versoes: Array<GraphQLTypes['comercial_ContratosBase_Versoes']>;
    /** An aggregate relationship */
    Versoes_aggregate: GraphQLTypes['comercial_ContratosBase_Versoes_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes']: {
    __typename: 'comercial_ContratosBase_Versoes';
    /** An object relationship */
    ContratoBase: GraphQLTypes['comercial_ContratosBase'];
    ContratoBase_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    Versao: string;
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_aggregate']: {
    __typename: 'comercial_ContratosBase_Versoes_aggregate';
    aggregate?: GraphQLTypes['comercial_ContratosBase_Versoes_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_ContratosBase_Versoes']>;
  };
  /** aggregate fields of "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_aggregate_fields']: {
    __typename: 'comercial_ContratosBase_Versoes_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_ContratosBase_Versoes_max_fields'];
    min?: GraphQLTypes['comercial_ContratosBase_Versoes_min_fields'];
  };
  /** order by aggregate values of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_ContratosBase_Versoes_max_order_by'];
    min?: GraphQLTypes['comercial_ContratosBase_Versoes_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_ContratosBase_Versoes_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_ContratosBase_Versoes_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.ContratosBase_Versoes". All fields are combined with a logical 'AND'. */
  ['comercial_ContratosBase_Versoes_bool_exp']: {
    ContratoBase?: GraphQLTypes['comercial_ContratosBase_bool_exp'];
    ContratoBase_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Versao?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_ContratosBase_Versoes_bool_exp']>;
    _not?: GraphQLTypes['comercial_ContratosBase_Versoes_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_ContratosBase_Versoes_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_constraint']: comercial_ContratosBase_Versoes_constraint;
  /** input type for inserting data into table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_insert_input']: {
    ContratoBase?: GraphQLTypes['comercial_ContratosBase_obj_rel_insert_input'];
    ContratoBase_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Versao?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_ContratosBase_Versoes_max_fields']: {
    __typename: 'comercial_ContratosBase_Versoes_max_fields';
    ContratoBase_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Versao?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_max_order_by']: {
    ContratoBase_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Versao?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_ContratosBase_Versoes_min_fields']: {
    __typename: 'comercial_ContratosBase_Versoes_min_fields';
    ContratoBase_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Versao?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_min_order_by']: {
    ContratoBase_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Versao?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_mutation_response']: {
    __typename: 'comercial_ContratosBase_Versoes_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_ContratosBase_Versoes']>;
  };
  /** on conflict condition type for table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_on_conflict']: {
    constraint: GraphQLTypes['comercial_ContratosBase_Versoes_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_ContratosBase_Versoes_update_column']
    >;
    where?: GraphQLTypes['comercial_ContratosBase_Versoes_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.ContratosBase_Versoes". */
  ['comercial_ContratosBase_Versoes_order_by']: {
    ContratoBase?: GraphQLTypes['comercial_ContratosBase_order_by'];
    ContratoBase_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Versao?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_ContratosBase_Versoes */
  ['comercial_ContratosBase_Versoes_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_select_column']: comercial_ContratosBase_Versoes_select_column;
  /** input type for updating data in table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_set_input']: {
    ContratoBase_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Versao?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.ContratosBase_Versoes" */
  ['comercial_ContratosBase_Versoes_update_column']: comercial_ContratosBase_Versoes_update_column;
  /** aggregated selection of "comercial.ContratosBase" */
  ['comercial_ContratosBase_aggregate']: {
    __typename: 'comercial_ContratosBase_aggregate';
    aggregate?: GraphQLTypes['comercial_ContratosBase_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_ContratosBase']>;
  };
  /** aggregate fields of "comercial.ContratosBase" */
  ['comercial_ContratosBase_aggregate_fields']: {
    __typename: 'comercial_ContratosBase_aggregate_fields';
    avg?: GraphQLTypes['comercial_ContratosBase_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_ContratosBase_max_fields'];
    min?: GraphQLTypes['comercial_ContratosBase_min_fields'];
    stddev?: GraphQLTypes['comercial_ContratosBase_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_ContratosBase_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_ContratosBase_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_ContratosBase_sum_fields'];
    var_pop?: GraphQLTypes['comercial_ContratosBase_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_ContratosBase_var_samp_fields'];
    variance?: GraphQLTypes['comercial_ContratosBase_variance_fields'];
  };
  /** order by aggregate values of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_ContratosBase_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_ContratosBase_max_order_by'];
    min?: GraphQLTypes['comercial_ContratosBase_min_order_by'];
    stddev?: GraphQLTypes['comercial_ContratosBase_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_ContratosBase_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_ContratosBase_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_ContratosBase_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_ContratosBase_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_ContratosBase_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_ContratosBase_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.ContratosBase" */
  ['comercial_ContratosBase_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_ContratosBase_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_ContratosBase_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_ContratosBase_avg_fields']: {
    __typename: 'comercial_ContratosBase_avg_fields';
    CodigoReferencia?: number;
  };
  /** order by avg() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_avg_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.ContratosBase". All fields are combined with a logical 'AND'. */
  ['comercial_ContratosBase_bool_exp']: {
    CodigoReferencia?: GraphQLTypes['Int_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Parceiro_Id?: GraphQLTypes['uuid_comparison_exp'];
    PrestadorDeServico?: GraphQLTypes['comercial_PrestadoresDeServicos_bool_exp'];
    Versoes?: GraphQLTypes['comercial_ContratosBase_Versoes_bool_exp'];
    _and?: Array<GraphQLTypes['comercial_ContratosBase_bool_exp']>;
    _not?: GraphQLTypes['comercial_ContratosBase_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_ContratosBase_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.ContratosBase" */
  ['comercial_ContratosBase_constraint']: comercial_ContratosBase_constraint;
  /** input type for incrementing numeric columns in table "comercial.ContratosBase" */
  ['comercial_ContratosBase_inc_input']: {
    CodigoReferencia?: number;
  };
  /** input type for inserting data into table "comercial.ContratosBase" */
  ['comercial_ContratosBase_insert_input']: {
    CodigoReferencia?: number;
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Parceiro_Id?: GraphQLTypes['uuid'];
    PrestadorDeServico?: GraphQLTypes['comercial_PrestadoresDeServicos_obj_rel_insert_input'];
    Versoes?: GraphQLTypes['comercial_ContratosBase_Versoes_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_ContratosBase_max_fields']: {
    __typename: 'comercial_ContratosBase_max_fields';
    CodigoReferencia?: number;
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Parceiro_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_max_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Parceiro_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_ContratosBase_min_fields']: {
    __typename: 'comercial_ContratosBase_min_fields';
    CodigoReferencia?: number;
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Parceiro_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_min_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Parceiro_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.ContratosBase" */
  ['comercial_ContratosBase_mutation_response']: {
    __typename: 'comercial_ContratosBase_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_ContratosBase']>;
  };
  /** input type for inserting object relation for remote table "comercial.ContratosBase" */
  ['comercial_ContratosBase_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_ContratosBase_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_ContratosBase_on_conflict'];
  };
  /** on conflict condition type for table "comercial.ContratosBase" */
  ['comercial_ContratosBase_on_conflict']: {
    constraint: GraphQLTypes['comercial_ContratosBase_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_ContratosBase_update_column']
    >;
    where?: GraphQLTypes['comercial_ContratosBase_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.ContratosBase". */
  ['comercial_ContratosBase_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Parceiro_Id?: GraphQLTypes['order_by'];
    PrestadorDeServico?: GraphQLTypes['comercial_PrestadoresDeServicos_order_by'];
    Versoes_aggregate?: GraphQLTypes['comercial_ContratosBase_Versoes_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_ContratosBase */
  ['comercial_ContratosBase_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_select_column']: comercial_ContratosBase_select_column;
  /** input type for updating data in table "comercial.ContratosBase" */
  ['comercial_ContratosBase_set_input']: {
    CodigoReferencia?: number;
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Parceiro_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_ContratosBase_stddev_fields']: {
    __typename: 'comercial_ContratosBase_stddev_fields';
    CodigoReferencia?: number;
  };
  /** order by stddev() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_stddev_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_ContratosBase_stddev_pop_fields']: {
    __typename: 'comercial_ContratosBase_stddev_pop_fields';
    CodigoReferencia?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_stddev_pop_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_ContratosBase_stddev_samp_fields']: {
    __typename: 'comercial_ContratosBase_stddev_samp_fields';
    CodigoReferencia?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_stddev_samp_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_ContratosBase_sum_fields']: {
    __typename: 'comercial_ContratosBase_sum_fields';
    CodigoReferencia?: number;
  };
  /** order by sum() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_sum_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_update_column']: comercial_ContratosBase_update_column;
  /** aggregate var_pop on columns */
  ['comercial_ContratosBase_var_pop_fields']: {
    __typename: 'comercial_ContratosBase_var_pop_fields';
    CodigoReferencia?: number;
  };
  /** order by var_pop() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_var_pop_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_ContratosBase_var_samp_fields']: {
    __typename: 'comercial_ContratosBase_var_samp_fields';
    CodigoReferencia?: number;
  };
  /** order by var_samp() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_var_samp_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_ContratosBase_variance_fields']: {
    __typename: 'comercial_ContratosBase_variance_fields';
    CodigoReferencia?: number;
  };
  /** order by variance() on columns of table "comercial.ContratosBase" */
  ['comercial_ContratosBase_variance_order_by']: {
    CodigoReferencia?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "comercial.Planos" */
  ['comercial_Planos']: {
    __typename: 'comercial_Planos';
    /** An array relationship */
    Combos: Array<GraphQLTypes['comercial_Combos_Planos']>;
    /** An aggregate relationship */
    Combos_aggregate: GraphQLTypes['comercial_Combos_Planos_aggregate'];
    /** An array relationship */
    Condicionais: Array<GraphQLTypes['comercial_Planos_Condicionais']>;
    /** An aggregate relationship */
    Condicionais_aggregate: GraphQLTypes['comercial_Planos_Condicionais_aggregate'];
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Precos: Array<GraphQLTypes['comercial_Planos_Precos']>;
    /** An aggregate relationship */
    Precos_aggregate: GraphQLTypes['comercial_Planos_Precos_aggregate'];
    /** An array relationship */
    Propostas: Array<GraphQLTypes['propostas_Propostas_Planos']>;
    /** An aggregate relationship */
    Propostas_aggregate: GraphQLTypes['propostas_Propostas_Planos_aggregate'];
    /** An object relationship */
    Servico: GraphQLTypes['comercial_Servicos'];
    Servico_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais']: {
    __typename: 'comercial_Planos_Condicionais';
    /** An object relationship */
    Condicional: GraphQLTypes['comercial_Condicionais'];
    Condicional_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Plano: GraphQLTypes['comercial_Planos'];
    Plano_Id: GraphQLTypes['uuid'];
    Valor: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_aggregate']: {
    __typename: 'comercial_Planos_Condicionais_aggregate';
    aggregate?: GraphQLTypes['comercial_Planos_Condicionais_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Planos_Condicionais']>;
  };
  /** aggregate fields of "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_aggregate_fields']: {
    __typename: 'comercial_Planos_Condicionais_aggregate_fields';
    avg?: GraphQLTypes['comercial_Planos_Condicionais_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_Planos_Condicionais_max_fields'];
    min?: GraphQLTypes['comercial_Planos_Condicionais_min_fields'];
    stddev?: GraphQLTypes['comercial_Planos_Condicionais_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_Planos_Condicionais_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_Planos_Condicionais_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_Planos_Condicionais_sum_fields'];
    var_pop?: GraphQLTypes['comercial_Planos_Condicionais_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_Planos_Condicionais_var_samp_fields'];
    variance?: GraphQLTypes['comercial_Planos_Condicionais_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_Planos_Condicionais_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Planos_Condicionais_max_order_by'];
    min?: GraphQLTypes['comercial_Planos_Condicionais_min_order_by'];
    stddev?: GraphQLTypes['comercial_Planos_Condicionais_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_Planos_Condicionais_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_Planos_Condicionais_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_Planos_Condicionais_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_Planos_Condicionais_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_Planos_Condicionais_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_Planos_Condicionais_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Planos_Condicionais_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Planos_Condicionais_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_Planos_Condicionais_avg_fields']: {
    __typename: 'comercial_Planos_Condicionais_avg_fields';
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_avg_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.Planos_Condicionais". All fields are combined with a logical 'AND'. */
  ['comercial_Planos_Condicionais_bool_exp']: {
    Condicional?: GraphQLTypes['comercial_Condicionais_bool_exp'];
    Condicional_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Plano?: GraphQLTypes['comercial_Planos_bool_exp'];
    Plano_Id?: GraphQLTypes['uuid_comparison_exp'];
    Valor?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Planos_Condicionais_bool_exp']>;
    _not?: GraphQLTypes['comercial_Planos_Condicionais_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Planos_Condicionais_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_constraint']: comercial_Planos_Condicionais_constraint;
  /** input type for incrementing numeric columns in table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_inc_input']: {
    Valor?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_insert_input']: {
    Condicional?: GraphQLTypes['comercial_Condicionais_obj_rel_insert_input'];
    Condicional_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Plano?: GraphQLTypes['comercial_Planos_obj_rel_insert_input'];
    Plano_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Planos_Condicionais_max_fields']: {
    __typename: 'comercial_Planos_Condicionais_max_fields';
    Condicional_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_max_order_by']: {
    Condicional_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Planos_Condicionais_min_fields']: {
    __typename: 'comercial_Planos_Condicionais_min_fields';
    Condicional_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_min_order_by']: {
    Condicional_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_mutation_response']: {
    __typename: 'comercial_Planos_Condicionais_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Planos_Condicionais']>;
  };
  /** on conflict condition type for table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_on_conflict']: {
    constraint: GraphQLTypes['comercial_Planos_Condicionais_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Planos_Condicionais_update_column']
    >;
    where?: GraphQLTypes['comercial_Planos_Condicionais_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Planos_Condicionais". */
  ['comercial_Planos_Condicionais_order_by']: {
    Condicional?: GraphQLTypes['comercial_Condicionais_order_by'];
    Condicional_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Plano?: GraphQLTypes['comercial_Planos_order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Planos_Condicionais */
  ['comercial_Planos_Condicionais_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_select_column']: comercial_Planos_Condicionais_select_column;
  /** input type for updating data in table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_set_input']: {
    Condicional_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_Planos_Condicionais_stddev_fields']: {
    __typename: 'comercial_Planos_Condicionais_stddev_fields';
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_stddev_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Planos_Condicionais_stddev_pop_fields']: {
    __typename: 'comercial_Planos_Condicionais_stddev_pop_fields';
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_stddev_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Planos_Condicionais_stddev_samp_fields']: {
    __typename: 'comercial_Planos_Condicionais_stddev_samp_fields';
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_stddev_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_Planos_Condicionais_sum_fields']: {
    __typename: 'comercial_Planos_Condicionais_sum_fields';
    Valor?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_sum_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_update_column']: comercial_Planos_Condicionais_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Planos_Condicionais_var_pop_fields']: {
    __typename: 'comercial_Planos_Condicionais_var_pop_fields';
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_var_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_Planos_Condicionais_var_samp_fields']: {
    __typename: 'comercial_Planos_Condicionais_var_samp_fields';
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_var_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_Planos_Condicionais_variance_fields']: {
    __typename: 'comercial_Planos_Condicionais_variance_fields';
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.Planos_Condicionais" */
  ['comercial_Planos_Condicionais_variance_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "comercial.Planos_Precos" */
  ['comercial_Planos_Precos']: {
    __typename: 'comercial_Planos_Precos';
    /** An array relationship */
    CombosPlanos: Array<GraphQLTypes['comercial_Combos_Planos']>;
    /** An aggregate relationship */
    CombosPlanos_aggregate: GraphQLTypes['comercial_Combos_Planos_aggregate'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Plano: GraphQLTypes['comercial_Planos'];
    Plano_Id: GraphQLTypes['uuid'];
    /** An array relationship */
    PropostasPlanos: Array<GraphQLTypes['propostas_Propostas_Planos']>;
    /** An aggregate relationship */
    PropostasPlanos_aggregate: GraphQLTypes['propostas_Propostas_Planos_aggregate'];
    /** An object relationship */
    ServicoPreco: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    ServicoPreco_Id: GraphQLTypes['uuid'];
    ValorBase: GraphQLTypes['float8'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_aggregate']: {
    __typename: 'comercial_Planos_Precos_aggregate';
    aggregate?: GraphQLTypes['comercial_Planos_Precos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Planos_Precos']>;
  };
  /** aggregate fields of "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_aggregate_fields']: {
    __typename: 'comercial_Planos_Precos_aggregate_fields';
    avg?: GraphQLTypes['comercial_Planos_Precos_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_Planos_Precos_max_fields'];
    min?: GraphQLTypes['comercial_Planos_Precos_min_fields'];
    stddev?: GraphQLTypes['comercial_Planos_Precos_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_Planos_Precos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_Planos_Precos_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_Planos_Precos_sum_fields'];
    var_pop?: GraphQLTypes['comercial_Planos_Precos_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_Planos_Precos_var_samp_fields'];
    variance?: GraphQLTypes['comercial_Planos_Precos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_Planos_Precos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Planos_Precos_max_order_by'];
    min?: GraphQLTypes['comercial_Planos_Precos_min_order_by'];
    stddev?: GraphQLTypes['comercial_Planos_Precos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_Planos_Precos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_Planos_Precos_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_Planos_Precos_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_Planos_Precos_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_Planos_Precos_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_Planos_Precos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Planos_Precos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Planos_Precos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_Planos_Precos_avg_fields']: {
    __typename: 'comercial_Planos_Precos_avg_fields';
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by avg() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_avg_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.Planos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_Planos_Precos_bool_exp']: {
    CombosPlanos?: GraphQLTypes['comercial_Combos_Planos_bool_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Plano?: GraphQLTypes['comercial_Planos_bool_exp'];
    Plano_Id?: GraphQLTypes['uuid_comparison_exp'];
    PropostasPlanos?: GraphQLTypes['propostas_Propostas_Planos_bool_exp'];
    ServicoPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'];
    ServicoPreco_Id?: GraphQLTypes['uuid_comparison_exp'];
    ValorBase?: GraphQLTypes['float8_comparison_exp'];
    ValorPraticado?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Planos_Precos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Planos_Precos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Planos_Precos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_constraint']: comercial_Planos_Precos_constraint;
  /** input type for incrementing numeric columns in table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_inc_input']: {
    ValorBase?: GraphQLTypes['float8'];
    ValorPraticado?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_insert_input']: {
    CombosPlanos?: GraphQLTypes['comercial_Combos_Planos_arr_rel_insert_input'];
    Id?: GraphQLTypes['uuid'];
    Plano?: GraphQLTypes['comercial_Planos_obj_rel_insert_input'];
    Plano_Id?: GraphQLTypes['uuid'];
    PropostasPlanos?: GraphQLTypes['propostas_Propostas_Planos_arr_rel_insert_input'];
    ServicoPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_obj_rel_insert_input'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    ValorBase?: GraphQLTypes['float8'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Planos_Precos_max_fields']: {
    __typename: 'comercial_Planos_Precos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    ValorBase?: GraphQLTypes['float8'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    ServicoPreco_Id?: GraphQLTypes['order_by'];
    ValorBase?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Planos_Precos_min_fields']: {
    __typename: 'comercial_Planos_Precos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    ValorBase?: GraphQLTypes['float8'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    ServicoPreco_Id?: GraphQLTypes['order_by'];
    ValorBase?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_mutation_response']: {
    __typename: 'comercial_Planos_Precos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Planos_Precos']>;
  };
  /** input type for inserting object relation for remote table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Planos_Precos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Planos_Precos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Planos_Precos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Planos_Precos_update_column']
    >;
    where?: GraphQLTypes['comercial_Planos_Precos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Planos_Precos". */
  ['comercial_Planos_Precos_order_by']: {
    CombosPlanos_aggregate?: GraphQLTypes['comercial_Combos_Planos_aggregate_order_by'];
    Id?: GraphQLTypes['order_by'];
    Plano?: GraphQLTypes['comercial_Planos_order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    PropostasPlanos_aggregate?: GraphQLTypes['propostas_Propostas_Planos_aggregate_order_by'];
    ServicoPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by'];
    ServicoPreco_Id?: GraphQLTypes['order_by'];
    ValorBase?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Planos_Precos */
  ['comercial_Planos_Precos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_select_column']: comercial_Planos_Precos_select_column;
  /** input type for updating data in table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    ServicoPreco_Id?: GraphQLTypes['uuid'];
    ValorBase?: GraphQLTypes['float8'];
    ValorPraticado?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_Planos_Precos_stddev_fields']: {
    __typename: 'comercial_Planos_Precos_stddev_fields';
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by stddev() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_stddev_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Planos_Precos_stddev_pop_fields']: {
    __typename: 'comercial_Planos_Precos_stddev_pop_fields';
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_stddev_pop_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Planos_Precos_stddev_samp_fields']: {
    __typename: 'comercial_Planos_Precos_stddev_samp_fields';
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_stddev_samp_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_Planos_Precos_sum_fields']: {
    __typename: 'comercial_Planos_Precos_sum_fields';
    ValorBase?: GraphQLTypes['float8'];
    ValorPraticado?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_sum_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_update_column']: comercial_Planos_Precos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Planos_Precos_var_pop_fields']: {
    __typename: 'comercial_Planos_Precos_var_pop_fields';
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by var_pop() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_var_pop_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_Planos_Precos_var_samp_fields']: {
    __typename: 'comercial_Planos_Precos_var_samp_fields';
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by var_samp() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_var_samp_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_Planos_Precos_variance_fields']: {
    __typename: 'comercial_Planos_Precos_variance_fields';
    ValorBase?: number;
    ValorPraticado?: number;
  };
  /** order by variance() on columns of table "comercial.Planos_Precos" */
  ['comercial_Planos_Precos_variance_order_by']: {
    ValorBase?: GraphQLTypes['order_by'];
    ValorPraticado?: GraphQLTypes['order_by'];
  };
  /** aggregated selection of "comercial.Planos" */
  ['comercial_Planos_aggregate']: {
    __typename: 'comercial_Planos_aggregate';
    aggregate?: GraphQLTypes['comercial_Planos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Planos']>;
  };
  /** aggregate fields of "comercial.Planos" */
  ['comercial_Planos_aggregate_fields']: {
    __typename: 'comercial_Planos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Planos_max_fields'];
    min?: GraphQLTypes['comercial_Planos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Planos" */
  ['comercial_Planos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Planos_max_order_by'];
    min?: GraphQLTypes['comercial_Planos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Planos" */
  ['comercial_Planos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Planos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Planos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.Planos". All fields are combined with a logical 'AND'. */
  ['comercial_Planos_bool_exp']: {
    Combos?: GraphQLTypes['comercial_Combos_Planos_bool_exp'];
    Condicionais?: GraphQLTypes['comercial_Planos_Condicionais_bool_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Precos?: GraphQLTypes['comercial_Planos_Precos_bool_exp'];
    Propostas?: GraphQLTypes['propostas_Propostas_Planos_bool_exp'];
    Servico?: GraphQLTypes['comercial_Servicos_bool_exp'];
    Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Planos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Planos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Planos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Planos" */
  ['comercial_Planos_constraint']: comercial_Planos_constraint;
  /** input type for inserting data into table "comercial.Planos" */
  ['comercial_Planos_insert_input']: {
    Combos?: GraphQLTypes['comercial_Combos_Planos_arr_rel_insert_input'];
    Condicionais?: GraphQLTypes['comercial_Planos_Condicionais_arr_rel_insert_input'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Precos?: GraphQLTypes['comercial_Planos_Precos_arr_rel_insert_input'];
    Propostas?: GraphQLTypes['propostas_Propostas_Planos_arr_rel_insert_input'];
    Servico?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Planos_max_fields']: {
    __typename: 'comercial_Planos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Planos" */
  ['comercial_Planos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Planos_min_fields']: {
    __typename: 'comercial_Planos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Planos" */
  ['comercial_Planos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Planos" */
  ['comercial_Planos_mutation_response']: {
    __typename: 'comercial_Planos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Planos']>;
  };
  /** input type for inserting object relation for remote table "comercial.Planos" */
  ['comercial_Planos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Planos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Planos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Planos" */
  ['comercial_Planos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Planos_constraint'];
    update_columns: Array<GraphQLTypes['comercial_Planos_update_column']>;
    where?: GraphQLTypes['comercial_Planos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Planos". */
  ['comercial_Planos_order_by']: {
    Combos_aggregate?: GraphQLTypes['comercial_Combos_Planos_aggregate_order_by'];
    Condicionais_aggregate?: GraphQLTypes['comercial_Planos_Condicionais_aggregate_order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Precos_aggregate?: GraphQLTypes['comercial_Planos_Precos_aggregate_order_by'];
    Propostas_aggregate?: GraphQLTypes['propostas_Propostas_Planos_aggregate_order_by'];
    Servico?: GraphQLTypes['comercial_Servicos_order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Planos */
  ['comercial_Planos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Planos" */
  ['comercial_Planos_select_column']: comercial_Planos_select_column;
  /** input type for updating data in table "comercial.Planos" */
  ['comercial_Planos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Planos" */
  ['comercial_Planos_update_column']: comercial_Planos_update_column;
  /** columns and relationships of "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos']: {
    __typename: 'comercial_PrestadoresDeServicos';
    /** An array relationship */
    ContratosBases: Array<GraphQLTypes['comercial_ContratosBase']>;
    /** An aggregate relationship */
    ContratosBases_aggregate: GraphQLTypes['comercial_ContratosBase_aggregate'];
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Produtos: Array<GraphQLTypes['comercial_PrestadoresDeServicos_Produtos']>;
    /** An aggregate relationship */
    Produtos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_aggregate'];
    /** An array relationship */
    Servicos: Array<GraphQLTypes['comercial_PrestadoresDeServicos_Servicos']>;
    /** An aggregate relationship */
    Servicos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos';
    Fornecedor_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An array relationship */
    Itens: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens']
    >;
    /** An aggregate relationship */
    Itens_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate'];
    /** An array relationship */
    Precos: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    >;
    /** An aggregate relationship */
    Precos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate'];
    /** An object relationship */
    PrestadorDeServico: GraphQLTypes['comercial_PrestadoresDeServicos'];
    /** An object relationship */
    Produto: GraphQLTypes['comercial_Produtos'];
    Produto_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Itens';
    Id: GraphQLTypes['uuid'];
    Item_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    PrestadoresDeServicos_Produto: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos'];
    PrestadoresDeServicos_Produtos_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Itens_aggregate';
    aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_fields'];
    nodes: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens']
    >;
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_max_fields'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_min_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_max_order_by'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_arr_rel_insert_input']: {
    data: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_insert_input']
    >;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Produtos_Itens". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Item_Id?: GraphQLTypes['uuid_comparison_exp'];
    PrestadoresDeServicos_Produto?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp'];
    PrestadoresDeServicos_Produtos_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']
    >;
    _not?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp'];
    _or?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp']
    >;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_constraint']: comercial_PrestadoresDeServicos_Produtos_Itens_constraint;
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Item_Id?: GraphQLTypes['uuid'];
    PrestadoresDeServicos_Produto?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_obj_rel_insert_input'];
    PrestadoresDeServicos_Produtos_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_max_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Itens_max_fields';
    Id?: GraphQLTypes['uuid'];
    Item_Id?: GraphQLTypes['uuid'];
    PrestadoresDeServicos_Produtos_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Item_Id?: GraphQLTypes['order_by'];
    PrestadoresDeServicos_Produtos_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_min_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Itens_min_fields';
    Id?: GraphQLTypes['uuid'];
    Item_Id?: GraphQLTypes['uuid'];
    PrestadoresDeServicos_Produtos_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Item_Id?: GraphQLTypes['order_by'];
    PrestadoresDeServicos_Produtos_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens']
    >;
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_on_conflict']: {
    constraint: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_update_column']
    >;
    where?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Produtos_Itens". */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Item_Id?: GraphQLTypes['order_by'];
    PrestadoresDeServicos_Produto?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_order_by'];
    PrestadoresDeServicos_Produtos_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Produtos_Itens */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_select_column']: comercial_PrestadoresDeServicos_Produtos_Itens_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Item_Id?: GraphQLTypes['uuid'];
    PrestadoresDeServicos_Produtos_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
  ['comercial_PrestadoresDeServicos_Produtos_Itens_update_column']: comercial_PrestadoresDeServicos_Produtos_Itens_update_column;
  /** columns and relationships of "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos';
    /** An array relationship */
    CombosProdutos: Array<GraphQLTypes['comercial_Combos_Produtos']>;
    /** An aggregate relationship */
    CombosProdutos_aggregate: GraphQLTypes['comercial_Combos_Produtos_aggregate'];
    Fornecedor_Produto_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    PrestadorDeServico_Produto: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos'];
    /** An array relationship */
    PropostasProdutos: Array<GraphQLTypes['propostas_Propostas_Produtos']>;
    /** An aggregate relationship */
    PropostasProdutos_aggregate: GraphQLTypes['propostas_Propostas_Produtos_aggregate'];
    /** An object relationship */
    TipoDePreco?: GraphQLTypes['vendas_TiposDePrecos'];
    TipoDePreco_Id?: GraphQLTypes['vendas_TiposDePrecos_enum'];
    TipoDeRecorrencia_Id?: string;
    Valor: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_aggregate';
    aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_fields'];
    nodes: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    >;
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_fields';
    avg?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_max_fields'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_min_fields'];
    stddev?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_sum_fields'];
    var_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_fields'];
    variance?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_max_order_by'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_min_order_by'];
    stddev?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_arr_rel_insert_input']: {
    data: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_insert_input']
    >;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_avg_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_avg_fields';
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_avg_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Produtos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']: {
    CombosProdutos?: GraphQLTypes['comercial_Combos_Produtos_bool_exp'];
    Fornecedor_Produto_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    PrestadorDeServico_Produto?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp'];
    PropostasProdutos?: GraphQLTypes['propostas_Propostas_Produtos_bool_exp'];
    TipoDePreco?: GraphQLTypes['vendas_TiposDePrecos_bool_exp'];
    TipoDePreco_Id?: GraphQLTypes['vendas_TiposDePrecos_enum_comparison_exp'];
    TipoDeRecorrencia_Id?: GraphQLTypes['String_comparison_exp'];
    Valor?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
    >;
    _not?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp'];
    _or?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp']
    >;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_constraint']: comercial_PrestadoresDeServicos_Produtos_Precos_constraint;
  /** input type for incrementing numeric columns in table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_inc_input']: {
    Valor?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_insert_input']: {
    CombosProdutos?: GraphQLTypes['comercial_Combos_Produtos_arr_rel_insert_input'];
    Fornecedor_Produto_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    PrestadorDeServico_Produto?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_obj_rel_insert_input'];
    PropostasProdutos?: GraphQLTypes['propostas_Propostas_Produtos_arr_rel_insert_input'];
    TipoDePreco?: GraphQLTypes['vendas_TiposDePrecos_obj_rel_insert_input'];
    TipoDePreco_Id?: GraphQLTypes['vendas_TiposDePrecos_enum'];
    TipoDeRecorrencia_Id?: string;
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_max_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_max_fields';
    Fornecedor_Produto_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    TipoDeRecorrencia_Id?: string;
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_max_order_by']: {
    Fornecedor_Produto_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    TipoDeRecorrencia_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_min_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_min_fields';
    Fornecedor_Produto_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    TipoDeRecorrencia_Id?: string;
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_min_order_by']: {
    Fornecedor_Produto_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    TipoDeRecorrencia_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    >;
  };
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_on_conflict']: {
    constraint: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_update_column']
    >;
    where?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Produtos_Precos". */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_order_by']: {
    CombosProdutos_aggregate?: GraphQLTypes['comercial_Combos_Produtos_aggregate_order_by'];
    Fornecedor_Produto_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    PrestadorDeServico_Produto?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_order_by'];
    PropostasProdutos_aggregate?: GraphQLTypes['propostas_Propostas_Produtos_aggregate_order_by'];
    TipoDePreco?: GraphQLTypes['vendas_TiposDePrecos_order_by'];
    TipoDePreco_Id?: GraphQLTypes['order_by'];
    TipoDeRecorrencia_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Produtos_Precos */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_select_column']: comercial_PrestadoresDeServicos_Produtos_Precos_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_set_input']: {
    Fornecedor_Produto_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    TipoDePreco_Id?: GraphQLTypes['vendas_TiposDePrecos_enum'];
    TipoDeRecorrencia_Id?: string;
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_stddev_fields';
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_fields';
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_fields';
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_stddev_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_sum_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_sum_fields';
    Valor?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_sum_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_update_column']: comercial_PrestadoresDeServicos_Produtos_Precos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_fields';
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_fields';
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_var_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_variance_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_Precos_variance_fields';
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
  ['comercial_PrestadoresDeServicos_Produtos_Precos_variance_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_aggregate']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_aggregate';
    aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_PrestadoresDeServicos_Produtos']>;
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_aggregate_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_max_fields'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_min_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_max_order_by'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_arr_rel_insert_input']: {
    data: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_insert_input']
    >;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Produtos_bool_exp']: {
    Fornecedor_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Itens?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_bool_exp'];
    Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp'];
    PrestadorDeServico?: GraphQLTypes['comercial_PrestadoresDeServicos_bool_exp'];
    Produto?: GraphQLTypes['comercial_Produtos_bool_exp'];
    Produto_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
    >;
    _not?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp'];
    _or?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp']
    >;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_constraint']: comercial_PrestadoresDeServicos_Produtos_constraint;
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_insert_input']: {
    Fornecedor_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Itens?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_arr_rel_insert_input'];
    Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_arr_rel_insert_input'];
    PrestadorDeServico?: GraphQLTypes['comercial_PrestadoresDeServicos_obj_rel_insert_input'];
    Produto?: GraphQLTypes['comercial_Produtos_obj_rel_insert_input'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Produtos_max_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_max_fields';
    Fornecedor_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_max_order_by']: {
    Fornecedor_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Produtos_min_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_min_fields';
    Fornecedor_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_min_order_by']: {
    Fornecedor_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_mutation_response']: {
    __typename: 'comercial_PrestadoresDeServicos_Produtos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_PrestadoresDeServicos_Produtos']>;
  };
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_on_conflict']: {
    constraint: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_update_column']
    >;
    where?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Produtos". */
  ['comercial_PrestadoresDeServicos_Produtos_order_by']: {
    Fornecedor_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Itens_aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate_order_by'];
    Precos_aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_order_by'];
    PrestadorDeServico?: GraphQLTypes['comercial_PrestadoresDeServicos_order_by'];
    Produto?: GraphQLTypes['comercial_Produtos_order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Produtos */
  ['comercial_PrestadoresDeServicos_Produtos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_select_column']: comercial_PrestadoresDeServicos_Produtos_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_set_input']: {
    Fornecedor_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Produtos" */
  ['comercial_PrestadoresDeServicos_Produtos_update_column']: comercial_PrestadoresDeServicos_Produtos_update_column;
  /** columns and relationships of "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos';
    Id: GraphQLTypes['uuid'];
    /** An array relationship */
    Precos: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    >;
    /** An aggregate relationship */
    Precos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate'];
    /** An object relationship */
    PrestadorDeServico: GraphQLTypes['comercial_PrestadoresDeServicos'];
    Prestador_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Servico: GraphQLTypes['comercial_Servicos'];
    Servico_Id: GraphQLTypes['uuid'];
    /** An array relationship */
    Tarifas: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    >;
    /** An aggregate relationship */
    Tarifas_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos';
    /** An array relationship */
    CombosServicos: Array<GraphQLTypes['comercial_Combos_Servicos']>;
    /** An aggregate relationship */
    CombosServicos_aggregate: GraphQLTypes['comercial_Combos_Servicos_aggregate'];
    Fornecedor_Servico_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An array relationship */
    PlanosPrecos: Array<GraphQLTypes['comercial_Planos_Precos']>;
    /** An aggregate relationship */
    PlanosPrecos_aggregate: GraphQLTypes['comercial_Planos_Precos_aggregate'];
    /** An object relationship */
    PrestadorDeServico_Servico: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** An array relationship */
    PropostasServicos: Array<GraphQLTypes['propostas_Propostas_Servicos']>;
    /** An aggregate relationship */
    PropostasServicos_aggregate: GraphQLTypes['propostas_Propostas_Servicos_aggregate'];
    /** An object relationship */
    TipoDePreco?: GraphQLTypes['vendas_TiposDePrecos'];
    TipoDePreco_Id?: GraphQLTypes['vendas_TiposDePrecos_enum'];
    TipoDeRecorrencia_Id: string;
    Valor: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_aggregate';
    aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_fields'];
    nodes: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    >;
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_fields';
    avg?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_max_fields'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_min_fields'];
    stddev?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_sum_fields'];
    var_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_fields'];
    variance?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_variance_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_max_order_by'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_min_order_by'];
    stddev?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_arr_rel_insert_input']: {
    data: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_insert_input']
    >;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_avg_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_avg_fields';
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_avg_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Servicos_Precos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']: {
    CombosServicos?: GraphQLTypes['comercial_Combos_Servicos_bool_exp'];
    Fornecedor_Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    PlanosPrecos?: GraphQLTypes['comercial_Planos_Precos_bool_exp'];
    PrestadorDeServico_Servico?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp'];
    PropostasServicos?: GraphQLTypes['propostas_Propostas_Servicos_bool_exp'];
    TipoDePreco?: GraphQLTypes['vendas_TiposDePrecos_bool_exp'];
    TipoDePreco_Id?: GraphQLTypes['vendas_TiposDePrecos_enum_comparison_exp'];
    TipoDeRecorrencia_Id?: GraphQLTypes['String_comparison_exp'];
    Valor?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
    >;
    _not?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'];
    _or?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp']
    >;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_constraint']: comercial_PrestadoresDeServicos_Servicos_Precos_constraint;
  /** input type for incrementing numeric columns in table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_inc_input']: {
    Valor?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_insert_input']: {
    CombosServicos?: GraphQLTypes['comercial_Combos_Servicos_arr_rel_insert_input'];
    Fornecedor_Servico_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    PlanosPrecos?: GraphQLTypes['comercial_Planos_Precos_arr_rel_insert_input'];
    PrestadorDeServico_Servico?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_obj_rel_insert_input'];
    PropostasServicos?: GraphQLTypes['propostas_Propostas_Servicos_arr_rel_insert_input'];
    TipoDePreco?: GraphQLTypes['vendas_TiposDePrecos_obj_rel_insert_input'];
    TipoDePreco_Id?: GraphQLTypes['vendas_TiposDePrecos_enum'];
    TipoDeRecorrencia_Id?: string;
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_max_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_max_fields';
    Fornecedor_Servico_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    TipoDeRecorrencia_Id?: string;
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_max_order_by']: {
    Fornecedor_Servico_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    TipoDeRecorrencia_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_min_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_min_fields';
    Fornecedor_Servico_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    TipoDeRecorrencia_Id?: string;
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_min_order_by']: {
    Fornecedor_Servico_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    TipoDeRecorrencia_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    >;
  };
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_on_conflict']: {
    constraint: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_update_column']
    >;
    where?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Servicos_Precos". */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_order_by']: {
    CombosServicos_aggregate?: GraphQLTypes['comercial_Combos_Servicos_aggregate_order_by'];
    Fornecedor_Servico_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    PlanosPrecos_aggregate?: GraphQLTypes['comercial_Planos_Precos_aggregate_order_by'];
    PrestadorDeServico_Servico?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_order_by'];
    PropostasServicos_aggregate?: GraphQLTypes['propostas_Propostas_Servicos_aggregate_order_by'];
    TipoDePreco?: GraphQLTypes['vendas_TiposDePrecos_order_by'];
    TipoDePreco_Id?: GraphQLTypes['order_by'];
    TipoDeRecorrencia_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Servicos_Precos */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_select_column']: comercial_PrestadoresDeServicos_Servicos_Precos_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_set_input']: {
    Fornecedor_Servico_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    TipoDePreco_Id?: GraphQLTypes['vendas_TiposDePrecos_enum'];
    TipoDeRecorrencia_Id?: string;
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_stddev_fields';
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_fields';
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_fields';
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_stddev_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_sum_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_sum_fields';
    Valor?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_sum_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_update_column']: comercial_PrestadoresDeServicos_Servicos_Precos_update_column;
  /** aggregate var_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_fields';
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_fields';
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_var_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_variance_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Precos_variance_fields';
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
  ['comercial_PrestadoresDeServicos_Servicos_Precos_variance_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas';
    Fornecedor_Servico_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    PrestadorDeServico_Servico: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** An object relationship */
    Tarifa: GraphQLTypes['comercial_Tarifas'];
    Tarifa_Id: GraphQLTypes['uuid'];
    Valor: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate';
    aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_fields'];
    nodes: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    >;
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_fields';
    avg?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_fields'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_fields'];
    stddev?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_fields'];
    var_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_fields'];
    variance?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_order_by'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_order_by'];
    stddev?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_arr_rel_insert_input']: {
    data: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_insert_input']
    >;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_fields';
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_avg_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Servicos_Tarifas". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']: {
    Fornecedor_Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    PrestadorDeServico_Servico?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp'];
    Tarifa?: GraphQLTypes['comercial_Tarifas_bool_exp'];
    Tarifa_Id?: GraphQLTypes['uuid_comparison_exp'];
    Valor?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
    >;
    _not?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp'];
    _or?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp']
    >;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_constraint']: comercial_PrestadoresDeServicos_Servicos_Tarifas_constraint;
  /** input type for incrementing numeric columns in table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_inc_input']: {
    Valor?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_insert_input']: {
    Fornecedor_Servico_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    PrestadorDeServico_Servico?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_obj_rel_insert_input'];
    Tarifa?: GraphQLTypes['comercial_Tarifas_obj_rel_insert_input'];
    Tarifa_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_max_fields';
    Fornecedor_Servico_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Tarifa_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_max_order_by']: {
    Fornecedor_Servico_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Tarifa_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_min_fields';
    Fornecedor_Servico_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Tarifa_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_min_order_by']: {
    Fornecedor_Servico_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Tarifa_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    >;
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_on_conflict']: {
    constraint: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_update_column']
    >;
    where?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Servicos_Tarifas". */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_order_by']: {
    Fornecedor_Servico_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    PrestadorDeServico_Servico?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_order_by'];
    Tarifa?: GraphQLTypes['comercial_Tarifas_order_by'];
    Tarifa_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Servicos_Tarifas */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column']: comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_set_input']: {
    Fornecedor_Servico_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Tarifa_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_fields';
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_fields';
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_fields';
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_stddev_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_fields';
    Valor?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_sum_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_update_column']: comercial_PrestadoresDeServicos_Servicos_Tarifas_update_column;
  /** aggregate var_pop on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_fields';
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_fields';
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_var_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_fields';
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
  ['comercial_PrestadoresDeServicos_Servicos_Tarifas_variance_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregated selection of "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_aggregate']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_aggregate';
    aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_PrestadoresDeServicos_Servicos']>;
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_aggregate_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_max_fields'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_min_fields'];
  };
  /** order by aggregate values of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_max_order_by'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_arr_rel_insert_input']: {
    data: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_insert_input']
    >;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_Servicos_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'];
    PrestadorDeServico?: GraphQLTypes['comercial_PrestadoresDeServicos_bool_exp'];
    Prestador_Id?: GraphQLTypes['uuid_comparison_exp'];
    Servico?: GraphQLTypes['comercial_Servicos_bool_exp'];
    Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    Tarifas?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp'];
    _and?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
    >;
    _not?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp'];
    _or?: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp']
    >;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_constraint']: comercial_PrestadoresDeServicos_Servicos_constraint;
  /** input type for inserting data into table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_arr_rel_insert_input'];
    PrestadorDeServico?: GraphQLTypes['comercial_PrestadoresDeServicos_obj_rel_insert_input'];
    Prestador_Id?: GraphQLTypes['uuid'];
    Servico?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    Servico_Id?: GraphQLTypes['uuid'];
    Tarifas?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_Servicos_max_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Prestador_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Prestador_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_Servicos_min_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Prestador_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Prestador_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_mutation_response']: {
    __typename: 'comercial_PrestadoresDeServicos_Servicos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_PrestadoresDeServicos_Servicos']>;
  };
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_on_conflict']: {
    constraint: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_update_column']
    >;
    where?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos_Servicos". */
  ['comercial_PrestadoresDeServicos_Servicos_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Precos_aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_order_by'];
    PrestadorDeServico?: GraphQLTypes['comercial_PrestadoresDeServicos_order_by'];
    Prestador_Id?: GraphQLTypes['order_by'];
    Servico?: GraphQLTypes['comercial_Servicos_order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    Tarifas_aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos_Servicos */
  ['comercial_PrestadoresDeServicos_Servicos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_select_column']: comercial_PrestadoresDeServicos_Servicos_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Prestador_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.PrestadoresDeServicos_Servicos" */
  ['comercial_PrestadoresDeServicos_Servicos_update_column']: comercial_PrestadoresDeServicos_Servicos_update_column;
  /** aggregated selection of "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_aggregate']: {
    __typename: 'comercial_PrestadoresDeServicos_aggregate';
    aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_PrestadoresDeServicos']>;
  };
  /** aggregate fields of "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_aggregate_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_PrestadoresDeServicos_max_fields'];
    min?: GraphQLTypes['comercial_PrestadoresDeServicos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.PrestadoresDeServicos". All fields are combined with a logical 'AND'. */
  ['comercial_PrestadoresDeServicos_bool_exp']: {
    ContratosBases?: GraphQLTypes['comercial_ContratosBase_bool_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Produtos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp'];
    Servicos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp'];
    _and?: Array<GraphQLTypes['comercial_PrestadoresDeServicos_bool_exp']>;
    _not?: GraphQLTypes['comercial_PrestadoresDeServicos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_PrestadoresDeServicos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_constraint']: comercial_PrestadoresDeServicos_constraint;
  /** input type for inserting data into table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_insert_input']: {
    ContratosBases?: GraphQLTypes['comercial_ContratosBase_arr_rel_insert_input'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Produtos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_arr_rel_insert_input'];
    Servicos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_PrestadoresDeServicos_max_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_PrestadoresDeServicos_min_fields']: {
    __typename: 'comercial_PrestadoresDeServicos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_mutation_response']: {
    __typename: 'comercial_PrestadoresDeServicos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_PrestadoresDeServicos']>;
  };
  /** input type for inserting object relation for remote table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_PrestadoresDeServicos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_PrestadoresDeServicos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_on_conflict']: {
    constraint: GraphQLTypes['comercial_PrestadoresDeServicos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_update_column']
    >;
    where?: GraphQLTypes['comercial_PrestadoresDeServicos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.PrestadoresDeServicos". */
  ['comercial_PrestadoresDeServicos_order_by']: {
    ContratosBases_aggregate?: GraphQLTypes['comercial_ContratosBase_aggregate_order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Produtos_aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_aggregate_order_by'];
    Servicos_aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_PrestadoresDeServicos */
  ['comercial_PrestadoresDeServicos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_select_column']: comercial_PrestadoresDeServicos_select_column;
  /** input type for updating data in table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.PrestadoresDeServicos" */
  ['comercial_PrestadoresDeServicos_update_column']: comercial_PrestadoresDeServicos_update_column;
  /** columns and relationships of "comercial.Produtos" */
  ['comercial_Produtos']: {
    __typename: 'comercial_Produtos';
    /** An array relationship */
    Atributos: Array<GraphQLTypes['comercial_Produtos_Atributos']>;
    /** An aggregate relationship */
    Atributos_aggregate: GraphQLTypes['comercial_Produtos_Atributos_aggregate'];
    Categorias: GraphQLTypes['jsonb'];
    /** An array relationship */
    Combos: Array<GraphQLTypes['comercial_Combos_Produtos']>;
    /** An aggregate relationship */
    Combos_aggregate: GraphQLTypes['comercial_Combos_Produtos_aggregate'];
    /** An array relationship */
    Fornecedores: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos']
    >;
    /** An aggregate relationship */
    Fornecedores_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_aggregate'];
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Oportunidades: Array<GraphQLTypes['comercial_Produtos_Oportunidades']>;
    /** An aggregate relationship */
    Oportunidades_aggregate: GraphQLTypes['comercial_Produtos_Oportunidades_aggregate'];
    /** An array relationship */
    ProdutosDependentes: Array<GraphQLTypes['comercial_Produtos_Produtos']>;
    /** An aggregate relationship */
    ProdutosDependentes_aggregate: GraphQLTypes['comercial_Produtos_Produtos_aggregate'];
    /** An array relationship */
    ProdutosQueDependo: Array<GraphQLTypes['comercial_Produtos_Produtos']>;
    /** An aggregate relationship */
    ProdutosQueDependo_aggregate: GraphQLTypes['comercial_Produtos_Produtos_aggregate'];
    /** An array relationship */
    Propostas: Array<GraphQLTypes['propostas_Propostas_Produtos']>;
    /** An aggregate relationship */
    Propostas_aggregate: GraphQLTypes['propostas_Propostas_Produtos_aggregate'];
    /** An object relationship */
    ServicoDeDesinstalacao?: GraphQLTypes['comercial_Servicos'];
    ServicoDeDesinstalacao_Id?: GraphQLTypes['uuid'];
    /** An object relationship */
    ServicoDeInstalacao?: GraphQLTypes['comercial_Servicos'];
    ServicoDeInstalacao_Id?: GraphQLTypes['uuid'];
    /** An array relationship */
    Servicos: Array<GraphQLTypes['comercial_Produtos_Servicos']>;
    /** An array relationship */
    Servicos_Produtos: Array<GraphQLTypes['comercial_Servicos_Produtos']>;
    /** An aggregate relationship */
    Servicos_Produtos_aggregate: GraphQLTypes['comercial_Servicos_Produtos_aggregate'];
    /** An aggregate relationship */
    Servicos_aggregate: GraphQLTypes['comercial_Produtos_Servicos_aggregate'];
    /** An object relationship */
    Tipo: GraphQLTypes['comercial_Produtos_Tipos'];
    Tipo_Id: GraphQLTypes['comercial_Produtos_Tipos_enum'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos']: {
    __typename: 'comercial_Produtos_Atributos';
    /** An object relationship */
    Atributo: GraphQLTypes['comercial_Atributos'];
    Atributo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Produto: GraphQLTypes['comercial_Produtos'];
    Produto_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_aggregate']: {
    __typename: 'comercial_Produtos_Atributos_aggregate';
    aggregate?: GraphQLTypes['comercial_Produtos_Atributos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Produtos_Atributos']>;
  };
  /** aggregate fields of "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_aggregate_fields']: {
    __typename: 'comercial_Produtos_Atributos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Produtos_Atributos_max_fields'];
    min?: GraphQLTypes['comercial_Produtos_Atributos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Produtos_Atributos_max_order_by'];
    min?: GraphQLTypes['comercial_Produtos_Atributos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Produtos_Atributos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Produtos_Atributos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos_Atributos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Atributos_bool_exp']: {
    Atributo?: GraphQLTypes['comercial_Atributos_bool_exp'];
    Atributo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Produto?: GraphQLTypes['comercial_Produtos_bool_exp'];
    Produto_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Produtos_Atributos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Produtos_Atributos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Produtos_Atributos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_constraint']: comercial_Produtos_Atributos_constraint;
  /** input type for inserting data into table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_insert_input']: {
    Atributo?: GraphQLTypes['comercial_Atributos_obj_rel_insert_input'];
    Atributo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Produto?: GraphQLTypes['comercial_Produtos_obj_rel_insert_input'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Produtos_Atributos_max_fields']: {
    __typename: 'comercial_Produtos_Atributos_max_fields';
    Atributo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_max_order_by']: {
    Atributo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Produtos_Atributos_min_fields']: {
    __typename: 'comercial_Produtos_Atributos_min_fields';
    Atributo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_min_order_by']: {
    Atributo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_mutation_response']: {
    __typename: 'comercial_Produtos_Atributos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Produtos_Atributos']>;
  };
  /** on conflict condition type for table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Produtos_Atributos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Produtos_Atributos_update_column']
    >;
    where?: GraphQLTypes['comercial_Produtos_Atributos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Produtos_Atributos". */
  ['comercial_Produtos_Atributos_order_by']: {
    Atributo?: GraphQLTypes['comercial_Atributos_order_by'];
    Atributo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Produto?: GraphQLTypes['comercial_Produtos_order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Produtos_Atributos */
  ['comercial_Produtos_Atributos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_select_column']: comercial_Produtos_Atributos_select_column;
  /** input type for updating data in table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_set_input']: {
    Atributo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Produtos_Atributos" */
  ['comercial_Produtos_Atributos_update_column']: comercial_Produtos_Atributos_update_column;
  /** columns and relationships of "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades']: {
    __typename: 'comercial_Produtos_Oportunidades';
    /** An object relationship */
    Combo: GraphQLTypes['comercial_Combos'];
    Combo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    OportunidadesDePropostas: Array<
      GraphQLTypes['propostas_Propostas_Oportunidades']
    >;
    /** An aggregate relationship */
    OportunidadesDePropostas_aggregate: GraphQLTypes['propostas_Propostas_Oportunidades_aggregate'];
    /** An object relationship */
    Produto: GraphQLTypes['comercial_Produtos'];
    Produto_Id: GraphQLTypes['uuid'];
    Valor: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_aggregate']: {
    __typename: 'comercial_Produtos_Oportunidades_aggregate';
    aggregate?: GraphQLTypes['comercial_Produtos_Oportunidades_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Produtos_Oportunidades']>;
  };
  /** aggregate fields of "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_aggregate_fields']: {
    __typename: 'comercial_Produtos_Oportunidades_aggregate_fields';
    avg?: GraphQLTypes['comercial_Produtos_Oportunidades_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_Produtos_Oportunidades_max_fields'];
    min?: GraphQLTypes['comercial_Produtos_Oportunidades_min_fields'];
    stddev?: GraphQLTypes['comercial_Produtos_Oportunidades_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_Produtos_Oportunidades_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_Produtos_Oportunidades_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_Produtos_Oportunidades_sum_fields'];
    var_pop?: GraphQLTypes['comercial_Produtos_Oportunidades_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_Produtos_Oportunidades_var_samp_fields'];
    variance?: GraphQLTypes['comercial_Produtos_Oportunidades_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_Produtos_Oportunidades_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Produtos_Oportunidades_max_order_by'];
    min?: GraphQLTypes['comercial_Produtos_Oportunidades_min_order_by'];
    stddev?: GraphQLTypes['comercial_Produtos_Oportunidades_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_Produtos_Oportunidades_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_Produtos_Oportunidades_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_Produtos_Oportunidades_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_Produtos_Oportunidades_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_Produtos_Oportunidades_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_Produtos_Oportunidades_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Produtos_Oportunidades_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Produtos_Oportunidades_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_Produtos_Oportunidades_avg_fields']: {
    __typename: 'comercial_Produtos_Oportunidades_avg_fields';
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_avg_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos_Oportunidades". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Oportunidades_bool_exp']: {
    Combo?: GraphQLTypes['comercial_Combos_bool_exp'];
    Combo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    OportunidadesDePropostas?: GraphQLTypes['propostas_Propostas_Oportunidades_bool_exp'];
    Produto?: GraphQLTypes['comercial_Produtos_bool_exp'];
    Produto_Id?: GraphQLTypes['uuid_comparison_exp'];
    Valor?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Produtos_Oportunidades_bool_exp']>;
    _not?: GraphQLTypes['comercial_Produtos_Oportunidades_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Produtos_Oportunidades_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_constraint']: comercial_Produtos_Oportunidades_constraint;
  /** input type for incrementing numeric columns in table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_inc_input']: {
    Valor?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_insert_input']: {
    Combo?: GraphQLTypes['comercial_Combos_obj_rel_insert_input'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    OportunidadesDePropostas?: GraphQLTypes['propostas_Propostas_Oportunidades_arr_rel_insert_input'];
    Produto?: GraphQLTypes['comercial_Produtos_obj_rel_insert_input'];
    Produto_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Produtos_Oportunidades_max_fields']: {
    __typename: 'comercial_Produtos_Oportunidades_max_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Produto_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_max_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Produtos_Oportunidades_min_fields']: {
    __typename: 'comercial_Produtos_Oportunidades_min_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Produto_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_min_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_mutation_response']: {
    __typename: 'comercial_Produtos_Oportunidades_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Produtos_Oportunidades']>;
  };
  /** input type for inserting object relation for remote table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Produtos_Oportunidades_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Produtos_Oportunidades_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_on_conflict']: {
    constraint: GraphQLTypes['comercial_Produtos_Oportunidades_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Produtos_Oportunidades_update_column']
    >;
    where?: GraphQLTypes['comercial_Produtos_Oportunidades_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Produtos_Oportunidades". */
  ['comercial_Produtos_Oportunidades_order_by']: {
    Combo?: GraphQLTypes['comercial_Combos_order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    OportunidadesDePropostas_aggregate?: GraphQLTypes['propostas_Propostas_Oportunidades_aggregate_order_by'];
    Produto?: GraphQLTypes['comercial_Produtos_order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Produtos_Oportunidades */
  ['comercial_Produtos_Oportunidades_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_select_column']: comercial_Produtos_Oportunidades_select_column;
  /** input type for updating data in table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_set_input']: {
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Produto_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_Produtos_Oportunidades_stddev_fields']: {
    __typename: 'comercial_Produtos_Oportunidades_stddev_fields';
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_stddev_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Produtos_Oportunidades_stddev_pop_fields']: {
    __typename: 'comercial_Produtos_Oportunidades_stddev_pop_fields';
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_stddev_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Produtos_Oportunidades_stddev_samp_fields']: {
    __typename: 'comercial_Produtos_Oportunidades_stddev_samp_fields';
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_stddev_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_Produtos_Oportunidades_sum_fields']: {
    __typename: 'comercial_Produtos_Oportunidades_sum_fields';
    Valor?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_sum_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_update_column']: comercial_Produtos_Oportunidades_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Produtos_Oportunidades_var_pop_fields']: {
    __typename: 'comercial_Produtos_Oportunidades_var_pop_fields';
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_var_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_Produtos_Oportunidades_var_samp_fields']: {
    __typename: 'comercial_Produtos_Oportunidades_var_samp_fields';
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_var_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_Produtos_Oportunidades_variance_fields']: {
    __typename: 'comercial_Produtos_Oportunidades_variance_fields';
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.Produtos_Oportunidades" */
  ['comercial_Produtos_Oportunidades_variance_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos']: {
    __typename: 'comercial_Produtos_Produtos';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Produto: GraphQLTypes['comercial_Produtos'];
    /** An object relationship */
    ProdutoDependente: GraphQLTypes['comercial_Produtos'];
    ProdutoDependente_Id: GraphQLTypes['uuid'];
    Produto_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_aggregate']: {
    __typename: 'comercial_Produtos_Produtos_aggregate';
    aggregate?: GraphQLTypes['comercial_Produtos_Produtos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Produtos_Produtos']>;
  };
  /** aggregate fields of "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_aggregate_fields']: {
    __typename: 'comercial_Produtos_Produtos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Produtos_Produtos_max_fields'];
    min?: GraphQLTypes['comercial_Produtos_Produtos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Produtos_Produtos_max_order_by'];
    min?: GraphQLTypes['comercial_Produtos_Produtos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Produtos_Produtos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Produtos_Produtos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Produtos_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Produto?: GraphQLTypes['comercial_Produtos_bool_exp'];
    ProdutoDependente?: GraphQLTypes['comercial_Produtos_bool_exp'];
    ProdutoDependente_Id?: GraphQLTypes['uuid_comparison_exp'];
    Produto_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Produtos_Produtos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Produtos_Produtos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Produtos_Produtos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_constraint']: comercial_Produtos_Produtos_constraint;
  /** input type for inserting data into table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Produto?: GraphQLTypes['comercial_Produtos_obj_rel_insert_input'];
    ProdutoDependente?: GraphQLTypes['comercial_Produtos_obj_rel_insert_input'];
    ProdutoDependente_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Produtos_Produtos_max_fields']: {
    __typename: 'comercial_Produtos_Produtos_max_fields';
    Id?: GraphQLTypes['uuid'];
    ProdutoDependente_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    ProdutoDependente_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Produtos_Produtos_min_fields']: {
    __typename: 'comercial_Produtos_Produtos_min_fields';
    Id?: GraphQLTypes['uuid'];
    ProdutoDependente_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    ProdutoDependente_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_mutation_response']: {
    __typename: 'comercial_Produtos_Produtos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Produtos_Produtos']>;
  };
  /** on conflict condition type for table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Produtos_Produtos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Produtos_Produtos_update_column']
    >;
    where?: GraphQLTypes['comercial_Produtos_Produtos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Produtos_Produtos". */
  ['comercial_Produtos_Produtos_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Produto?: GraphQLTypes['comercial_Produtos_order_by'];
    ProdutoDependente?: GraphQLTypes['comercial_Produtos_order_by'];
    ProdutoDependente_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Produtos_Produtos */
  ['comercial_Produtos_Produtos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_select_column']: comercial_Produtos_Produtos_select_column;
  /** input type for updating data in table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    ProdutoDependente_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Produtos_Produtos" */
  ['comercial_Produtos_Produtos_update_column']: comercial_Produtos_Produtos_update_column;
  /** columns and relationships of "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos']: {
    __typename: 'comercial_Produtos_Servicos';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Produto: GraphQLTypes['comercial_Produtos'];
    Produto_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Servico: GraphQLTypes['comercial_Servicos'];
    Servico_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_aggregate']: {
    __typename: 'comercial_Produtos_Servicos_aggregate';
    aggregate?: GraphQLTypes['comercial_Produtos_Servicos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Produtos_Servicos']>;
  };
  /** aggregate fields of "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_aggregate_fields']: {
    __typename: 'comercial_Produtos_Servicos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Produtos_Servicos_max_fields'];
    min?: GraphQLTypes['comercial_Produtos_Servicos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Produtos_Servicos_max_order_by'];
    min?: GraphQLTypes['comercial_Produtos_Servicos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Produtos_Servicos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Produtos_Servicos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Servicos_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Produto?: GraphQLTypes['comercial_Produtos_bool_exp'];
    Produto_Id?: GraphQLTypes['uuid_comparison_exp'];
    Servico?: GraphQLTypes['comercial_Servicos_bool_exp'];
    Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Produtos_Servicos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Produtos_Servicos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Produtos_Servicos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_constraint']: comercial_Produtos_Servicos_constraint;
  /** input type for inserting data into table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Produto?: GraphQLTypes['comercial_Produtos_obj_rel_insert_input'];
    Produto_Id?: GraphQLTypes['uuid'];
    Servico?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Produtos_Servicos_max_fields']: {
    __typename: 'comercial_Produtos_Servicos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Produtos_Servicos_min_fields']: {
    __typename: 'comercial_Produtos_Servicos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_mutation_response']: {
    __typename: 'comercial_Produtos_Servicos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Produtos_Servicos']>;
  };
  /** on conflict condition type for table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Produtos_Servicos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Produtos_Servicos_update_column']
    >;
    where?: GraphQLTypes['comercial_Produtos_Servicos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Produtos_Servicos". */
  ['comercial_Produtos_Servicos_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Produto?: GraphQLTypes['comercial_Produtos_order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Servico?: GraphQLTypes['comercial_Servicos_order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Produtos_Servicos */
  ['comercial_Produtos_Servicos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_select_column']: comercial_Produtos_Servicos_select_column;
  /** input type for updating data in table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Produtos_Servicos" */
  ['comercial_Produtos_Servicos_update_column']: comercial_Produtos_Servicos_update_column;
  /** columns and relationships of "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos']: {
    __typename: 'comercial_Produtos_Tipos';
    Comentario: string;
    /** An array relationship */
    Produtos: Array<GraphQLTypes['comercial_Produtos']>;
    /** An aggregate relationship */
    Produtos_aggregate: GraphQLTypes['comercial_Produtos_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_aggregate']: {
    __typename: 'comercial_Produtos_Tipos_aggregate';
    aggregate?: GraphQLTypes['comercial_Produtos_Tipos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Produtos_Tipos']>;
  };
  /** aggregate fields of "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_aggregate_fields']: {
    __typename: 'comercial_Produtos_Tipos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Produtos_Tipos_max_fields'];
    min?: GraphQLTypes['comercial_Produtos_Tipos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos_Tipos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_Tipos_bool_exp']: {
    Comentario?: GraphQLTypes['String_comparison_exp'];
    Produtos?: GraphQLTypes['comercial_Produtos_bool_exp'];
    Valor?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Produtos_Tipos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Produtos_Tipos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Produtos_Tipos_bool_exp']>;
  };
  /** unique or primary key constraints on table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_constraint']: comercial_Produtos_Tipos_constraint;
  ['comercial_Produtos_Tipos_enum']: comercial_Produtos_Tipos_enum;
  /** Boolean expression to compare columns of type "comercial_Produtos_Tipos_enum". All fields are combined with logical 'AND'. */
  ['comercial_Produtos_Tipos_enum_comparison_exp']: {
    _eq?: GraphQLTypes['comercial_Produtos_Tipos_enum'];
    _in?: Array<GraphQLTypes['comercial_Produtos_Tipos_enum']>;
    _is_null?: boolean;
    _neq?: GraphQLTypes['comercial_Produtos_Tipos_enum'];
    _nin?: Array<GraphQLTypes['comercial_Produtos_Tipos_enum']>;
  };
  /** input type for inserting data into table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_insert_input']: {
    Comentario?: string;
    Produtos?: GraphQLTypes['comercial_Produtos_arr_rel_insert_input'];
    Valor?: string;
  };
  /** aggregate max on columns */
  ['comercial_Produtos_Tipos_max_fields']: {
    __typename: 'comercial_Produtos_Tipos_max_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['comercial_Produtos_Tipos_min_fields']: {
    __typename: 'comercial_Produtos_Tipos_min_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_mutation_response']: {
    __typename: 'comercial_Produtos_Tipos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Produtos_Tipos']>;
  };
  /** input type for inserting object relation for remote table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Produtos_Tipos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Produtos_Tipos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Produtos_Tipos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Produtos_Tipos_update_column']
    >;
    where?: GraphQLTypes['comercial_Produtos_Tipos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Produtos_Tipos". */
  ['comercial_Produtos_Tipos_order_by']: {
    Comentario?: GraphQLTypes['order_by'];
    Produtos_aggregate?: GraphQLTypes['comercial_Produtos_aggregate_order_by'];
    Valor?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Produtos_Tipos */
  ['comercial_Produtos_Tipos_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_select_column']: comercial_Produtos_Tipos_select_column;
  /** input type for updating data in table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_set_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** update columns of table "comercial.Produtos_Tipos" */
  ['comercial_Produtos_Tipos_update_column']: comercial_Produtos_Tipos_update_column;
  /** aggregated selection of "comercial.Produtos" */
  ['comercial_Produtos_aggregate']: {
    __typename: 'comercial_Produtos_aggregate';
    aggregate?: GraphQLTypes['comercial_Produtos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Produtos']>;
  };
  /** aggregate fields of "comercial.Produtos" */
  ['comercial_Produtos_aggregate_fields']: {
    __typename: 'comercial_Produtos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Produtos_max_fields'];
    min?: GraphQLTypes['comercial_Produtos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Produtos" */
  ['comercial_Produtos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Produtos_max_order_by'];
    min?: GraphQLTypes['comercial_Produtos_min_order_by'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Produtos_append_input']: {
    Categorias?: GraphQLTypes['jsonb'];
  };
  /** input type for inserting array relation for remote table "comercial.Produtos" */
  ['comercial_Produtos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Produtos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Produtos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Produtos_bool_exp']: {
    Atributos?: GraphQLTypes['comercial_Produtos_Atributos_bool_exp'];
    Categorias?: GraphQLTypes['jsonb_comparison_exp'];
    Combos?: GraphQLTypes['comercial_Combos_Produtos_bool_exp'];
    Fornecedores?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_bool_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Oportunidades?: GraphQLTypes['comercial_Produtos_Oportunidades_bool_exp'];
    ProdutosDependentes?: GraphQLTypes['comercial_Produtos_Produtos_bool_exp'];
    ProdutosQueDependo?: GraphQLTypes['comercial_Produtos_Produtos_bool_exp'];
    Propostas?: GraphQLTypes['propostas_Propostas_Produtos_bool_exp'];
    ServicoDeDesinstalacao?: GraphQLTypes['comercial_Servicos_bool_exp'];
    ServicoDeDesinstalacao_Id?: GraphQLTypes['uuid_comparison_exp'];
    ServicoDeInstalacao?: GraphQLTypes['comercial_Servicos_bool_exp'];
    ServicoDeInstalacao_Id?: GraphQLTypes['uuid_comparison_exp'];
    Servicos?: GraphQLTypes['comercial_Produtos_Servicos_bool_exp'];
    Servicos_Produtos?: GraphQLTypes['comercial_Servicos_Produtos_bool_exp'];
    Tipo?: GraphQLTypes['comercial_Produtos_Tipos_bool_exp'];
    Tipo_Id?: GraphQLTypes['comercial_Produtos_Tipos_enum_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Produtos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Produtos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Produtos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Produtos" */
  ['comercial_Produtos_constraint']: comercial_Produtos_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['comercial_Produtos_delete_at_path_input']: {
    Categorias?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['comercial_Produtos_delete_elem_input']: {
    Categorias?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['comercial_Produtos_delete_key_input']: {
    Categorias?: string;
  };
  /** input type for inserting data into table "comercial.Produtos" */
  ['comercial_Produtos_insert_input']: {
    Atributos?: GraphQLTypes['comercial_Produtos_Atributos_arr_rel_insert_input'];
    Categorias?: GraphQLTypes['jsonb'];
    Combos?: GraphQLTypes['comercial_Combos_Produtos_arr_rel_insert_input'];
    Fornecedores?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_arr_rel_insert_input'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Oportunidades?: GraphQLTypes['comercial_Produtos_Oportunidades_arr_rel_insert_input'];
    ProdutosDependentes?: GraphQLTypes['comercial_Produtos_Produtos_arr_rel_insert_input'];
    ProdutosQueDependo?: GraphQLTypes['comercial_Produtos_Produtos_arr_rel_insert_input'];
    Propostas?: GraphQLTypes['propostas_Propostas_Produtos_arr_rel_insert_input'];
    ServicoDeDesinstalacao?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    ServicoDeDesinstalacao_Id?: GraphQLTypes['uuid'];
    ServicoDeInstalacao?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    ServicoDeInstalacao_Id?: GraphQLTypes['uuid'];
    Servicos?: GraphQLTypes['comercial_Produtos_Servicos_arr_rel_insert_input'];
    Servicos_Produtos?: GraphQLTypes['comercial_Servicos_Produtos_arr_rel_insert_input'];
    Tipo?: GraphQLTypes['comercial_Produtos_Tipos_obj_rel_insert_input'];
    Tipo_Id?: GraphQLTypes['comercial_Produtos_Tipos_enum'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Produtos_max_fields']: {
    __typename: 'comercial_Produtos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    ServicoDeDesinstalacao_Id?: GraphQLTypes['uuid'];
    ServicoDeInstalacao_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Produtos" */
  ['comercial_Produtos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    ServicoDeDesinstalacao_Id?: GraphQLTypes['order_by'];
    ServicoDeInstalacao_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Produtos_min_fields']: {
    __typename: 'comercial_Produtos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    ServicoDeDesinstalacao_Id?: GraphQLTypes['uuid'];
    ServicoDeInstalacao_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Produtos" */
  ['comercial_Produtos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    ServicoDeDesinstalacao_Id?: GraphQLTypes['order_by'];
    ServicoDeInstalacao_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Produtos" */
  ['comercial_Produtos_mutation_response']: {
    __typename: 'comercial_Produtos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Produtos']>;
  };
  /** input type for inserting object relation for remote table "comercial.Produtos" */
  ['comercial_Produtos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Produtos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Produtos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Produtos" */
  ['comercial_Produtos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Produtos_constraint'];
    update_columns: Array<GraphQLTypes['comercial_Produtos_update_column']>;
    where?: GraphQLTypes['comercial_Produtos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Produtos". */
  ['comercial_Produtos_order_by']: {
    Atributos_aggregate?: GraphQLTypes['comercial_Produtos_Atributos_aggregate_order_by'];
    Categorias?: GraphQLTypes['order_by'];
    Combos_aggregate?: GraphQLTypes['comercial_Combos_Produtos_aggregate_order_by'];
    Fornecedores_aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_aggregate_order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Oportunidades_aggregate?: GraphQLTypes['comercial_Produtos_Oportunidades_aggregate_order_by'];
    ProdutosDependentes_aggregate?: GraphQLTypes['comercial_Produtos_Produtos_aggregate_order_by'];
    ProdutosQueDependo_aggregate?: GraphQLTypes['comercial_Produtos_Produtos_aggregate_order_by'];
    Propostas_aggregate?: GraphQLTypes['propostas_Propostas_Produtos_aggregate_order_by'];
    ServicoDeDesinstalacao?: GraphQLTypes['comercial_Servicos_order_by'];
    ServicoDeDesinstalacao_Id?: GraphQLTypes['order_by'];
    ServicoDeInstalacao?: GraphQLTypes['comercial_Servicos_order_by'];
    ServicoDeInstalacao_Id?: GraphQLTypes['order_by'];
    Servicos_Produtos_aggregate?: GraphQLTypes['comercial_Servicos_Produtos_aggregate_order_by'];
    Servicos_aggregate?: GraphQLTypes['comercial_Produtos_Servicos_aggregate_order_by'];
    Tipo?: GraphQLTypes['comercial_Produtos_Tipos_order_by'];
    Tipo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Produtos */
  ['comercial_Produtos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Produtos_prepend_input']: {
    Categorias?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "comercial.Produtos" */
  ['comercial_Produtos_select_column']: comercial_Produtos_select_column;
  /** input type for updating data in table "comercial.Produtos" */
  ['comercial_Produtos_set_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    ServicoDeDesinstalacao_Id?: GraphQLTypes['uuid'];
    ServicoDeInstalacao_Id?: GraphQLTypes['uuid'];
    Tipo_Id?: GraphQLTypes['comercial_Produtos_Tipos_enum'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Produtos" */
  ['comercial_Produtos_update_column']: comercial_Produtos_update_column;
  /** columns and relationships of "comercial.Servicos" */
  ['comercial_Servicos']: {
    __typename: 'comercial_Servicos';
    /** An array relationship */
    Atributos: Array<GraphQLTypes['comercial_Servicos_Atributos']>;
    /** An aggregate relationship */
    Atributos_aggregate: GraphQLTypes['comercial_Servicos_Atributos_aggregate'];
    Categorias: GraphQLTypes['jsonb'];
    /** An array relationship */
    Combos: Array<GraphQLTypes['comercial_Combos_Servicos']>;
    /** An aggregate relationship */
    Combos_aggregate: GraphQLTypes['comercial_Combos_Servicos_aggregate'];
    GeraOS: boolean;
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Oportunidades: Array<GraphQLTypes['comercial_Servicos_Oportunidades']>;
    /** An aggregate relationship */
    Oportunidades_aggregate: GraphQLTypes['comercial_Servicos_Oportunidades_aggregate'];
    /** An array relationship */
    Planos: Array<GraphQLTypes['comercial_Planos']>;
    /** An aggregate relationship */
    Planos_aggregate: GraphQLTypes['comercial_Planos_aggregate'];
    /** An array relationship */
    PrestadoresDeServicos: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos']
    >;
    /** An aggregate relationship */
    PrestadoresDeServicos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_aggregate'];
    /** An array relationship */
    Produtos_Servicos: Array<GraphQLTypes['comercial_Produtos_Servicos']>;
    /** An aggregate relationship */
    Produtos_Servicos_aggregate: GraphQLTypes['comercial_Produtos_Servicos_aggregate'];
    /** An array relationship */
    Propostas: Array<GraphQLTypes['propostas_Propostas_Servicos']>;
    /** An aggregate relationship */
    Propostas_aggregate: GraphQLTypes['propostas_Propostas_Servicos_aggregate'];
    /** An array relationship */
    Servicos_Produtos: Array<GraphQLTypes['comercial_Servicos_Produtos']>;
    /** An aggregate relationship */
    Servicos_Produtos_aggregate: GraphQLTypes['comercial_Servicos_Produtos_aggregate'];
    /** An array relationship */
    Servicos_ServicosDependente: Array<
      GraphQLTypes['comercial_Servicos_Servicos']
    >;
    /** An aggregate relationship */
    Servicos_ServicosDependente_aggregate: GraphQLTypes['comercial_Servicos_Servicos_aggregate'];
    /** An array relationship */
    Tarifas: Array<GraphQLTypes['comercial_Servicos_Tarifas']>;
    /** An aggregate relationship */
    Tarifas_aggregate: GraphQLTypes['comercial_Servicos_Tarifas_aggregate'];
    /** An object relationship */
    Tipo: GraphQLTypes['comercial_Servicos_Tipos'];
    Tipo_Id: GraphQLTypes['comercial_Servicos_Tipos_enum'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    /** An array relationship */
    servicosServicos: Array<GraphQLTypes['comercial_Servicos_Servicos']>;
    /** An aggregate relationship */
    servicosServicos_aggregate: GraphQLTypes['comercial_Servicos_Servicos_aggregate'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos']: {
    __typename: 'comercial_Servicos_Atributos';
    /** An object relationship */
    Atributo: GraphQLTypes['comercial_Atributos'];
    Atributo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Servico: GraphQLTypes['comercial_Servicos'];
    Servico_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_aggregate']: {
    __typename: 'comercial_Servicos_Atributos_aggregate';
    aggregate?: GraphQLTypes['comercial_Servicos_Atributos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Servicos_Atributos']>;
  };
  /** aggregate fields of "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_aggregate_fields']: {
    __typename: 'comercial_Servicos_Atributos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Servicos_Atributos_max_fields'];
    min?: GraphQLTypes['comercial_Servicos_Atributos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Servicos_Atributos_max_order_by'];
    min?: GraphQLTypes['comercial_Servicos_Atributos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Servicos_Atributos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Servicos_Atributos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Atributos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Atributos_bool_exp']: {
    Atributo?: GraphQLTypes['comercial_Atributos_bool_exp'];
    Atributo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Servico?: GraphQLTypes['comercial_Servicos_bool_exp'];
    Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Servicos_Atributos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Servicos_Atributos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Servicos_Atributos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_constraint']: comercial_Servicos_Atributos_constraint;
  /** input type for inserting data into table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_insert_input']: {
    Atributo?: GraphQLTypes['comercial_Atributos_obj_rel_insert_input'];
    Atributo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Servico?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Atributos_max_fields']: {
    __typename: 'comercial_Servicos_Atributos_max_fields';
    Atributo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_max_order_by']: {
    Atributo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Atributos_min_fields']: {
    __typename: 'comercial_Servicos_Atributos_min_fields';
    Atributo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_min_order_by']: {
    Atributo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_mutation_response']: {
    __typename: 'comercial_Servicos_Atributos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Servicos_Atributos']>;
  };
  /** on conflict condition type for table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Servicos_Atributos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Servicos_Atributos_update_column']
    >;
    where?: GraphQLTypes['comercial_Servicos_Atributos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Servicos_Atributos". */
  ['comercial_Servicos_Atributos_order_by']: {
    Atributo?: GraphQLTypes['comercial_Atributos_order_by'];
    Atributo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Servico?: GraphQLTypes['comercial_Servicos_order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Servicos_Atributos */
  ['comercial_Servicos_Atributos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_select_column']: comercial_Servicos_Atributos_select_column;
  /** input type for updating data in table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_set_input']: {
    Atributo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Servicos_Atributos" */
  ['comercial_Servicos_Atributos_update_column']: comercial_Servicos_Atributos_update_column;
  /** columns and relationships of "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades']: {
    __typename: 'comercial_Servicos_Oportunidades';
    /** An object relationship */
    Combo: GraphQLTypes['comercial_Combos'];
    Combo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    OportunidadesDePropostas: Array<
      GraphQLTypes['propostas_Propostas_Oportunidades']
    >;
    /** An aggregate relationship */
    OportunidadesDePropostas_aggregate: GraphQLTypes['propostas_Propostas_Oportunidades_aggregate'];
    /** An object relationship */
    Servico: GraphQLTypes['comercial_Servicos'];
    Servico_Id: GraphQLTypes['uuid'];
    Valor: GraphQLTypes['float8'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_aggregate']: {
    __typename: 'comercial_Servicos_Oportunidades_aggregate';
    aggregate?: GraphQLTypes['comercial_Servicos_Oportunidades_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Servicos_Oportunidades']>;
  };
  /** aggregate fields of "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_aggregate_fields']: {
    __typename: 'comercial_Servicos_Oportunidades_aggregate_fields';
    avg?: GraphQLTypes['comercial_Servicos_Oportunidades_avg_fields'];
    count: number;
    max?: GraphQLTypes['comercial_Servicos_Oportunidades_max_fields'];
    min?: GraphQLTypes['comercial_Servicos_Oportunidades_min_fields'];
    stddev?: GraphQLTypes['comercial_Servicos_Oportunidades_stddev_fields'];
    stddev_pop?: GraphQLTypes['comercial_Servicos_Oportunidades_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['comercial_Servicos_Oportunidades_stddev_samp_fields'];
    sum?: GraphQLTypes['comercial_Servicos_Oportunidades_sum_fields'];
    var_pop?: GraphQLTypes['comercial_Servicos_Oportunidades_var_pop_fields'];
    var_samp?: GraphQLTypes['comercial_Servicos_Oportunidades_var_samp_fields'];
    variance?: GraphQLTypes['comercial_Servicos_Oportunidades_variance_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_aggregate_order_by']: {
    avg?: GraphQLTypes['comercial_Servicos_Oportunidades_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Servicos_Oportunidades_max_order_by'];
    min?: GraphQLTypes['comercial_Servicos_Oportunidades_min_order_by'];
    stddev?: GraphQLTypes['comercial_Servicos_Oportunidades_stddev_order_by'];
    stddev_pop?: GraphQLTypes['comercial_Servicos_Oportunidades_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['comercial_Servicos_Oportunidades_stddev_samp_order_by'];
    sum?: GraphQLTypes['comercial_Servicos_Oportunidades_sum_order_by'];
    var_pop?: GraphQLTypes['comercial_Servicos_Oportunidades_var_pop_order_by'];
    var_samp?: GraphQLTypes['comercial_Servicos_Oportunidades_var_samp_order_by'];
    variance?: GraphQLTypes['comercial_Servicos_Oportunidades_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Servicos_Oportunidades_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Servicos_Oportunidades_on_conflict'];
  };
  /** aggregate avg on columns */
  ['comercial_Servicos_Oportunidades_avg_fields']: {
    __typename: 'comercial_Servicos_Oportunidades_avg_fields';
    Valor?: number;
  };
  /** order by avg() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_avg_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Oportunidades". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Oportunidades_bool_exp']: {
    Combo?: GraphQLTypes['comercial_Combos_bool_exp'];
    Combo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    OportunidadesDePropostas?: GraphQLTypes['propostas_Propostas_Oportunidades_bool_exp'];
    Servico?: GraphQLTypes['comercial_Servicos_bool_exp'];
    Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    Valor?: GraphQLTypes['float8_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Servicos_Oportunidades_bool_exp']>;
    _not?: GraphQLTypes['comercial_Servicos_Oportunidades_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Servicos_Oportunidades_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_constraint']: comercial_Servicos_Oportunidades_constraint;
  /** input type for incrementing numeric columns in table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_inc_input']: {
    Valor?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_insert_input']: {
    Combo?: GraphQLTypes['comercial_Combos_obj_rel_insert_input'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    OportunidadesDePropostas?: GraphQLTypes['propostas_Propostas_Oportunidades_arr_rel_insert_input'];
    Servico?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    Servico_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Oportunidades_max_fields']: {
    __typename: 'comercial_Servicos_Oportunidades_max_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Servico_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_max_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Oportunidades_min_fields']: {
    __typename: 'comercial_Servicos_Oportunidades_min_fields';
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Servico_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_min_order_by']: {
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_mutation_response']: {
    __typename: 'comercial_Servicos_Oportunidades_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Servicos_Oportunidades']>;
  };
  /** input type for inserting object relation for remote table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Servicos_Oportunidades_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Servicos_Oportunidades_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_on_conflict']: {
    constraint: GraphQLTypes['comercial_Servicos_Oportunidades_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Servicos_Oportunidades_update_column']
    >;
    where?: GraphQLTypes['comercial_Servicos_Oportunidades_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Servicos_Oportunidades". */
  ['comercial_Servicos_Oportunidades_order_by']: {
    Combo?: GraphQLTypes['comercial_Combos_order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    OportunidadesDePropostas_aggregate?: GraphQLTypes['propostas_Propostas_Oportunidades_aggregate_order_by'];
    Servico?: GraphQLTypes['comercial_Servicos_order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Servicos_Oportunidades */
  ['comercial_Servicos_Oportunidades_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_select_column']: comercial_Servicos_Oportunidades_select_column;
  /** input type for updating data in table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_set_input']: {
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Servico_Id?: GraphQLTypes['uuid'];
    Valor?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['comercial_Servicos_Oportunidades_stddev_fields']: {
    __typename: 'comercial_Servicos_Oportunidades_stddev_fields';
    Valor?: number;
  };
  /** order by stddev() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_stddev_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['comercial_Servicos_Oportunidades_stddev_pop_fields']: {
    __typename: 'comercial_Servicos_Oportunidades_stddev_pop_fields';
    Valor?: number;
  };
  /** order by stddev_pop() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_stddev_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['comercial_Servicos_Oportunidades_stddev_samp_fields']: {
    __typename: 'comercial_Servicos_Oportunidades_stddev_samp_fields';
    Valor?: number;
  };
  /** order by stddev_samp() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_stddev_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['comercial_Servicos_Oportunidades_sum_fields']: {
    __typename: 'comercial_Servicos_Oportunidades_sum_fields';
    Valor?: GraphQLTypes['float8'];
  };
  /** order by sum() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_sum_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** update columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_update_column']: comercial_Servicos_Oportunidades_update_column;
  /** aggregate var_pop on columns */
  ['comercial_Servicos_Oportunidades_var_pop_fields']: {
    __typename: 'comercial_Servicos_Oportunidades_var_pop_fields';
    Valor?: number;
  };
  /** order by var_pop() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_var_pop_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['comercial_Servicos_Oportunidades_var_samp_fields']: {
    __typename: 'comercial_Servicos_Oportunidades_var_samp_fields';
    Valor?: number;
  };
  /** order by var_samp() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_var_samp_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['comercial_Servicos_Oportunidades_variance_fields']: {
    __typename: 'comercial_Servicos_Oportunidades_variance_fields';
    Valor?: number;
  };
  /** order by variance() on columns of table "comercial.Servicos_Oportunidades" */
  ['comercial_Servicos_Oportunidades_variance_order_by']: {
    Valor?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos']: {
    __typename: 'comercial_Servicos_Produtos';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Produto: GraphQLTypes['comercial_Produtos'];
    Produto_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Servico: GraphQLTypes['comercial_Servicos'];
    Servico_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_aggregate']: {
    __typename: 'comercial_Servicos_Produtos_aggregate';
    aggregate?: GraphQLTypes['comercial_Servicos_Produtos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Servicos_Produtos']>;
  };
  /** aggregate fields of "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_aggregate_fields']: {
    __typename: 'comercial_Servicos_Produtos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Servicos_Produtos_max_fields'];
    min?: GraphQLTypes['comercial_Servicos_Produtos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Servicos_Produtos_max_order_by'];
    min?: GraphQLTypes['comercial_Servicos_Produtos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Servicos_Produtos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Servicos_Produtos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Produtos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Produtos_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Produto?: GraphQLTypes['comercial_Produtos_bool_exp'];
    Produto_Id?: GraphQLTypes['uuid_comparison_exp'];
    Servico?: GraphQLTypes['comercial_Servicos_bool_exp'];
    Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Servicos_Produtos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Servicos_Produtos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Servicos_Produtos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_constraint']: comercial_Servicos_Produtos_constraint;
  /** input type for inserting data into table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Produto?: GraphQLTypes['comercial_Produtos_obj_rel_insert_input'];
    Produto_Id?: GraphQLTypes['uuid'];
    Servico?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Produtos_max_fields']: {
    __typename: 'comercial_Servicos_Produtos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Produtos_min_fields']: {
    __typename: 'comercial_Servicos_Produtos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_mutation_response']: {
    __typename: 'comercial_Servicos_Produtos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Servicos_Produtos']>;
  };
  /** on conflict condition type for table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Servicos_Produtos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Servicos_Produtos_update_column']
    >;
    where?: GraphQLTypes['comercial_Servicos_Produtos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Servicos_Produtos". */
  ['comercial_Servicos_Produtos_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Produto?: GraphQLTypes['comercial_Produtos_order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Servico?: GraphQLTypes['comercial_Servicos_order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Servicos_Produtos */
  ['comercial_Servicos_Produtos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_select_column']: comercial_Servicos_Produtos_select_column;
  /** input type for updating data in table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Servicos_Produtos" */
  ['comercial_Servicos_Produtos_update_column']: comercial_Servicos_Produtos_update_column;
  /** columns and relationships of "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos']: {
    __typename: 'comercial_Servicos_Servicos';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Servico: GraphQLTypes['comercial_Servicos'];
    /** An object relationship */
    ServicoDependente: GraphQLTypes['comercial_Servicos'];
    ServicoDependente_Id: GraphQLTypes['uuid'];
    Servico_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_aggregate']: {
    __typename: 'comercial_Servicos_Servicos_aggregate';
    aggregate?: GraphQLTypes['comercial_Servicos_Servicos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Servicos_Servicos']>;
  };
  /** aggregate fields of "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_aggregate_fields']: {
    __typename: 'comercial_Servicos_Servicos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Servicos_Servicos_max_fields'];
    min?: GraphQLTypes['comercial_Servicos_Servicos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Servicos_Servicos_max_order_by'];
    min?: GraphQLTypes['comercial_Servicos_Servicos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Servicos_Servicos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Servicos_Servicos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Servicos_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Servico?: GraphQLTypes['comercial_Servicos_bool_exp'];
    ServicoDependente?: GraphQLTypes['comercial_Servicos_bool_exp'];
    ServicoDependente_Id?: GraphQLTypes['uuid_comparison_exp'];
    Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Servicos_Servicos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Servicos_Servicos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Servicos_Servicos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_constraint']: comercial_Servicos_Servicos_constraint;
  /** input type for inserting data into table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Servico?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    ServicoDependente?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    ServicoDependente_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Servicos_max_fields']: {
    __typename: 'comercial_Servicos_Servicos_max_fields';
    Id?: GraphQLTypes['uuid'];
    ServicoDependente_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    ServicoDependente_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Servicos_min_fields']: {
    __typename: 'comercial_Servicos_Servicos_min_fields';
    Id?: GraphQLTypes['uuid'];
    ServicoDependente_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    ServicoDependente_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_mutation_response']: {
    __typename: 'comercial_Servicos_Servicos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Servicos_Servicos']>;
  };
  /** on conflict condition type for table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Servicos_Servicos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Servicos_Servicos_update_column']
    >;
    where?: GraphQLTypes['comercial_Servicos_Servicos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Servicos_Servicos". */
  ['comercial_Servicos_Servicos_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Servico?: GraphQLTypes['comercial_Servicos_order_by'];
    ServicoDependente?: GraphQLTypes['comercial_Servicos_order_by'];
    ServicoDependente_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Servicos_Servicos */
  ['comercial_Servicos_Servicos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_select_column']: comercial_Servicos_Servicos_select_column;
  /** input type for updating data in table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    ServicoDependente_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Servicos_Servicos" */
  ['comercial_Servicos_Servicos_update_column']: comercial_Servicos_Servicos_update_column;
  /** columns and relationships of "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas']: {
    __typename: 'comercial_Servicos_Tarifas';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Servico: GraphQLTypes['comercial_Servicos'];
    Servico_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Tarifa: GraphQLTypes['comercial_Tarifas'];
    Tarifa_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_aggregate']: {
    __typename: 'comercial_Servicos_Tarifas_aggregate';
    aggregate?: GraphQLTypes['comercial_Servicos_Tarifas_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Servicos_Tarifas']>;
  };
  /** aggregate fields of "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_aggregate_fields']: {
    __typename: 'comercial_Servicos_Tarifas_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Servicos_Tarifas_max_fields'];
    min?: GraphQLTypes['comercial_Servicos_Tarifas_min_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Servicos_Tarifas_max_order_by'];
    min?: GraphQLTypes['comercial_Servicos_Tarifas_min_order_by'];
  };
  /** input type for inserting array relation for remote table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Servicos_Tarifas_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Servicos_Tarifas_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Tarifas". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Tarifas_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Servico?: GraphQLTypes['comercial_Servicos_bool_exp'];
    Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    Tarifa?: GraphQLTypes['comercial_Tarifas_bool_exp'];
    Tarifa_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Servicos_Tarifas_bool_exp']>;
    _not?: GraphQLTypes['comercial_Servicos_Tarifas_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Servicos_Tarifas_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_constraint']: comercial_Servicos_Tarifas_constraint;
  /** input type for inserting data into table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Servico?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    Servico_Id?: GraphQLTypes['uuid'];
    Tarifa?: GraphQLTypes['comercial_Tarifas_obj_rel_insert_input'];
    Tarifa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Tarifas_max_fields']: {
    __typename: 'comercial_Servicos_Tarifas_max_fields';
    Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    Tarifa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    Tarifa_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Tarifas_min_fields']: {
    __typename: 'comercial_Servicos_Tarifas_min_fields';
    Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    Tarifa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    Tarifa_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_mutation_response']: {
    __typename: 'comercial_Servicos_Tarifas_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Servicos_Tarifas']>;
  };
  /** on conflict condition type for table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_on_conflict']: {
    constraint: GraphQLTypes['comercial_Servicos_Tarifas_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Servicos_Tarifas_update_column']
    >;
    where?: GraphQLTypes['comercial_Servicos_Tarifas_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Servicos_Tarifas". */
  ['comercial_Servicos_Tarifas_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Servico?: GraphQLTypes['comercial_Servicos_order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    Tarifa?: GraphQLTypes['comercial_Tarifas_order_by'];
    Tarifa_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Servicos_Tarifas */
  ['comercial_Servicos_Tarifas_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_select_column']: comercial_Servicos_Tarifas_select_column;
  /** input type for updating data in table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    Tarifa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Servicos_Tarifas" */
  ['comercial_Servicos_Tarifas_update_column']: comercial_Servicos_Tarifas_update_column;
  /** columns and relationships of "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos']: {
    __typename: 'comercial_Servicos_Tipos';
    Comentario: string;
    /** An array relationship */
    Servicos: Array<GraphQLTypes['comercial_Servicos']>;
    /** An aggregate relationship */
    Servicos_aggregate: GraphQLTypes['comercial_Servicos_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_aggregate']: {
    __typename: 'comercial_Servicos_Tipos_aggregate';
    aggregate?: GraphQLTypes['comercial_Servicos_Tipos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Servicos_Tipos']>;
  };
  /** aggregate fields of "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_aggregate_fields']: {
    __typename: 'comercial_Servicos_Tipos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Servicos_Tipos_max_fields'];
    min?: GraphQLTypes['comercial_Servicos_Tipos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos_Tipos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_Tipos_bool_exp']: {
    Comentario?: GraphQLTypes['String_comparison_exp'];
    Servicos?: GraphQLTypes['comercial_Servicos_bool_exp'];
    Valor?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Servicos_Tipos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Servicos_Tipos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Servicos_Tipos_bool_exp']>;
  };
  /** unique or primary key constraints on table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_constraint']: comercial_Servicos_Tipos_constraint;
  ['comercial_Servicos_Tipos_enum']: comercial_Servicos_Tipos_enum;
  /** Boolean expression to compare columns of type "comercial_Servicos_Tipos_enum". All fields are combined with logical 'AND'. */
  ['comercial_Servicos_Tipos_enum_comparison_exp']: {
    _eq?: GraphQLTypes['comercial_Servicos_Tipos_enum'];
    _in?: Array<GraphQLTypes['comercial_Servicos_Tipos_enum']>;
    _is_null?: boolean;
    _neq?: GraphQLTypes['comercial_Servicos_Tipos_enum'];
    _nin?: Array<GraphQLTypes['comercial_Servicos_Tipos_enum']>;
  };
  /** input type for inserting data into table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_insert_input']: {
    Comentario?: string;
    Servicos?: GraphQLTypes['comercial_Servicos_arr_rel_insert_input'];
    Valor?: string;
  };
  /** aggregate max on columns */
  ['comercial_Servicos_Tipos_max_fields']: {
    __typename: 'comercial_Servicos_Tipos_max_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['comercial_Servicos_Tipos_min_fields']: {
    __typename: 'comercial_Servicos_Tipos_min_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_mutation_response']: {
    __typename: 'comercial_Servicos_Tipos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Servicos_Tipos']>;
  };
  /** input type for inserting object relation for remote table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Servicos_Tipos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Servicos_Tipos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Servicos_Tipos_constraint'];
    update_columns: Array<
      GraphQLTypes['comercial_Servicos_Tipos_update_column']
    >;
    where?: GraphQLTypes['comercial_Servicos_Tipos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Servicos_Tipos". */
  ['comercial_Servicos_Tipos_order_by']: {
    Comentario?: GraphQLTypes['order_by'];
    Servicos_aggregate?: GraphQLTypes['comercial_Servicos_aggregate_order_by'];
    Valor?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Servicos_Tipos */
  ['comercial_Servicos_Tipos_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_select_column']: comercial_Servicos_Tipos_select_column;
  /** input type for updating data in table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_set_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** update columns of table "comercial.Servicos_Tipos" */
  ['comercial_Servicos_Tipos_update_column']: comercial_Servicos_Tipos_update_column;
  /** aggregated selection of "comercial.Servicos" */
  ['comercial_Servicos_aggregate']: {
    __typename: 'comercial_Servicos_aggregate';
    aggregate?: GraphQLTypes['comercial_Servicos_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Servicos']>;
  };
  /** aggregate fields of "comercial.Servicos" */
  ['comercial_Servicos_aggregate_fields']: {
    __typename: 'comercial_Servicos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Servicos_max_fields'];
    min?: GraphQLTypes['comercial_Servicos_min_fields'];
  };
  /** order by aggregate values of table "comercial.Servicos" */
  ['comercial_Servicos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['comercial_Servicos_max_order_by'];
    min?: GraphQLTypes['comercial_Servicos_min_order_by'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Servicos_append_input']: {
    Categorias?: GraphQLTypes['jsonb'];
  };
  /** input type for inserting array relation for remote table "comercial.Servicos" */
  ['comercial_Servicos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['comercial_Servicos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Servicos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "comercial.Servicos". All fields are combined with a logical 'AND'. */
  ['comercial_Servicos_bool_exp']: {
    Atributos?: GraphQLTypes['comercial_Servicos_Atributos_bool_exp'];
    Categorias?: GraphQLTypes['jsonb_comparison_exp'];
    Combos?: GraphQLTypes['comercial_Combos_Servicos_bool_exp'];
    GeraOS?: GraphQLTypes['Boolean_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Oportunidades?: GraphQLTypes['comercial_Servicos_Oportunidades_bool_exp'];
    Planos?: GraphQLTypes['comercial_Planos_bool_exp'];
    PrestadoresDeServicos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_bool_exp'];
    Produtos_Servicos?: GraphQLTypes['comercial_Produtos_Servicos_bool_exp'];
    Propostas?: GraphQLTypes['propostas_Propostas_Servicos_bool_exp'];
    Servicos_Produtos?: GraphQLTypes['comercial_Servicos_Produtos_bool_exp'];
    Servicos_ServicosDependente?: GraphQLTypes['comercial_Servicos_Servicos_bool_exp'];
    Tarifas?: GraphQLTypes['comercial_Servicos_Tarifas_bool_exp'];
    Tipo?: GraphQLTypes['comercial_Servicos_Tipos_bool_exp'];
    Tipo_Id?: GraphQLTypes['comercial_Servicos_Tipos_enum_comparison_exp'];
    _and?: Array<GraphQLTypes['comercial_Servicos_bool_exp']>;
    _not?: GraphQLTypes['comercial_Servicos_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Servicos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    servicosServicos?: GraphQLTypes['comercial_Servicos_Servicos_bool_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Servicos" */
  ['comercial_Servicos_constraint']: comercial_Servicos_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['comercial_Servicos_delete_at_path_input']: {
    Categorias?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['comercial_Servicos_delete_elem_input']: {
    Categorias?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['comercial_Servicos_delete_key_input']: {
    Categorias?: string;
  };
  /** input type for inserting data into table "comercial.Servicos" */
  ['comercial_Servicos_insert_input']: {
    Atributos?: GraphQLTypes['comercial_Servicos_Atributos_arr_rel_insert_input'];
    Categorias?: GraphQLTypes['jsonb'];
    Combos?: GraphQLTypes['comercial_Combos_Servicos_arr_rel_insert_input'];
    GeraOS?: boolean;
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Oportunidades?: GraphQLTypes['comercial_Servicos_Oportunidades_arr_rel_insert_input'];
    Planos?: GraphQLTypes['comercial_Planos_arr_rel_insert_input'];
    PrestadoresDeServicos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_arr_rel_insert_input'];
    Produtos_Servicos?: GraphQLTypes['comercial_Produtos_Servicos_arr_rel_insert_input'];
    Propostas?: GraphQLTypes['propostas_Propostas_Servicos_arr_rel_insert_input'];
    Servicos_Produtos?: GraphQLTypes['comercial_Servicos_Produtos_arr_rel_insert_input'];
    Servicos_ServicosDependente?: GraphQLTypes['comercial_Servicos_Servicos_arr_rel_insert_input'];
    Tarifas?: GraphQLTypes['comercial_Servicos_Tarifas_arr_rel_insert_input'];
    Tipo?: GraphQLTypes['comercial_Servicos_Tipos_obj_rel_insert_input'];
    Tipo_Id?: GraphQLTypes['comercial_Servicos_Tipos_enum'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    servicosServicos?: GraphQLTypes['comercial_Servicos_Servicos_arr_rel_insert_input'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Servicos_max_fields']: {
    __typename: 'comercial_Servicos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "comercial.Servicos" */
  ['comercial_Servicos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['comercial_Servicos_min_fields']: {
    __typename: 'comercial_Servicos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "comercial.Servicos" */
  ['comercial_Servicos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "comercial.Servicos" */
  ['comercial_Servicos_mutation_response']: {
    __typename: 'comercial_Servicos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Servicos']>;
  };
  /** input type for inserting object relation for remote table "comercial.Servicos" */
  ['comercial_Servicos_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Servicos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Servicos_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Servicos" */
  ['comercial_Servicos_on_conflict']: {
    constraint: GraphQLTypes['comercial_Servicos_constraint'];
    update_columns: Array<GraphQLTypes['comercial_Servicos_update_column']>;
    where?: GraphQLTypes['comercial_Servicos_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Servicos". */
  ['comercial_Servicos_order_by']: {
    Atributos_aggregate?: GraphQLTypes['comercial_Servicos_Atributos_aggregate_order_by'];
    Categorias?: GraphQLTypes['order_by'];
    Combos_aggregate?: GraphQLTypes['comercial_Combos_Servicos_aggregate_order_by'];
    GeraOS?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Oportunidades_aggregate?: GraphQLTypes['comercial_Servicos_Oportunidades_aggregate_order_by'];
    Planos_aggregate?: GraphQLTypes['comercial_Planos_aggregate_order_by'];
    PrestadoresDeServicos_aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_aggregate_order_by'];
    Produtos_Servicos_aggregate?: GraphQLTypes['comercial_Produtos_Servicos_aggregate_order_by'];
    Propostas_aggregate?: GraphQLTypes['propostas_Propostas_Servicos_aggregate_order_by'];
    Servicos_Produtos_aggregate?: GraphQLTypes['comercial_Servicos_Produtos_aggregate_order_by'];
    Servicos_ServicosDependente_aggregate?: GraphQLTypes['comercial_Servicos_Servicos_aggregate_order_by'];
    Tarifas_aggregate?: GraphQLTypes['comercial_Servicos_Tarifas_aggregate_order_by'];
    Tipo?: GraphQLTypes['comercial_Servicos_Tipos_order_by'];
    Tipo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    servicosServicos_aggregate?: GraphQLTypes['comercial_Servicos_Servicos_aggregate_order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Servicos */
  ['comercial_Servicos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['comercial_Servicos_prepend_input']: {
    Categorias?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "comercial.Servicos" */
  ['comercial_Servicos_select_column']: comercial_Servicos_select_column;
  /** input type for updating data in table "comercial.Servicos" */
  ['comercial_Servicos_set_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    GeraOS?: boolean;
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Tipo_Id?: GraphQLTypes['comercial_Servicos_Tipos_enum'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Servicos" */
  ['comercial_Servicos_update_column']: comercial_Servicos_update_column;
  /** columns and relationships of "comercial.Tarifas" */
  ['comercial_Tarifas']: {
    __typename: 'comercial_Tarifas';
    /** An array relationship */
    Fornecedores_Servicos: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    >;
    /** An aggregate relationship */
    Fornecedores_Servicos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate'];
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Servicos: Array<GraphQLTypes['comercial_Servicos_Tarifas']>;
    /** An aggregate relationship */
    Servicos_aggregate: GraphQLTypes['comercial_Servicos_Tarifas_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "comercial.Tarifas" */
  ['comercial_Tarifas_aggregate']: {
    __typename: 'comercial_Tarifas_aggregate';
    aggregate?: GraphQLTypes['comercial_Tarifas_aggregate_fields'];
    nodes: Array<GraphQLTypes['comercial_Tarifas']>;
  };
  /** aggregate fields of "comercial.Tarifas" */
  ['comercial_Tarifas_aggregate_fields']: {
    __typename: 'comercial_Tarifas_aggregate_fields';
    count: number;
    max?: GraphQLTypes['comercial_Tarifas_max_fields'];
    min?: GraphQLTypes['comercial_Tarifas_min_fields'];
  };
  /** Boolean expression to filter rows from the table "comercial.Tarifas". All fields are combined with a logical 'AND'. */
  ['comercial_Tarifas_bool_exp']: {
    Fornecedores_Servicos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_bool_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Servicos?: GraphQLTypes['comercial_Servicos_Tarifas_bool_exp'];
    _and?: Array<GraphQLTypes['comercial_Tarifas_bool_exp']>;
    _not?: GraphQLTypes['comercial_Tarifas_bool_exp'];
    _or?: Array<GraphQLTypes['comercial_Tarifas_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "comercial.Tarifas" */
  ['comercial_Tarifas_constraint']: comercial_Tarifas_constraint;
  /** input type for inserting data into table "comercial.Tarifas" */
  ['comercial_Tarifas_insert_input']: {
    Fornecedores_Servicos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_arr_rel_insert_input'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Servicos?: GraphQLTypes['comercial_Servicos_Tarifas_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['comercial_Tarifas_max_fields']: {
    __typename: 'comercial_Tarifas_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['comercial_Tarifas_min_fields']: {
    __typename: 'comercial_Tarifas_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "comercial.Tarifas" */
  ['comercial_Tarifas_mutation_response']: {
    __typename: 'comercial_Tarifas_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['comercial_Tarifas']>;
  };
  /** input type for inserting object relation for remote table "comercial.Tarifas" */
  ['comercial_Tarifas_obj_rel_insert_input']: {
    data: GraphQLTypes['comercial_Tarifas_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['comercial_Tarifas_on_conflict'];
  };
  /** on conflict condition type for table "comercial.Tarifas" */
  ['comercial_Tarifas_on_conflict']: {
    constraint: GraphQLTypes['comercial_Tarifas_constraint'];
    update_columns: Array<GraphQLTypes['comercial_Tarifas_update_column']>;
    where?: GraphQLTypes['comercial_Tarifas_bool_exp'];
  };
  /** Ordering options when selecting data from "comercial.Tarifas". */
  ['comercial_Tarifas_order_by']: {
    Fornecedores_Servicos_aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate_order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Servicos_aggregate?: GraphQLTypes['comercial_Servicos_Tarifas_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: comercial_Tarifas */
  ['comercial_Tarifas_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "comercial.Tarifas" */
  ['comercial_Tarifas_select_column']: comercial_Tarifas_select_column;
  /** input type for updating data in table "comercial.Tarifas" */
  ['comercial_Tarifas_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "comercial.Tarifas" */
  ['comercial_Tarifas_update_column']: comercial_Tarifas_update_column;
  /** columns and relationships of "contatos.Emails" */
  ['contatos_Emails']: {
    __typename: 'contatos_Emails';
    Categorias: GraphQLTypes['jsonb'];
    Email: string;
    Id: GraphQLTypes['uuid'];
    Identidades: GraphQLTypes['jsonb'];
    NomeDoResponsavel?: string;
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "contatos.Emails" */
  ['contatos_Emails_aggregate']: {
    __typename: 'contatos_Emails_aggregate';
    aggregate?: GraphQLTypes['contatos_Emails_aggregate_fields'];
    nodes: Array<GraphQLTypes['contatos_Emails']>;
  };
  /** aggregate fields of "contatos.Emails" */
  ['contatos_Emails_aggregate_fields']: {
    __typename: 'contatos_Emails_aggregate_fields';
    count: number;
    max?: GraphQLTypes['contatos_Emails_max_fields'];
    min?: GraphQLTypes['contatos_Emails_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Emails_append_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    Identidades?: GraphQLTypes['jsonb'];
  };
  /** Boolean expression to filter rows from the table "contatos.Emails". All fields are combined with a logical 'AND'. */
  ['contatos_Emails_bool_exp']: {
    Categorias?: GraphQLTypes['jsonb_comparison_exp'];
    Email?: GraphQLTypes['String_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Identidades?: GraphQLTypes['jsonb_comparison_exp'];
    NomeDoResponsavel?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['contatos_Emails_bool_exp']>;
    _not?: GraphQLTypes['contatos_Emails_bool_exp'];
    _or?: Array<GraphQLTypes['contatos_Emails_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "contatos.Emails" */
  ['contatos_Emails_constraint']: contatos_Emails_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Emails_delete_at_path_input']: {
    Categorias?: Array<string>;
    Identidades?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Emails_delete_elem_input']: {
    Categorias?: number;
    Identidades?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Emails_delete_key_input']: {
    Categorias?: string;
    Identidades?: string;
  };
  /** input type for inserting data into table "contatos.Emails" */
  ['contatos_Emails_insert_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    Identidades?: GraphQLTypes['jsonb'];
    NomeDoResponsavel?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['contatos_Emails_max_fields']: {
    __typename: 'contatos_Emails_max_fields';
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    NomeDoResponsavel?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['contatos_Emails_min_fields']: {
    __typename: 'contatos_Emails_min_fields';
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    NomeDoResponsavel?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "contatos.Emails" */
  ['contatos_Emails_mutation_response']: {
    __typename: 'contatos_Emails_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['contatos_Emails']>;
  };
  /** on conflict condition type for table "contatos.Emails" */
  ['contatos_Emails_on_conflict']: {
    constraint: GraphQLTypes['contatos_Emails_constraint'];
    update_columns: Array<GraphQLTypes['contatos_Emails_update_column']>;
    where?: GraphQLTypes['contatos_Emails_bool_exp'];
  };
  /** Ordering options when selecting data from "contatos.Emails". */
  ['contatos_Emails_order_by']: {
    Categorias?: GraphQLTypes['order_by'];
    Email?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Identidades?: GraphQLTypes['order_by'];
    NomeDoResponsavel?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: contatos_Emails */
  ['contatos_Emails_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Emails_prepend_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    Identidades?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "contatos.Emails" */
  ['contatos_Emails_select_column']: contatos_Emails_select_column;
  /** input type for updating data in table "contatos.Emails" */
  ['contatos_Emails_set_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    Email?: string;
    Id?: GraphQLTypes['uuid'];
    Identidades?: GraphQLTypes['jsonb'];
    NomeDoResponsavel?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "contatos.Emails" */
  ['contatos_Emails_update_column']: contatos_Emails_update_column;
  /** columns and relationships of "contatos.Enderecos" */
  ['contatos_Enderecos']: {
    __typename: 'contatos_Enderecos';
    Bairro: string;
    Categorias: GraphQLTypes['jsonb'];
    Cep?: string;
    /** An object relationship */
    Cidade: GraphQLTypes['EstadosEMunicipios'];
    Cidade_Id: GraphQLTypes['uuid'];
    Complemento?: string;
    /** An object relationship */
    Estado: GraphQLTypes['EstadosEMunicipios'];
    Estado_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    Identidades: GraphQLTypes['jsonb'];
    Logradouro: string;
    Numero?: string;
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "contatos.Enderecos" */
  ['contatos_Enderecos_aggregate']: {
    __typename: 'contatos_Enderecos_aggregate';
    aggregate?: GraphQLTypes['contatos_Enderecos_aggregate_fields'];
    nodes: Array<GraphQLTypes['contatos_Enderecos']>;
  };
  /** aggregate fields of "contatos.Enderecos" */
  ['contatos_Enderecos_aggregate_fields']: {
    __typename: 'contatos_Enderecos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['contatos_Enderecos_max_fields'];
    min?: GraphQLTypes['contatos_Enderecos_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Enderecos_append_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    Identidades?: GraphQLTypes['jsonb'];
  };
  /** Boolean expression to filter rows from the table "contatos.Enderecos". All fields are combined with a logical 'AND'. */
  ['contatos_Enderecos_bool_exp']: {
    Bairro?: GraphQLTypes['String_comparison_exp'];
    Categorias?: GraphQLTypes['jsonb_comparison_exp'];
    Cep?: GraphQLTypes['String_comparison_exp'];
    Cidade?: GraphQLTypes['EstadosEMunicipios_bool_exp'];
    Cidade_Id?: GraphQLTypes['uuid_comparison_exp'];
    Complemento?: GraphQLTypes['String_comparison_exp'];
    Estado?: GraphQLTypes['EstadosEMunicipios_bool_exp'];
    Estado_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Identidades?: GraphQLTypes['jsonb_comparison_exp'];
    Logradouro?: GraphQLTypes['String_comparison_exp'];
    Numero?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['contatos_Enderecos_bool_exp']>;
    _not?: GraphQLTypes['contatos_Enderecos_bool_exp'];
    _or?: Array<GraphQLTypes['contatos_Enderecos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "contatos.Enderecos" */
  ['contatos_Enderecos_constraint']: contatos_Enderecos_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Enderecos_delete_at_path_input']: {
    Categorias?: Array<string>;
    Identidades?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Enderecos_delete_elem_input']: {
    Categorias?: number;
    Identidades?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Enderecos_delete_key_input']: {
    Categorias?: string;
    Identidades?: string;
  };
  /** input type for inserting data into table "contatos.Enderecos" */
  ['contatos_Enderecos_insert_input']: {
    Bairro?: string;
    Categorias?: GraphQLTypes['jsonb'];
    Cep?: string;
    Cidade?: GraphQLTypes['EstadosEMunicipios_obj_rel_insert_input'];
    Cidade_Id?: GraphQLTypes['uuid'];
    Complemento?: string;
    Estado?: GraphQLTypes['EstadosEMunicipios_obj_rel_insert_input'];
    Estado_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Identidades?: GraphQLTypes['jsonb'];
    Logradouro?: string;
    Numero?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['contatos_Enderecos_max_fields']: {
    __typename: 'contatos_Enderecos_max_fields';
    Bairro?: string;
    Cep?: string;
    Cidade_Id?: GraphQLTypes['uuid'];
    Complemento?: string;
    Estado_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Logradouro?: string;
    Numero?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['contatos_Enderecos_min_fields']: {
    __typename: 'contatos_Enderecos_min_fields';
    Bairro?: string;
    Cep?: string;
    Cidade_Id?: GraphQLTypes['uuid'];
    Complemento?: string;
    Estado_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Logradouro?: string;
    Numero?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "contatos.Enderecos" */
  ['contatos_Enderecos_mutation_response']: {
    __typename: 'contatos_Enderecos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['contatos_Enderecos']>;
  };
  /** on conflict condition type for table "contatos.Enderecos" */
  ['contatos_Enderecos_on_conflict']: {
    constraint: GraphQLTypes['contatos_Enderecos_constraint'];
    update_columns: Array<GraphQLTypes['contatos_Enderecos_update_column']>;
    where?: GraphQLTypes['contatos_Enderecos_bool_exp'];
  };
  /** Ordering options when selecting data from "contatos.Enderecos". */
  ['contatos_Enderecos_order_by']: {
    Bairro?: GraphQLTypes['order_by'];
    Categorias?: GraphQLTypes['order_by'];
    Cep?: GraphQLTypes['order_by'];
    Cidade?: GraphQLTypes['EstadosEMunicipios_order_by'];
    Cidade_Id?: GraphQLTypes['order_by'];
    Complemento?: GraphQLTypes['order_by'];
    Estado?: GraphQLTypes['EstadosEMunicipios_order_by'];
    Estado_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Identidades?: GraphQLTypes['order_by'];
    Logradouro?: GraphQLTypes['order_by'];
    Numero?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: contatos_Enderecos */
  ['contatos_Enderecos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Enderecos_prepend_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    Identidades?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "contatos.Enderecos" */
  ['contatos_Enderecos_select_column']: contatos_Enderecos_select_column;
  /** input type for updating data in table "contatos.Enderecos" */
  ['contatos_Enderecos_set_input']: {
    Bairro?: string;
    Categorias?: GraphQLTypes['jsonb'];
    Cep?: string;
    Cidade_Id?: GraphQLTypes['uuid'];
    Complemento?: string;
    Estado_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Identidades?: GraphQLTypes['jsonb'];
    Logradouro?: string;
    Numero?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "contatos.Enderecos" */
  ['contatos_Enderecos_update_column']: contatos_Enderecos_update_column;
  /** columns and relationships of "contatos.Logs" */
  ['contatos_Logs']: {
    __typename: 'contatos_Logs';
    DadosAntigos: GraphQLTypes['jsonb'];
    DadosNovos: GraphQLTypes['jsonb'];
    Id: GraphQLTypes['uuid'];
    Operacao: string;
    Tipo: string;
    Tipo_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "contatos.Logs" */
  ['contatos_Logs_aggregate']: {
    __typename: 'contatos_Logs_aggregate';
    aggregate?: GraphQLTypes['contatos_Logs_aggregate_fields'];
    nodes: Array<GraphQLTypes['contatos_Logs']>;
  };
  /** aggregate fields of "contatos.Logs" */
  ['contatos_Logs_aggregate_fields']: {
    __typename: 'contatos_Logs_aggregate_fields';
    count: number;
    max?: GraphQLTypes['contatos_Logs_max_fields'];
    min?: GraphQLTypes['contatos_Logs_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Logs_append_input']: {
    DadosAntigos?: GraphQLTypes['jsonb'];
    DadosNovos?: GraphQLTypes['jsonb'];
  };
  /** Boolean expression to filter rows from the table "contatos.Logs". All fields are combined with a logical 'AND'. */
  ['contatos_Logs_bool_exp']: {
    DadosAntigos?: GraphQLTypes['jsonb_comparison_exp'];
    DadosNovos?: GraphQLTypes['jsonb_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Operacao?: GraphQLTypes['String_comparison_exp'];
    Tipo?: GraphQLTypes['String_comparison_exp'];
    Tipo_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['contatos_Logs_bool_exp']>;
    _not?: GraphQLTypes['contatos_Logs_bool_exp'];
    _or?: Array<GraphQLTypes['contatos_Logs_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "contatos.Logs" */
  ['contatos_Logs_constraint']: contatos_Logs_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Logs_delete_at_path_input']: {
    DadosAntigos?: Array<string>;
    DadosNovos?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Logs_delete_elem_input']: {
    DadosAntigos?: number;
    DadosNovos?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Logs_delete_key_input']: {
    DadosAntigos?: string;
    DadosNovos?: string;
  };
  /** input type for inserting data into table "contatos.Logs" */
  ['contatos_Logs_insert_input']: {
    DadosAntigos?: GraphQLTypes['jsonb'];
    DadosNovos?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['contatos_Logs_max_fields']: {
    __typename: 'contatos_Logs_max_fields';
    Id?: GraphQLTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['contatos_Logs_min_fields']: {
    __typename: 'contatos_Logs_min_fields';
    Id?: GraphQLTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "contatos.Logs" */
  ['contatos_Logs_mutation_response']: {
    __typename: 'contatos_Logs_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['contatos_Logs']>;
  };
  /** on conflict condition type for table "contatos.Logs" */
  ['contatos_Logs_on_conflict']: {
    constraint: GraphQLTypes['contatos_Logs_constraint'];
    update_columns: Array<GraphQLTypes['contatos_Logs_update_column']>;
    where?: GraphQLTypes['contatos_Logs_bool_exp'];
  };
  /** Ordering options when selecting data from "contatos.Logs". */
  ['contatos_Logs_order_by']: {
    DadosAntigos?: GraphQLTypes['order_by'];
    DadosNovos?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Operacao?: GraphQLTypes['order_by'];
    Tipo?: GraphQLTypes['order_by'];
    Tipo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: contatos_Logs */
  ['contatos_Logs_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Logs_prepend_input']: {
    DadosAntigos?: GraphQLTypes['jsonb'];
    DadosNovos?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "contatos.Logs" */
  ['contatos_Logs_select_column']: contatos_Logs_select_column;
  /** input type for updating data in table "contatos.Logs" */
  ['contatos_Logs_set_input']: {
    DadosAntigos?: GraphQLTypes['jsonb'];
    DadosNovos?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "contatos.Logs" */
  ['contatos_Logs_update_column']: contatos_Logs_update_column;
  /** columns and relationships of "contatos.Telefones" */
  ['contatos_Telefones']: {
    __typename: 'contatos_Telefones';
    Categorias: GraphQLTypes['jsonb'];
    Id: GraphQLTypes['uuid'];
    Identidades: GraphQLTypes['jsonb'];
    NomeDoResponsavel?: string;
    Telefone: GraphQLTypes['bigint'];
    Tipos: GraphQLTypes['jsonb'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "contatos.Telefones" */
  ['contatos_Telefones_aggregate']: {
    __typename: 'contatos_Telefones_aggregate';
    aggregate?: GraphQLTypes['contatos_Telefones_aggregate_fields'];
    nodes: Array<GraphQLTypes['contatos_Telefones']>;
  };
  /** aggregate fields of "contatos.Telefones" */
  ['contatos_Telefones_aggregate_fields']: {
    __typename: 'contatos_Telefones_aggregate_fields';
    avg?: GraphQLTypes['contatos_Telefones_avg_fields'];
    count: number;
    max?: GraphQLTypes['contatos_Telefones_max_fields'];
    min?: GraphQLTypes['contatos_Telefones_min_fields'];
    stddev?: GraphQLTypes['contatos_Telefones_stddev_fields'];
    stddev_pop?: GraphQLTypes['contatos_Telefones_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['contatos_Telefones_stddev_samp_fields'];
    sum?: GraphQLTypes['contatos_Telefones_sum_fields'];
    var_pop?: GraphQLTypes['contatos_Telefones_var_pop_fields'];
    var_samp?: GraphQLTypes['contatos_Telefones_var_samp_fields'];
    variance?: GraphQLTypes['contatos_Telefones_variance_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Telefones_append_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    Identidades?: GraphQLTypes['jsonb'];
    Tipos?: GraphQLTypes['jsonb'];
  };
  /** aggregate avg on columns */
  ['contatos_Telefones_avg_fields']: {
    __typename: 'contatos_Telefones_avg_fields';
    Telefone?: number;
  };
  /** Boolean expression to filter rows from the table "contatos.Telefones". All fields are combined with a logical 'AND'. */
  ['contatos_Telefones_bool_exp']: {
    Categorias?: GraphQLTypes['jsonb_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Identidades?: GraphQLTypes['jsonb_comparison_exp'];
    NomeDoResponsavel?: GraphQLTypes['String_comparison_exp'];
    Telefone?: GraphQLTypes['bigint_comparison_exp'];
    Tipos?: GraphQLTypes['jsonb_comparison_exp'];
    _and?: Array<GraphQLTypes['contatos_Telefones_bool_exp']>;
    _not?: GraphQLTypes['contatos_Telefones_bool_exp'];
    _or?: Array<GraphQLTypes['contatos_Telefones_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "contatos.Telefones" */
  ['contatos_Telefones_constraint']: contatos_Telefones_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['contatos_Telefones_delete_at_path_input']: {
    Categorias?: Array<string>;
    Identidades?: Array<string>;
    Tipos?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['contatos_Telefones_delete_elem_input']: {
    Categorias?: number;
    Identidades?: number;
    Tipos?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['contatos_Telefones_delete_key_input']: {
    Categorias?: string;
    Identidades?: string;
    Tipos?: string;
  };
  /** input type for incrementing numeric columns in table "contatos.Telefones" */
  ['contatos_Telefones_inc_input']: {
    Telefone?: GraphQLTypes['bigint'];
  };
  /** input type for inserting data into table "contatos.Telefones" */
  ['contatos_Telefones_insert_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    Identidades?: GraphQLTypes['jsonb'];
    NomeDoResponsavel?: string;
    Telefone?: GraphQLTypes['bigint'];
    Tipos?: GraphQLTypes['jsonb'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['contatos_Telefones_max_fields']: {
    __typename: 'contatos_Telefones_max_fields';
    Id?: GraphQLTypes['uuid'];
    NomeDoResponsavel?: string;
    Telefone?: GraphQLTypes['bigint'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['contatos_Telefones_min_fields']: {
    __typename: 'contatos_Telefones_min_fields';
    Id?: GraphQLTypes['uuid'];
    NomeDoResponsavel?: string;
    Telefone?: GraphQLTypes['bigint'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "contatos.Telefones" */
  ['contatos_Telefones_mutation_response']: {
    __typename: 'contatos_Telefones_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['contatos_Telefones']>;
  };
  /** on conflict condition type for table "contatos.Telefones" */
  ['contatos_Telefones_on_conflict']: {
    constraint: GraphQLTypes['contatos_Telefones_constraint'];
    update_columns: Array<GraphQLTypes['contatos_Telefones_update_column']>;
    where?: GraphQLTypes['contatos_Telefones_bool_exp'];
  };
  /** Ordering options when selecting data from "contatos.Telefones". */
  ['contatos_Telefones_order_by']: {
    Categorias?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Identidades?: GraphQLTypes['order_by'];
    NomeDoResponsavel?: GraphQLTypes['order_by'];
    Telefone?: GraphQLTypes['order_by'];
    Tipos?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: contatos_Telefones */
  ['contatos_Telefones_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['contatos_Telefones_prepend_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    Identidades?: GraphQLTypes['jsonb'];
    Tipos?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "contatos.Telefones" */
  ['contatos_Telefones_select_column']: contatos_Telefones_select_column;
  /** input type for updating data in table "contatos.Telefones" */
  ['contatos_Telefones_set_input']: {
    Categorias?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    Identidades?: GraphQLTypes['jsonb'];
    NomeDoResponsavel?: string;
    Telefone?: GraphQLTypes['bigint'];
    Tipos?: GraphQLTypes['jsonb'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['contatos_Telefones_stddev_fields']: {
    __typename: 'contatos_Telefones_stddev_fields';
    Telefone?: number;
  };
  /** aggregate stddev_pop on columns */
  ['contatos_Telefones_stddev_pop_fields']: {
    __typename: 'contatos_Telefones_stddev_pop_fields';
    Telefone?: number;
  };
  /** aggregate stddev_samp on columns */
  ['contatos_Telefones_stddev_samp_fields']: {
    __typename: 'contatos_Telefones_stddev_samp_fields';
    Telefone?: number;
  };
  /** aggregate sum on columns */
  ['contatos_Telefones_sum_fields']: {
    __typename: 'contatos_Telefones_sum_fields';
    Telefone?: GraphQLTypes['bigint'];
  };
  /** update columns of table "contatos.Telefones" */
  ['contatos_Telefones_update_column']: contatos_Telefones_update_column;
  /** aggregate var_pop on columns */
  ['contatos_Telefones_var_pop_fields']: {
    __typename: 'contatos_Telefones_var_pop_fields';
    Telefone?: number;
  };
  /** aggregate var_samp on columns */
  ['contatos_Telefones_var_samp_fields']: {
    __typename: 'contatos_Telefones_var_samp_fields';
    Telefone?: number;
  };
  /** aggregate variance on columns */
  ['contatos_Telefones_variance_fields']: {
    __typename: 'contatos_Telefones_variance_fields';
    Telefone?: number;
  };
  ['float8']: any;
  /** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
  ['float8_comparison_exp']: {
    _eq?: GraphQLTypes['float8'];
    _gt?: GraphQLTypes['float8'];
    _gte?: GraphQLTypes['float8'];
    _in?: Array<GraphQLTypes['float8']>;
    _is_null?: boolean;
    _lt?: GraphQLTypes['float8'];
    _lte?: GraphQLTypes['float8'];
    _neq?: GraphQLTypes['float8'];
    _nin?: Array<GraphQLTypes['float8']>;
  };
  /** columns and relationships of "identidades.Clientes" */
  ['identidades_Clientes']: {
    __typename: 'identidades_Clientes';
    Id: GraphQLTypes['uuid'];
    /** An array relationship */
    Leads: Array<GraphQLTypes['clientes_Leads']>;
    /** An aggregate relationship */
    Leads_aggregate: GraphQLTypes['clientes_Leads_aggregate'];
    /** An object relationship */
    Pessoa: GraphQLTypes['identidades_Pessoas'];
    Pessoa_Id: GraphQLTypes['uuid'];
    /** An array relationship */
    Usuarios: Array<GraphQLTypes['autenticacao_Usuarios']>;
    /** An aggregate relationship */
    Usuarios_aggregate: GraphQLTypes['autenticacao_Usuarios_aggregate'];
    /** An array relationship */
    Veiculos: Array<GraphQLTypes['clientes_Veiculos']>;
    /** An array relationship */
    VeiculosAtivos: Array<GraphQLTypes['clientes_VeiculosAtivos']>;
    /** An aggregate relationship */
    VeiculosAtivos_aggregate: GraphQLTypes['clientes_VeiculosAtivos_aggregate'];
    /** An aggregate relationship */
    Veiculos_aggregate: GraphQLTypes['clientes_Veiculos_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos']: {
    __typename: 'identidades_Clientes_Documentos';
    DataAprovado?: GraphQLTypes['timestamptz'];
    DataRecusado?: GraphQLTypes['timestamptz'];
    Id: GraphQLTypes['uuid'];
    MotivoRecusa?: string;
    Nome: string;
    /** An object relationship */
    Pessoa: GraphQLTypes['identidades_Pessoas'];
    Pessoa_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Situacao?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes'];
    Situacao_Id?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_enum'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes']: {
    __typename: 'identidades_Clientes_Documentos_Situacoes';
    /** An array relationship */
    Clientes_Documentos: Array<GraphQLTypes['identidades_Clientes_Documentos']>;
    /** An aggregate relationship */
    Clientes_Documentos_aggregate: GraphQLTypes['identidades_Clientes_Documentos_aggregate'];
    Comentario: string;
    Valor: string;
  };
  /** aggregated selection of "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_aggregate']: {
    __typename: 'identidades_Clientes_Documentos_Situacoes_aggregate';
    aggregate?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_aggregate_fields'];
    nodes: Array<GraphQLTypes['identidades_Clientes_Documentos_Situacoes']>;
  };
  /** aggregate fields of "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_aggregate_fields']: {
    __typename: 'identidades_Clientes_Documentos_Situacoes_aggregate_fields';
    count: number;
    max?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_max_fields'];
    min?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_min_fields'];
  };
  /** Boolean expression to filter rows from the table "identidades.Clientes_Documentos_Situacoes". All fields are combined with a logical 'AND'. */
  ['identidades_Clientes_Documentos_Situacoes_bool_exp']: {
    Clientes_Documentos?: GraphQLTypes['identidades_Clientes_Documentos_bool_exp'];
    Comentario?: GraphQLTypes['String_comparison_exp'];
    Valor?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<
      GraphQLTypes['identidades_Clientes_Documentos_Situacoes_bool_exp']
    >;
    _not?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_bool_exp'];
    _or?: Array<
      GraphQLTypes['identidades_Clientes_Documentos_Situacoes_bool_exp']
    >;
  };
  /** unique or primary key constraints on table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_constraint']: identidades_Clientes_Documentos_Situacoes_constraint;
  ['identidades_Clientes_Documentos_Situacoes_enum']: identidades_Clientes_Documentos_Situacoes_enum;
  /** Boolean expression to compare columns of type "identidades_Clientes_Documentos_Situacoes_enum". All fields are combined with logical 'AND'. */
  ['identidades_Clientes_Documentos_Situacoes_enum_comparison_exp']: {
    _eq?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_enum'];
    _in?: Array<GraphQLTypes['identidades_Clientes_Documentos_Situacoes_enum']>;
    _is_null?: boolean;
    _neq?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_enum'];
    _nin?: Array<
      GraphQLTypes['identidades_Clientes_Documentos_Situacoes_enum']
    >;
  };
  /** input type for inserting data into table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_insert_input']: {
    Clientes_Documentos?: GraphQLTypes['identidades_Clientes_Documentos_arr_rel_insert_input'];
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate max on columns */
  ['identidades_Clientes_Documentos_Situacoes_max_fields']: {
    __typename: 'identidades_Clientes_Documentos_Situacoes_max_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['identidades_Clientes_Documentos_Situacoes_min_fields']: {
    __typename: 'identidades_Clientes_Documentos_Situacoes_min_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_mutation_response']: {
    __typename: 'identidades_Clientes_Documentos_Situacoes_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['identidades_Clientes_Documentos_Situacoes']>;
  };
  /** input type for inserting object relation for remote table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_obj_rel_insert_input']: {
    data: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_on_conflict'];
  };
  /** on conflict condition type for table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_on_conflict']: {
    constraint: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_constraint'];
    update_columns: Array<
      GraphQLTypes['identidades_Clientes_Documentos_Situacoes_update_column']
    >;
    where?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_bool_exp'];
  };
  /** Ordering options when selecting data from "identidades.Clientes_Documentos_Situacoes". */
  ['identidades_Clientes_Documentos_Situacoes_order_by']: {
    Clientes_Documentos_aggregate?: GraphQLTypes['identidades_Clientes_Documentos_aggregate_order_by'];
    Comentario?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: identidades_Clientes_Documentos_Situacoes */
  ['identidades_Clientes_Documentos_Situacoes_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_select_column']: identidades_Clientes_Documentos_Situacoes_select_column;
  /** input type for updating data in table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_set_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** update columns of table "identidades.Clientes_Documentos_Situacoes" */
  ['identidades_Clientes_Documentos_Situacoes_update_column']: identidades_Clientes_Documentos_Situacoes_update_column;
  /** aggregated selection of "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_aggregate']: {
    __typename: 'identidades_Clientes_Documentos_aggregate';
    aggregate?: GraphQLTypes['identidades_Clientes_Documentos_aggregate_fields'];
    nodes: Array<GraphQLTypes['identidades_Clientes_Documentos']>;
  };
  /** aggregate fields of "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_aggregate_fields']: {
    __typename: 'identidades_Clientes_Documentos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['identidades_Clientes_Documentos_max_fields'];
    min?: GraphQLTypes['identidades_Clientes_Documentos_min_fields'];
  };
  /** order by aggregate values of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['identidades_Clientes_Documentos_max_order_by'];
    min?: GraphQLTypes['identidades_Clientes_Documentos_min_order_by'];
  };
  /** input type for inserting array relation for remote table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['identidades_Clientes_Documentos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['identidades_Clientes_Documentos_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "identidades.Clientes_Documentos". All fields are combined with a logical 'AND'. */
  ['identidades_Clientes_Documentos_bool_exp']: {
    DataAprovado?: GraphQLTypes['timestamptz_comparison_exp'];
    DataRecusado?: GraphQLTypes['timestamptz_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    MotivoRecusa?: GraphQLTypes['String_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_bool_exp'];
    Pessoa_Id?: GraphQLTypes['uuid_comparison_exp'];
    Situacao?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_bool_exp'];
    Situacao_Id?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_enum_comparison_exp'];
    _and?: Array<GraphQLTypes['identidades_Clientes_Documentos_bool_exp']>;
    _not?: GraphQLTypes['identidades_Clientes_Documentos_bool_exp'];
    _or?: Array<GraphQLTypes['identidades_Clientes_Documentos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_constraint']: identidades_Clientes_Documentos_constraint;
  /** input type for inserting data into table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_insert_input']: {
    DataAprovado?: GraphQLTypes['timestamptz'];
    DataRecusado?: GraphQLTypes['timestamptz'];
    Id?: GraphQLTypes['uuid'];
    MotivoRecusa?: string;
    Nome?: string;
    Pessoa?: GraphQLTypes['identidades_Pessoas_obj_rel_insert_input'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    Situacao?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_obj_rel_insert_input'];
    Situacao_Id?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_enum'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['identidades_Clientes_Documentos_max_fields']: {
    __typename: 'identidades_Clientes_Documentos_max_fields';
    DataAprovado?: GraphQLTypes['timestamptz'];
    DataRecusado?: GraphQLTypes['timestamptz'];
    Id?: GraphQLTypes['uuid'];
    MotivoRecusa?: string;
    Nome?: string;
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_max_order_by']: {
    DataAprovado?: GraphQLTypes['order_by'];
    DataRecusado?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    MotivoRecusa?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Pessoa_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['identidades_Clientes_Documentos_min_fields']: {
    __typename: 'identidades_Clientes_Documentos_min_fields';
    DataAprovado?: GraphQLTypes['timestamptz'];
    DataRecusado?: GraphQLTypes['timestamptz'];
    Id?: GraphQLTypes['uuid'];
    MotivoRecusa?: string;
    Nome?: string;
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_min_order_by']: {
    DataAprovado?: GraphQLTypes['order_by'];
    DataRecusado?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    MotivoRecusa?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Pessoa_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_mutation_response']: {
    __typename: 'identidades_Clientes_Documentos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['identidades_Clientes_Documentos']>;
  };
  /** on conflict condition type for table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_on_conflict']: {
    constraint: GraphQLTypes['identidades_Clientes_Documentos_constraint'];
    update_columns: Array<
      GraphQLTypes['identidades_Clientes_Documentos_update_column']
    >;
    where?: GraphQLTypes['identidades_Clientes_Documentos_bool_exp'];
  };
  /** Ordering options when selecting data from "identidades.Clientes_Documentos". */
  ['identidades_Clientes_Documentos_order_by']: {
    DataAprovado?: GraphQLTypes['order_by'];
    DataRecusado?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    MotivoRecusa?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_order_by'];
    Pessoa_Id?: GraphQLTypes['order_by'];
    Situacao?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_order_by'];
    Situacao_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: identidades_Clientes_Documentos */
  ['identidades_Clientes_Documentos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_select_column']: identidades_Clientes_Documentos_select_column;
  /** input type for updating data in table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_set_input']: {
    DataAprovado?: GraphQLTypes['timestamptz'];
    DataRecusado?: GraphQLTypes['timestamptz'];
    Id?: GraphQLTypes['uuid'];
    MotivoRecusa?: string;
    Nome?: string;
    Pessoa_Id?: GraphQLTypes['uuid'];
    Situacao_Id?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_enum'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "identidades.Clientes_Documentos" */
  ['identidades_Clientes_Documentos_update_column']: identidades_Clientes_Documentos_update_column;
  /** aggregated selection of "identidades.Clientes" */
  ['identidades_Clientes_aggregate']: {
    __typename: 'identidades_Clientes_aggregate';
    aggregate?: GraphQLTypes['identidades_Clientes_aggregate_fields'];
    nodes: Array<GraphQLTypes['identidades_Clientes']>;
  };
  /** aggregate fields of "identidades.Clientes" */
  ['identidades_Clientes_aggregate_fields']: {
    __typename: 'identidades_Clientes_aggregate_fields';
    count: number;
    max?: GraphQLTypes['identidades_Clientes_max_fields'];
    min?: GraphQLTypes['identidades_Clientes_min_fields'];
  };
  /** Boolean expression to filter rows from the table "identidades.Clientes". All fields are combined with a logical 'AND'. */
  ['identidades_Clientes_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Leads?: GraphQLTypes['clientes_Leads_bool_exp'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_bool_exp'];
    Pessoa_Id?: GraphQLTypes['uuid_comparison_exp'];
    Usuarios?: GraphQLTypes['autenticacao_Usuarios_bool_exp'];
    Veiculos?: GraphQLTypes['clientes_Veiculos_bool_exp'];
    VeiculosAtivos?: GraphQLTypes['clientes_VeiculosAtivos_bool_exp'];
    _and?: Array<GraphQLTypes['identidades_Clientes_bool_exp']>;
    _not?: GraphQLTypes['identidades_Clientes_bool_exp'];
    _or?: Array<GraphQLTypes['identidades_Clientes_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "identidades.Clientes" */
  ['identidades_Clientes_constraint']: identidades_Clientes_constraint;
  /** input type for inserting data into table "identidades.Clientes" */
  ['identidades_Clientes_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Leads?: GraphQLTypes['clientes_Leads_arr_rel_insert_input'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_obj_rel_insert_input'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    Usuarios?: GraphQLTypes['autenticacao_Usuarios_arr_rel_insert_input'];
    Veiculos?: GraphQLTypes['clientes_Veiculos_arr_rel_insert_input'];
    VeiculosAtivos?: GraphQLTypes['clientes_VeiculosAtivos_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['identidades_Clientes_max_fields']: {
    __typename: 'identidades_Clientes_max_fields';
    Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['identidades_Clientes_min_fields']: {
    __typename: 'identidades_Clientes_min_fields';
    Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "identidades.Clientes" */
  ['identidades_Clientes_mutation_response']: {
    __typename: 'identidades_Clientes_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['identidades_Clientes']>;
  };
  /** input type for inserting object relation for remote table "identidades.Clientes" */
  ['identidades_Clientes_obj_rel_insert_input']: {
    data: GraphQLTypes['identidades_Clientes_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['identidades_Clientes_on_conflict'];
  };
  /** on conflict condition type for table "identidades.Clientes" */
  ['identidades_Clientes_on_conflict']: {
    constraint: GraphQLTypes['identidades_Clientes_constraint'];
    update_columns: Array<GraphQLTypes['identidades_Clientes_update_column']>;
    where?: GraphQLTypes['identidades_Clientes_bool_exp'];
  };
  /** Ordering options when selecting data from "identidades.Clientes". */
  ['identidades_Clientes_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Leads_aggregate?: GraphQLTypes['clientes_Leads_aggregate_order_by'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_order_by'];
    Pessoa_Id?: GraphQLTypes['order_by'];
    Usuarios_aggregate?: GraphQLTypes['autenticacao_Usuarios_aggregate_order_by'];
    VeiculosAtivos_aggregate?: GraphQLTypes['clientes_VeiculosAtivos_aggregate_order_by'];
    Veiculos_aggregate?: GraphQLTypes['clientes_Veiculos_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: identidades_Clientes */
  ['identidades_Clientes_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "identidades.Clientes" */
  ['identidades_Clientes_select_column']: identidades_Clientes_select_column;
  /** input type for updating data in table "identidades.Clientes" */
  ['identidades_Clientes_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "identidades.Clientes" */
  ['identidades_Clientes_update_column']: identidades_Clientes_update_column;
  /** columns and relationships of "identidades.Colaboradores" */
  ['identidades_Colaboradores']: {
    __typename: 'identidades_Colaboradores';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Pessoa: GraphQLTypes['identidades_Pessoas'];
    Pessoa_Id: GraphQLTypes['uuid'];
    /** An array relationship */
    Usuarios: Array<GraphQLTypes['autenticacao_Usuarios']>;
    /** An aggregate relationship */
    Usuarios_aggregate: GraphQLTypes['autenticacao_Usuarios_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Colaboradores" */
  ['identidades_Colaboradores_aggregate']: {
    __typename: 'identidades_Colaboradores_aggregate';
    aggregate?: GraphQLTypes['identidades_Colaboradores_aggregate_fields'];
    nodes: Array<GraphQLTypes['identidades_Colaboradores']>;
  };
  /** aggregate fields of "identidades.Colaboradores" */
  ['identidades_Colaboradores_aggregate_fields']: {
    __typename: 'identidades_Colaboradores_aggregate_fields';
    count: number;
    max?: GraphQLTypes['identidades_Colaboradores_max_fields'];
    min?: GraphQLTypes['identidades_Colaboradores_min_fields'];
  };
  /** order by aggregate values of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['identidades_Colaboradores_max_order_by'];
    min?: GraphQLTypes['identidades_Colaboradores_min_order_by'];
  };
  /** input type for inserting array relation for remote table "identidades.Colaboradores" */
  ['identidades_Colaboradores_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['identidades_Colaboradores_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['identidades_Colaboradores_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "identidades.Colaboradores". All fields are combined with a logical 'AND'. */
  ['identidades_Colaboradores_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_bool_exp'];
    Pessoa_Id?: GraphQLTypes['uuid_comparison_exp'];
    Usuarios?: GraphQLTypes['autenticacao_Usuarios_bool_exp'];
    _and?: Array<GraphQLTypes['identidades_Colaboradores_bool_exp']>;
    _not?: GraphQLTypes['identidades_Colaboradores_bool_exp'];
    _or?: Array<GraphQLTypes['identidades_Colaboradores_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "identidades.Colaboradores" */
  ['identidades_Colaboradores_constraint']: identidades_Colaboradores_constraint;
  /** input type for inserting data into table "identidades.Colaboradores" */
  ['identidades_Colaboradores_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_obj_rel_insert_input'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    Usuarios?: GraphQLTypes['autenticacao_Usuarios_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['identidades_Colaboradores_max_fields']: {
    __typename: 'identidades_Colaboradores_max_fields';
    Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Pessoa_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['identidades_Colaboradores_min_fields']: {
    __typename: 'identidades_Colaboradores_min_fields';
    Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Pessoa_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "identidades.Colaboradores" */
  ['identidades_Colaboradores_mutation_response']: {
    __typename: 'identidades_Colaboradores_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['identidades_Colaboradores']>;
  };
  /** input type for inserting object relation for remote table "identidades.Colaboradores" */
  ['identidades_Colaboradores_obj_rel_insert_input']: {
    data: GraphQLTypes['identidades_Colaboradores_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['identidades_Colaboradores_on_conflict'];
  };
  /** on conflict condition type for table "identidades.Colaboradores" */
  ['identidades_Colaboradores_on_conflict']: {
    constraint: GraphQLTypes['identidades_Colaboradores_constraint'];
    update_columns: Array<
      GraphQLTypes['identidades_Colaboradores_update_column']
    >;
    where?: GraphQLTypes['identidades_Colaboradores_bool_exp'];
  };
  /** Ordering options when selecting data from "identidades.Colaboradores". */
  ['identidades_Colaboradores_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_order_by'];
    Pessoa_Id?: GraphQLTypes['order_by'];
    Usuarios_aggregate?: GraphQLTypes['autenticacao_Usuarios_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: identidades_Colaboradores */
  ['identidades_Colaboradores_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_select_column']: identidades_Colaboradores_select_column;
  /** input type for updating data in table "identidades.Colaboradores" */
  ['identidades_Colaboradores_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "identidades.Colaboradores" */
  ['identidades_Colaboradores_update_column']: identidades_Colaboradores_update_column;
  /** columns and relationships of "identidades.Fornecedores" */
  ['identidades_Fornecedores']: {
    __typename: 'identidades_Fornecedores';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Pessoa: GraphQLTypes['identidades_Pessoas'];
    Pessoa_Id: GraphQLTypes['uuid'];
    PrecoDoKm?: GraphQLTypes['float8'];
    PrestadorDeServico: boolean;
    /** An array relationship */
    Vendedores: Array<GraphQLTypes['identidades_Vendedores']>;
    /** An aggregate relationship */
    Vendedores_aggregate: GraphQLTypes['identidades_Vendedores_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Fornecedores" */
  ['identidades_Fornecedores_aggregate']: {
    __typename: 'identidades_Fornecedores_aggregate';
    aggregate?: GraphQLTypes['identidades_Fornecedores_aggregate_fields'];
    nodes: Array<GraphQLTypes['identidades_Fornecedores']>;
  };
  /** aggregate fields of "identidades.Fornecedores" */
  ['identidades_Fornecedores_aggregate_fields']: {
    __typename: 'identidades_Fornecedores_aggregate_fields';
    avg?: GraphQLTypes['identidades_Fornecedores_avg_fields'];
    count: number;
    max?: GraphQLTypes['identidades_Fornecedores_max_fields'];
    min?: GraphQLTypes['identidades_Fornecedores_min_fields'];
    stddev?: GraphQLTypes['identidades_Fornecedores_stddev_fields'];
    stddev_pop?: GraphQLTypes['identidades_Fornecedores_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['identidades_Fornecedores_stddev_samp_fields'];
    sum?: GraphQLTypes['identidades_Fornecedores_sum_fields'];
    var_pop?: GraphQLTypes['identidades_Fornecedores_var_pop_fields'];
    var_samp?: GraphQLTypes['identidades_Fornecedores_var_samp_fields'];
    variance?: GraphQLTypes['identidades_Fornecedores_variance_fields'];
  };
  /** aggregate avg on columns */
  ['identidades_Fornecedores_avg_fields']: {
    __typename: 'identidades_Fornecedores_avg_fields';
    PrecoDoKm?: number;
  };
  /** Boolean expression to filter rows from the table "identidades.Fornecedores". All fields are combined with a logical 'AND'. */
  ['identidades_Fornecedores_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_bool_exp'];
    Pessoa_Id?: GraphQLTypes['uuid_comparison_exp'];
    PrecoDoKm?: GraphQLTypes['float8_comparison_exp'];
    PrestadorDeServico?: GraphQLTypes['Boolean_comparison_exp'];
    Vendedores?: GraphQLTypes['identidades_Vendedores_bool_exp'];
    _and?: Array<GraphQLTypes['identidades_Fornecedores_bool_exp']>;
    _not?: GraphQLTypes['identidades_Fornecedores_bool_exp'];
    _or?: Array<GraphQLTypes['identidades_Fornecedores_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "identidades.Fornecedores" */
  ['identidades_Fornecedores_constraint']: identidades_Fornecedores_constraint;
  /** input type for incrementing numeric columns in table "identidades.Fornecedores" */
  ['identidades_Fornecedores_inc_input']: {
    PrecoDoKm?: GraphQLTypes['float8'];
  };
  /** input type for inserting data into table "identidades.Fornecedores" */
  ['identidades_Fornecedores_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_obj_rel_insert_input'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    PrecoDoKm?: GraphQLTypes['float8'];
    PrestadorDeServico?: boolean;
    Vendedores?: GraphQLTypes['identidades_Vendedores_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['identidades_Fornecedores_max_fields']: {
    __typename: 'identidades_Fornecedores_max_fields';
    Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    PrecoDoKm?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['identidades_Fornecedores_min_fields']: {
    __typename: 'identidades_Fornecedores_min_fields';
    Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    PrecoDoKm?: GraphQLTypes['float8'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "identidades.Fornecedores" */
  ['identidades_Fornecedores_mutation_response']: {
    __typename: 'identidades_Fornecedores_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['identidades_Fornecedores']>;
  };
  /** input type for inserting object relation for remote table "identidades.Fornecedores" */
  ['identidades_Fornecedores_obj_rel_insert_input']: {
    data: GraphQLTypes['identidades_Fornecedores_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['identidades_Fornecedores_on_conflict'];
  };
  /** on conflict condition type for table "identidades.Fornecedores" */
  ['identidades_Fornecedores_on_conflict']: {
    constraint: GraphQLTypes['identidades_Fornecedores_constraint'];
    update_columns: Array<
      GraphQLTypes['identidades_Fornecedores_update_column']
    >;
    where?: GraphQLTypes['identidades_Fornecedores_bool_exp'];
  };
  /** Ordering options when selecting data from "identidades.Fornecedores". */
  ['identidades_Fornecedores_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_order_by'];
    Pessoa_Id?: GraphQLTypes['order_by'];
    PrecoDoKm?: GraphQLTypes['order_by'];
    PrestadorDeServico?: GraphQLTypes['order_by'];
    Vendedores_aggregate?: GraphQLTypes['identidades_Vendedores_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: identidades_Fornecedores */
  ['identidades_Fornecedores_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "identidades.Fornecedores" */
  ['identidades_Fornecedores_select_column']: identidades_Fornecedores_select_column;
  /** input type for updating data in table "identidades.Fornecedores" */
  ['identidades_Fornecedores_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    PrecoDoKm?: GraphQLTypes['float8'];
    PrestadorDeServico?: boolean;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['identidades_Fornecedores_stddev_fields']: {
    __typename: 'identidades_Fornecedores_stddev_fields';
    PrecoDoKm?: number;
  };
  /** aggregate stddev_pop on columns */
  ['identidades_Fornecedores_stddev_pop_fields']: {
    __typename: 'identidades_Fornecedores_stddev_pop_fields';
    PrecoDoKm?: number;
  };
  /** aggregate stddev_samp on columns */
  ['identidades_Fornecedores_stddev_samp_fields']: {
    __typename: 'identidades_Fornecedores_stddev_samp_fields';
    PrecoDoKm?: number;
  };
  /** aggregate sum on columns */
  ['identidades_Fornecedores_sum_fields']: {
    __typename: 'identidades_Fornecedores_sum_fields';
    PrecoDoKm?: GraphQLTypes['float8'];
  };
  /** update columns of table "identidades.Fornecedores" */
  ['identidades_Fornecedores_update_column']: identidades_Fornecedores_update_column;
  /** aggregate var_pop on columns */
  ['identidades_Fornecedores_var_pop_fields']: {
    __typename: 'identidades_Fornecedores_var_pop_fields';
    PrecoDoKm?: number;
  };
  /** aggregate var_samp on columns */
  ['identidades_Fornecedores_var_samp_fields']: {
    __typename: 'identidades_Fornecedores_var_samp_fields';
    PrecoDoKm?: number;
  };
  /** aggregate variance on columns */
  ['identidades_Fornecedores_variance_fields']: {
    __typename: 'identidades_Fornecedores_variance_fields';
    PrecoDoKm?: number;
  };
  /** columns and relationships of "identidades.Logs" */
  ['identidades_Logs']: {
    __typename: 'identidades_Logs';
    DadosAntigos: GraphQLTypes['jsonb'];
    DadosNovos: GraphQLTypes['jsonb'];
    Id: GraphQLTypes['uuid'];
    Operacao: string;
    Tipo: string;
    Tipo_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Logs" */
  ['identidades_Logs_aggregate']: {
    __typename: 'identidades_Logs_aggregate';
    aggregate?: GraphQLTypes['identidades_Logs_aggregate_fields'];
    nodes: Array<GraphQLTypes['identidades_Logs']>;
  };
  /** aggregate fields of "identidades.Logs" */
  ['identidades_Logs_aggregate_fields']: {
    __typename: 'identidades_Logs_aggregate_fields';
    count: number;
    max?: GraphQLTypes['identidades_Logs_max_fields'];
    min?: GraphQLTypes['identidades_Logs_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Logs_append_input']: {
    DadosAntigos?: GraphQLTypes['jsonb'];
    DadosNovos?: GraphQLTypes['jsonb'];
  };
  /** Boolean expression to filter rows from the table "identidades.Logs". All fields are combined with a logical 'AND'. */
  ['identidades_Logs_bool_exp']: {
    DadosAntigos?: GraphQLTypes['jsonb_comparison_exp'];
    DadosNovos?: GraphQLTypes['jsonb_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Operacao?: GraphQLTypes['String_comparison_exp'];
    Tipo?: GraphQLTypes['String_comparison_exp'];
    Tipo_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['identidades_Logs_bool_exp']>;
    _not?: GraphQLTypes['identidades_Logs_bool_exp'];
    _or?: Array<GraphQLTypes['identidades_Logs_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "identidades.Logs" */
  ['identidades_Logs_constraint']: identidades_Logs_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['identidades_Logs_delete_at_path_input']: {
    DadosAntigos?: Array<string>;
    DadosNovos?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['identidades_Logs_delete_elem_input']: {
    DadosAntigos?: number;
    DadosNovos?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['identidades_Logs_delete_key_input']: {
    DadosAntigos?: string;
    DadosNovos?: string;
  };
  /** input type for inserting data into table "identidades.Logs" */
  ['identidades_Logs_insert_input']: {
    DadosAntigos?: GraphQLTypes['jsonb'];
    DadosNovos?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['identidades_Logs_max_fields']: {
    __typename: 'identidades_Logs_max_fields';
    Id?: GraphQLTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['identidades_Logs_min_fields']: {
    __typename: 'identidades_Logs_min_fields';
    Id?: GraphQLTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "identidades.Logs" */
  ['identidades_Logs_mutation_response']: {
    __typename: 'identidades_Logs_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['identidades_Logs']>;
  };
  /** on conflict condition type for table "identidades.Logs" */
  ['identidades_Logs_on_conflict']: {
    constraint: GraphQLTypes['identidades_Logs_constraint'];
    update_columns: Array<GraphQLTypes['identidades_Logs_update_column']>;
    where?: GraphQLTypes['identidades_Logs_bool_exp'];
  };
  /** Ordering options when selecting data from "identidades.Logs". */
  ['identidades_Logs_order_by']: {
    DadosAntigos?: GraphQLTypes['order_by'];
    DadosNovos?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Operacao?: GraphQLTypes['order_by'];
    Tipo?: GraphQLTypes['order_by'];
    Tipo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: identidades_Logs */
  ['identidades_Logs_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Logs_prepend_input']: {
    DadosAntigos?: GraphQLTypes['jsonb'];
    DadosNovos?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "identidades.Logs" */
  ['identidades_Logs_select_column']: identidades_Logs_select_column;
  /** input type for updating data in table "identidades.Logs" */
  ['identidades_Logs_set_input']: {
    DadosAntigos?: GraphQLTypes['jsonb'];
    DadosNovos?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    Operacao?: string;
    Tipo?: string;
    Tipo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "identidades.Logs" */
  ['identidades_Logs_update_column']: identidades_Logs_update_column;
  /** columns and relationships of "identidades.Pessoas" */
  ['identidades_Pessoas']: {
    __typename: 'identidades_Pessoas';
    /** An object relationship */
    Cliente?: GraphQLTypes['identidades_Clientes'];
    /** An array relationship */
    Colaboradores: Array<GraphQLTypes['identidades_Colaboradores']>;
    /** An aggregate relationship */
    Colaboradores_aggregate: GraphQLTypes['identidades_Colaboradores_aggregate'];
    DadosDaApi: GraphQLTypes['jsonb'];
    /** An array relationship */
    Documentos: Array<GraphQLTypes['identidades_Clientes_Documentos']>;
    /** An aggregate relationship */
    Documentos_aggregate: GraphQLTypes['identidades_Clientes_Documentos_aggregate'];
    /** An object relationship */
    Fornecedor?: GraphQLTypes['identidades_Fornecedores'];
    Id: GraphQLTypes['uuid'];
    Identificador: string;
    Nome: string;
    PessoaJuridica: boolean;
    /** An array relationship */
    Representantes: Array<GraphQLTypes['identidades_Representantes']>;
    /** An aggregate relationship */
    Representantes_aggregate: GraphQLTypes['identidades_Representantes_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Pessoas" */
  ['identidades_Pessoas_aggregate']: {
    __typename: 'identidades_Pessoas_aggregate';
    aggregate?: GraphQLTypes['identidades_Pessoas_aggregate_fields'];
    nodes: Array<GraphQLTypes['identidades_Pessoas']>;
  };
  /** aggregate fields of "identidades.Pessoas" */
  ['identidades_Pessoas_aggregate_fields']: {
    __typename: 'identidades_Pessoas_aggregate_fields';
    count: number;
    max?: GraphQLTypes['identidades_Pessoas_max_fields'];
    min?: GraphQLTypes['identidades_Pessoas_min_fields'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Pessoas_append_input']: {
    DadosDaApi?: GraphQLTypes['jsonb'];
  };
  /** Boolean expression to filter rows from the table "identidades.Pessoas". All fields are combined with a logical 'AND'. */
  ['identidades_Pessoas_bool_exp']: {
    Cliente?: GraphQLTypes['identidades_Clientes_bool_exp'];
    Colaboradores?: GraphQLTypes['identidades_Colaboradores_bool_exp'];
    DadosDaApi?: GraphQLTypes['jsonb_comparison_exp'];
    Documentos?: GraphQLTypes['identidades_Clientes_Documentos_bool_exp'];
    Fornecedor?: GraphQLTypes['identidades_Fornecedores_bool_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Identificador?: GraphQLTypes['String_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    PessoaJuridica?: GraphQLTypes['Boolean_comparison_exp'];
    Representantes?: GraphQLTypes['identidades_Representantes_bool_exp'];
    _and?: Array<GraphQLTypes['identidades_Pessoas_bool_exp']>;
    _not?: GraphQLTypes['identidades_Pessoas_bool_exp'];
    _or?: Array<GraphQLTypes['identidades_Pessoas_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "identidades.Pessoas" */
  ['identidades_Pessoas_constraint']: identidades_Pessoas_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['identidades_Pessoas_delete_at_path_input']: {
    DadosDaApi?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['identidades_Pessoas_delete_elem_input']: {
    DadosDaApi?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['identidades_Pessoas_delete_key_input']: {
    DadosDaApi?: string;
  };
  /** input type for inserting data into table "identidades.Pessoas" */
  ['identidades_Pessoas_insert_input']: {
    Cliente?: GraphQLTypes['identidades_Clientes_obj_rel_insert_input'];
    Colaboradores?: GraphQLTypes['identidades_Colaboradores_arr_rel_insert_input'];
    DadosDaApi?: GraphQLTypes['jsonb'];
    Documentos?: GraphQLTypes['identidades_Clientes_Documentos_arr_rel_insert_input'];
    Fornecedor?: GraphQLTypes['identidades_Fornecedores_obj_rel_insert_input'];
    Id?: GraphQLTypes['uuid'];
    Identificador?: string;
    Nome?: string;
    PessoaJuridica?: boolean;
    Representantes?: GraphQLTypes['identidades_Representantes_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['identidades_Pessoas_max_fields']: {
    __typename: 'identidades_Pessoas_max_fields';
    Id?: GraphQLTypes['uuid'];
    Identificador?: string;
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['identidades_Pessoas_min_fields']: {
    __typename: 'identidades_Pessoas_min_fields';
    Id?: GraphQLTypes['uuid'];
    Identificador?: string;
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "identidades.Pessoas" */
  ['identidades_Pessoas_mutation_response']: {
    __typename: 'identidades_Pessoas_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['identidades_Pessoas']>;
  };
  /** input type for inserting object relation for remote table "identidades.Pessoas" */
  ['identidades_Pessoas_obj_rel_insert_input']: {
    data: GraphQLTypes['identidades_Pessoas_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['identidades_Pessoas_on_conflict'];
  };
  /** on conflict condition type for table "identidades.Pessoas" */
  ['identidades_Pessoas_on_conflict']: {
    constraint: GraphQLTypes['identidades_Pessoas_constraint'];
    update_columns: Array<GraphQLTypes['identidades_Pessoas_update_column']>;
    where?: GraphQLTypes['identidades_Pessoas_bool_exp'];
  };
  /** Ordering options when selecting data from "identidades.Pessoas". */
  ['identidades_Pessoas_order_by']: {
    Cliente?: GraphQLTypes['identidades_Clientes_order_by'];
    Colaboradores_aggregate?: GraphQLTypes['identidades_Colaboradores_aggregate_order_by'];
    DadosDaApi?: GraphQLTypes['order_by'];
    Documentos_aggregate?: GraphQLTypes['identidades_Clientes_Documentos_aggregate_order_by'];
    Fornecedor?: GraphQLTypes['identidades_Fornecedores_order_by'];
    Id?: GraphQLTypes['order_by'];
    Identificador?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    PessoaJuridica?: GraphQLTypes['order_by'];
    Representantes_aggregate?: GraphQLTypes['identidades_Representantes_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: identidades_Pessoas */
  ['identidades_Pessoas_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Pessoas_prepend_input']: {
    DadosDaApi?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "identidades.Pessoas" */
  ['identidades_Pessoas_select_column']: identidades_Pessoas_select_column;
  /** input type for updating data in table "identidades.Pessoas" */
  ['identidades_Pessoas_set_input']: {
    DadosDaApi?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    Identificador?: string;
    Nome?: string;
    PessoaJuridica?: boolean;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "identidades.Pessoas" */
  ['identidades_Pessoas_update_column']: identidades_Pessoas_update_column;
  /** columns and relationships of "identidades.Representantes" */
  ['identidades_Representantes']: {
    __typename: 'identidades_Representantes';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Pessoa: GraphQLTypes['identidades_Pessoas'];
    /** An object relationship */
    PessoaRepresentada?: GraphQLTypes['identidades_Pessoas'];
    PessoaRepresentada_Id: GraphQLTypes['uuid'];
    Pessoa_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Representantes" */
  ['identidades_Representantes_aggregate']: {
    __typename: 'identidades_Representantes_aggregate';
    aggregate?: GraphQLTypes['identidades_Representantes_aggregate_fields'];
    nodes: Array<GraphQLTypes['identidades_Representantes']>;
  };
  /** aggregate fields of "identidades.Representantes" */
  ['identidades_Representantes_aggregate_fields']: {
    __typename: 'identidades_Representantes_aggregate_fields';
    count: number;
    max?: GraphQLTypes['identidades_Representantes_max_fields'];
    min?: GraphQLTypes['identidades_Representantes_min_fields'];
  };
  /** order by aggregate values of table "identidades.Representantes" */
  ['identidades_Representantes_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['identidades_Representantes_max_order_by'];
    min?: GraphQLTypes['identidades_Representantes_min_order_by'];
  };
  /** input type for inserting array relation for remote table "identidades.Representantes" */
  ['identidades_Representantes_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['identidades_Representantes_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['identidades_Representantes_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "identidades.Representantes". All fields are combined with a logical 'AND'. */
  ['identidades_Representantes_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_bool_exp'];
    PessoaRepresentada?: GraphQLTypes['identidades_Pessoas_bool_exp'];
    PessoaRepresentada_Id?: GraphQLTypes['uuid_comparison_exp'];
    Pessoa_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['identidades_Representantes_bool_exp']>;
    _not?: GraphQLTypes['identidades_Representantes_bool_exp'];
    _or?: Array<GraphQLTypes['identidades_Representantes_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "identidades.Representantes" */
  ['identidades_Representantes_constraint']: identidades_Representantes_constraint;
  /** input type for inserting data into table "identidades.Representantes" */
  ['identidades_Representantes_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_obj_rel_insert_input'];
    PessoaRepresentada?: GraphQLTypes['identidades_Pessoas_obj_rel_insert_input'];
    PessoaRepresentada_Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['identidades_Representantes_max_fields']: {
    __typename: 'identidades_Representantes_max_fields';
    Id?: GraphQLTypes['uuid'];
    PessoaRepresentada_Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "identidades.Representantes" */
  ['identidades_Representantes_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    PessoaRepresentada_Id?: GraphQLTypes['order_by'];
    Pessoa_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['identidades_Representantes_min_fields']: {
    __typename: 'identidades_Representantes_min_fields';
    Id?: GraphQLTypes['uuid'];
    PessoaRepresentada_Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "identidades.Representantes" */
  ['identidades_Representantes_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    PessoaRepresentada_Id?: GraphQLTypes['order_by'];
    Pessoa_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "identidades.Representantes" */
  ['identidades_Representantes_mutation_response']: {
    __typename: 'identidades_Representantes_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['identidades_Representantes']>;
  };
  /** on conflict condition type for table "identidades.Representantes" */
  ['identidades_Representantes_on_conflict']: {
    constraint: GraphQLTypes['identidades_Representantes_constraint'];
    update_columns: Array<
      GraphQLTypes['identidades_Representantes_update_column']
    >;
    where?: GraphQLTypes['identidades_Representantes_bool_exp'];
  };
  /** Ordering options when selecting data from "identidades.Representantes". */
  ['identidades_Representantes_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Pessoa?: GraphQLTypes['identidades_Pessoas_order_by'];
    PessoaRepresentada?: GraphQLTypes['identidades_Pessoas_order_by'];
    PessoaRepresentada_Id?: GraphQLTypes['order_by'];
    Pessoa_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: identidades_Representantes */
  ['identidades_Representantes_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "identidades.Representantes" */
  ['identidades_Representantes_select_column']: identidades_Representantes_select_column;
  /** input type for updating data in table "identidades.Representantes" */
  ['identidades_Representantes_set_input']: {
    Id?: GraphQLTypes['uuid'];
    PessoaRepresentada_Id?: GraphQLTypes['uuid'];
    Pessoa_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "identidades.Representantes" */
  ['identidades_Representantes_update_column']: identidades_Representantes_update_column;
  /** columns and relationships of "identidades.Vendedores" */
  ['identidades_Vendedores']: {
    __typename: 'identidades_Vendedores';
    Emails?: GraphQLTypes['jsonb'];
    /** An object relationship */
    Fornecedor: GraphQLTypes['identidades_Fornecedores'];
    Fornecedor_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    Nome: string;
    Telefones?: GraphQLTypes['jsonb'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "identidades.Vendedores" */
  ['identidades_Vendedores_aggregate']: {
    __typename: 'identidades_Vendedores_aggregate';
    aggregate?: GraphQLTypes['identidades_Vendedores_aggregate_fields'];
    nodes: Array<GraphQLTypes['identidades_Vendedores']>;
  };
  /** aggregate fields of "identidades.Vendedores" */
  ['identidades_Vendedores_aggregate_fields']: {
    __typename: 'identidades_Vendedores_aggregate_fields';
    count: number;
    max?: GraphQLTypes['identidades_Vendedores_max_fields'];
    min?: GraphQLTypes['identidades_Vendedores_min_fields'];
  };
  /** order by aggregate values of table "identidades.Vendedores" */
  ['identidades_Vendedores_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['identidades_Vendedores_max_order_by'];
    min?: GraphQLTypes['identidades_Vendedores_min_order_by'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Vendedores_append_input']: {
    Emails?: GraphQLTypes['jsonb'];
    Telefones?: GraphQLTypes['jsonb'];
  };
  /** input type for inserting array relation for remote table "identidades.Vendedores" */
  ['identidades_Vendedores_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['identidades_Vendedores_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['identidades_Vendedores_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "identidades.Vendedores". All fields are combined with a logical 'AND'. */
  ['identidades_Vendedores_bool_exp']: {
    Emails?: GraphQLTypes['jsonb_comparison_exp'];
    Fornecedor?: GraphQLTypes['identidades_Fornecedores_bool_exp'];
    Fornecedor_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Telefones?: GraphQLTypes['jsonb_comparison_exp'];
    _and?: Array<GraphQLTypes['identidades_Vendedores_bool_exp']>;
    _not?: GraphQLTypes['identidades_Vendedores_bool_exp'];
    _or?: Array<GraphQLTypes['identidades_Vendedores_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "identidades.Vendedores" */
  ['identidades_Vendedores_constraint']: identidades_Vendedores_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['identidades_Vendedores_delete_at_path_input']: {
    Emails?: Array<string>;
    Telefones?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['identidades_Vendedores_delete_elem_input']: {
    Emails?: number;
    Telefones?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['identidades_Vendedores_delete_key_input']: {
    Emails?: string;
    Telefones?: string;
  };
  /** input type for inserting data into table "identidades.Vendedores" */
  ['identidades_Vendedores_insert_input']: {
    Emails?: GraphQLTypes['jsonb'];
    Fornecedor?: GraphQLTypes['identidades_Fornecedores_obj_rel_insert_input'];
    Fornecedor_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Telefones?: GraphQLTypes['jsonb'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['identidades_Vendedores_max_fields']: {
    __typename: 'identidades_Vendedores_max_fields';
    Fornecedor_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_max_order_by']: {
    Fornecedor_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['identidades_Vendedores_min_fields']: {
    __typename: 'identidades_Vendedores_min_fields';
    Fornecedor_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_min_order_by']: {
    Fornecedor_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "identidades.Vendedores" */
  ['identidades_Vendedores_mutation_response']: {
    __typename: 'identidades_Vendedores_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['identidades_Vendedores']>;
  };
  /** on conflict condition type for table "identidades.Vendedores" */
  ['identidades_Vendedores_on_conflict']: {
    constraint: GraphQLTypes['identidades_Vendedores_constraint'];
    update_columns: Array<GraphQLTypes['identidades_Vendedores_update_column']>;
    where?: GraphQLTypes['identidades_Vendedores_bool_exp'];
  };
  /** Ordering options when selecting data from "identidades.Vendedores". */
  ['identidades_Vendedores_order_by']: {
    Emails?: GraphQLTypes['order_by'];
    Fornecedor?: GraphQLTypes['identidades_Fornecedores_order_by'];
    Fornecedor_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Telefones?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: identidades_Vendedores */
  ['identidades_Vendedores_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['identidades_Vendedores_prepend_input']: {
    Emails?: GraphQLTypes['jsonb'];
    Telefones?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_select_column']: identidades_Vendedores_select_column;
  /** input type for updating data in table "identidades.Vendedores" */
  ['identidades_Vendedores_set_input']: {
    Emails?: GraphQLTypes['jsonb'];
    Fornecedor_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Telefones?: GraphQLTypes['jsonb'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "identidades.Vendedores" */
  ['identidades_Vendedores_update_column']: identidades_Vendedores_update_column;
  ['jsonb']: any;
  /** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
  ['jsonb_comparison_exp']: {
    /** is the column contained in the given json value */
    _contained_in?: GraphQLTypes['jsonb'];
    /** does the column contain the given json value at the top level */
    _contains?: GraphQLTypes['jsonb'];
    _eq?: GraphQLTypes['jsonb'];
    _gt?: GraphQLTypes['jsonb'];
    _gte?: GraphQLTypes['jsonb'];
    /** does the string exist as a top-level key in the column */
    _has_key?: string;
    /** do all of these strings exist as top-level keys in the column */
    _has_keys_all?: Array<string>;
    /** do any of these strings exist as top-level keys in the column */
    _has_keys_any?: Array<string>;
    _in?: Array<GraphQLTypes['jsonb']>;
    _is_null?: boolean;
    _lt?: GraphQLTypes['jsonb'];
    _lte?: GraphQLTypes['jsonb'];
    _neq?: GraphQLTypes['jsonb'];
    _nin?: Array<GraphQLTypes['jsonb']>;
  };
  /** mutation root */
  ['mutation_root']: {
    __typename: 'mutation_root';
    CadastrarCliente?: GraphQLTypes['CadastrarClienteOutput'];
    CadastrarColaborador?: GraphQLTypes['CadastrarColaboradorOutput'];
    CadastrarFornecedor?: GraphQLTypes['CadastrarFornecedorOutput'];
    CadastrarRepresentante?: GraphQLTypes['CadastrarRepresentanteOutput'];
    /** delete data from the table: "CategoriasDeVeiculos" */
    delete_CategoriasDeVeiculos?: GraphQLTypes['CategoriasDeVeiculos_mutation_response'];
    /** delete single row from the table: "CategoriasDeVeiculos" */
    delete_CategoriasDeVeiculos_by_pk?: GraphQLTypes['CategoriasDeVeiculos'];
    /** delete data from the table: "EstadosEMunicipios" */
    delete_EstadosEMunicipios?: GraphQLTypes['EstadosEMunicipios_mutation_response'];
    /** delete single row from the table: "EstadosEMunicipios" */
    delete_EstadosEMunicipios_by_pk?: GraphQLTypes['EstadosEMunicipios'];
    /** delete data from the table: "atendimentos.EtapasDosFluxos" */
    delete_atendimentos_EtapasDosFluxos?: GraphQLTypes['atendimentos_EtapasDosFluxos_mutation_response'];
    /** delete single row from the table: "atendimentos.EtapasDosFluxos" */
    delete_atendimentos_EtapasDosFluxos_by_pk?: GraphQLTypes['atendimentos_EtapasDosFluxos'];
    /** delete data from the table: "atendimentos.Fluxos" */
    delete_atendimentos_Fluxos?: GraphQLTypes['atendimentos_Fluxos_mutation_response'];
    /** delete single row from the table: "atendimentos.Fluxos" */
    delete_atendimentos_Fluxos_by_pk?: GraphQLTypes['atendimentos_Fluxos'];
    /** delete data from the table: "atendimentos.Tickets" */
    delete_atendimentos_Tickets?: GraphQLTypes['atendimentos_Tickets_mutation_response'];
    /** delete single row from the table: "atendimentos.Tickets" */
    delete_atendimentos_Tickets_by_pk?: GraphQLTypes['atendimentos_Tickets'];
    /** delete data from the table: "atendimentos.TiposDeTickets" */
    delete_atendimentos_TiposDeTickets?: GraphQLTypes['atendimentos_TiposDeTickets_mutation_response'];
    /** delete single row from the table: "atendimentos.TiposDeTickets" */
    delete_atendimentos_TiposDeTickets_by_pk?: GraphQLTypes['atendimentos_TiposDeTickets'];
    /** delete data from the table: "autenticacao.Atendentes" */
    delete_autenticacao_Atendentes?: GraphQLTypes['autenticacao_Atendentes_mutation_response'];
    /** delete single row from the table: "autenticacao.Atendentes" */
    delete_autenticacao_Atendentes_by_pk?: GraphQLTypes['autenticacao_Atendentes'];
    /** delete data from the table: "autenticacao.Usuarios" */
    delete_autenticacao_Usuarios?: GraphQLTypes['autenticacao_Usuarios_mutation_response'];
    /** delete single row from the table: "autenticacao.Usuarios" */
    delete_autenticacao_Usuarios_by_pk?: GraphQLTypes['autenticacao_Usuarios'];
    /** delete data from the table: "clientes.Leads" */
    delete_clientes_Leads?: GraphQLTypes['clientes_Leads_mutation_response'];
    /** delete single row from the table: "clientes.Leads" */
    delete_clientes_Leads_by_pk?: GraphQLTypes['clientes_Leads'];
    /** delete data from the table: "clientes.PerfisComerciais" */
    delete_clientes_PerfisComerciais?: GraphQLTypes['clientes_PerfisComerciais_mutation_response'];
    /** delete single row from the table: "clientes.PerfisComerciais" */
    delete_clientes_PerfisComerciais_by_pk?: GraphQLTypes['clientes_PerfisComerciais'];
    /** delete data from the table: "clientes.Veiculos" */
    delete_clientes_Veiculos?: GraphQLTypes['clientes_Veiculos_mutation_response'];
    /** delete data from the table: "clientes.VeiculosAtivos" */
    delete_clientes_VeiculosAtivos?: GraphQLTypes['clientes_VeiculosAtivos_mutation_response'];
    /** delete data from the table: "clientes.VeiculosAtivos_Beneficios" */
    delete_clientes_VeiculosAtivos_Beneficios?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_mutation_response'];
    /** delete single row from the table: "clientes.VeiculosAtivos_Beneficios" */
    delete_clientes_VeiculosAtivos_Beneficios_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios'];
    /** delete data from the table: "clientes.VeiculosAtivos_Produtos" */
    delete_clientes_VeiculosAtivos_Produtos?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_mutation_response'];
    /** delete single row from the table: "clientes.VeiculosAtivos_Produtos" */
    delete_clientes_VeiculosAtivos_Produtos_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Produtos'];
    /** delete data from the table: "clientes.VeiculosAtivos_Servicos" */
    delete_clientes_VeiculosAtivos_Servicos?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_mutation_response'];
    /** delete single row from the table: "clientes.VeiculosAtivos_Servicos" */
    delete_clientes_VeiculosAtivos_Servicos_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Servicos'];
    /** delete data from the table: "clientes.VeiculosAtivos_Situacao" */
    delete_clientes_VeiculosAtivos_Situacao?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_mutation_response'];
    /** delete single row from the table: "clientes.VeiculosAtivos_Situacao" */
    delete_clientes_VeiculosAtivos_Situacao_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Situacao'];
    /** delete single row from the table: "clientes.VeiculosAtivos" */
    delete_clientes_VeiculosAtivos_by_pk?: GraphQLTypes['clientes_VeiculosAtivos'];
    /** delete single row from the table: "clientes.Veiculos" */
    delete_clientes_Veiculos_by_pk?: GraphQLTypes['clientes_Veiculos'];
    /** delete data from the table: "comercial.Acoes" */
    delete_comercial_Acoes?: GraphQLTypes['comercial_Acoes_mutation_response'];
    /** delete single row from the table: "comercial.Acoes" */
    delete_comercial_Acoes_by_pk?: GraphQLTypes['comercial_Acoes'];
    /** delete data from the table: "comercial.Atributos" */
    delete_comercial_Atributos?: GraphQLTypes['comercial_Atributos_mutation_response'];
    /** delete single row from the table: "comercial.Atributos" */
    delete_comercial_Atributos_by_pk?: GraphQLTypes['comercial_Atributos'];
    /** delete data from the table: "comercial.Coberturas" */
    delete_comercial_Coberturas?: GraphQLTypes['comercial_Coberturas_mutation_response'];
    /** delete single row from the table: "comercial.Coberturas" */
    delete_comercial_Coberturas_by_pk?: GraphQLTypes['comercial_Coberturas'];
    /** delete data from the table: "comercial.Combos" */
    delete_comercial_Combos?: GraphQLTypes['comercial_Combos_mutation_response'];
    /** delete data from the table: "comercial.Combos_Combos" */
    delete_comercial_Combos_Combos?: GraphQLTypes['comercial_Combos_Combos_mutation_response'];
    /** delete single row from the table: "comercial.Combos_Combos" */
    delete_comercial_Combos_Combos_by_pk?: GraphQLTypes['comercial_Combos_Combos'];
    /** delete data from the table: "comercial.Combos_Planos" */
    delete_comercial_Combos_Planos?: GraphQLTypes['comercial_Combos_Planos_mutation_response'];
    /** delete single row from the table: "comercial.Combos_Planos" */
    delete_comercial_Combos_Planos_by_pk?: GraphQLTypes['comercial_Combos_Planos'];
    /** delete data from the table: "comercial.Combos_Precos" */
    delete_comercial_Combos_Precos?: GraphQLTypes['comercial_Combos_Precos_mutation_response'];
    /** delete single row from the table: "comercial.Combos_Precos" */
    delete_comercial_Combos_Precos_by_pk?: GraphQLTypes['comercial_Combos_Precos'];
    /** delete data from the table: "comercial.Combos_Produtos" */
    delete_comercial_Combos_Produtos?: GraphQLTypes['comercial_Combos_Produtos_mutation_response'];
    /** delete single row from the table: "comercial.Combos_Produtos" */
    delete_comercial_Combos_Produtos_by_pk?: GraphQLTypes['comercial_Combos_Produtos'];
    /** delete data from the table: "comercial.Combos_Servicos" */
    delete_comercial_Combos_Servicos?: GraphQLTypes['comercial_Combos_Servicos_mutation_response'];
    /** delete single row from the table: "comercial.Combos_Servicos" */
    delete_comercial_Combos_Servicos_by_pk?: GraphQLTypes['comercial_Combos_Servicos'];
    /** delete single row from the table: "comercial.Combos" */
    delete_comercial_Combos_by_pk?: GraphQLTypes['comercial_Combos'];
    /** delete data from the table: "comercial.Condicionais" */
    delete_comercial_Condicionais?: GraphQLTypes['comercial_Condicionais_mutation_response'];
    /** delete data from the table: "comercial.CondicionaisSituacoes" */
    delete_comercial_CondicionaisSituacoes?: GraphQLTypes['comercial_CondicionaisSituacoes_mutation_response'];
    /** delete single row from the table: "comercial.CondicionaisSituacoes" */
    delete_comercial_CondicionaisSituacoes_by_pk?: GraphQLTypes['comercial_CondicionaisSituacoes'];
    /** delete single row from the table: "comercial.Condicionais" */
    delete_comercial_Condicionais_by_pk?: GraphQLTypes['comercial_Condicionais'];
    /** delete data from the table: "comercial.ContratosBase" */
    delete_comercial_ContratosBase?: GraphQLTypes['comercial_ContratosBase_mutation_response'];
    /** delete data from the table: "comercial.ContratosBase_Versoes" */
    delete_comercial_ContratosBase_Versoes?: GraphQLTypes['comercial_ContratosBase_Versoes_mutation_response'];
    /** delete single row from the table: "comercial.ContratosBase_Versoes" */
    delete_comercial_ContratosBase_Versoes_by_pk?: GraphQLTypes['comercial_ContratosBase_Versoes'];
    /** delete single row from the table: "comercial.ContratosBase" */
    delete_comercial_ContratosBase_by_pk?: GraphQLTypes['comercial_ContratosBase'];
    /** delete data from the table: "comercial.Planos" */
    delete_comercial_Planos?: GraphQLTypes['comercial_Planos_mutation_response'];
    /** delete data from the table: "comercial.Planos_Condicionais" */
    delete_comercial_Planos_Condicionais?: GraphQLTypes['comercial_Planos_Condicionais_mutation_response'];
    /** delete single row from the table: "comercial.Planos_Condicionais" */
    delete_comercial_Planos_Condicionais_by_pk?: GraphQLTypes['comercial_Planos_Condicionais'];
    /** delete data from the table: "comercial.Planos_Precos" */
    delete_comercial_Planos_Precos?: GraphQLTypes['comercial_Planos_Precos_mutation_response'];
    /** delete single row from the table: "comercial.Planos_Precos" */
    delete_comercial_Planos_Precos_by_pk?: GraphQLTypes['comercial_Planos_Precos'];
    /** delete single row from the table: "comercial.Planos" */
    delete_comercial_Planos_by_pk?: GraphQLTypes['comercial_Planos'];
    /** delete data from the table: "comercial.PrestadoresDeServicos" */
    delete_comercial_PrestadoresDeServicos?: GraphQLTypes['comercial_PrestadoresDeServicos_mutation_response'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Produtos" */
    delete_comercial_PrestadoresDeServicos_Produtos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_mutation_response'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    delete_comercial_PrestadoresDeServicos_Produtos_Itens?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    delete_comercial_PrestadoresDeServicos_Produtos_Itens_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    delete_comercial_PrestadoresDeServicos_Produtos_Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    delete_comercial_PrestadoresDeServicos_Produtos_Precos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Produtos" */
    delete_comercial_PrestadoresDeServicos_Produtos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Servicos" */
    delete_comercial_PrestadoresDeServicos_Servicos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_mutation_response'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    delete_comercial_PrestadoresDeServicos_Servicos_Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    delete_comercial_PrestadoresDeServicos_Servicos_Precos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    /** delete data from the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    delete_comercial_PrestadoresDeServicos_Servicos_Tarifas?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    delete_comercial_PrestadoresDeServicos_Servicos_Tarifas_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos_Servicos" */
    delete_comercial_PrestadoresDeServicos_Servicos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** delete single row from the table: "comercial.PrestadoresDeServicos" */
    delete_comercial_PrestadoresDeServicos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos'];
    /** delete data from the table: "comercial.Produtos" */
    delete_comercial_Produtos?: GraphQLTypes['comercial_Produtos_mutation_response'];
    /** delete data from the table: "comercial.Produtos_Atributos" */
    delete_comercial_Produtos_Atributos?: GraphQLTypes['comercial_Produtos_Atributos_mutation_response'];
    /** delete single row from the table: "comercial.Produtos_Atributos" */
    delete_comercial_Produtos_Atributos_by_pk?: GraphQLTypes['comercial_Produtos_Atributos'];
    /** delete data from the table: "comercial.Produtos_Oportunidades" */
    delete_comercial_Produtos_Oportunidades?: GraphQLTypes['comercial_Produtos_Oportunidades_mutation_response'];
    /** delete single row from the table: "comercial.Produtos_Oportunidades" */
    delete_comercial_Produtos_Oportunidades_by_pk?: GraphQLTypes['comercial_Produtos_Oportunidades'];
    /** delete data from the table: "comercial.Produtos_Produtos" */
    delete_comercial_Produtos_Produtos?: GraphQLTypes['comercial_Produtos_Produtos_mutation_response'];
    /** delete single row from the table: "comercial.Produtos_Produtos" */
    delete_comercial_Produtos_Produtos_by_pk?: GraphQLTypes['comercial_Produtos_Produtos'];
    /** delete data from the table: "comercial.Produtos_Servicos" */
    delete_comercial_Produtos_Servicos?: GraphQLTypes['comercial_Produtos_Servicos_mutation_response'];
    /** delete single row from the table: "comercial.Produtos_Servicos" */
    delete_comercial_Produtos_Servicos_by_pk?: GraphQLTypes['comercial_Produtos_Servicos'];
    /** delete data from the table: "comercial.Produtos_Tipos" */
    delete_comercial_Produtos_Tipos?: GraphQLTypes['comercial_Produtos_Tipos_mutation_response'];
    /** delete single row from the table: "comercial.Produtos_Tipos" */
    delete_comercial_Produtos_Tipos_by_pk?: GraphQLTypes['comercial_Produtos_Tipos'];
    /** delete single row from the table: "comercial.Produtos" */
    delete_comercial_Produtos_by_pk?: GraphQLTypes['comercial_Produtos'];
    /** delete data from the table: "comercial.Servicos" */
    delete_comercial_Servicos?: GraphQLTypes['comercial_Servicos_mutation_response'];
    /** delete data from the table: "comercial.Servicos_Atributos" */
    delete_comercial_Servicos_Atributos?: GraphQLTypes['comercial_Servicos_Atributos_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Atributos" */
    delete_comercial_Servicos_Atributos_by_pk?: GraphQLTypes['comercial_Servicos_Atributos'];
    /** delete data from the table: "comercial.Servicos_Oportunidades" */
    delete_comercial_Servicos_Oportunidades?: GraphQLTypes['comercial_Servicos_Oportunidades_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Oportunidades" */
    delete_comercial_Servicos_Oportunidades_by_pk?: GraphQLTypes['comercial_Servicos_Oportunidades'];
    /** delete data from the table: "comercial.Servicos_Produtos" */
    delete_comercial_Servicos_Produtos?: GraphQLTypes['comercial_Servicos_Produtos_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Produtos" */
    delete_comercial_Servicos_Produtos_by_pk?: GraphQLTypes['comercial_Servicos_Produtos'];
    /** delete data from the table: "comercial.Servicos_Servicos" */
    delete_comercial_Servicos_Servicos?: GraphQLTypes['comercial_Servicos_Servicos_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Servicos" */
    delete_comercial_Servicos_Servicos_by_pk?: GraphQLTypes['comercial_Servicos_Servicos'];
    /** delete data from the table: "comercial.Servicos_Tarifas" */
    delete_comercial_Servicos_Tarifas?: GraphQLTypes['comercial_Servicos_Tarifas_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Tarifas" */
    delete_comercial_Servicos_Tarifas_by_pk?: GraphQLTypes['comercial_Servicos_Tarifas'];
    /** delete data from the table: "comercial.Servicos_Tipos" */
    delete_comercial_Servicos_Tipos?: GraphQLTypes['comercial_Servicos_Tipos_mutation_response'];
    /** delete single row from the table: "comercial.Servicos_Tipos" */
    delete_comercial_Servicos_Tipos_by_pk?: GraphQLTypes['comercial_Servicos_Tipos'];
    /** delete single row from the table: "comercial.Servicos" */
    delete_comercial_Servicos_by_pk?: GraphQLTypes['comercial_Servicos'];
    /** delete data from the table: "comercial.Tarifas" */
    delete_comercial_Tarifas?: GraphQLTypes['comercial_Tarifas_mutation_response'];
    /** delete single row from the table: "comercial.Tarifas" */
    delete_comercial_Tarifas_by_pk?: GraphQLTypes['comercial_Tarifas'];
    /** delete data from the table: "contatos.Emails" */
    delete_contatos_Emails?: GraphQLTypes['contatos_Emails_mutation_response'];
    /** delete single row from the table: "contatos.Emails" */
    delete_contatos_Emails_by_pk?: GraphQLTypes['contatos_Emails'];
    /** delete data from the table: "contatos.Enderecos" */
    delete_contatos_Enderecos?: GraphQLTypes['contatos_Enderecos_mutation_response'];
    /** delete single row from the table: "contatos.Enderecos" */
    delete_contatos_Enderecos_by_pk?: GraphQLTypes['contatos_Enderecos'];
    /** delete data from the table: "contatos.Logs" */
    delete_contatos_Logs?: GraphQLTypes['contatos_Logs_mutation_response'];
    /** delete single row from the table: "contatos.Logs" */
    delete_contatos_Logs_by_pk?: GraphQLTypes['contatos_Logs'];
    /** delete data from the table: "contatos.Telefones" */
    delete_contatos_Telefones?: GraphQLTypes['contatos_Telefones_mutation_response'];
    /** delete single row from the table: "contatos.Telefones" */
    delete_contatos_Telefones_by_pk?: GraphQLTypes['contatos_Telefones'];
    /** delete data from the table: "identidades.Clientes" */
    delete_identidades_Clientes?: GraphQLTypes['identidades_Clientes_mutation_response'];
    /** delete data from the table: "identidades.Clientes_Documentos" */
    delete_identidades_Clientes_Documentos?: GraphQLTypes['identidades_Clientes_Documentos_mutation_response'];
    /** delete data from the table: "identidades.Clientes_Documentos_Situacoes" */
    delete_identidades_Clientes_Documentos_Situacoes?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_mutation_response'];
    /** delete single row from the table: "identidades.Clientes_Documentos_Situacoes" */
    delete_identidades_Clientes_Documentos_Situacoes_by_pk?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes'];
    /** delete single row from the table: "identidades.Clientes_Documentos" */
    delete_identidades_Clientes_Documentos_by_pk?: GraphQLTypes['identidades_Clientes_Documentos'];
    /** delete single row from the table: "identidades.Clientes" */
    delete_identidades_Clientes_by_pk?: GraphQLTypes['identidades_Clientes'];
    /** delete data from the table: "identidades.Colaboradores" */
    delete_identidades_Colaboradores?: GraphQLTypes['identidades_Colaboradores_mutation_response'];
    /** delete single row from the table: "identidades.Colaboradores" */
    delete_identidades_Colaboradores_by_pk?: GraphQLTypes['identidades_Colaboradores'];
    /** delete data from the table: "identidades.Fornecedores" */
    delete_identidades_Fornecedores?: GraphQLTypes['identidades_Fornecedores_mutation_response'];
    /** delete single row from the table: "identidades.Fornecedores" */
    delete_identidades_Fornecedores_by_pk?: GraphQLTypes['identidades_Fornecedores'];
    /** delete data from the table: "identidades.Logs" */
    delete_identidades_Logs?: GraphQLTypes['identidades_Logs_mutation_response'];
    /** delete single row from the table: "identidades.Logs" */
    delete_identidades_Logs_by_pk?: GraphQLTypes['identidades_Logs'];
    /** delete data from the table: "identidades.Pessoas" */
    delete_identidades_Pessoas?: GraphQLTypes['identidades_Pessoas_mutation_response'];
    /** delete single row from the table: "identidades.Pessoas" */
    delete_identidades_Pessoas_by_pk?: GraphQLTypes['identidades_Pessoas'];
    /** delete data from the table: "identidades.Representantes" */
    delete_identidades_Representantes?: GraphQLTypes['identidades_Representantes_mutation_response'];
    /** delete single row from the table: "identidades.Representantes" */
    delete_identidades_Representantes_by_pk?: GraphQLTypes['identidades_Representantes'];
    /** delete data from the table: "identidades.Vendedores" */
    delete_identidades_Vendedores?: GraphQLTypes['identidades_Vendedores_mutation_response'];
    /** delete single row from the table: "identidades.Vendedores" */
    delete_identidades_Vendedores_by_pk?: GraphQLTypes['identidades_Vendedores'];
    /** delete data from the table: "propostas.Propostas" */
    delete_propostas_Propostas?: GraphQLTypes['propostas_Propostas_mutation_response'];
    /** delete data from the table: "propostas.Propostas_Combos" */
    delete_propostas_Propostas_Combos?: GraphQLTypes['propostas_Propostas_Combos_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Combos" */
    delete_propostas_Propostas_Combos_by_pk?: GraphQLTypes['propostas_Propostas_Combos'];
    /** delete data from the table: "propostas.Propostas_Instalacoes" */
    delete_propostas_Propostas_Instalacoes?: GraphQLTypes['propostas_Propostas_Instalacoes_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Instalacoes" */
    delete_propostas_Propostas_Instalacoes_by_pk?: GraphQLTypes['propostas_Propostas_Instalacoes'];
    /** delete data from the table: "propostas.Propostas_Oportunidades" */
    delete_propostas_Propostas_Oportunidades?: GraphQLTypes['propostas_Propostas_Oportunidades_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Oportunidades" */
    delete_propostas_Propostas_Oportunidades_by_pk?: GraphQLTypes['propostas_Propostas_Oportunidades'];
    /** delete data from the table: "propostas.Propostas_Planos" */
    delete_propostas_Propostas_Planos?: GraphQLTypes['propostas_Propostas_Planos_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Planos" */
    delete_propostas_Propostas_Planos_by_pk?: GraphQLTypes['propostas_Propostas_Planos'];
    /** delete data from the table: "propostas.Propostas_Produtos" */
    delete_propostas_Propostas_Produtos?: GraphQLTypes['propostas_Propostas_Produtos_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Produtos" */
    delete_propostas_Propostas_Produtos_by_pk?: GraphQLTypes['propostas_Propostas_Produtos'];
    /** delete data from the table: "propostas.Propostas_Servicos" */
    delete_propostas_Propostas_Servicos?: GraphQLTypes['propostas_Propostas_Servicos_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Servicos" */
    delete_propostas_Propostas_Servicos_by_pk?: GraphQLTypes['propostas_Propostas_Servicos'];
    /** delete data from the table: "propostas.Propostas_Situacoes" */
    delete_propostas_Propostas_Situacoes?: GraphQLTypes['propostas_Propostas_Situacoes_mutation_response'];
    /** delete single row from the table: "propostas.Propostas_Situacoes" */
    delete_propostas_Propostas_Situacoes_by_pk?: GraphQLTypes['propostas_Propostas_Situacoes'];
    /** delete single row from the table: "propostas.Propostas" */
    delete_propostas_Propostas_by_pk?: GraphQLTypes['propostas_Propostas'];
    /** delete data from the table: "vendas.GruposDePerguntas" */
    delete_vendas_GruposDePerguntas?: GraphQLTypes['vendas_GruposDePerguntas_mutation_response'];
    /** delete data from the table: "vendas.GruposDePerguntas_Perguntas" */
    delete_vendas_GruposDePerguntas_Perguntas?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_mutation_response'];
    /** delete single row from the table: "vendas.GruposDePerguntas_Perguntas" */
    delete_vendas_GruposDePerguntas_Perguntas_by_pk?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas'];
    /** delete single row from the table: "vendas.GruposDePerguntas" */
    delete_vendas_GruposDePerguntas_by_pk?: GraphQLTypes['vendas_GruposDePerguntas'];
    /** delete data from the table: "vendas.Perguntas" */
    delete_vendas_Perguntas?: GraphQLTypes['vendas_Perguntas_mutation_response'];
    /** delete single row from the table: "vendas.Perguntas" */
    delete_vendas_Perguntas_by_pk?: GraphQLTypes['vendas_Perguntas'];
    /** delete data from the table: "vendas.TiposDePagamento" */
    delete_vendas_TiposDePagamento?: GraphQLTypes['vendas_TiposDePagamento_mutation_response'];
    /** delete single row from the table: "vendas.TiposDePagamento" */
    delete_vendas_TiposDePagamento_by_pk?: GraphQLTypes['vendas_TiposDePagamento'];
    /** delete data from the table: "vendas.TiposDePrecos" */
    delete_vendas_TiposDePrecos?: GraphQLTypes['vendas_TiposDePrecos_mutation_response'];
    /** delete single row from the table: "vendas.TiposDePrecos" */
    delete_vendas_TiposDePrecos_by_pk?: GraphQLTypes['vendas_TiposDePrecos'];
    /** delete data from the table: "vendas.TiposDeRecorrencia" */
    delete_vendas_TiposDeRecorrencia?: GraphQLTypes['vendas_TiposDeRecorrencia_mutation_response'];
    /** delete single row from the table: "vendas.TiposDeRecorrencia" */
    delete_vendas_TiposDeRecorrencia_by_pk?: GraphQLTypes['vendas_TiposDeRecorrencia'];
    /** insert data into the table: "CategoriasDeVeiculos" */
    insert_CategoriasDeVeiculos?: GraphQLTypes['CategoriasDeVeiculos_mutation_response'];
    /** insert a single row into the table: "CategoriasDeVeiculos" */
    insert_CategoriasDeVeiculos_one?: GraphQLTypes['CategoriasDeVeiculos'];
    /** insert data into the table: "EstadosEMunicipios" */
    insert_EstadosEMunicipios?: GraphQLTypes['EstadosEMunicipios_mutation_response'];
    /** insert a single row into the table: "EstadosEMunicipios" */
    insert_EstadosEMunicipios_one?: GraphQLTypes['EstadosEMunicipios'];
    /** insert data into the table: "atendimentos.EtapasDosFluxos" */
    insert_atendimentos_EtapasDosFluxos?: GraphQLTypes['atendimentos_EtapasDosFluxos_mutation_response'];
    /** insert a single row into the table: "atendimentos.EtapasDosFluxos" */
    insert_atendimentos_EtapasDosFluxos_one?: GraphQLTypes['atendimentos_EtapasDosFluxos'];
    /** insert data into the table: "atendimentos.Fluxos" */
    insert_atendimentos_Fluxos?: GraphQLTypes['atendimentos_Fluxos_mutation_response'];
    /** insert a single row into the table: "atendimentos.Fluxos" */
    insert_atendimentos_Fluxos_one?: GraphQLTypes['atendimentos_Fluxos'];
    /** insert data into the table: "atendimentos.Tickets" */
    insert_atendimentos_Tickets?: GraphQLTypes['atendimentos_Tickets_mutation_response'];
    /** insert a single row into the table: "atendimentos.Tickets" */
    insert_atendimentos_Tickets_one?: GraphQLTypes['atendimentos_Tickets'];
    /** insert data into the table: "atendimentos.TiposDeTickets" */
    insert_atendimentos_TiposDeTickets?: GraphQLTypes['atendimentos_TiposDeTickets_mutation_response'];
    /** insert a single row into the table: "atendimentos.TiposDeTickets" */
    insert_atendimentos_TiposDeTickets_one?: GraphQLTypes['atendimentos_TiposDeTickets'];
    /** insert data into the table: "autenticacao.Atendentes" */
    insert_autenticacao_Atendentes?: GraphQLTypes['autenticacao_Atendentes_mutation_response'];
    /** insert a single row into the table: "autenticacao.Atendentes" */
    insert_autenticacao_Atendentes_one?: GraphQLTypes['autenticacao_Atendentes'];
    /** insert data into the table: "autenticacao.Usuarios" */
    insert_autenticacao_Usuarios?: GraphQLTypes['autenticacao_Usuarios_mutation_response'];
    /** insert a single row into the table: "autenticacao.Usuarios" */
    insert_autenticacao_Usuarios_one?: GraphQLTypes['autenticacao_Usuarios'];
    /** insert data into the table: "clientes.Leads" */
    insert_clientes_Leads?: GraphQLTypes['clientes_Leads_mutation_response'];
    /** insert a single row into the table: "clientes.Leads" */
    insert_clientes_Leads_one?: GraphQLTypes['clientes_Leads'];
    /** insert data into the table: "clientes.PerfisComerciais" */
    insert_clientes_PerfisComerciais?: GraphQLTypes['clientes_PerfisComerciais_mutation_response'];
    /** insert a single row into the table: "clientes.PerfisComerciais" */
    insert_clientes_PerfisComerciais_one?: GraphQLTypes['clientes_PerfisComerciais'];
    /** insert data into the table: "clientes.Veiculos" */
    insert_clientes_Veiculos?: GraphQLTypes['clientes_Veiculos_mutation_response'];
    /** insert data into the table: "clientes.VeiculosAtivos" */
    insert_clientes_VeiculosAtivos?: GraphQLTypes['clientes_VeiculosAtivos_mutation_response'];
    /** insert data into the table: "clientes.VeiculosAtivos_Beneficios" */
    insert_clientes_VeiculosAtivos_Beneficios?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_mutation_response'];
    /** insert a single row into the table: "clientes.VeiculosAtivos_Beneficios" */
    insert_clientes_VeiculosAtivos_Beneficios_one?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios'];
    /** insert data into the table: "clientes.VeiculosAtivos_Produtos" */
    insert_clientes_VeiculosAtivos_Produtos?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_mutation_response'];
    /** insert a single row into the table: "clientes.VeiculosAtivos_Produtos" */
    insert_clientes_VeiculosAtivos_Produtos_one?: GraphQLTypes['clientes_VeiculosAtivos_Produtos'];
    /** insert data into the table: "clientes.VeiculosAtivos_Servicos" */
    insert_clientes_VeiculosAtivos_Servicos?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_mutation_response'];
    /** insert a single row into the table: "clientes.VeiculosAtivos_Servicos" */
    insert_clientes_VeiculosAtivos_Servicos_one?: GraphQLTypes['clientes_VeiculosAtivos_Servicos'];
    /** insert data into the table: "clientes.VeiculosAtivos_Situacao" */
    insert_clientes_VeiculosAtivos_Situacao?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_mutation_response'];
    /** insert a single row into the table: "clientes.VeiculosAtivos_Situacao" */
    insert_clientes_VeiculosAtivos_Situacao_one?: GraphQLTypes['clientes_VeiculosAtivos_Situacao'];
    /** insert a single row into the table: "clientes.VeiculosAtivos" */
    insert_clientes_VeiculosAtivos_one?: GraphQLTypes['clientes_VeiculosAtivos'];
    /** insert a single row into the table: "clientes.Veiculos" */
    insert_clientes_Veiculos_one?: GraphQLTypes['clientes_Veiculos'];
    /** insert data into the table: "comercial.Acoes" */
    insert_comercial_Acoes?: GraphQLTypes['comercial_Acoes_mutation_response'];
    /** insert a single row into the table: "comercial.Acoes" */
    insert_comercial_Acoes_one?: GraphQLTypes['comercial_Acoes'];
    /** insert data into the table: "comercial.Atributos" */
    insert_comercial_Atributos?: GraphQLTypes['comercial_Atributos_mutation_response'];
    /** insert a single row into the table: "comercial.Atributos" */
    insert_comercial_Atributos_one?: GraphQLTypes['comercial_Atributos'];
    /** insert data into the table: "comercial.Coberturas" */
    insert_comercial_Coberturas?: GraphQLTypes['comercial_Coberturas_mutation_response'];
    /** insert a single row into the table: "comercial.Coberturas" */
    insert_comercial_Coberturas_one?: GraphQLTypes['comercial_Coberturas'];
    /** insert data into the table: "comercial.Combos" */
    insert_comercial_Combos?: GraphQLTypes['comercial_Combos_mutation_response'];
    /** insert data into the table: "comercial.Combos_Combos" */
    insert_comercial_Combos_Combos?: GraphQLTypes['comercial_Combos_Combos_mutation_response'];
    /** insert a single row into the table: "comercial.Combos_Combos" */
    insert_comercial_Combos_Combos_one?: GraphQLTypes['comercial_Combos_Combos'];
    /** insert data into the table: "comercial.Combos_Planos" */
    insert_comercial_Combos_Planos?: GraphQLTypes['comercial_Combos_Planos_mutation_response'];
    /** insert a single row into the table: "comercial.Combos_Planos" */
    insert_comercial_Combos_Planos_one?: GraphQLTypes['comercial_Combos_Planos'];
    /** insert data into the table: "comercial.Combos_Precos" */
    insert_comercial_Combos_Precos?: GraphQLTypes['comercial_Combos_Precos_mutation_response'];
    /** insert a single row into the table: "comercial.Combos_Precos" */
    insert_comercial_Combos_Precos_one?: GraphQLTypes['comercial_Combos_Precos'];
    /** insert data into the table: "comercial.Combos_Produtos" */
    insert_comercial_Combos_Produtos?: GraphQLTypes['comercial_Combos_Produtos_mutation_response'];
    /** insert a single row into the table: "comercial.Combos_Produtos" */
    insert_comercial_Combos_Produtos_one?: GraphQLTypes['comercial_Combos_Produtos'];
    /** insert data into the table: "comercial.Combos_Servicos" */
    insert_comercial_Combos_Servicos?: GraphQLTypes['comercial_Combos_Servicos_mutation_response'];
    /** insert a single row into the table: "comercial.Combos_Servicos" */
    insert_comercial_Combos_Servicos_one?: GraphQLTypes['comercial_Combos_Servicos'];
    /** insert a single row into the table: "comercial.Combos" */
    insert_comercial_Combos_one?: GraphQLTypes['comercial_Combos'];
    /** insert data into the table: "comercial.Condicionais" */
    insert_comercial_Condicionais?: GraphQLTypes['comercial_Condicionais_mutation_response'];
    /** insert data into the table: "comercial.CondicionaisSituacoes" */
    insert_comercial_CondicionaisSituacoes?: GraphQLTypes['comercial_CondicionaisSituacoes_mutation_response'];
    /** insert a single row into the table: "comercial.CondicionaisSituacoes" */
    insert_comercial_CondicionaisSituacoes_one?: GraphQLTypes['comercial_CondicionaisSituacoes'];
    /** insert a single row into the table: "comercial.Condicionais" */
    insert_comercial_Condicionais_one?: GraphQLTypes['comercial_Condicionais'];
    /** insert data into the table: "comercial.ContratosBase" */
    insert_comercial_ContratosBase?: GraphQLTypes['comercial_ContratosBase_mutation_response'];
    /** insert data into the table: "comercial.ContratosBase_Versoes" */
    insert_comercial_ContratosBase_Versoes?: GraphQLTypes['comercial_ContratosBase_Versoes_mutation_response'];
    /** insert a single row into the table: "comercial.ContratosBase_Versoes" */
    insert_comercial_ContratosBase_Versoes_one?: GraphQLTypes['comercial_ContratosBase_Versoes'];
    /** insert a single row into the table: "comercial.ContratosBase" */
    insert_comercial_ContratosBase_one?: GraphQLTypes['comercial_ContratosBase'];
    /** insert data into the table: "comercial.Planos" */
    insert_comercial_Planos?: GraphQLTypes['comercial_Planos_mutation_response'];
    /** insert data into the table: "comercial.Planos_Condicionais" */
    insert_comercial_Planos_Condicionais?: GraphQLTypes['comercial_Planos_Condicionais_mutation_response'];
    /** insert a single row into the table: "comercial.Planos_Condicionais" */
    insert_comercial_Planos_Condicionais_one?: GraphQLTypes['comercial_Planos_Condicionais'];
    /** insert data into the table: "comercial.Planos_Precos" */
    insert_comercial_Planos_Precos?: GraphQLTypes['comercial_Planos_Precos_mutation_response'];
    /** insert a single row into the table: "comercial.Planos_Precos" */
    insert_comercial_Planos_Precos_one?: GraphQLTypes['comercial_Planos_Precos'];
    /** insert a single row into the table: "comercial.Planos" */
    insert_comercial_Planos_one?: GraphQLTypes['comercial_Planos'];
    /** insert data into the table: "comercial.PrestadoresDeServicos" */
    insert_comercial_PrestadoresDeServicos?: GraphQLTypes['comercial_PrestadoresDeServicos_mutation_response'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Produtos" */
    insert_comercial_PrestadoresDeServicos_Produtos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_mutation_response'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    insert_comercial_PrestadoresDeServicos_Produtos_Itens?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    insert_comercial_PrestadoresDeServicos_Produtos_Itens_one?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    insert_comercial_PrestadoresDeServicos_Produtos_Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    insert_comercial_PrestadoresDeServicos_Produtos_Precos_one?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Produtos" */
    insert_comercial_PrestadoresDeServicos_Produtos_one?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Servicos" */
    insert_comercial_PrestadoresDeServicos_Servicos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_mutation_response'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    insert_comercial_PrestadoresDeServicos_Servicos_Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    insert_comercial_PrestadoresDeServicos_Servicos_Precos_one?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    /** insert data into the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    insert_comercial_PrestadoresDeServicos_Servicos_Tarifas?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    insert_comercial_PrestadoresDeServicos_Servicos_Tarifas_one?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos_Servicos" */
    insert_comercial_PrestadoresDeServicos_Servicos_one?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** insert a single row into the table: "comercial.PrestadoresDeServicos" */
    insert_comercial_PrestadoresDeServicos_one?: GraphQLTypes['comercial_PrestadoresDeServicos'];
    /** insert data into the table: "comercial.Produtos" */
    insert_comercial_Produtos?: GraphQLTypes['comercial_Produtos_mutation_response'];
    /** insert data into the table: "comercial.Produtos_Atributos" */
    insert_comercial_Produtos_Atributos?: GraphQLTypes['comercial_Produtos_Atributos_mutation_response'];
    /** insert a single row into the table: "comercial.Produtos_Atributos" */
    insert_comercial_Produtos_Atributos_one?: GraphQLTypes['comercial_Produtos_Atributos'];
    /** insert data into the table: "comercial.Produtos_Oportunidades" */
    insert_comercial_Produtos_Oportunidades?: GraphQLTypes['comercial_Produtos_Oportunidades_mutation_response'];
    /** insert a single row into the table: "comercial.Produtos_Oportunidades" */
    insert_comercial_Produtos_Oportunidades_one?: GraphQLTypes['comercial_Produtos_Oportunidades'];
    /** insert data into the table: "comercial.Produtos_Produtos" */
    insert_comercial_Produtos_Produtos?: GraphQLTypes['comercial_Produtos_Produtos_mutation_response'];
    /** insert a single row into the table: "comercial.Produtos_Produtos" */
    insert_comercial_Produtos_Produtos_one?: GraphQLTypes['comercial_Produtos_Produtos'];
    /** insert data into the table: "comercial.Produtos_Servicos" */
    insert_comercial_Produtos_Servicos?: GraphQLTypes['comercial_Produtos_Servicos_mutation_response'];
    /** insert a single row into the table: "comercial.Produtos_Servicos" */
    insert_comercial_Produtos_Servicos_one?: GraphQLTypes['comercial_Produtos_Servicos'];
    /** insert data into the table: "comercial.Produtos_Tipos" */
    insert_comercial_Produtos_Tipos?: GraphQLTypes['comercial_Produtos_Tipos_mutation_response'];
    /** insert a single row into the table: "comercial.Produtos_Tipos" */
    insert_comercial_Produtos_Tipos_one?: GraphQLTypes['comercial_Produtos_Tipos'];
    /** insert a single row into the table: "comercial.Produtos" */
    insert_comercial_Produtos_one?: GraphQLTypes['comercial_Produtos'];
    /** insert data into the table: "comercial.Servicos" */
    insert_comercial_Servicos?: GraphQLTypes['comercial_Servicos_mutation_response'];
    /** insert data into the table: "comercial.Servicos_Atributos" */
    insert_comercial_Servicos_Atributos?: GraphQLTypes['comercial_Servicos_Atributos_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Atributos" */
    insert_comercial_Servicos_Atributos_one?: GraphQLTypes['comercial_Servicos_Atributos'];
    /** insert data into the table: "comercial.Servicos_Oportunidades" */
    insert_comercial_Servicos_Oportunidades?: GraphQLTypes['comercial_Servicos_Oportunidades_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Oportunidades" */
    insert_comercial_Servicos_Oportunidades_one?: GraphQLTypes['comercial_Servicos_Oportunidades'];
    /** insert data into the table: "comercial.Servicos_Produtos" */
    insert_comercial_Servicos_Produtos?: GraphQLTypes['comercial_Servicos_Produtos_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Produtos" */
    insert_comercial_Servicos_Produtos_one?: GraphQLTypes['comercial_Servicos_Produtos'];
    /** insert data into the table: "comercial.Servicos_Servicos" */
    insert_comercial_Servicos_Servicos?: GraphQLTypes['comercial_Servicos_Servicos_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Servicos" */
    insert_comercial_Servicos_Servicos_one?: GraphQLTypes['comercial_Servicos_Servicos'];
    /** insert data into the table: "comercial.Servicos_Tarifas" */
    insert_comercial_Servicos_Tarifas?: GraphQLTypes['comercial_Servicos_Tarifas_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Tarifas" */
    insert_comercial_Servicos_Tarifas_one?: GraphQLTypes['comercial_Servicos_Tarifas'];
    /** insert data into the table: "comercial.Servicos_Tipos" */
    insert_comercial_Servicos_Tipos?: GraphQLTypes['comercial_Servicos_Tipos_mutation_response'];
    /** insert a single row into the table: "comercial.Servicos_Tipos" */
    insert_comercial_Servicos_Tipos_one?: GraphQLTypes['comercial_Servicos_Tipos'];
    /** insert a single row into the table: "comercial.Servicos" */
    insert_comercial_Servicos_one?: GraphQLTypes['comercial_Servicos'];
    /** insert data into the table: "comercial.Tarifas" */
    insert_comercial_Tarifas?: GraphQLTypes['comercial_Tarifas_mutation_response'];
    /** insert a single row into the table: "comercial.Tarifas" */
    insert_comercial_Tarifas_one?: GraphQLTypes['comercial_Tarifas'];
    /** insert data into the table: "contatos.Emails" */
    insert_contatos_Emails?: GraphQLTypes['contatos_Emails_mutation_response'];
    /** insert a single row into the table: "contatos.Emails" */
    insert_contatos_Emails_one?: GraphQLTypes['contatos_Emails'];
    /** insert data into the table: "contatos.Enderecos" */
    insert_contatos_Enderecos?: GraphQLTypes['contatos_Enderecos_mutation_response'];
    /** insert a single row into the table: "contatos.Enderecos" */
    insert_contatos_Enderecos_one?: GraphQLTypes['contatos_Enderecos'];
    /** insert data into the table: "contatos.Logs" */
    insert_contatos_Logs?: GraphQLTypes['contatos_Logs_mutation_response'];
    /** insert a single row into the table: "contatos.Logs" */
    insert_contatos_Logs_one?: GraphQLTypes['contatos_Logs'];
    /** insert data into the table: "contatos.Telefones" */
    insert_contatos_Telefones?: GraphQLTypes['contatos_Telefones_mutation_response'];
    /** insert a single row into the table: "contatos.Telefones" */
    insert_contatos_Telefones_one?: GraphQLTypes['contatos_Telefones'];
    /** insert data into the table: "identidades.Clientes" */
    insert_identidades_Clientes?: GraphQLTypes['identidades_Clientes_mutation_response'];
    /** insert data into the table: "identidades.Clientes_Documentos" */
    insert_identidades_Clientes_Documentos?: GraphQLTypes['identidades_Clientes_Documentos_mutation_response'];
    /** insert data into the table: "identidades.Clientes_Documentos_Situacoes" */
    insert_identidades_Clientes_Documentos_Situacoes?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_mutation_response'];
    /** insert a single row into the table: "identidades.Clientes_Documentos_Situacoes" */
    insert_identidades_Clientes_Documentos_Situacoes_one?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes'];
    /** insert a single row into the table: "identidades.Clientes_Documentos" */
    insert_identidades_Clientes_Documentos_one?: GraphQLTypes['identidades_Clientes_Documentos'];
    /** insert a single row into the table: "identidades.Clientes" */
    insert_identidades_Clientes_one?: GraphQLTypes['identidades_Clientes'];
    /** insert data into the table: "identidades.Colaboradores" */
    insert_identidades_Colaboradores?: GraphQLTypes['identidades_Colaboradores_mutation_response'];
    /** insert a single row into the table: "identidades.Colaboradores" */
    insert_identidades_Colaboradores_one?: GraphQLTypes['identidades_Colaboradores'];
    /** insert data into the table: "identidades.Fornecedores" */
    insert_identidades_Fornecedores?: GraphQLTypes['identidades_Fornecedores_mutation_response'];
    /** insert a single row into the table: "identidades.Fornecedores" */
    insert_identidades_Fornecedores_one?: GraphQLTypes['identidades_Fornecedores'];
    /** insert data into the table: "identidades.Logs" */
    insert_identidades_Logs?: GraphQLTypes['identidades_Logs_mutation_response'];
    /** insert a single row into the table: "identidades.Logs" */
    insert_identidades_Logs_one?: GraphQLTypes['identidades_Logs'];
    /** insert data into the table: "identidades.Pessoas" */
    insert_identidades_Pessoas?: GraphQLTypes['identidades_Pessoas_mutation_response'];
    /** insert a single row into the table: "identidades.Pessoas" */
    insert_identidades_Pessoas_one?: GraphQLTypes['identidades_Pessoas'];
    /** insert data into the table: "identidades.Representantes" */
    insert_identidades_Representantes?: GraphQLTypes['identidades_Representantes_mutation_response'];
    /** insert a single row into the table: "identidades.Representantes" */
    insert_identidades_Representantes_one?: GraphQLTypes['identidades_Representantes'];
    /** insert data into the table: "identidades.Vendedores" */
    insert_identidades_Vendedores?: GraphQLTypes['identidades_Vendedores_mutation_response'];
    /** insert a single row into the table: "identidades.Vendedores" */
    insert_identidades_Vendedores_one?: GraphQLTypes['identidades_Vendedores'];
    /** insert data into the table: "propostas.Propostas" */
    insert_propostas_Propostas?: GraphQLTypes['propostas_Propostas_mutation_response'];
    /** insert data into the table: "propostas.Propostas_Combos" */
    insert_propostas_Propostas_Combos?: GraphQLTypes['propostas_Propostas_Combos_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Combos" */
    insert_propostas_Propostas_Combos_one?: GraphQLTypes['propostas_Propostas_Combos'];
    /** insert data into the table: "propostas.Propostas_Instalacoes" */
    insert_propostas_Propostas_Instalacoes?: GraphQLTypes['propostas_Propostas_Instalacoes_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Instalacoes" */
    insert_propostas_Propostas_Instalacoes_one?: GraphQLTypes['propostas_Propostas_Instalacoes'];
    /** insert data into the table: "propostas.Propostas_Oportunidades" */
    insert_propostas_Propostas_Oportunidades?: GraphQLTypes['propostas_Propostas_Oportunidades_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Oportunidades" */
    insert_propostas_Propostas_Oportunidades_one?: GraphQLTypes['propostas_Propostas_Oportunidades'];
    /** insert data into the table: "propostas.Propostas_Planos" */
    insert_propostas_Propostas_Planos?: GraphQLTypes['propostas_Propostas_Planos_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Planos" */
    insert_propostas_Propostas_Planos_one?: GraphQLTypes['propostas_Propostas_Planos'];
    /** insert data into the table: "propostas.Propostas_Produtos" */
    insert_propostas_Propostas_Produtos?: GraphQLTypes['propostas_Propostas_Produtos_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Produtos" */
    insert_propostas_Propostas_Produtos_one?: GraphQLTypes['propostas_Propostas_Produtos'];
    /** insert data into the table: "propostas.Propostas_Servicos" */
    insert_propostas_Propostas_Servicos?: GraphQLTypes['propostas_Propostas_Servicos_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Servicos" */
    insert_propostas_Propostas_Servicos_one?: GraphQLTypes['propostas_Propostas_Servicos'];
    /** insert data into the table: "propostas.Propostas_Situacoes" */
    insert_propostas_Propostas_Situacoes?: GraphQLTypes['propostas_Propostas_Situacoes_mutation_response'];
    /** insert a single row into the table: "propostas.Propostas_Situacoes" */
    insert_propostas_Propostas_Situacoes_one?: GraphQLTypes['propostas_Propostas_Situacoes'];
    /** insert a single row into the table: "propostas.Propostas" */
    insert_propostas_Propostas_one?: GraphQLTypes['propostas_Propostas'];
    /** insert data into the table: "vendas.GruposDePerguntas" */
    insert_vendas_GruposDePerguntas?: GraphQLTypes['vendas_GruposDePerguntas_mutation_response'];
    /** insert data into the table: "vendas.GruposDePerguntas_Perguntas" */
    insert_vendas_GruposDePerguntas_Perguntas?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_mutation_response'];
    /** insert a single row into the table: "vendas.GruposDePerguntas_Perguntas" */
    insert_vendas_GruposDePerguntas_Perguntas_one?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas'];
    /** insert a single row into the table: "vendas.GruposDePerguntas" */
    insert_vendas_GruposDePerguntas_one?: GraphQLTypes['vendas_GruposDePerguntas'];
    /** insert data into the table: "vendas.Perguntas" */
    insert_vendas_Perguntas?: GraphQLTypes['vendas_Perguntas_mutation_response'];
    /** insert a single row into the table: "vendas.Perguntas" */
    insert_vendas_Perguntas_one?: GraphQLTypes['vendas_Perguntas'];
    /** insert data into the table: "vendas.TiposDePagamento" */
    insert_vendas_TiposDePagamento?: GraphQLTypes['vendas_TiposDePagamento_mutation_response'];
    /** insert a single row into the table: "vendas.TiposDePagamento" */
    insert_vendas_TiposDePagamento_one?: GraphQLTypes['vendas_TiposDePagamento'];
    /** insert data into the table: "vendas.TiposDePrecos" */
    insert_vendas_TiposDePrecos?: GraphQLTypes['vendas_TiposDePrecos_mutation_response'];
    /** insert a single row into the table: "vendas.TiposDePrecos" */
    insert_vendas_TiposDePrecos_one?: GraphQLTypes['vendas_TiposDePrecos'];
    /** insert data into the table: "vendas.TiposDeRecorrencia" */
    insert_vendas_TiposDeRecorrencia?: GraphQLTypes['vendas_TiposDeRecorrencia_mutation_response'];
    /** insert a single row into the table: "vendas.TiposDeRecorrencia" */
    insert_vendas_TiposDeRecorrencia_one?: GraphQLTypes['vendas_TiposDeRecorrencia'];
    /** update data of the table: "CategoriasDeVeiculos" */
    update_CategoriasDeVeiculos?: GraphQLTypes['CategoriasDeVeiculos_mutation_response'];
    /** update single row of the table: "CategoriasDeVeiculos" */
    update_CategoriasDeVeiculos_by_pk?: GraphQLTypes['CategoriasDeVeiculos'];
    /** update data of the table: "EstadosEMunicipios" */
    update_EstadosEMunicipios?: GraphQLTypes['EstadosEMunicipios_mutation_response'];
    /** update single row of the table: "EstadosEMunicipios" */
    update_EstadosEMunicipios_by_pk?: GraphQLTypes['EstadosEMunicipios'];
    /** update data of the table: "atendimentos.EtapasDosFluxos" */
    update_atendimentos_EtapasDosFluxos?: GraphQLTypes['atendimentos_EtapasDosFluxos_mutation_response'];
    /** update single row of the table: "atendimentos.EtapasDosFluxos" */
    update_atendimentos_EtapasDosFluxos_by_pk?: GraphQLTypes['atendimentos_EtapasDosFluxos'];
    /** update data of the table: "atendimentos.Fluxos" */
    update_atendimentos_Fluxos?: GraphQLTypes['atendimentos_Fluxos_mutation_response'];
    /** update single row of the table: "atendimentos.Fluxos" */
    update_atendimentos_Fluxos_by_pk?: GraphQLTypes['atendimentos_Fluxos'];
    /** update data of the table: "atendimentos.Tickets" */
    update_atendimentos_Tickets?: GraphQLTypes['atendimentos_Tickets_mutation_response'];
    /** update single row of the table: "atendimentos.Tickets" */
    update_atendimentos_Tickets_by_pk?: GraphQLTypes['atendimentos_Tickets'];
    /** update data of the table: "atendimentos.TiposDeTickets" */
    update_atendimentos_TiposDeTickets?: GraphQLTypes['atendimentos_TiposDeTickets_mutation_response'];
    /** update single row of the table: "atendimentos.TiposDeTickets" */
    update_atendimentos_TiposDeTickets_by_pk?: GraphQLTypes['atendimentos_TiposDeTickets'];
    /** update data of the table: "autenticacao.Atendentes" */
    update_autenticacao_Atendentes?: GraphQLTypes['autenticacao_Atendentes_mutation_response'];
    /** update single row of the table: "autenticacao.Atendentes" */
    update_autenticacao_Atendentes_by_pk?: GraphQLTypes['autenticacao_Atendentes'];
    /** update data of the table: "autenticacao.Usuarios" */
    update_autenticacao_Usuarios?: GraphQLTypes['autenticacao_Usuarios_mutation_response'];
    /** update single row of the table: "autenticacao.Usuarios" */
    update_autenticacao_Usuarios_by_pk?: GraphQLTypes['autenticacao_Usuarios'];
    /** update data of the table: "clientes.Leads" */
    update_clientes_Leads?: GraphQLTypes['clientes_Leads_mutation_response'];
    /** update single row of the table: "clientes.Leads" */
    update_clientes_Leads_by_pk?: GraphQLTypes['clientes_Leads'];
    /** update data of the table: "clientes.PerfisComerciais" */
    update_clientes_PerfisComerciais?: GraphQLTypes['clientes_PerfisComerciais_mutation_response'];
    /** update single row of the table: "clientes.PerfisComerciais" */
    update_clientes_PerfisComerciais_by_pk?: GraphQLTypes['clientes_PerfisComerciais'];
    /** update data of the table: "clientes.Veiculos" */
    update_clientes_Veiculos?: GraphQLTypes['clientes_Veiculos_mutation_response'];
    /** update data of the table: "clientes.VeiculosAtivos" */
    update_clientes_VeiculosAtivos?: GraphQLTypes['clientes_VeiculosAtivos_mutation_response'];
    /** update data of the table: "clientes.VeiculosAtivos_Beneficios" */
    update_clientes_VeiculosAtivos_Beneficios?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_mutation_response'];
    /** update single row of the table: "clientes.VeiculosAtivos_Beneficios" */
    update_clientes_VeiculosAtivos_Beneficios_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios'];
    /** update data of the table: "clientes.VeiculosAtivos_Produtos" */
    update_clientes_VeiculosAtivos_Produtos?: GraphQLTypes['clientes_VeiculosAtivos_Produtos_mutation_response'];
    /** update single row of the table: "clientes.VeiculosAtivos_Produtos" */
    update_clientes_VeiculosAtivos_Produtos_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Produtos'];
    /** update data of the table: "clientes.VeiculosAtivos_Servicos" */
    update_clientes_VeiculosAtivos_Servicos?: GraphQLTypes['clientes_VeiculosAtivos_Servicos_mutation_response'];
    /** update single row of the table: "clientes.VeiculosAtivos_Servicos" */
    update_clientes_VeiculosAtivos_Servicos_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Servicos'];
    /** update data of the table: "clientes.VeiculosAtivos_Situacao" */
    update_clientes_VeiculosAtivos_Situacao?: GraphQLTypes['clientes_VeiculosAtivos_Situacao_mutation_response'];
    /** update single row of the table: "clientes.VeiculosAtivos_Situacao" */
    update_clientes_VeiculosAtivos_Situacao_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Situacao'];
    /** update single row of the table: "clientes.VeiculosAtivos" */
    update_clientes_VeiculosAtivos_by_pk?: GraphQLTypes['clientes_VeiculosAtivos'];
    /** update single row of the table: "clientes.Veiculos" */
    update_clientes_Veiculos_by_pk?: GraphQLTypes['clientes_Veiculos'];
    /** update data of the table: "comercial.Acoes" */
    update_comercial_Acoes?: GraphQLTypes['comercial_Acoes_mutation_response'];
    /** update single row of the table: "comercial.Acoes" */
    update_comercial_Acoes_by_pk?: GraphQLTypes['comercial_Acoes'];
    /** update data of the table: "comercial.Atributos" */
    update_comercial_Atributos?: GraphQLTypes['comercial_Atributos_mutation_response'];
    /** update single row of the table: "comercial.Atributos" */
    update_comercial_Atributos_by_pk?: GraphQLTypes['comercial_Atributos'];
    /** update data of the table: "comercial.Coberturas" */
    update_comercial_Coberturas?: GraphQLTypes['comercial_Coberturas_mutation_response'];
    /** update single row of the table: "comercial.Coberturas" */
    update_comercial_Coberturas_by_pk?: GraphQLTypes['comercial_Coberturas'];
    /** update data of the table: "comercial.Combos" */
    update_comercial_Combos?: GraphQLTypes['comercial_Combos_mutation_response'];
    /** update data of the table: "comercial.Combos_Combos" */
    update_comercial_Combos_Combos?: GraphQLTypes['comercial_Combos_Combos_mutation_response'];
    /** update single row of the table: "comercial.Combos_Combos" */
    update_comercial_Combos_Combos_by_pk?: GraphQLTypes['comercial_Combos_Combos'];
    /** update data of the table: "comercial.Combos_Planos" */
    update_comercial_Combos_Planos?: GraphQLTypes['comercial_Combos_Planos_mutation_response'];
    /** update single row of the table: "comercial.Combos_Planos" */
    update_comercial_Combos_Planos_by_pk?: GraphQLTypes['comercial_Combos_Planos'];
    /** update data of the table: "comercial.Combos_Precos" */
    update_comercial_Combos_Precos?: GraphQLTypes['comercial_Combos_Precos_mutation_response'];
    /** update single row of the table: "comercial.Combos_Precos" */
    update_comercial_Combos_Precos_by_pk?: GraphQLTypes['comercial_Combos_Precos'];
    /** update data of the table: "comercial.Combos_Produtos" */
    update_comercial_Combos_Produtos?: GraphQLTypes['comercial_Combos_Produtos_mutation_response'];
    /** update single row of the table: "comercial.Combos_Produtos" */
    update_comercial_Combos_Produtos_by_pk?: GraphQLTypes['comercial_Combos_Produtos'];
    /** update data of the table: "comercial.Combos_Servicos" */
    update_comercial_Combos_Servicos?: GraphQLTypes['comercial_Combos_Servicos_mutation_response'];
    /** update single row of the table: "comercial.Combos_Servicos" */
    update_comercial_Combos_Servicos_by_pk?: GraphQLTypes['comercial_Combos_Servicos'];
    /** update single row of the table: "comercial.Combos" */
    update_comercial_Combos_by_pk?: GraphQLTypes['comercial_Combos'];
    /** update data of the table: "comercial.Condicionais" */
    update_comercial_Condicionais?: GraphQLTypes['comercial_Condicionais_mutation_response'];
    /** update data of the table: "comercial.CondicionaisSituacoes" */
    update_comercial_CondicionaisSituacoes?: GraphQLTypes['comercial_CondicionaisSituacoes_mutation_response'];
    /** update single row of the table: "comercial.CondicionaisSituacoes" */
    update_comercial_CondicionaisSituacoes_by_pk?: GraphQLTypes['comercial_CondicionaisSituacoes'];
    /** update single row of the table: "comercial.Condicionais" */
    update_comercial_Condicionais_by_pk?: GraphQLTypes['comercial_Condicionais'];
    /** update data of the table: "comercial.ContratosBase" */
    update_comercial_ContratosBase?: GraphQLTypes['comercial_ContratosBase_mutation_response'];
    /** update data of the table: "comercial.ContratosBase_Versoes" */
    update_comercial_ContratosBase_Versoes?: GraphQLTypes['comercial_ContratosBase_Versoes_mutation_response'];
    /** update single row of the table: "comercial.ContratosBase_Versoes" */
    update_comercial_ContratosBase_Versoes_by_pk?: GraphQLTypes['comercial_ContratosBase_Versoes'];
    /** update single row of the table: "comercial.ContratosBase" */
    update_comercial_ContratosBase_by_pk?: GraphQLTypes['comercial_ContratosBase'];
    /** update data of the table: "comercial.Planos" */
    update_comercial_Planos?: GraphQLTypes['comercial_Planos_mutation_response'];
    /** update data of the table: "comercial.Planos_Condicionais" */
    update_comercial_Planos_Condicionais?: GraphQLTypes['comercial_Planos_Condicionais_mutation_response'];
    /** update single row of the table: "comercial.Planos_Condicionais" */
    update_comercial_Planos_Condicionais_by_pk?: GraphQLTypes['comercial_Planos_Condicionais'];
    /** update data of the table: "comercial.Planos_Precos" */
    update_comercial_Planos_Precos?: GraphQLTypes['comercial_Planos_Precos_mutation_response'];
    /** update single row of the table: "comercial.Planos_Precos" */
    update_comercial_Planos_Precos_by_pk?: GraphQLTypes['comercial_Planos_Precos'];
    /** update single row of the table: "comercial.Planos" */
    update_comercial_Planos_by_pk?: GraphQLTypes['comercial_Planos'];
    /** update data of the table: "comercial.PrestadoresDeServicos" */
    update_comercial_PrestadoresDeServicos?: GraphQLTypes['comercial_PrestadoresDeServicos_mutation_response'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Produtos" */
    update_comercial_PrestadoresDeServicos_Produtos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_mutation_response'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    update_comercial_PrestadoresDeServicos_Produtos_Itens?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_mutation_response'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    update_comercial_PrestadoresDeServicos_Produtos_Itens_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    update_comercial_PrestadoresDeServicos_Produtos_Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_mutation_response'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    update_comercial_PrestadoresDeServicos_Produtos_Precos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Produtos" */
    update_comercial_PrestadoresDeServicos_Produtos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Servicos" */
    update_comercial_PrestadoresDeServicos_Servicos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_mutation_response'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    update_comercial_PrestadoresDeServicos_Servicos_Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_mutation_response'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    update_comercial_PrestadoresDeServicos_Servicos_Precos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    /** update data of the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    update_comercial_PrestadoresDeServicos_Servicos_Tarifas?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_mutation_response'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    update_comercial_PrestadoresDeServicos_Servicos_Tarifas_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'];
    /** update single row of the table: "comercial.PrestadoresDeServicos_Servicos" */
    update_comercial_PrestadoresDeServicos_Servicos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** update single row of the table: "comercial.PrestadoresDeServicos" */
    update_comercial_PrestadoresDeServicos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos'];
    /** update data of the table: "comercial.Produtos" */
    update_comercial_Produtos?: GraphQLTypes['comercial_Produtos_mutation_response'];
    /** update data of the table: "comercial.Produtos_Atributos" */
    update_comercial_Produtos_Atributos?: GraphQLTypes['comercial_Produtos_Atributos_mutation_response'];
    /** update single row of the table: "comercial.Produtos_Atributos" */
    update_comercial_Produtos_Atributos_by_pk?: GraphQLTypes['comercial_Produtos_Atributos'];
    /** update data of the table: "comercial.Produtos_Oportunidades" */
    update_comercial_Produtos_Oportunidades?: GraphQLTypes['comercial_Produtos_Oportunidades_mutation_response'];
    /** update single row of the table: "comercial.Produtos_Oportunidades" */
    update_comercial_Produtos_Oportunidades_by_pk?: GraphQLTypes['comercial_Produtos_Oportunidades'];
    /** update data of the table: "comercial.Produtos_Produtos" */
    update_comercial_Produtos_Produtos?: GraphQLTypes['comercial_Produtos_Produtos_mutation_response'];
    /** update single row of the table: "comercial.Produtos_Produtos" */
    update_comercial_Produtos_Produtos_by_pk?: GraphQLTypes['comercial_Produtos_Produtos'];
    /** update data of the table: "comercial.Produtos_Servicos" */
    update_comercial_Produtos_Servicos?: GraphQLTypes['comercial_Produtos_Servicos_mutation_response'];
    /** update single row of the table: "comercial.Produtos_Servicos" */
    update_comercial_Produtos_Servicos_by_pk?: GraphQLTypes['comercial_Produtos_Servicos'];
    /** update data of the table: "comercial.Produtos_Tipos" */
    update_comercial_Produtos_Tipos?: GraphQLTypes['comercial_Produtos_Tipos_mutation_response'];
    /** update single row of the table: "comercial.Produtos_Tipos" */
    update_comercial_Produtos_Tipos_by_pk?: GraphQLTypes['comercial_Produtos_Tipos'];
    /** update single row of the table: "comercial.Produtos" */
    update_comercial_Produtos_by_pk?: GraphQLTypes['comercial_Produtos'];
    /** update data of the table: "comercial.Servicos" */
    update_comercial_Servicos?: GraphQLTypes['comercial_Servicos_mutation_response'];
    /** update data of the table: "comercial.Servicos_Atributos" */
    update_comercial_Servicos_Atributos?: GraphQLTypes['comercial_Servicos_Atributos_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Atributos" */
    update_comercial_Servicos_Atributos_by_pk?: GraphQLTypes['comercial_Servicos_Atributos'];
    /** update data of the table: "comercial.Servicos_Oportunidades" */
    update_comercial_Servicos_Oportunidades?: GraphQLTypes['comercial_Servicos_Oportunidades_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Oportunidades" */
    update_comercial_Servicos_Oportunidades_by_pk?: GraphQLTypes['comercial_Servicos_Oportunidades'];
    /** update data of the table: "comercial.Servicos_Produtos" */
    update_comercial_Servicos_Produtos?: GraphQLTypes['comercial_Servicos_Produtos_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Produtos" */
    update_comercial_Servicos_Produtos_by_pk?: GraphQLTypes['comercial_Servicos_Produtos'];
    /** update data of the table: "comercial.Servicos_Servicos" */
    update_comercial_Servicos_Servicos?: GraphQLTypes['comercial_Servicos_Servicos_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Servicos" */
    update_comercial_Servicos_Servicos_by_pk?: GraphQLTypes['comercial_Servicos_Servicos'];
    /** update data of the table: "comercial.Servicos_Tarifas" */
    update_comercial_Servicos_Tarifas?: GraphQLTypes['comercial_Servicos_Tarifas_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Tarifas" */
    update_comercial_Servicos_Tarifas_by_pk?: GraphQLTypes['comercial_Servicos_Tarifas'];
    /** update data of the table: "comercial.Servicos_Tipos" */
    update_comercial_Servicos_Tipos?: GraphQLTypes['comercial_Servicos_Tipos_mutation_response'];
    /** update single row of the table: "comercial.Servicos_Tipos" */
    update_comercial_Servicos_Tipos_by_pk?: GraphQLTypes['comercial_Servicos_Tipos'];
    /** update single row of the table: "comercial.Servicos" */
    update_comercial_Servicos_by_pk?: GraphQLTypes['comercial_Servicos'];
    /** update data of the table: "comercial.Tarifas" */
    update_comercial_Tarifas?: GraphQLTypes['comercial_Tarifas_mutation_response'];
    /** update single row of the table: "comercial.Tarifas" */
    update_comercial_Tarifas_by_pk?: GraphQLTypes['comercial_Tarifas'];
    /** update data of the table: "contatos.Emails" */
    update_contatos_Emails?: GraphQLTypes['contatos_Emails_mutation_response'];
    /** update single row of the table: "contatos.Emails" */
    update_contatos_Emails_by_pk?: GraphQLTypes['contatos_Emails'];
    /** update data of the table: "contatos.Enderecos" */
    update_contatos_Enderecos?: GraphQLTypes['contatos_Enderecos_mutation_response'];
    /** update single row of the table: "contatos.Enderecos" */
    update_contatos_Enderecos_by_pk?: GraphQLTypes['contatos_Enderecos'];
    /** update data of the table: "contatos.Logs" */
    update_contatos_Logs?: GraphQLTypes['contatos_Logs_mutation_response'];
    /** update single row of the table: "contatos.Logs" */
    update_contatos_Logs_by_pk?: GraphQLTypes['contatos_Logs'];
    /** update data of the table: "contatos.Telefones" */
    update_contatos_Telefones?: GraphQLTypes['contatos_Telefones_mutation_response'];
    /** update single row of the table: "contatos.Telefones" */
    update_contatos_Telefones_by_pk?: GraphQLTypes['contatos_Telefones'];
    /** update data of the table: "identidades.Clientes" */
    update_identidades_Clientes?: GraphQLTypes['identidades_Clientes_mutation_response'];
    /** update data of the table: "identidades.Clientes_Documentos" */
    update_identidades_Clientes_Documentos?: GraphQLTypes['identidades_Clientes_Documentos_mutation_response'];
    /** update data of the table: "identidades.Clientes_Documentos_Situacoes" */
    update_identidades_Clientes_Documentos_Situacoes?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_mutation_response'];
    /** update single row of the table: "identidades.Clientes_Documentos_Situacoes" */
    update_identidades_Clientes_Documentos_Situacoes_by_pk?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes'];
    /** update single row of the table: "identidades.Clientes_Documentos" */
    update_identidades_Clientes_Documentos_by_pk?: GraphQLTypes['identidades_Clientes_Documentos'];
    /** update single row of the table: "identidades.Clientes" */
    update_identidades_Clientes_by_pk?: GraphQLTypes['identidades_Clientes'];
    /** update data of the table: "identidades.Colaboradores" */
    update_identidades_Colaboradores?: GraphQLTypes['identidades_Colaboradores_mutation_response'];
    /** update single row of the table: "identidades.Colaboradores" */
    update_identidades_Colaboradores_by_pk?: GraphQLTypes['identidades_Colaboradores'];
    /** update data of the table: "identidades.Fornecedores" */
    update_identidades_Fornecedores?: GraphQLTypes['identidades_Fornecedores_mutation_response'];
    /** update single row of the table: "identidades.Fornecedores" */
    update_identidades_Fornecedores_by_pk?: GraphQLTypes['identidades_Fornecedores'];
    /** update data of the table: "identidades.Logs" */
    update_identidades_Logs?: GraphQLTypes['identidades_Logs_mutation_response'];
    /** update single row of the table: "identidades.Logs" */
    update_identidades_Logs_by_pk?: GraphQLTypes['identidades_Logs'];
    /** update data of the table: "identidades.Pessoas" */
    update_identidades_Pessoas?: GraphQLTypes['identidades_Pessoas_mutation_response'];
    /** update single row of the table: "identidades.Pessoas" */
    update_identidades_Pessoas_by_pk?: GraphQLTypes['identidades_Pessoas'];
    /** update data of the table: "identidades.Representantes" */
    update_identidades_Representantes?: GraphQLTypes['identidades_Representantes_mutation_response'];
    /** update single row of the table: "identidades.Representantes" */
    update_identidades_Representantes_by_pk?: GraphQLTypes['identidades_Representantes'];
    /** update data of the table: "identidades.Vendedores" */
    update_identidades_Vendedores?: GraphQLTypes['identidades_Vendedores_mutation_response'];
    /** update single row of the table: "identidades.Vendedores" */
    update_identidades_Vendedores_by_pk?: GraphQLTypes['identidades_Vendedores'];
    /** update data of the table: "propostas.Propostas" */
    update_propostas_Propostas?: GraphQLTypes['propostas_Propostas_mutation_response'];
    /** update data of the table: "propostas.Propostas_Combos" */
    update_propostas_Propostas_Combos?: GraphQLTypes['propostas_Propostas_Combos_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Combos" */
    update_propostas_Propostas_Combos_by_pk?: GraphQLTypes['propostas_Propostas_Combos'];
    /** update data of the table: "propostas.Propostas_Instalacoes" */
    update_propostas_Propostas_Instalacoes?: GraphQLTypes['propostas_Propostas_Instalacoes_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Instalacoes" */
    update_propostas_Propostas_Instalacoes_by_pk?: GraphQLTypes['propostas_Propostas_Instalacoes'];
    /** update data of the table: "propostas.Propostas_Oportunidades" */
    update_propostas_Propostas_Oportunidades?: GraphQLTypes['propostas_Propostas_Oportunidades_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Oportunidades" */
    update_propostas_Propostas_Oportunidades_by_pk?: GraphQLTypes['propostas_Propostas_Oportunidades'];
    /** update data of the table: "propostas.Propostas_Planos" */
    update_propostas_Propostas_Planos?: GraphQLTypes['propostas_Propostas_Planos_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Planos" */
    update_propostas_Propostas_Planos_by_pk?: GraphQLTypes['propostas_Propostas_Planos'];
    /** update data of the table: "propostas.Propostas_Produtos" */
    update_propostas_Propostas_Produtos?: GraphQLTypes['propostas_Propostas_Produtos_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Produtos" */
    update_propostas_Propostas_Produtos_by_pk?: GraphQLTypes['propostas_Propostas_Produtos'];
    /** update data of the table: "propostas.Propostas_Servicos" */
    update_propostas_Propostas_Servicos?: GraphQLTypes['propostas_Propostas_Servicos_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Servicos" */
    update_propostas_Propostas_Servicos_by_pk?: GraphQLTypes['propostas_Propostas_Servicos'];
    /** update data of the table: "propostas.Propostas_Situacoes" */
    update_propostas_Propostas_Situacoes?: GraphQLTypes['propostas_Propostas_Situacoes_mutation_response'];
    /** update single row of the table: "propostas.Propostas_Situacoes" */
    update_propostas_Propostas_Situacoes_by_pk?: GraphQLTypes['propostas_Propostas_Situacoes'];
    /** update single row of the table: "propostas.Propostas" */
    update_propostas_Propostas_by_pk?: GraphQLTypes['propostas_Propostas'];
    /** update data of the table: "vendas.GruposDePerguntas" */
    update_vendas_GruposDePerguntas?: GraphQLTypes['vendas_GruposDePerguntas_mutation_response'];
    /** update data of the table: "vendas.GruposDePerguntas_Perguntas" */
    update_vendas_GruposDePerguntas_Perguntas?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_mutation_response'];
    /** update single row of the table: "vendas.GruposDePerguntas_Perguntas" */
    update_vendas_GruposDePerguntas_Perguntas_by_pk?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas'];
    /** update single row of the table: "vendas.GruposDePerguntas" */
    update_vendas_GruposDePerguntas_by_pk?: GraphQLTypes['vendas_GruposDePerguntas'];
    /** update data of the table: "vendas.Perguntas" */
    update_vendas_Perguntas?: GraphQLTypes['vendas_Perguntas_mutation_response'];
    /** update single row of the table: "vendas.Perguntas" */
    update_vendas_Perguntas_by_pk?: GraphQLTypes['vendas_Perguntas'];
    /** update data of the table: "vendas.TiposDePagamento" */
    update_vendas_TiposDePagamento?: GraphQLTypes['vendas_TiposDePagamento_mutation_response'];
    /** update single row of the table: "vendas.TiposDePagamento" */
    update_vendas_TiposDePagamento_by_pk?: GraphQLTypes['vendas_TiposDePagamento'];
    /** update data of the table: "vendas.TiposDePrecos" */
    update_vendas_TiposDePrecos?: GraphQLTypes['vendas_TiposDePrecos_mutation_response'];
    /** update single row of the table: "vendas.TiposDePrecos" */
    update_vendas_TiposDePrecos_by_pk?: GraphQLTypes['vendas_TiposDePrecos'];
    /** update data of the table: "vendas.TiposDeRecorrencia" */
    update_vendas_TiposDeRecorrencia?: GraphQLTypes['vendas_TiposDeRecorrencia_mutation_response'];
    /** update single row of the table: "vendas.TiposDeRecorrencia" */
    update_vendas_TiposDeRecorrencia_by_pk?: GraphQLTypes['vendas_TiposDeRecorrencia'];
  };
  /** column ordering options */
  ['order_by']: order_by;
  /** columns and relationships of "propostas.Propostas" */
  ['propostas_Propostas']: {
    __typename: 'propostas_Propostas';
    Cliente_Id?: GraphQLTypes['uuid'];
    /** An array relationship */
    Combos: Array<GraphQLTypes['propostas_Propostas_Combos']>;
    /** An aggregate relationship */
    Combos_aggregate: GraphQLTypes['propostas_Propostas_Combos_aggregate'];
    DataAceito?: GraphQLTypes['timestamptz'];
    Id: GraphQLTypes['uuid'];
    /** An array relationship */
    Instalacoes: Array<GraphQLTypes['propostas_Propostas_Instalacoes']>;
    /** An aggregate relationship */
    Instalacoes_aggregate: GraphQLTypes['propostas_Propostas_Instalacoes_aggregate'];
    Lead_Id?: GraphQLTypes['uuid'];
    /** An array relationship */
    Oportunidades: Array<GraphQLTypes['propostas_Propostas_Oportunidades']>;
    /** An aggregate relationship */
    Oportunidades_aggregate: GraphQLTypes['propostas_Propostas_Oportunidades_aggregate'];
    /** An array relationship */
    Planos: Array<GraphQLTypes['propostas_Propostas_Planos']>;
    /** An aggregate relationship */
    Planos_aggregate: GraphQLTypes['propostas_Propostas_Planos_aggregate'];
    /** An array relationship */
    Produtos: Array<GraphQLTypes['propostas_Propostas_Produtos']>;
    /** An aggregate relationship */
    Produtos_aggregate: GraphQLTypes['propostas_Propostas_Produtos_aggregate'];
    /** An array relationship */
    Servicos: Array<GraphQLTypes['propostas_Propostas_Servicos']>;
    /** An aggregate relationship */
    Servicos_aggregate: GraphQLTypes['propostas_Propostas_Servicos_aggregate'];
    /** An object relationship */
    Situacao: GraphQLTypes['propostas_Propostas_Situacoes'];
    Situacao_Id: GraphQLTypes['propostas_Propostas_Situacoes_enum'];
    Ticket_Id: GraphQLTypes['uuid'];
    TipoDePagamento_Id: string;
    TipoDeRecorrencia_Id: string;
    Usuario_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos']: {
    __typename: 'propostas_Propostas_Combos';
    /** An object relationship */
    Combo: GraphQLTypes['comercial_Combos'];
    /** An object relationship */
    ComboPreco: GraphQLTypes['comercial_Combos_Precos'];
    ComboPreco_Id: GraphQLTypes['uuid'];
    Combo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Proposta: GraphQLTypes['propostas_Propostas'];
    Proposta_Id: GraphQLTypes['uuid'];
    Veiculo: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_aggregate']: {
    __typename: 'propostas_Propostas_Combos_aggregate';
    aggregate?: GraphQLTypes['propostas_Propostas_Combos_aggregate_fields'];
    nodes: Array<GraphQLTypes['propostas_Propostas_Combos']>;
  };
  /** aggregate fields of "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_aggregate_fields']: {
    __typename: 'propostas_Propostas_Combos_aggregate_fields';
    avg?: GraphQLTypes['propostas_Propostas_Combos_avg_fields'];
    count: number;
    max?: GraphQLTypes['propostas_Propostas_Combos_max_fields'];
    min?: GraphQLTypes['propostas_Propostas_Combos_min_fields'];
    stddev?: GraphQLTypes['propostas_Propostas_Combos_stddev_fields'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Combos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Combos_stddev_samp_fields'];
    sum?: GraphQLTypes['propostas_Propostas_Combos_sum_fields'];
    var_pop?: GraphQLTypes['propostas_Propostas_Combos_var_pop_fields'];
    var_samp?: GraphQLTypes['propostas_Propostas_Combos_var_samp_fields'];
    variance?: GraphQLTypes['propostas_Propostas_Combos_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_aggregate_order_by']: {
    avg?: GraphQLTypes['propostas_Propostas_Combos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['propostas_Propostas_Combos_max_order_by'];
    min?: GraphQLTypes['propostas_Propostas_Combos_min_order_by'];
    stddev?: GraphQLTypes['propostas_Propostas_Combos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Combos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Combos_stddev_samp_order_by'];
    sum?: GraphQLTypes['propostas_Propostas_Combos_sum_order_by'];
    var_pop?: GraphQLTypes['propostas_Propostas_Combos_var_pop_order_by'];
    var_samp?: GraphQLTypes['propostas_Propostas_Combos_var_samp_order_by'];
    variance?: GraphQLTypes['propostas_Propostas_Combos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['propostas_Propostas_Combos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['propostas_Propostas_Combos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Combos_avg_fields']: {
    __typename: 'propostas_Propostas_Combos_avg_fields';
    Veiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_avg_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Combos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Combos_bool_exp']: {
    Combo?: GraphQLTypes['comercial_Combos_bool_exp'];
    ComboPreco?: GraphQLTypes['comercial_Combos_Precos_bool_exp'];
    ComboPreco_Id?: GraphQLTypes['uuid_comparison_exp'];
    Combo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Proposta?: GraphQLTypes['propostas_Propostas_bool_exp'];
    Proposta_Id?: GraphQLTypes['uuid_comparison_exp'];
    Veiculo?: GraphQLTypes['Int_comparison_exp'];
    Veiculo_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['propostas_Propostas_Combos_bool_exp']>;
    _not?: GraphQLTypes['propostas_Propostas_Combos_bool_exp'];
    _or?: Array<GraphQLTypes['propostas_Propostas_Combos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_constraint']: propostas_Propostas_Combos_constraint;
  /** input type for incrementing numeric columns in table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_inc_input']: {
    Veiculo?: number;
  };
  /** input type for inserting data into table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_insert_input']: {
    Combo?: GraphQLTypes['comercial_Combos_obj_rel_insert_input'];
    ComboPreco?: GraphQLTypes['comercial_Combos_Precos_obj_rel_insert_input'];
    ComboPreco_Id?: GraphQLTypes['uuid'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Proposta?: GraphQLTypes['propostas_Propostas_obj_rel_insert_input'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Combos_max_fields']: {
    __typename: 'propostas_Propostas_Combos_max_fields';
    ComboPreco_Id?: GraphQLTypes['uuid'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_max_order_by']: {
    ComboPreco_Id?: GraphQLTypes['order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Combos_min_fields']: {
    __typename: 'propostas_Propostas_Combos_min_fields';
    ComboPreco_Id?: GraphQLTypes['uuid'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_min_order_by']: {
    ComboPreco_Id?: GraphQLTypes['order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_mutation_response']: {
    __typename: 'propostas_Propostas_Combos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['propostas_Propostas_Combos']>;
  };
  /** on conflict condition type for table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_on_conflict']: {
    constraint: GraphQLTypes['propostas_Propostas_Combos_constraint'];
    update_columns: Array<
      GraphQLTypes['propostas_Propostas_Combos_update_column']
    >;
    where?: GraphQLTypes['propostas_Propostas_Combos_bool_exp'];
  };
  /** Ordering options when selecting data from "propostas.Propostas_Combos". */
  ['propostas_Propostas_Combos_order_by']: {
    Combo?: GraphQLTypes['comercial_Combos_order_by'];
    ComboPreco?: GraphQLTypes['comercial_Combos_Precos_order_by'];
    ComboPreco_Id?: GraphQLTypes['order_by'];
    Combo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Proposta?: GraphQLTypes['propostas_Propostas_order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: propostas_Propostas_Combos */
  ['propostas_Propostas_Combos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_select_column']: propostas_Propostas_Combos_select_column;
  /** input type for updating data in table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_set_input']: {
    ComboPreco_Id?: GraphQLTypes['uuid'];
    Combo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Combos_stddev_fields']: {
    __typename: 'propostas_Propostas_Combos_stddev_fields';
    Veiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_stddev_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Combos_stddev_pop_fields']: {
    __typename: 'propostas_Propostas_Combos_stddev_pop_fields';
    Veiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_stddev_pop_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Combos_stddev_samp_fields']: {
    __typename: 'propostas_Propostas_Combos_stddev_samp_fields';
    Veiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_stddev_samp_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Combos_sum_fields']: {
    __typename: 'propostas_Propostas_Combos_sum_fields';
    Veiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_sum_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** update columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_update_column']: propostas_Propostas_Combos_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Combos_var_pop_fields']: {
    __typename: 'propostas_Propostas_Combos_var_pop_fields';
    Veiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_var_pop_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Combos_var_samp_fields']: {
    __typename: 'propostas_Propostas_Combos_var_samp_fields';
    Veiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_var_samp_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Combos_variance_fields']: {
    __typename: 'propostas_Propostas_Combos_variance_fields';
    Veiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Combos" */
  ['propostas_Propostas_Combos_variance_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes']: {
    __typename: 'propostas_Propostas_Instalacoes';
    Endereco: GraphQLTypes['jsonb'];
    Id: GraphQLTypes['uuid'];
    PosicaoDoVeiculo: number;
    /** An object relationship */
    Proposta: GraphQLTypes['propostas_Propostas'];
    Proposta_Id: GraphQLTypes['uuid'];
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_aggregate']: {
    __typename: 'propostas_Propostas_Instalacoes_aggregate';
    aggregate?: GraphQLTypes['propostas_Propostas_Instalacoes_aggregate_fields'];
    nodes: Array<GraphQLTypes['propostas_Propostas_Instalacoes']>;
  };
  /** aggregate fields of "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_aggregate_fields']: {
    __typename: 'propostas_Propostas_Instalacoes_aggregate_fields';
    avg?: GraphQLTypes['propostas_Propostas_Instalacoes_avg_fields'];
    count: number;
    max?: GraphQLTypes['propostas_Propostas_Instalacoes_max_fields'];
    min?: GraphQLTypes['propostas_Propostas_Instalacoes_min_fields'];
    stddev?: GraphQLTypes['propostas_Propostas_Instalacoes_stddev_fields'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Instalacoes_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Instalacoes_stddev_samp_fields'];
    sum?: GraphQLTypes['propostas_Propostas_Instalacoes_sum_fields'];
    var_pop?: GraphQLTypes['propostas_Propostas_Instalacoes_var_pop_fields'];
    var_samp?: GraphQLTypes['propostas_Propostas_Instalacoes_var_samp_fields'];
    variance?: GraphQLTypes['propostas_Propostas_Instalacoes_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_aggregate_order_by']: {
    avg?: GraphQLTypes['propostas_Propostas_Instalacoes_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['propostas_Propostas_Instalacoes_max_order_by'];
    min?: GraphQLTypes['propostas_Propostas_Instalacoes_min_order_by'];
    stddev?: GraphQLTypes['propostas_Propostas_Instalacoes_stddev_order_by'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Instalacoes_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Instalacoes_stddev_samp_order_by'];
    sum?: GraphQLTypes['propostas_Propostas_Instalacoes_sum_order_by'];
    var_pop?: GraphQLTypes['propostas_Propostas_Instalacoes_var_pop_order_by'];
    var_samp?: GraphQLTypes['propostas_Propostas_Instalacoes_var_samp_order_by'];
    variance?: GraphQLTypes['propostas_Propostas_Instalacoes_variance_order_by'];
  };
  /** append existing jsonb value of filtered columns with new jsonb value */
  ['propostas_Propostas_Instalacoes_append_input']: {
    Endereco?: GraphQLTypes['jsonb'];
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['propostas_Propostas_Instalacoes_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['propostas_Propostas_Instalacoes_on_conflict'];
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Instalacoes_avg_fields']: {
    __typename: 'propostas_Propostas_Instalacoes_avg_fields';
    PosicaoDoVeiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_avg_order_by']: {
    PosicaoDoVeiculo?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Instalacoes". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Instalacoes_bool_exp']: {
    Endereco?: GraphQLTypes['jsonb_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    PosicaoDoVeiculo?: GraphQLTypes['Int_comparison_exp'];
    Proposta?: GraphQLTypes['propostas_Propostas_bool_exp'];
    Proposta_Id?: GraphQLTypes['uuid_comparison_exp'];
    Veiculo_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['propostas_Propostas_Instalacoes_bool_exp']>;
    _not?: GraphQLTypes['propostas_Propostas_Instalacoes_bool_exp'];
    _or?: Array<GraphQLTypes['propostas_Propostas_Instalacoes_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_constraint']: propostas_Propostas_Instalacoes_constraint;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  ['propostas_Propostas_Instalacoes_delete_at_path_input']: {
    Endereco?: Array<string>;
  };
  /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
  ['propostas_Propostas_Instalacoes_delete_elem_input']: {
    Endereco?: number;
  };
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  ['propostas_Propostas_Instalacoes_delete_key_input']: {
    Endereco?: string;
  };
  /** input type for incrementing numeric columns in table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_inc_input']: {
    PosicaoDoVeiculo?: number;
  };
  /** input type for inserting data into table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_insert_input']: {
    Endereco?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    PosicaoDoVeiculo?: number;
    Proposta?: GraphQLTypes['propostas_Propostas_obj_rel_insert_input'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Instalacoes_max_fields']: {
    __typename: 'propostas_Propostas_Instalacoes_max_fields';
    Id?: GraphQLTypes['uuid'];
    PosicaoDoVeiculo?: number;
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    PosicaoDoVeiculo?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Instalacoes_min_fields']: {
    __typename: 'propostas_Propostas_Instalacoes_min_fields';
    Id?: GraphQLTypes['uuid'];
    PosicaoDoVeiculo?: number;
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    PosicaoDoVeiculo?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_mutation_response']: {
    __typename: 'propostas_Propostas_Instalacoes_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['propostas_Propostas_Instalacoes']>;
  };
  /** on conflict condition type for table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_on_conflict']: {
    constraint: GraphQLTypes['propostas_Propostas_Instalacoes_constraint'];
    update_columns: Array<
      GraphQLTypes['propostas_Propostas_Instalacoes_update_column']
    >;
    where?: GraphQLTypes['propostas_Propostas_Instalacoes_bool_exp'];
  };
  /** Ordering options when selecting data from "propostas.Propostas_Instalacoes". */
  ['propostas_Propostas_Instalacoes_order_by']: {
    Endereco?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    PosicaoDoVeiculo?: GraphQLTypes['order_by'];
    Proposta?: GraphQLTypes['propostas_Propostas_order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: propostas_Propostas_Instalacoes */
  ['propostas_Propostas_Instalacoes_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  ['propostas_Propostas_Instalacoes_prepend_input']: {
    Endereco?: GraphQLTypes['jsonb'];
  };
  /** select columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_select_column']: propostas_Propostas_Instalacoes_select_column;
  /** input type for updating data in table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_set_input']: {
    Endereco?: GraphQLTypes['jsonb'];
    Id?: GraphQLTypes['uuid'];
    PosicaoDoVeiculo?: number;
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Instalacoes_stddev_fields']: {
    __typename: 'propostas_Propostas_Instalacoes_stddev_fields';
    PosicaoDoVeiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_stddev_order_by']: {
    PosicaoDoVeiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Instalacoes_stddev_pop_fields']: {
    __typename: 'propostas_Propostas_Instalacoes_stddev_pop_fields';
    PosicaoDoVeiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_stddev_pop_order_by']: {
    PosicaoDoVeiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Instalacoes_stddev_samp_fields']: {
    __typename: 'propostas_Propostas_Instalacoes_stddev_samp_fields';
    PosicaoDoVeiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_stddev_samp_order_by']: {
    PosicaoDoVeiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Instalacoes_sum_fields']: {
    __typename: 'propostas_Propostas_Instalacoes_sum_fields';
    PosicaoDoVeiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_sum_order_by']: {
    PosicaoDoVeiculo?: GraphQLTypes['order_by'];
  };
  /** update columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_update_column']: propostas_Propostas_Instalacoes_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Instalacoes_var_pop_fields']: {
    __typename: 'propostas_Propostas_Instalacoes_var_pop_fields';
    PosicaoDoVeiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_var_pop_order_by']: {
    PosicaoDoVeiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Instalacoes_var_samp_fields']: {
    __typename: 'propostas_Propostas_Instalacoes_var_samp_fields';
    PosicaoDoVeiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_var_samp_order_by']: {
    PosicaoDoVeiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Instalacoes_variance_fields']: {
    __typename: 'propostas_Propostas_Instalacoes_variance_fields';
    PosicaoDoVeiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Instalacoes" */
  ['propostas_Propostas_Instalacoes_variance_order_by']: {
    PosicaoDoVeiculo?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades']: {
    __typename: 'propostas_Propostas_Oportunidades';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    OportunidadeDeProduto?: GraphQLTypes['comercial_Produtos_Oportunidades'];
    /** An object relationship */
    OportunidadeDeServico?: GraphQLTypes['comercial_Servicos_Oportunidades'];
    OportunidadeProduto_Id?: GraphQLTypes['uuid'];
    OportunidadeServico_Id?: GraphQLTypes['uuid'];
    /** An object relationship */
    Proposta: GraphQLTypes['propostas_Propostas'];
    Proposta_Id: GraphQLTypes['uuid'];
    Veiculo: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_aggregate']: {
    __typename: 'propostas_Propostas_Oportunidades_aggregate';
    aggregate?: GraphQLTypes['propostas_Propostas_Oportunidades_aggregate_fields'];
    nodes: Array<GraphQLTypes['propostas_Propostas_Oportunidades']>;
  };
  /** aggregate fields of "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_aggregate_fields']: {
    __typename: 'propostas_Propostas_Oportunidades_aggregate_fields';
    avg?: GraphQLTypes['propostas_Propostas_Oportunidades_avg_fields'];
    count: number;
    max?: GraphQLTypes['propostas_Propostas_Oportunidades_max_fields'];
    min?: GraphQLTypes['propostas_Propostas_Oportunidades_min_fields'];
    stddev?: GraphQLTypes['propostas_Propostas_Oportunidades_stddev_fields'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Oportunidades_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Oportunidades_stddev_samp_fields'];
    sum?: GraphQLTypes['propostas_Propostas_Oportunidades_sum_fields'];
    var_pop?: GraphQLTypes['propostas_Propostas_Oportunidades_var_pop_fields'];
    var_samp?: GraphQLTypes['propostas_Propostas_Oportunidades_var_samp_fields'];
    variance?: GraphQLTypes['propostas_Propostas_Oportunidades_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_aggregate_order_by']: {
    avg?: GraphQLTypes['propostas_Propostas_Oportunidades_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['propostas_Propostas_Oportunidades_max_order_by'];
    min?: GraphQLTypes['propostas_Propostas_Oportunidades_min_order_by'];
    stddev?: GraphQLTypes['propostas_Propostas_Oportunidades_stddev_order_by'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Oportunidades_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Oportunidades_stddev_samp_order_by'];
    sum?: GraphQLTypes['propostas_Propostas_Oportunidades_sum_order_by'];
    var_pop?: GraphQLTypes['propostas_Propostas_Oportunidades_var_pop_order_by'];
    var_samp?: GraphQLTypes['propostas_Propostas_Oportunidades_var_samp_order_by'];
    variance?: GraphQLTypes['propostas_Propostas_Oportunidades_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['propostas_Propostas_Oportunidades_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['propostas_Propostas_Oportunidades_on_conflict'];
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Oportunidades_avg_fields']: {
    __typename: 'propostas_Propostas_Oportunidades_avg_fields';
    Veiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_avg_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Oportunidades". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Oportunidades_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    OportunidadeDeProduto?: GraphQLTypes['comercial_Produtos_Oportunidades_bool_exp'];
    OportunidadeDeServico?: GraphQLTypes['comercial_Servicos_Oportunidades_bool_exp'];
    OportunidadeProduto_Id?: GraphQLTypes['uuid_comparison_exp'];
    OportunidadeServico_Id?: GraphQLTypes['uuid_comparison_exp'];
    Proposta?: GraphQLTypes['propostas_Propostas_bool_exp'];
    Proposta_Id?: GraphQLTypes['uuid_comparison_exp'];
    Veiculo?: GraphQLTypes['Int_comparison_exp'];
    Veiculo_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['propostas_Propostas_Oportunidades_bool_exp']>;
    _not?: GraphQLTypes['propostas_Propostas_Oportunidades_bool_exp'];
    _or?: Array<GraphQLTypes['propostas_Propostas_Oportunidades_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_constraint']: propostas_Propostas_Oportunidades_constraint;
  /** input type for incrementing numeric columns in table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_inc_input']: {
    Veiculo?: number;
  };
  /** input type for inserting data into table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    OportunidadeDeProduto?: GraphQLTypes['comercial_Produtos_Oportunidades_obj_rel_insert_input'];
    OportunidadeDeServico?: GraphQLTypes['comercial_Servicos_Oportunidades_obj_rel_insert_input'];
    OportunidadeProduto_Id?: GraphQLTypes['uuid'];
    OportunidadeServico_Id?: GraphQLTypes['uuid'];
    Proposta?: GraphQLTypes['propostas_Propostas_obj_rel_insert_input'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Oportunidades_max_fields']: {
    __typename: 'propostas_Propostas_Oportunidades_max_fields';
    Id?: GraphQLTypes['uuid'];
    OportunidadeProduto_Id?: GraphQLTypes['uuid'];
    OportunidadeServico_Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    OportunidadeProduto_Id?: GraphQLTypes['order_by'];
    OportunidadeServico_Id?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Oportunidades_min_fields']: {
    __typename: 'propostas_Propostas_Oportunidades_min_fields';
    Id?: GraphQLTypes['uuid'];
    OportunidadeProduto_Id?: GraphQLTypes['uuid'];
    OportunidadeServico_Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    OportunidadeProduto_Id?: GraphQLTypes['order_by'];
    OportunidadeServico_Id?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_mutation_response']: {
    __typename: 'propostas_Propostas_Oportunidades_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['propostas_Propostas_Oportunidades']>;
  };
  /** on conflict condition type for table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_on_conflict']: {
    constraint: GraphQLTypes['propostas_Propostas_Oportunidades_constraint'];
    update_columns: Array<
      GraphQLTypes['propostas_Propostas_Oportunidades_update_column']
    >;
    where?: GraphQLTypes['propostas_Propostas_Oportunidades_bool_exp'];
  };
  /** Ordering options when selecting data from "propostas.Propostas_Oportunidades". */
  ['propostas_Propostas_Oportunidades_order_by']: {
    Id?: GraphQLTypes['order_by'];
    OportunidadeDeProduto?: GraphQLTypes['comercial_Produtos_Oportunidades_order_by'];
    OportunidadeDeServico?: GraphQLTypes['comercial_Servicos_Oportunidades_order_by'];
    OportunidadeProduto_Id?: GraphQLTypes['order_by'];
    OportunidadeServico_Id?: GraphQLTypes['order_by'];
    Proposta?: GraphQLTypes['propostas_Propostas_order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: propostas_Propostas_Oportunidades */
  ['propostas_Propostas_Oportunidades_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_select_column']: propostas_Propostas_Oportunidades_select_column;
  /** input type for updating data in table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_set_input']: {
    Id?: GraphQLTypes['uuid'];
    OportunidadeProduto_Id?: GraphQLTypes['uuid'];
    OportunidadeServico_Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Oportunidades_stddev_fields']: {
    __typename: 'propostas_Propostas_Oportunidades_stddev_fields';
    Veiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_stddev_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Oportunidades_stddev_pop_fields']: {
    __typename: 'propostas_Propostas_Oportunidades_stddev_pop_fields';
    Veiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_stddev_pop_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Oportunidades_stddev_samp_fields']: {
    __typename: 'propostas_Propostas_Oportunidades_stddev_samp_fields';
    Veiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_stddev_samp_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Oportunidades_sum_fields']: {
    __typename: 'propostas_Propostas_Oportunidades_sum_fields';
    Veiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_sum_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** update columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_update_column']: propostas_Propostas_Oportunidades_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Oportunidades_var_pop_fields']: {
    __typename: 'propostas_Propostas_Oportunidades_var_pop_fields';
    Veiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_var_pop_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Oportunidades_var_samp_fields']: {
    __typename: 'propostas_Propostas_Oportunidades_var_samp_fields';
    Veiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_var_samp_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Oportunidades_variance_fields']: {
    __typename: 'propostas_Propostas_Oportunidades_variance_fields';
    Veiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Oportunidades" */
  ['propostas_Propostas_Oportunidades_variance_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos']: {
    __typename: 'propostas_Propostas_Planos';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Plano: GraphQLTypes['comercial_Planos'];
    /** An object relationship */
    PlanoPreco: GraphQLTypes['comercial_Planos_Precos'];
    PlanoPreco_Id: GraphQLTypes['uuid'];
    Plano_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Proposta: GraphQLTypes['propostas_Propostas'];
    Proposta_Id: GraphQLTypes['uuid'];
    Veiculo: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_aggregate']: {
    __typename: 'propostas_Propostas_Planos_aggregate';
    aggregate?: GraphQLTypes['propostas_Propostas_Planos_aggregate_fields'];
    nodes: Array<GraphQLTypes['propostas_Propostas_Planos']>;
  };
  /** aggregate fields of "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_aggregate_fields']: {
    __typename: 'propostas_Propostas_Planos_aggregate_fields';
    avg?: GraphQLTypes['propostas_Propostas_Planos_avg_fields'];
    count: number;
    max?: GraphQLTypes['propostas_Propostas_Planos_max_fields'];
    min?: GraphQLTypes['propostas_Propostas_Planos_min_fields'];
    stddev?: GraphQLTypes['propostas_Propostas_Planos_stddev_fields'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Planos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Planos_stddev_samp_fields'];
    sum?: GraphQLTypes['propostas_Propostas_Planos_sum_fields'];
    var_pop?: GraphQLTypes['propostas_Propostas_Planos_var_pop_fields'];
    var_samp?: GraphQLTypes['propostas_Propostas_Planos_var_samp_fields'];
    variance?: GraphQLTypes['propostas_Propostas_Planos_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_aggregate_order_by']: {
    avg?: GraphQLTypes['propostas_Propostas_Planos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['propostas_Propostas_Planos_max_order_by'];
    min?: GraphQLTypes['propostas_Propostas_Planos_min_order_by'];
    stddev?: GraphQLTypes['propostas_Propostas_Planos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Planos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Planos_stddev_samp_order_by'];
    sum?: GraphQLTypes['propostas_Propostas_Planos_sum_order_by'];
    var_pop?: GraphQLTypes['propostas_Propostas_Planos_var_pop_order_by'];
    var_samp?: GraphQLTypes['propostas_Propostas_Planos_var_samp_order_by'];
    variance?: GraphQLTypes['propostas_Propostas_Planos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['propostas_Propostas_Planos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['propostas_Propostas_Planos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Planos_avg_fields']: {
    __typename: 'propostas_Propostas_Planos_avg_fields';
    Veiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_avg_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Planos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Planos_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Plano?: GraphQLTypes['comercial_Planos_bool_exp'];
    PlanoPreco?: GraphQLTypes['comercial_Planos_Precos_bool_exp'];
    PlanoPreco_Id?: GraphQLTypes['uuid_comparison_exp'];
    Plano_Id?: GraphQLTypes['uuid_comparison_exp'];
    Proposta?: GraphQLTypes['propostas_Propostas_bool_exp'];
    Proposta_Id?: GraphQLTypes['uuid_comparison_exp'];
    Veiculo?: GraphQLTypes['Int_comparison_exp'];
    Veiculo_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['propostas_Propostas_Planos_bool_exp']>;
    _not?: GraphQLTypes['propostas_Propostas_Planos_bool_exp'];
    _or?: Array<GraphQLTypes['propostas_Propostas_Planos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_constraint']: propostas_Propostas_Planos_constraint;
  /** input type for incrementing numeric columns in table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_inc_input']: {
    Veiculo?: number;
  };
  /** input type for inserting data into table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Plano?: GraphQLTypes['comercial_Planos_obj_rel_insert_input'];
    PlanoPreco?: GraphQLTypes['comercial_Planos_Precos_obj_rel_insert_input'];
    PlanoPreco_Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    Proposta?: GraphQLTypes['propostas_Propostas_obj_rel_insert_input'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Planos_max_fields']: {
    __typename: 'propostas_Propostas_Planos_max_fields';
    Id?: GraphQLTypes['uuid'];
    PlanoPreco_Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    PlanoPreco_Id?: GraphQLTypes['order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Planos_min_fields']: {
    __typename: 'propostas_Propostas_Planos_min_fields';
    Id?: GraphQLTypes['uuid'];
    PlanoPreco_Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    PlanoPreco_Id?: GraphQLTypes['order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_mutation_response']: {
    __typename: 'propostas_Propostas_Planos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['propostas_Propostas_Planos']>;
  };
  /** on conflict condition type for table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_on_conflict']: {
    constraint: GraphQLTypes['propostas_Propostas_Planos_constraint'];
    update_columns: Array<
      GraphQLTypes['propostas_Propostas_Planos_update_column']
    >;
    where?: GraphQLTypes['propostas_Propostas_Planos_bool_exp'];
  };
  /** Ordering options when selecting data from "propostas.Propostas_Planos". */
  ['propostas_Propostas_Planos_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Plano?: GraphQLTypes['comercial_Planos_order_by'];
    PlanoPreco?: GraphQLTypes['comercial_Planos_Precos_order_by'];
    PlanoPreco_Id?: GraphQLTypes['order_by'];
    Plano_Id?: GraphQLTypes['order_by'];
    Proposta?: GraphQLTypes['propostas_Propostas_order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: propostas_Propostas_Planos */
  ['propostas_Propostas_Planos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_select_column']: propostas_Propostas_Planos_select_column;
  /** input type for updating data in table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    PlanoPreco_Id?: GraphQLTypes['uuid'];
    Plano_Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Planos_stddev_fields']: {
    __typename: 'propostas_Propostas_Planos_stddev_fields';
    Veiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_stddev_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Planos_stddev_pop_fields']: {
    __typename: 'propostas_Propostas_Planos_stddev_pop_fields';
    Veiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_stddev_pop_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Planos_stddev_samp_fields']: {
    __typename: 'propostas_Propostas_Planos_stddev_samp_fields';
    Veiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_stddev_samp_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Planos_sum_fields']: {
    __typename: 'propostas_Propostas_Planos_sum_fields';
    Veiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_sum_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** update columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_update_column']: propostas_Propostas_Planos_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Planos_var_pop_fields']: {
    __typename: 'propostas_Propostas_Planos_var_pop_fields';
    Veiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_var_pop_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Planos_var_samp_fields']: {
    __typename: 'propostas_Propostas_Planos_var_samp_fields';
    Veiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_var_samp_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Planos_variance_fields']: {
    __typename: 'propostas_Propostas_Planos_variance_fields';
    Veiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Planos" */
  ['propostas_Propostas_Planos_variance_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos']: {
    __typename: 'propostas_Propostas_Produtos';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Produto: GraphQLTypes['comercial_Produtos'];
    /** An object relationship */
    ProdutoPreco: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    ProdutoPreco_Id: GraphQLTypes['uuid'];
    Produto_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Proposta: GraphQLTypes['propostas_Propostas'];
    Proposta_Id: GraphQLTypes['uuid'];
    Veiculo: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_aggregate']: {
    __typename: 'propostas_Propostas_Produtos_aggregate';
    aggregate?: GraphQLTypes['propostas_Propostas_Produtos_aggregate_fields'];
    nodes: Array<GraphQLTypes['propostas_Propostas_Produtos']>;
  };
  /** aggregate fields of "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_aggregate_fields']: {
    __typename: 'propostas_Propostas_Produtos_aggregate_fields';
    avg?: GraphQLTypes['propostas_Propostas_Produtos_avg_fields'];
    count: number;
    max?: GraphQLTypes['propostas_Propostas_Produtos_max_fields'];
    min?: GraphQLTypes['propostas_Propostas_Produtos_min_fields'];
    stddev?: GraphQLTypes['propostas_Propostas_Produtos_stddev_fields'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Produtos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Produtos_stddev_samp_fields'];
    sum?: GraphQLTypes['propostas_Propostas_Produtos_sum_fields'];
    var_pop?: GraphQLTypes['propostas_Propostas_Produtos_var_pop_fields'];
    var_samp?: GraphQLTypes['propostas_Propostas_Produtos_var_samp_fields'];
    variance?: GraphQLTypes['propostas_Propostas_Produtos_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_aggregate_order_by']: {
    avg?: GraphQLTypes['propostas_Propostas_Produtos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['propostas_Propostas_Produtos_max_order_by'];
    min?: GraphQLTypes['propostas_Propostas_Produtos_min_order_by'];
    stddev?: GraphQLTypes['propostas_Propostas_Produtos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Produtos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Produtos_stddev_samp_order_by'];
    sum?: GraphQLTypes['propostas_Propostas_Produtos_sum_order_by'];
    var_pop?: GraphQLTypes['propostas_Propostas_Produtos_var_pop_order_by'];
    var_samp?: GraphQLTypes['propostas_Propostas_Produtos_var_samp_order_by'];
    variance?: GraphQLTypes['propostas_Propostas_Produtos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['propostas_Propostas_Produtos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['propostas_Propostas_Produtos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Produtos_avg_fields']: {
    __typename: 'propostas_Propostas_Produtos_avg_fields';
    Veiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_avg_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Produtos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Produtos_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Produto?: GraphQLTypes['comercial_Produtos_bool_exp'];
    ProdutoPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp'];
    ProdutoPreco_Id?: GraphQLTypes['uuid_comparison_exp'];
    Produto_Id?: GraphQLTypes['uuid_comparison_exp'];
    Proposta?: GraphQLTypes['propostas_Propostas_bool_exp'];
    Proposta_Id?: GraphQLTypes['uuid_comparison_exp'];
    Veiculo?: GraphQLTypes['Int_comparison_exp'];
    Veiculo_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['propostas_Propostas_Produtos_bool_exp']>;
    _not?: GraphQLTypes['propostas_Propostas_Produtos_bool_exp'];
    _or?: Array<GraphQLTypes['propostas_Propostas_Produtos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_constraint']: propostas_Propostas_Produtos_constraint;
  /** input type for incrementing numeric columns in table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_inc_input']: {
    Veiculo?: number;
  };
  /** input type for inserting data into table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Produto?: GraphQLTypes['comercial_Produtos_obj_rel_insert_input'];
    ProdutoPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_obj_rel_insert_input'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    Proposta?: GraphQLTypes['propostas_Propostas_obj_rel_insert_input'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Produtos_max_fields']: {
    __typename: 'propostas_Propostas_Produtos_max_fields';
    Id?: GraphQLTypes['uuid'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    ProdutoPreco_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Produtos_min_fields']: {
    __typename: 'propostas_Propostas_Produtos_min_fields';
    Id?: GraphQLTypes['uuid'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    ProdutoPreco_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_mutation_response']: {
    __typename: 'propostas_Propostas_Produtos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['propostas_Propostas_Produtos']>;
  };
  /** on conflict condition type for table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_on_conflict']: {
    constraint: GraphQLTypes['propostas_Propostas_Produtos_constraint'];
    update_columns: Array<
      GraphQLTypes['propostas_Propostas_Produtos_update_column']
    >;
    where?: GraphQLTypes['propostas_Propostas_Produtos_bool_exp'];
  };
  /** Ordering options when selecting data from "propostas.Propostas_Produtos". */
  ['propostas_Propostas_Produtos_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Produto?: GraphQLTypes['comercial_Produtos_order_by'];
    ProdutoPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_order_by'];
    ProdutoPreco_Id?: GraphQLTypes['order_by'];
    Produto_Id?: GraphQLTypes['order_by'];
    Proposta?: GraphQLTypes['propostas_Propostas_order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: propostas_Propostas_Produtos */
  ['propostas_Propostas_Produtos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_select_column']: propostas_Propostas_Produtos_select_column;
  /** input type for updating data in table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    ProdutoPreco_Id?: GraphQLTypes['uuid'];
    Produto_Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Produtos_stddev_fields']: {
    __typename: 'propostas_Propostas_Produtos_stddev_fields';
    Veiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_stddev_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Produtos_stddev_pop_fields']: {
    __typename: 'propostas_Propostas_Produtos_stddev_pop_fields';
    Veiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_stddev_pop_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Produtos_stddev_samp_fields']: {
    __typename: 'propostas_Propostas_Produtos_stddev_samp_fields';
    Veiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_stddev_samp_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Produtos_sum_fields']: {
    __typename: 'propostas_Propostas_Produtos_sum_fields';
    Veiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_sum_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** update columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_update_column']: propostas_Propostas_Produtos_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Produtos_var_pop_fields']: {
    __typename: 'propostas_Propostas_Produtos_var_pop_fields';
    Veiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_var_pop_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Produtos_var_samp_fields']: {
    __typename: 'propostas_Propostas_Produtos_var_samp_fields';
    Veiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_var_samp_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Produtos_variance_fields']: {
    __typename: 'propostas_Propostas_Produtos_variance_fields';
    Veiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Produtos" */
  ['propostas_Propostas_Produtos_variance_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos']: {
    __typename: 'propostas_Propostas_Servicos';
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Proposta: GraphQLTypes['propostas_Propostas'];
    Proposta_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Servico: GraphQLTypes['comercial_Servicos'];
    Servico_Id: GraphQLTypes['uuid'];
    /** An object relationship */
    ServicosPreco: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    ServicosPreco_Id: GraphQLTypes['uuid'];
    Veiculo: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_aggregate']: {
    __typename: 'propostas_Propostas_Servicos_aggregate';
    aggregate?: GraphQLTypes['propostas_Propostas_Servicos_aggregate_fields'];
    nodes: Array<GraphQLTypes['propostas_Propostas_Servicos']>;
  };
  /** aggregate fields of "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_aggregate_fields']: {
    __typename: 'propostas_Propostas_Servicos_aggregate_fields';
    avg?: GraphQLTypes['propostas_Propostas_Servicos_avg_fields'];
    count: number;
    max?: GraphQLTypes['propostas_Propostas_Servicos_max_fields'];
    min?: GraphQLTypes['propostas_Propostas_Servicos_min_fields'];
    stddev?: GraphQLTypes['propostas_Propostas_Servicos_stddev_fields'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Servicos_stddev_pop_fields'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Servicos_stddev_samp_fields'];
    sum?: GraphQLTypes['propostas_Propostas_Servicos_sum_fields'];
    var_pop?: GraphQLTypes['propostas_Propostas_Servicos_var_pop_fields'];
    var_samp?: GraphQLTypes['propostas_Propostas_Servicos_var_samp_fields'];
    variance?: GraphQLTypes['propostas_Propostas_Servicos_variance_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_aggregate_order_by']: {
    avg?: GraphQLTypes['propostas_Propostas_Servicos_avg_order_by'];
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['propostas_Propostas_Servicos_max_order_by'];
    min?: GraphQLTypes['propostas_Propostas_Servicos_min_order_by'];
    stddev?: GraphQLTypes['propostas_Propostas_Servicos_stddev_order_by'];
    stddev_pop?: GraphQLTypes['propostas_Propostas_Servicos_stddev_pop_order_by'];
    stddev_samp?: GraphQLTypes['propostas_Propostas_Servicos_stddev_samp_order_by'];
    sum?: GraphQLTypes['propostas_Propostas_Servicos_sum_order_by'];
    var_pop?: GraphQLTypes['propostas_Propostas_Servicos_var_pop_order_by'];
    var_samp?: GraphQLTypes['propostas_Propostas_Servicos_var_samp_order_by'];
    variance?: GraphQLTypes['propostas_Propostas_Servicos_variance_order_by'];
  };
  /** input type for inserting array relation for remote table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['propostas_Propostas_Servicos_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['propostas_Propostas_Servicos_on_conflict'];
  };
  /** aggregate avg on columns */
  ['propostas_Propostas_Servicos_avg_fields']: {
    __typename: 'propostas_Propostas_Servicos_avg_fields';
    Veiculo?: number;
  };
  /** order by avg() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_avg_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Servicos". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Servicos_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Proposta?: GraphQLTypes['propostas_Propostas_bool_exp'];
    Proposta_Id?: GraphQLTypes['uuid_comparison_exp'];
    Servico?: GraphQLTypes['comercial_Servicos_bool_exp'];
    Servico_Id?: GraphQLTypes['uuid_comparison_exp'];
    ServicosPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'];
    ServicosPreco_Id?: GraphQLTypes['uuid_comparison_exp'];
    Veiculo?: GraphQLTypes['Int_comparison_exp'];
    Veiculo_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['propostas_Propostas_Servicos_bool_exp']>;
    _not?: GraphQLTypes['propostas_Propostas_Servicos_bool_exp'];
    _or?: Array<GraphQLTypes['propostas_Propostas_Servicos_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_constraint']: propostas_Propostas_Servicos_constraint;
  /** input type for incrementing numeric columns in table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_inc_input']: {
    Veiculo?: number;
  };
  /** input type for inserting data into table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Proposta?: GraphQLTypes['propostas_Propostas_obj_rel_insert_input'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Servico?: GraphQLTypes['comercial_Servicos_obj_rel_insert_input'];
    Servico_Id?: GraphQLTypes['uuid'];
    ServicosPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_obj_rel_insert_input'];
    ServicosPreco_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Servicos_max_fields']: {
    __typename: 'propostas_Propostas_Servicos_max_fields';
    Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    ServicosPreco_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_max_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    ServicosPreco_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Servicos_min_fields']: {
    __typename: 'propostas_Propostas_Servicos_min_fields';
    Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    ServicosPreco_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_min_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    ServicosPreco_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_mutation_response']: {
    __typename: 'propostas_Propostas_Servicos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['propostas_Propostas_Servicos']>;
  };
  /** on conflict condition type for table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_on_conflict']: {
    constraint: GraphQLTypes['propostas_Propostas_Servicos_constraint'];
    update_columns: Array<
      GraphQLTypes['propostas_Propostas_Servicos_update_column']
    >;
    where?: GraphQLTypes['propostas_Propostas_Servicos_bool_exp'];
  };
  /** Ordering options when selecting data from "propostas.Propostas_Servicos". */
  ['propostas_Propostas_Servicos_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Proposta?: GraphQLTypes['propostas_Propostas_order_by'];
    Proposta_Id?: GraphQLTypes['order_by'];
    Servico?: GraphQLTypes['comercial_Servicos_order_by'];
    Servico_Id?: GraphQLTypes['order_by'];
    ServicosPreco?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_order_by'];
    ServicosPreco_Id?: GraphQLTypes['order_by'];
    Veiculo?: GraphQLTypes['order_by'];
    Veiculo_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: propostas_Propostas_Servicos */
  ['propostas_Propostas_Servicos_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_select_column']: propostas_Propostas_Servicos_select_column;
  /** input type for updating data in table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Proposta_Id?: GraphQLTypes['uuid'];
    Servico_Id?: GraphQLTypes['uuid'];
    ServicosPreco_Id?: GraphQLTypes['uuid'];
    Veiculo?: number;
    Veiculo_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate stddev on columns */
  ['propostas_Propostas_Servicos_stddev_fields']: {
    __typename: 'propostas_Propostas_Servicos_stddev_fields';
    Veiculo?: number;
  };
  /** order by stddev() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_stddev_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_pop on columns */
  ['propostas_Propostas_Servicos_stddev_pop_fields']: {
    __typename: 'propostas_Propostas_Servicos_stddev_pop_fields';
    Veiculo?: number;
  };
  /** order by stddev_pop() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_stddev_pop_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate stddev_samp on columns */
  ['propostas_Propostas_Servicos_stddev_samp_fields']: {
    __typename: 'propostas_Propostas_Servicos_stddev_samp_fields';
    Veiculo?: number;
  };
  /** order by stddev_samp() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_stddev_samp_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate sum on columns */
  ['propostas_Propostas_Servicos_sum_fields']: {
    __typename: 'propostas_Propostas_Servicos_sum_fields';
    Veiculo?: number;
  };
  /** order by sum() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_sum_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** update columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_update_column']: propostas_Propostas_Servicos_update_column;
  /** aggregate var_pop on columns */
  ['propostas_Propostas_Servicos_var_pop_fields']: {
    __typename: 'propostas_Propostas_Servicos_var_pop_fields';
    Veiculo?: number;
  };
  /** order by var_pop() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_var_pop_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate var_samp on columns */
  ['propostas_Propostas_Servicos_var_samp_fields']: {
    __typename: 'propostas_Propostas_Servicos_var_samp_fields';
    Veiculo?: number;
  };
  /** order by var_samp() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_var_samp_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** aggregate variance on columns */
  ['propostas_Propostas_Servicos_variance_fields']: {
    __typename: 'propostas_Propostas_Servicos_variance_fields';
    Veiculo?: number;
  };
  /** order by variance() on columns of table "propostas.Propostas_Servicos" */
  ['propostas_Propostas_Servicos_variance_order_by']: {
    Veiculo?: GraphQLTypes['order_by'];
  };
  /** columns and relationships of "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes']: {
    __typename: 'propostas_Propostas_Situacoes';
    Comentario: string;
    /** An array relationship */
    Propostas: Array<GraphQLTypes['propostas_Propostas']>;
    /** An aggregate relationship */
    Propostas_aggregate: GraphQLTypes['propostas_Propostas_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_aggregate']: {
    __typename: 'propostas_Propostas_Situacoes_aggregate';
    aggregate?: GraphQLTypes['propostas_Propostas_Situacoes_aggregate_fields'];
    nodes: Array<GraphQLTypes['propostas_Propostas_Situacoes']>;
  };
  /** aggregate fields of "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_aggregate_fields']: {
    __typename: 'propostas_Propostas_Situacoes_aggregate_fields';
    count: number;
    max?: GraphQLTypes['propostas_Propostas_Situacoes_max_fields'];
    min?: GraphQLTypes['propostas_Propostas_Situacoes_min_fields'];
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas_Situacoes". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_Situacoes_bool_exp']: {
    Comentario?: GraphQLTypes['String_comparison_exp'];
    Propostas?: GraphQLTypes['propostas_Propostas_bool_exp'];
    Valor?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['propostas_Propostas_Situacoes_bool_exp']>;
    _not?: GraphQLTypes['propostas_Propostas_Situacoes_bool_exp'];
    _or?: Array<GraphQLTypes['propostas_Propostas_Situacoes_bool_exp']>;
  };
  /** unique or primary key constraints on table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_constraint']: propostas_Propostas_Situacoes_constraint;
  ['propostas_Propostas_Situacoes_enum']: propostas_Propostas_Situacoes_enum;
  /** Boolean expression to compare columns of type "propostas_Propostas_Situacoes_enum". All fields are combined with logical 'AND'. */
  ['propostas_Propostas_Situacoes_enum_comparison_exp']: {
    _eq?: GraphQLTypes['propostas_Propostas_Situacoes_enum'];
    _in?: Array<GraphQLTypes['propostas_Propostas_Situacoes_enum']>;
    _is_null?: boolean;
    _neq?: GraphQLTypes['propostas_Propostas_Situacoes_enum'];
    _nin?: Array<GraphQLTypes['propostas_Propostas_Situacoes_enum']>;
  };
  /** input type for inserting data into table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_insert_input']: {
    Comentario?: string;
    Propostas?: GraphQLTypes['propostas_Propostas_arr_rel_insert_input'];
    Valor?: string;
  };
  /** aggregate max on columns */
  ['propostas_Propostas_Situacoes_max_fields']: {
    __typename: 'propostas_Propostas_Situacoes_max_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['propostas_Propostas_Situacoes_min_fields']: {
    __typename: 'propostas_Propostas_Situacoes_min_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_mutation_response']: {
    __typename: 'propostas_Propostas_Situacoes_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['propostas_Propostas_Situacoes']>;
  };
  /** input type for inserting object relation for remote table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_obj_rel_insert_input']: {
    data: GraphQLTypes['propostas_Propostas_Situacoes_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['propostas_Propostas_Situacoes_on_conflict'];
  };
  /** on conflict condition type for table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_on_conflict']: {
    constraint: GraphQLTypes['propostas_Propostas_Situacoes_constraint'];
    update_columns: Array<
      GraphQLTypes['propostas_Propostas_Situacoes_update_column']
    >;
    where?: GraphQLTypes['propostas_Propostas_Situacoes_bool_exp'];
  };
  /** Ordering options when selecting data from "propostas.Propostas_Situacoes". */
  ['propostas_Propostas_Situacoes_order_by']: {
    Comentario?: GraphQLTypes['order_by'];
    Propostas_aggregate?: GraphQLTypes['propostas_Propostas_aggregate_order_by'];
    Valor?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: propostas_Propostas_Situacoes */
  ['propostas_Propostas_Situacoes_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_select_column']: propostas_Propostas_Situacoes_select_column;
  /** input type for updating data in table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_set_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** update columns of table "propostas.Propostas_Situacoes" */
  ['propostas_Propostas_Situacoes_update_column']: propostas_Propostas_Situacoes_update_column;
  /** aggregated selection of "propostas.Propostas" */
  ['propostas_Propostas_aggregate']: {
    __typename: 'propostas_Propostas_aggregate';
    aggregate?: GraphQLTypes['propostas_Propostas_aggregate_fields'];
    nodes: Array<GraphQLTypes['propostas_Propostas']>;
  };
  /** aggregate fields of "propostas.Propostas" */
  ['propostas_Propostas_aggregate_fields']: {
    __typename: 'propostas_Propostas_aggregate_fields';
    count: number;
    max?: GraphQLTypes['propostas_Propostas_max_fields'];
    min?: GraphQLTypes['propostas_Propostas_min_fields'];
  };
  /** order by aggregate values of table "propostas.Propostas" */
  ['propostas_Propostas_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['propostas_Propostas_max_order_by'];
    min?: GraphQLTypes['propostas_Propostas_min_order_by'];
  };
  /** input type for inserting array relation for remote table "propostas.Propostas" */
  ['propostas_Propostas_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['propostas_Propostas_insert_input']>;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['propostas_Propostas_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "propostas.Propostas". All fields are combined with a logical 'AND'. */
  ['propostas_Propostas_bool_exp']: {
    Cliente_Id?: GraphQLTypes['uuid_comparison_exp'];
    Combos?: GraphQLTypes['propostas_Propostas_Combos_bool_exp'];
    DataAceito?: GraphQLTypes['timestamptz_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Instalacoes?: GraphQLTypes['propostas_Propostas_Instalacoes_bool_exp'];
    Lead_Id?: GraphQLTypes['uuid_comparison_exp'];
    Oportunidades?: GraphQLTypes['propostas_Propostas_Oportunidades_bool_exp'];
    Planos?: GraphQLTypes['propostas_Propostas_Planos_bool_exp'];
    Produtos?: GraphQLTypes['propostas_Propostas_Produtos_bool_exp'];
    Servicos?: GraphQLTypes['propostas_Propostas_Servicos_bool_exp'];
    Situacao?: GraphQLTypes['propostas_Propostas_Situacoes_bool_exp'];
    Situacao_Id?: GraphQLTypes['propostas_Propostas_Situacoes_enum_comparison_exp'];
    Ticket_Id?: GraphQLTypes['uuid_comparison_exp'];
    TipoDePagamento_Id?: GraphQLTypes['String_comparison_exp'];
    TipoDeRecorrencia_Id?: GraphQLTypes['String_comparison_exp'];
    Usuario_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['propostas_Propostas_bool_exp']>;
    _not?: GraphQLTypes['propostas_Propostas_bool_exp'];
    _or?: Array<GraphQLTypes['propostas_Propostas_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "propostas.Propostas" */
  ['propostas_Propostas_constraint']: propostas_Propostas_constraint;
  /** input type for inserting data into table "propostas.Propostas" */
  ['propostas_Propostas_insert_input']: {
    Cliente_Id?: GraphQLTypes['uuid'];
    Combos?: GraphQLTypes['propostas_Propostas_Combos_arr_rel_insert_input'];
    DataAceito?: GraphQLTypes['timestamptz'];
    Id?: GraphQLTypes['uuid'];
    Instalacoes?: GraphQLTypes['propostas_Propostas_Instalacoes_arr_rel_insert_input'];
    Lead_Id?: GraphQLTypes['uuid'];
    Oportunidades?: GraphQLTypes['propostas_Propostas_Oportunidades_arr_rel_insert_input'];
    Planos?: GraphQLTypes['propostas_Propostas_Planos_arr_rel_insert_input'];
    Produtos?: GraphQLTypes['propostas_Propostas_Produtos_arr_rel_insert_input'];
    Servicos?: GraphQLTypes['propostas_Propostas_Servicos_arr_rel_insert_input'];
    Situacao?: GraphQLTypes['propostas_Propostas_Situacoes_obj_rel_insert_input'];
    Situacao_Id?: GraphQLTypes['propostas_Propostas_Situacoes_enum'];
    Ticket_Id?: GraphQLTypes['uuid'];
    TipoDePagamento_Id?: string;
    TipoDeRecorrencia_Id?: string;
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['propostas_Propostas_max_fields']: {
    __typename: 'propostas_Propostas_max_fields';
    Cliente_Id?: GraphQLTypes['uuid'];
    DataAceito?: GraphQLTypes['timestamptz'];
    Id?: GraphQLTypes['uuid'];
    Lead_Id?: GraphQLTypes['uuid'];
    Ticket_Id?: GraphQLTypes['uuid'];
    TipoDePagamento_Id?: string;
    TipoDeRecorrencia_Id?: string;
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "propostas.Propostas" */
  ['propostas_Propostas_max_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    DataAceito?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Lead_Id?: GraphQLTypes['order_by'];
    Ticket_Id?: GraphQLTypes['order_by'];
    TipoDePagamento_Id?: GraphQLTypes['order_by'];
    TipoDeRecorrencia_Id?: GraphQLTypes['order_by'];
    Usuario_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['propostas_Propostas_min_fields']: {
    __typename: 'propostas_Propostas_min_fields';
    Cliente_Id?: GraphQLTypes['uuid'];
    DataAceito?: GraphQLTypes['timestamptz'];
    Id?: GraphQLTypes['uuid'];
    Lead_Id?: GraphQLTypes['uuid'];
    Ticket_Id?: GraphQLTypes['uuid'];
    TipoDePagamento_Id?: string;
    TipoDeRecorrencia_Id?: string;
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "propostas.Propostas" */
  ['propostas_Propostas_min_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    DataAceito?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Lead_Id?: GraphQLTypes['order_by'];
    Ticket_Id?: GraphQLTypes['order_by'];
    TipoDePagamento_Id?: GraphQLTypes['order_by'];
    TipoDeRecorrencia_Id?: GraphQLTypes['order_by'];
    Usuario_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "propostas.Propostas" */
  ['propostas_Propostas_mutation_response']: {
    __typename: 'propostas_Propostas_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['propostas_Propostas']>;
  };
  /** input type for inserting object relation for remote table "propostas.Propostas" */
  ['propostas_Propostas_obj_rel_insert_input']: {
    data: GraphQLTypes['propostas_Propostas_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['propostas_Propostas_on_conflict'];
  };
  /** on conflict condition type for table "propostas.Propostas" */
  ['propostas_Propostas_on_conflict']: {
    constraint: GraphQLTypes['propostas_Propostas_constraint'];
    update_columns: Array<GraphQLTypes['propostas_Propostas_update_column']>;
    where?: GraphQLTypes['propostas_Propostas_bool_exp'];
  };
  /** Ordering options when selecting data from "propostas.Propostas". */
  ['propostas_Propostas_order_by']: {
    Cliente_Id?: GraphQLTypes['order_by'];
    Combos_aggregate?: GraphQLTypes['propostas_Propostas_Combos_aggregate_order_by'];
    DataAceito?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Instalacoes_aggregate?: GraphQLTypes['propostas_Propostas_Instalacoes_aggregate_order_by'];
    Lead_Id?: GraphQLTypes['order_by'];
    Oportunidades_aggregate?: GraphQLTypes['propostas_Propostas_Oportunidades_aggregate_order_by'];
    Planos_aggregate?: GraphQLTypes['propostas_Propostas_Planos_aggregate_order_by'];
    Produtos_aggregate?: GraphQLTypes['propostas_Propostas_Produtos_aggregate_order_by'];
    Servicos_aggregate?: GraphQLTypes['propostas_Propostas_Servicos_aggregate_order_by'];
    Situacao?: GraphQLTypes['propostas_Propostas_Situacoes_order_by'];
    Situacao_Id?: GraphQLTypes['order_by'];
    Ticket_Id?: GraphQLTypes['order_by'];
    TipoDePagamento_Id?: GraphQLTypes['order_by'];
    TipoDeRecorrencia_Id?: GraphQLTypes['order_by'];
    Usuario_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: propostas_Propostas */
  ['propostas_Propostas_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "propostas.Propostas" */
  ['propostas_Propostas_select_column']: propostas_Propostas_select_column;
  /** input type for updating data in table "propostas.Propostas" */
  ['propostas_Propostas_set_input']: {
    Cliente_Id?: GraphQLTypes['uuid'];
    DataAceito?: GraphQLTypes['timestamptz'];
    Id?: GraphQLTypes['uuid'];
    Lead_Id?: GraphQLTypes['uuid'];
    Situacao_Id?: GraphQLTypes['propostas_Propostas_Situacoes_enum'];
    Ticket_Id?: GraphQLTypes['uuid'];
    TipoDePagamento_Id?: string;
    TipoDeRecorrencia_Id?: string;
    Usuario_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "propostas.Propostas" */
  ['propostas_Propostas_update_column']: propostas_Propostas_update_column;
  ['query_root']: {
    __typename: 'query_root';
    /** fetch data from the table: "CategoriasDeVeiculos" */
    CategoriasDeVeiculos: Array<GraphQLTypes['CategoriasDeVeiculos']>;
    /** fetch aggregated fields from the table: "CategoriasDeVeiculos" */
    CategoriasDeVeiculos_aggregate: GraphQLTypes['CategoriasDeVeiculos_aggregate'];
    /** fetch data from the table: "CategoriasDeVeiculos" using primary key columns */
    CategoriasDeVeiculos_by_pk?: GraphQLTypes['CategoriasDeVeiculos'];
    /** fetch data from the table: "EstadosEMunicipios" */
    EstadosEMunicipios: Array<GraphQLTypes['EstadosEMunicipios']>;
    /** fetch aggregated fields from the table: "EstadosEMunicipios" */
    EstadosEMunicipios_aggregate: GraphQLTypes['EstadosEMunicipios_aggregate'];
    /** fetch data from the table: "EstadosEMunicipios" using primary key columns */
    EstadosEMunicipios_by_pk?: GraphQLTypes['EstadosEMunicipios'];
    /** fetch data from the table: "atendimentos.EtapasDosFluxos" */
    atendimentos_EtapasDosFluxos: Array<
      GraphQLTypes['atendimentos_EtapasDosFluxos']
    >;
    /** fetch aggregated fields from the table: "atendimentos.EtapasDosFluxos" */
    atendimentos_EtapasDosFluxos_aggregate: GraphQLTypes['atendimentos_EtapasDosFluxos_aggregate'];
    /** fetch data from the table: "atendimentos.EtapasDosFluxos" using primary key columns */
    atendimentos_EtapasDosFluxos_by_pk?: GraphQLTypes['atendimentos_EtapasDosFluxos'];
    /** fetch data from the table: "atendimentos.Fluxos" */
    atendimentos_Fluxos: Array<GraphQLTypes['atendimentos_Fluxos']>;
    /** fetch aggregated fields from the table: "atendimentos.Fluxos" */
    atendimentos_Fluxos_aggregate: GraphQLTypes['atendimentos_Fluxos_aggregate'];
    /** fetch data from the table: "atendimentos.Fluxos" using primary key columns */
    atendimentos_Fluxos_by_pk?: GraphQLTypes['atendimentos_Fluxos'];
    /** fetch data from the table: "atendimentos.Tickets" */
    atendimentos_Tickets: Array<GraphQLTypes['atendimentos_Tickets']>;
    /** fetch aggregated fields from the table: "atendimentos.Tickets" */
    atendimentos_Tickets_aggregate: GraphQLTypes['atendimentos_Tickets_aggregate'];
    /** fetch data from the table: "atendimentos.Tickets" using primary key columns */
    atendimentos_Tickets_by_pk?: GraphQLTypes['atendimentos_Tickets'];
    /** fetch data from the table: "atendimentos.TiposDeTickets" */
    atendimentos_TiposDeTickets: Array<
      GraphQLTypes['atendimentos_TiposDeTickets']
    >;
    /** fetch aggregated fields from the table: "atendimentos.TiposDeTickets" */
    atendimentos_TiposDeTickets_aggregate: GraphQLTypes['atendimentos_TiposDeTickets_aggregate'];
    /** fetch data from the table: "atendimentos.TiposDeTickets" using primary key columns */
    atendimentos_TiposDeTickets_by_pk?: GraphQLTypes['atendimentos_TiposDeTickets'];
    /** fetch data from the table: "autenticacao.Atendentes" */
    autenticacao_Atendentes: Array<GraphQLTypes['autenticacao_Atendentes']>;
    /** fetch aggregated fields from the table: "autenticacao.Atendentes" */
    autenticacao_Atendentes_aggregate: GraphQLTypes['autenticacao_Atendentes_aggregate'];
    /** fetch data from the table: "autenticacao.Atendentes" using primary key columns */
    autenticacao_Atendentes_by_pk?: GraphQLTypes['autenticacao_Atendentes'];
    /** fetch data from the table: "autenticacao.Usuarios" */
    autenticacao_Usuarios: Array<GraphQLTypes['autenticacao_Usuarios']>;
    /** fetch aggregated fields from the table: "autenticacao.Usuarios" */
    autenticacao_Usuarios_aggregate: GraphQLTypes['autenticacao_Usuarios_aggregate'];
    /** fetch data from the table: "autenticacao.Usuarios" using primary key columns */
    autenticacao_Usuarios_by_pk?: GraphQLTypes['autenticacao_Usuarios'];
    /** fetch data from the table: "clientes.Leads" */
    clientes_Leads: Array<GraphQLTypes['clientes_Leads']>;
    /** fetch aggregated fields from the table: "clientes.Leads" */
    clientes_Leads_aggregate: GraphQLTypes['clientes_Leads_aggregate'];
    /** fetch data from the table: "clientes.Leads" using primary key columns */
    clientes_Leads_by_pk?: GraphQLTypes['clientes_Leads'];
    /** fetch data from the table: "clientes.PerfisComerciais" */
    clientes_PerfisComerciais: Array<GraphQLTypes['clientes_PerfisComerciais']>;
    /** fetch aggregated fields from the table: "clientes.PerfisComerciais" */
    clientes_PerfisComerciais_aggregate: GraphQLTypes['clientes_PerfisComerciais_aggregate'];
    /** fetch data from the table: "clientes.PerfisComerciais" using primary key columns */
    clientes_PerfisComerciais_by_pk?: GraphQLTypes['clientes_PerfisComerciais'];
    /** fetch data from the table: "clientes.Veiculos" */
    clientes_Veiculos: Array<GraphQLTypes['clientes_Veiculos']>;
    /** fetch data from the table: "clientes.VeiculosAtivos" */
    clientes_VeiculosAtivos: Array<GraphQLTypes['clientes_VeiculosAtivos']>;
    /** fetch data from the table: "clientes.VeiculosAtivos_Beneficios" */
    clientes_VeiculosAtivos_Beneficios: Array<
      GraphQLTypes['clientes_VeiculosAtivos_Beneficios']
    >;
    /** fetch aggregated fields from the table: "clientes.VeiculosAtivos_Beneficios" */
    clientes_VeiculosAtivos_Beneficios_aggregate: GraphQLTypes['clientes_VeiculosAtivos_Beneficios_aggregate'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Beneficios" using primary key columns */
    clientes_VeiculosAtivos_Beneficios_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Beneficios'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Produtos" */
    clientes_VeiculosAtivos_Produtos: Array<
      GraphQLTypes['clientes_VeiculosAtivos_Produtos']
    >;
    /** fetch aggregated fields from the table: "clientes.VeiculosAtivos_Produtos" */
    clientes_VeiculosAtivos_Produtos_aggregate: GraphQLTypes['clientes_VeiculosAtivos_Produtos_aggregate'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Produtos" using primary key columns */
    clientes_VeiculosAtivos_Produtos_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Produtos'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Servicos" */
    clientes_VeiculosAtivos_Servicos: Array<
      GraphQLTypes['clientes_VeiculosAtivos_Servicos']
    >;
    /** fetch aggregated fields from the table: "clientes.VeiculosAtivos_Servicos" */
    clientes_VeiculosAtivos_Servicos_aggregate: GraphQLTypes['clientes_VeiculosAtivos_Servicos_aggregate'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Servicos" using primary key columns */
    clientes_VeiculosAtivos_Servicos_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Servicos'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Situacao" */
    clientes_VeiculosAtivos_Situacao: Array<
      GraphQLTypes['clientes_VeiculosAtivos_Situacao']
    >;
    /** fetch aggregated fields from the table: "clientes.VeiculosAtivos_Situacao" */
    clientes_VeiculosAtivos_Situacao_aggregate: GraphQLTypes['clientes_VeiculosAtivos_Situacao_aggregate'];
    /** fetch data from the table: "clientes.VeiculosAtivos_Situacao" using primary key columns */
    clientes_VeiculosAtivos_Situacao_by_pk?: GraphQLTypes['clientes_VeiculosAtivos_Situacao'];
    /** fetch aggregated fields from the table: "clientes.VeiculosAtivos" */
    clientes_VeiculosAtivos_aggregate: GraphQLTypes['clientes_VeiculosAtivos_aggregate'];
    /** fetch data from the table: "clientes.VeiculosAtivos" using primary key columns */
    clientes_VeiculosAtivos_by_pk?: GraphQLTypes['clientes_VeiculosAtivos'];
    /** fetch aggregated fields from the table: "clientes.Veiculos" */
    clientes_Veiculos_aggregate: GraphQLTypes['clientes_Veiculos_aggregate'];
    /** fetch data from the table: "clientes.Veiculos" using primary key columns */
    clientes_Veiculos_by_pk?: GraphQLTypes['clientes_Veiculos'];
    /** fetch data from the table: "comercial.Acoes" */
    comercial_Acoes: Array<GraphQLTypes['comercial_Acoes']>;
    /** fetch aggregated fields from the table: "comercial.Acoes" */
    comercial_Acoes_aggregate: GraphQLTypes['comercial_Acoes_aggregate'];
    /** fetch data from the table: "comercial.Acoes" using primary key columns */
    comercial_Acoes_by_pk?: GraphQLTypes['comercial_Acoes'];
    /** fetch data from the table: "comercial.Atributos" */
    comercial_Atributos: Array<GraphQLTypes['comercial_Atributos']>;
    /** fetch aggregated fields from the table: "comercial.Atributos" */
    comercial_Atributos_aggregate: GraphQLTypes['comercial_Atributos_aggregate'];
    /** fetch data from the table: "comercial.Atributos" using primary key columns */
    comercial_Atributos_by_pk?: GraphQLTypes['comercial_Atributos'];
    /** fetch data from the table: "comercial.Coberturas" */
    comercial_Coberturas: Array<GraphQLTypes['comercial_Coberturas']>;
    /** fetch aggregated fields from the table: "comercial.Coberturas" */
    comercial_Coberturas_aggregate: GraphQLTypes['comercial_Coberturas_aggregate'];
    /** fetch data from the table: "comercial.Coberturas" using primary key columns */
    comercial_Coberturas_by_pk?: GraphQLTypes['comercial_Coberturas'];
    /** fetch data from the table: "comercial.Combos" */
    comercial_Combos: Array<GraphQLTypes['comercial_Combos']>;
    /** fetch data from the table: "comercial.Combos_Combos" */
    comercial_Combos_Combos: Array<GraphQLTypes['comercial_Combos_Combos']>;
    /** fetch aggregated fields from the table: "comercial.Combos_Combos" */
    comercial_Combos_Combos_aggregate: GraphQLTypes['comercial_Combos_Combos_aggregate'];
    /** fetch data from the table: "comercial.Combos_Combos" using primary key columns */
    comercial_Combos_Combos_by_pk?: GraphQLTypes['comercial_Combos_Combos'];
    /** fetch data from the table: "comercial.Combos_Planos" */
    comercial_Combos_Planos: Array<GraphQLTypes['comercial_Combos_Planos']>;
    /** fetch aggregated fields from the table: "comercial.Combos_Planos" */
    comercial_Combos_Planos_aggregate: GraphQLTypes['comercial_Combos_Planos_aggregate'];
    /** fetch data from the table: "comercial.Combos_Planos" using primary key columns */
    comercial_Combos_Planos_by_pk?: GraphQLTypes['comercial_Combos_Planos'];
    /** fetch data from the table: "comercial.Combos_Precos" */
    comercial_Combos_Precos: Array<GraphQLTypes['comercial_Combos_Precos']>;
    /** fetch aggregated fields from the table: "comercial.Combos_Precos" */
    comercial_Combos_Precos_aggregate: GraphQLTypes['comercial_Combos_Precos_aggregate'];
    /** fetch data from the table: "comercial.Combos_Precos" using primary key columns */
    comercial_Combos_Precos_by_pk?: GraphQLTypes['comercial_Combos_Precos'];
    /** fetch data from the table: "comercial.Combos_Produtos" */
    comercial_Combos_Produtos: Array<GraphQLTypes['comercial_Combos_Produtos']>;
    /** fetch aggregated fields from the table: "comercial.Combos_Produtos" */
    comercial_Combos_Produtos_aggregate: GraphQLTypes['comercial_Combos_Produtos_aggregate'];
    /** fetch data from the table: "comercial.Combos_Produtos" using primary key columns */
    comercial_Combos_Produtos_by_pk?: GraphQLTypes['comercial_Combos_Produtos'];
    /** fetch data from the table: "comercial.Combos_Servicos" */
    comercial_Combos_Servicos: Array<GraphQLTypes['comercial_Combos_Servicos']>;
    /** fetch aggregated fields from the table: "comercial.Combos_Servicos" */
    comercial_Combos_Servicos_aggregate: GraphQLTypes['comercial_Combos_Servicos_aggregate'];
    /** fetch data from the table: "comercial.Combos_Servicos" using primary key columns */
    comercial_Combos_Servicos_by_pk?: GraphQLTypes['comercial_Combos_Servicos'];
    /** fetch aggregated fields from the table: "comercial.Combos" */
    comercial_Combos_aggregate: GraphQLTypes['comercial_Combos_aggregate'];
    /** fetch data from the table: "comercial.Combos" using primary key columns */
    comercial_Combos_by_pk?: GraphQLTypes['comercial_Combos'];
    /** fetch data from the table: "comercial.Condicionais" */
    comercial_Condicionais: Array<GraphQLTypes['comercial_Condicionais']>;
    /** fetch data from the table: "comercial.CondicionaisSituacoes" */
    comercial_CondicionaisSituacoes: Array<
      GraphQLTypes['comercial_CondicionaisSituacoes']
    >;
    /** fetch aggregated fields from the table: "comercial.CondicionaisSituacoes" */
    comercial_CondicionaisSituacoes_aggregate: GraphQLTypes['comercial_CondicionaisSituacoes_aggregate'];
    /** fetch data from the table: "comercial.CondicionaisSituacoes" using primary key columns */
    comercial_CondicionaisSituacoes_by_pk?: GraphQLTypes['comercial_CondicionaisSituacoes'];
    /** fetch aggregated fields from the table: "comercial.Condicionais" */
    comercial_Condicionais_aggregate: GraphQLTypes['comercial_Condicionais_aggregate'];
    /** fetch data from the table: "comercial.Condicionais" using primary key columns */
    comercial_Condicionais_by_pk?: GraphQLTypes['comercial_Condicionais'];
    /** fetch data from the table: "comercial.ContratosBase" */
    comercial_ContratosBase: Array<GraphQLTypes['comercial_ContratosBase']>;
    /** fetch data from the table: "comercial.ContratosBase_Versoes" */
    comercial_ContratosBase_Versoes: Array<
      GraphQLTypes['comercial_ContratosBase_Versoes']
    >;
    /** fetch aggregated fields from the table: "comercial.ContratosBase_Versoes" */
    comercial_ContratosBase_Versoes_aggregate: GraphQLTypes['comercial_ContratosBase_Versoes_aggregate'];
    /** fetch data from the table: "comercial.ContratosBase_Versoes" using primary key columns */
    comercial_ContratosBase_Versoes_by_pk?: GraphQLTypes['comercial_ContratosBase_Versoes'];
    /** fetch aggregated fields from the table: "comercial.ContratosBase" */
    comercial_ContratosBase_aggregate: GraphQLTypes['comercial_ContratosBase_aggregate'];
    /** fetch data from the table: "comercial.ContratosBase" using primary key columns */
    comercial_ContratosBase_by_pk?: GraphQLTypes['comercial_ContratosBase'];
    /** fetch data from the table: "comercial.Planos" */
    comercial_Planos: Array<GraphQLTypes['comercial_Planos']>;
    /** fetch data from the table: "comercial.Planos_Condicionais" */
    comercial_Planos_Condicionais: Array<
      GraphQLTypes['comercial_Planos_Condicionais']
    >;
    /** fetch aggregated fields from the table: "comercial.Planos_Condicionais" */
    comercial_Planos_Condicionais_aggregate: GraphQLTypes['comercial_Planos_Condicionais_aggregate'];
    /** fetch data from the table: "comercial.Planos_Condicionais" using primary key columns */
    comercial_Planos_Condicionais_by_pk?: GraphQLTypes['comercial_Planos_Condicionais'];
    /** fetch data from the table: "comercial.Planos_Precos" */
    comercial_Planos_Precos: Array<GraphQLTypes['comercial_Planos_Precos']>;
    /** fetch aggregated fields from the table: "comercial.Planos_Precos" */
    comercial_Planos_Precos_aggregate: GraphQLTypes['comercial_Planos_Precos_aggregate'];
    /** fetch data from the table: "comercial.Planos_Precos" using primary key columns */
    comercial_Planos_Precos_by_pk?: GraphQLTypes['comercial_Planos_Precos'];
    /** fetch aggregated fields from the table: "comercial.Planos" */
    comercial_Planos_aggregate: GraphQLTypes['comercial_Planos_aggregate'];
    /** fetch data from the table: "comercial.Planos" using primary key columns */
    comercial_Planos_by_pk?: GraphQLTypes['comercial_Planos'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos" */
    comercial_PrestadoresDeServicos: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos']
    >;
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos" */
    comercial_PrestadoresDeServicos_Produtos: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos']
    >;
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    comercial_PrestadoresDeServicos_Produtos_Itens: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens']
    >;
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Produtos_Itens" */
    comercial_PrestadoresDeServicos_Produtos_Itens_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos_Itens" using primary key columns */
    comercial_PrestadoresDeServicos_Produtos_Itens_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Itens'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    comercial_PrestadoresDeServicos_Produtos_Precos: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    >;
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Produtos_Precos" */
    comercial_PrestadoresDeServicos_Produtos_Precos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos_Precos" using primary key columns */
    comercial_PrestadoresDeServicos_Produtos_Precos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos'];
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Produtos" */
    comercial_PrestadoresDeServicos_Produtos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Produtos" using primary key columns */
    comercial_PrestadoresDeServicos_Produtos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos" */
    comercial_PrestadoresDeServicos_Servicos: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos']
    >;
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    comercial_PrestadoresDeServicos_Servicos_Precos: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    >;
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Servicos_Precos" */
    comercial_PrestadoresDeServicos_Servicos_Precos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos_Precos" using primary key columns */
    comercial_PrestadoresDeServicos_Servicos_Precos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    comercial_PrestadoresDeServicos_Servicos_Tarifas: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas']
    >;
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
    comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos_Tarifas" using primary key columns */
    comercial_PrestadoresDeServicos_Servicos_Tarifas_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Tarifas'];
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos_Servicos" */
    comercial_PrestadoresDeServicos_Servicos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos_Servicos" using primary key columns */
    comercial_PrestadoresDeServicos_Servicos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos'];
    /** fetch aggregated fields from the table: "comercial.PrestadoresDeServicos" */
    comercial_PrestadoresDeServicos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_aggregate'];
    /** fetch data from the table: "comercial.PrestadoresDeServicos" using primary key columns */
    comercial_PrestadoresDeServicos_by_pk?: GraphQLTypes['comercial_PrestadoresDeServicos'];
    /** fetch data from the table: "comercial.Produtos" */
    comercial_Produtos: Array<GraphQLTypes['comercial_Produtos']>;
    /** fetch data from the table: "comercial.Produtos_Atributos" */
    comercial_Produtos_Atributos: Array<
      GraphQLTypes['comercial_Produtos_Atributos']
    >;
    /** fetch aggregated fields from the table: "comercial.Produtos_Atributos" */
    comercial_Produtos_Atributos_aggregate: GraphQLTypes['comercial_Produtos_Atributos_aggregate'];
    /** fetch data from the table: "comercial.Produtos_Atributos" using primary key columns */
    comercial_Produtos_Atributos_by_pk?: GraphQLTypes['comercial_Produtos_Atributos'];
    /** fetch data from the table: "comercial.Produtos_Oportunidades" */
    comercial_Produtos_Oportunidades: Array<
      GraphQLTypes['comercial_Produtos_Oportunidades']
    >;
    /** fetch aggregated fields from the table: "comercial.Produtos_Oportunidades" */
    comercial_Produtos_Oportunidades_aggregate: GraphQLTypes['comercial_Produtos_Oportunidades_aggregate'];
    /** fetch data from the table: "comercial.Produtos_Oportunidades" using primary key columns */
    comercial_Produtos_Oportunidades_by_pk?: GraphQLTypes['comercial_Produtos_Oportunidades'];
    /** fetch data from the table: "comercial.Produtos_Produtos" */
    comercial_Produtos_Produtos: Array<
      GraphQLTypes['comercial_Produtos_Produtos']
    >;
    /** fetch aggregated fields from the table: "comercial.Produtos_Produtos" */
    comercial_Produtos_Produtos_aggregate: GraphQLTypes['comercial_Produtos_Produtos_aggregate'];
    /** fetch data from the table: "comercial.Produtos_Produtos" using primary key columns */
    comercial_Produtos_Produtos_by_pk?: GraphQLTypes['comercial_Produtos_Produtos'];
    /** fetch data from the table: "comercial.Produtos_Servicos" */
    comercial_Produtos_Servicos: Array<
      GraphQLTypes['comercial_Produtos_Servicos']
    >;
    /** fetch aggregated fields from the table: "comercial.Produtos_Servicos" */
    comercial_Produtos_Servicos_aggregate: GraphQLTypes['comercial_Produtos_Servicos_aggregate'];
    /** fetch data from the table: "comercial.Produtos_Servicos" using primary key columns */
    comercial_Produtos_Servicos_by_pk?: GraphQLTypes['comercial_Produtos_Servicos'];
    /** fetch data from the table: "comercial.Produtos_Tipos" */
    comercial_Produtos_Tipos: Array<GraphQLTypes['comercial_Produtos_Tipos']>;
    /** fetch aggregated fields from the table: "comercial.Produtos_Tipos" */
    comercial_Produtos_Tipos_aggregate: GraphQLTypes['comercial_Produtos_Tipos_aggregate'];
    /** fetch data from the table: "comercial.Produtos_Tipos" using primary key columns */
    comercial_Produtos_Tipos_by_pk?: GraphQLTypes['comercial_Produtos_Tipos'];
    /** fetch aggregated fields from the table: "comercial.Produtos" */
    comercial_Produtos_aggregate: GraphQLTypes['comercial_Produtos_aggregate'];
    /** fetch data from the table: "comercial.Produtos" using primary key columns */
    comercial_Produtos_by_pk?: GraphQLTypes['comercial_Produtos'];
    /** fetch data from the table: "comercial.Servicos" */
    comercial_Servicos: Array<GraphQLTypes['comercial_Servicos']>;
    /** fetch data from the table: "comercial.Servicos_Atributos" */
    comercial_Servicos_Atributos: Array<
      GraphQLTypes['comercial_Servicos_Atributos']
    >;
    /** fetch aggregated fields from the table: "comercial.Servicos_Atributos" */
    comercial_Servicos_Atributos_aggregate: GraphQLTypes['comercial_Servicos_Atributos_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Atributos" using primary key columns */
    comercial_Servicos_Atributos_by_pk?: GraphQLTypes['comercial_Servicos_Atributos'];
    /** fetch data from the table: "comercial.Servicos_Oportunidades" */
    comercial_Servicos_Oportunidades: Array<
      GraphQLTypes['comercial_Servicos_Oportunidades']
    >;
    /** fetch aggregated fields from the table: "comercial.Servicos_Oportunidades" */
    comercial_Servicos_Oportunidades_aggregate: GraphQLTypes['comercial_Servicos_Oportunidades_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Oportunidades" using primary key columns */
    comercial_Servicos_Oportunidades_by_pk?: GraphQLTypes['comercial_Servicos_Oportunidades'];
    /** fetch data from the table: "comercial.Servicos_Produtos" */
    comercial_Servicos_Produtos: Array<
      GraphQLTypes['comercial_Servicos_Produtos']
    >;
    /** fetch aggregated fields from the table: "comercial.Servicos_Produtos" */
    comercial_Servicos_Produtos_aggregate: GraphQLTypes['comercial_Servicos_Produtos_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Produtos" using primary key columns */
    comercial_Servicos_Produtos_by_pk?: GraphQLTypes['comercial_Servicos_Produtos'];
    /** fetch data from the table: "comercial.Servicos_Servicos" */
    comercial_Servicos_Servicos: Array<
      GraphQLTypes['comercial_Servicos_Servicos']
    >;
    /** fetch aggregated fields from the table: "comercial.Servicos_Servicos" */
    comercial_Servicos_Servicos_aggregate: GraphQLTypes['comercial_Servicos_Servicos_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Servicos" using primary key columns */
    comercial_Servicos_Servicos_by_pk?: GraphQLTypes['comercial_Servicos_Servicos'];
    /** fetch data from the table: "comercial.Servicos_Tarifas" */
    comercial_Servicos_Tarifas: Array<
      GraphQLTypes['comercial_Servicos_Tarifas']
    >;
    /** fetch aggregated fields from the table: "comercial.Servicos_Tarifas" */
    comercial_Servicos_Tarifas_aggregate: GraphQLTypes['comercial_Servicos_Tarifas_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Tarifas" using primary key columns */
    comercial_Servicos_Tarifas_by_pk?: GraphQLTypes['comercial_Servicos_Tarifas'];
    /** fetch data from the table: "comercial.Servicos_Tipos" */
    comercial_Servicos_Tipos: Array<GraphQLTypes['comercial_Servicos_Tipos']>;
    /** fetch aggregated fields from the table: "comercial.Servicos_Tipos" */
    comercial_Servicos_Tipos_aggregate: GraphQLTypes['comercial_Servicos_Tipos_aggregate'];
    /** fetch data from the table: "comercial.Servicos_Tipos" using primary key columns */
    comercial_Servicos_Tipos_by_pk?: GraphQLTypes['comercial_Servicos_Tipos'];
    /** fetch aggregated fields from the table: "comercial.Servicos" */
    comercial_Servicos_aggregate: GraphQLTypes['comercial_Servicos_aggregate'];
    /** fetch data from the table: "comercial.Servicos" using primary key columns */
    comercial_Servicos_by_pk?: GraphQLTypes['comercial_Servicos'];
    /** fetch data from the table: "comercial.Tarifas" */
    comercial_Tarifas: Array<GraphQLTypes['comercial_Tarifas']>;
    /** fetch aggregated fields from the table: "comercial.Tarifas" */
    comercial_Tarifas_aggregate: GraphQLTypes['comercial_Tarifas_aggregate'];
    /** fetch data from the table: "comercial.Tarifas" using primary key columns */
    comercial_Tarifas_by_pk?: GraphQLTypes['comercial_Tarifas'];
    /** fetch data from the table: "contatos.Emails" */
    contatos_Emails: Array<GraphQLTypes['contatos_Emails']>;
    /** fetch aggregated fields from the table: "contatos.Emails" */
    contatos_Emails_aggregate: GraphQLTypes['contatos_Emails_aggregate'];
    /** fetch data from the table: "contatos.Emails" using primary key columns */
    contatos_Emails_by_pk?: GraphQLTypes['contatos_Emails'];
    /** fetch data from the table: "contatos.Enderecos" */
    contatos_Enderecos: Array<GraphQLTypes['contatos_Enderecos']>;
    /** fetch aggregated fields from the table: "contatos.Enderecos" */
    contatos_Enderecos_aggregate: GraphQLTypes['contatos_Enderecos_aggregate'];
    /** fetch data from the table: "contatos.Enderecos" using primary key columns */
    contatos_Enderecos_by_pk?: GraphQLTypes['contatos_Enderecos'];
    /** fetch data from the table: "contatos.Logs" */
    contatos_Logs: Array<GraphQLTypes['contatos_Logs']>;
    /** fetch aggregated fields from the table: "contatos.Logs" */
    contatos_Logs_aggregate: GraphQLTypes['contatos_Logs_aggregate'];
    /** fetch data from the table: "contatos.Logs" using primary key columns */
    contatos_Logs_by_pk?: GraphQLTypes['contatos_Logs'];
    /** fetch data from the table: "contatos.Telefones" */
    contatos_Telefones: Array<GraphQLTypes['contatos_Telefones']>;
    /** fetch aggregated fields from the table: "contatos.Telefones" */
    contatos_Telefones_aggregate: GraphQLTypes['contatos_Telefones_aggregate'];
    /** fetch data from the table: "contatos.Telefones" using primary key columns */
    contatos_Telefones_by_pk?: GraphQLTypes['contatos_Telefones'];
    /** fetch data from the table: "identidades.Clientes" */
    identidades_Clientes: Array<GraphQLTypes['identidades_Clientes']>;
    /** fetch data from the table: "identidades.Clientes_Documentos" */
    identidades_Clientes_Documentos: Array<
      GraphQLTypes['identidades_Clientes_Documentos']
    >;
    /** fetch data from the table: "identidades.Clientes_Documentos_Situacoes" */
    identidades_Clientes_Documentos_Situacoes: Array<
      GraphQLTypes['identidades_Clientes_Documentos_Situacoes']
    >;
    /** fetch aggregated fields from the table: "identidades.Clientes_Documentos_Situacoes" */
    identidades_Clientes_Documentos_Situacoes_aggregate: GraphQLTypes['identidades_Clientes_Documentos_Situacoes_aggregate'];
    /** fetch data from the table: "identidades.Clientes_Documentos_Situacoes" using primary key columns */
    identidades_Clientes_Documentos_Situacoes_by_pk?: GraphQLTypes['identidades_Clientes_Documentos_Situacoes'];
    /** fetch aggregated fields from the table: "identidades.Clientes_Documentos" */
    identidades_Clientes_Documentos_aggregate: GraphQLTypes['identidades_Clientes_Documentos_aggregate'];
    /** fetch data from the table: "identidades.Clientes_Documentos" using primary key columns */
    identidades_Clientes_Documentos_by_pk?: GraphQLTypes['identidades_Clientes_Documentos'];
    /** fetch aggregated fields from the table: "identidades.Clientes" */
    identidades_Clientes_aggregate: GraphQLTypes['identidades_Clientes_aggregate'];
    /** fetch data from the table: "identidades.Clientes" using primary key columns */
    identidades_Clientes_by_pk?: GraphQLTypes['identidades_Clientes'];
    /** fetch data from the table: "identidades.Colaboradores" */
    identidades_Colaboradores: Array<GraphQLTypes['identidades_Colaboradores']>;
    /** fetch aggregated fields from the table: "identidades.Colaboradores" */
    identidades_Colaboradores_aggregate: GraphQLTypes['identidades_Colaboradores_aggregate'];
    /** fetch data from the table: "identidades.Colaboradores" using primary key columns */
    identidades_Colaboradores_by_pk?: GraphQLTypes['identidades_Colaboradores'];
    /** fetch data from the table: "identidades.Fornecedores" */
    identidades_Fornecedores: Array<GraphQLTypes['identidades_Fornecedores']>;
    /** fetch aggregated fields from the table: "identidades.Fornecedores" */
    identidades_Fornecedores_aggregate: GraphQLTypes['identidades_Fornecedores_aggregate'];
    /** fetch data from the table: "identidades.Fornecedores" using primary key columns */
    identidades_Fornecedores_by_pk?: GraphQLTypes['identidades_Fornecedores'];
    /** fetch data from the table: "identidades.Logs" */
    identidades_Logs: Array<GraphQLTypes['identidades_Logs']>;
    /** fetch aggregated fields from the table: "identidades.Logs" */
    identidades_Logs_aggregate: GraphQLTypes['identidades_Logs_aggregate'];
    /** fetch data from the table: "identidades.Logs" using primary key columns */
    identidades_Logs_by_pk?: GraphQLTypes['identidades_Logs'];
    /** fetch data from the table: "identidades.Pessoas" */
    identidades_Pessoas: Array<GraphQLTypes['identidades_Pessoas']>;
    /** fetch aggregated fields from the table: "identidades.Pessoas" */
    identidades_Pessoas_aggregate: GraphQLTypes['identidades_Pessoas_aggregate'];
    /** fetch data from the table: "identidades.Pessoas" using primary key columns */
    identidades_Pessoas_by_pk?: GraphQLTypes['identidades_Pessoas'];
    /** fetch data from the table: "identidades.Representantes" */
    identidades_Representantes: Array<
      GraphQLTypes['identidades_Representantes']
    >;
    /** fetch aggregated fields from the table: "identidades.Representantes" */
    identidades_Representantes_aggregate: GraphQLTypes['identidades_Representantes_aggregate'];
    /** fetch data from the table: "identidades.Representantes" using primary key columns */
    identidades_Representantes_by_pk?: GraphQLTypes['identidades_Representantes'];
    /** fetch data from the table: "identidades.Vendedores" */
    identidades_Vendedores: Array<GraphQLTypes['identidades_Vendedores']>;
    /** fetch aggregated fields from the table: "identidades.Vendedores" */
    identidades_Vendedores_aggregate: GraphQLTypes['identidades_Vendedores_aggregate'];
    /** fetch data from the table: "identidades.Vendedores" using primary key columns */
    identidades_Vendedores_by_pk?: GraphQLTypes['identidades_Vendedores'];
    /** fetch data from the table: "propostas.Propostas" */
    propostas_Propostas: Array<GraphQLTypes['propostas_Propostas']>;
    /** fetch data from the table: "propostas.Propostas_Combos" */
    propostas_Propostas_Combos: Array<
      GraphQLTypes['propostas_Propostas_Combos']
    >;
    /** fetch aggregated fields from the table: "propostas.Propostas_Combos" */
    propostas_Propostas_Combos_aggregate: GraphQLTypes['propostas_Propostas_Combos_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Combos" using primary key columns */
    propostas_Propostas_Combos_by_pk?: GraphQLTypes['propostas_Propostas_Combos'];
    /** fetch data from the table: "propostas.Propostas_Instalacoes" */
    propostas_Propostas_Instalacoes: Array<
      GraphQLTypes['propostas_Propostas_Instalacoes']
    >;
    /** fetch aggregated fields from the table: "propostas.Propostas_Instalacoes" */
    propostas_Propostas_Instalacoes_aggregate: GraphQLTypes['propostas_Propostas_Instalacoes_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Instalacoes" using primary key columns */
    propostas_Propostas_Instalacoes_by_pk?: GraphQLTypes['propostas_Propostas_Instalacoes'];
    /** fetch data from the table: "propostas.Propostas_Oportunidades" */
    propostas_Propostas_Oportunidades: Array<
      GraphQLTypes['propostas_Propostas_Oportunidades']
    >;
    /** fetch aggregated fields from the table: "propostas.Propostas_Oportunidades" */
    propostas_Propostas_Oportunidades_aggregate: GraphQLTypes['propostas_Propostas_Oportunidades_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Oportunidades" using primary key columns */
    propostas_Propostas_Oportunidades_by_pk?: GraphQLTypes['propostas_Propostas_Oportunidades'];
    /** fetch data from the table: "propostas.Propostas_Planos" */
    propostas_Propostas_Planos: Array<
      GraphQLTypes['propostas_Propostas_Planos']
    >;
    /** fetch aggregated fields from the table: "propostas.Propostas_Planos" */
    propostas_Propostas_Planos_aggregate: GraphQLTypes['propostas_Propostas_Planos_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Planos" using primary key columns */
    propostas_Propostas_Planos_by_pk?: GraphQLTypes['propostas_Propostas_Planos'];
    /** fetch data from the table: "propostas.Propostas_Produtos" */
    propostas_Propostas_Produtos: Array<
      GraphQLTypes['propostas_Propostas_Produtos']
    >;
    /** fetch aggregated fields from the table: "propostas.Propostas_Produtos" */
    propostas_Propostas_Produtos_aggregate: GraphQLTypes['propostas_Propostas_Produtos_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Produtos" using primary key columns */
    propostas_Propostas_Produtos_by_pk?: GraphQLTypes['propostas_Propostas_Produtos'];
    /** fetch data from the table: "propostas.Propostas_Servicos" */
    propostas_Propostas_Servicos: Array<
      GraphQLTypes['propostas_Propostas_Servicos']
    >;
    /** fetch aggregated fields from the table: "propostas.Propostas_Servicos" */
    propostas_Propostas_Servicos_aggregate: GraphQLTypes['propostas_Propostas_Servicos_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Servicos" using primary key columns */
    propostas_Propostas_Servicos_by_pk?: GraphQLTypes['propostas_Propostas_Servicos'];
    /** fetch data from the table: "propostas.Propostas_Situacoes" */
    propostas_Propostas_Situacoes: Array<
      GraphQLTypes['propostas_Propostas_Situacoes']
    >;
    /** fetch aggregated fields from the table: "propostas.Propostas_Situacoes" */
    propostas_Propostas_Situacoes_aggregate: GraphQLTypes['propostas_Propostas_Situacoes_aggregate'];
    /** fetch data from the table: "propostas.Propostas_Situacoes" using primary key columns */
    propostas_Propostas_Situacoes_by_pk?: GraphQLTypes['propostas_Propostas_Situacoes'];
    /** fetch aggregated fields from the table: "propostas.Propostas" */
    propostas_Propostas_aggregate: GraphQLTypes['propostas_Propostas_aggregate'];
    /** fetch data from the table: "propostas.Propostas" using primary key columns */
    propostas_Propostas_by_pk?: GraphQLTypes['propostas_Propostas'];
    /** fetch data from the table: "vendas.GruposDePerguntas" */
    vendas_GruposDePerguntas: Array<GraphQLTypes['vendas_GruposDePerguntas']>;
    /** fetch data from the table: "vendas.GruposDePerguntas_Perguntas" */
    vendas_GruposDePerguntas_Perguntas: Array<
      GraphQLTypes['vendas_GruposDePerguntas_Perguntas']
    >;
    /** fetch aggregated fields from the table: "vendas.GruposDePerguntas_Perguntas" */
    vendas_GruposDePerguntas_Perguntas_aggregate: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_aggregate'];
    /** fetch data from the table: "vendas.GruposDePerguntas_Perguntas" using primary key columns */
    vendas_GruposDePerguntas_Perguntas_by_pk?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas'];
    /** fetch aggregated fields from the table: "vendas.GruposDePerguntas" */
    vendas_GruposDePerguntas_aggregate: GraphQLTypes['vendas_GruposDePerguntas_aggregate'];
    /** fetch data from the table: "vendas.GruposDePerguntas" using primary key columns */
    vendas_GruposDePerguntas_by_pk?: GraphQLTypes['vendas_GruposDePerguntas'];
    /** fetch data from the table: "vendas.Perguntas" */
    vendas_Perguntas: Array<GraphQLTypes['vendas_Perguntas']>;
    /** fetch aggregated fields from the table: "vendas.Perguntas" */
    vendas_Perguntas_aggregate: GraphQLTypes['vendas_Perguntas_aggregate'];
    /** fetch data from the table: "vendas.Perguntas" using primary key columns */
    vendas_Perguntas_by_pk?: GraphQLTypes['vendas_Perguntas'];
    /** fetch data from the table: "vendas.TiposDePagamento" */
    vendas_TiposDePagamento: Array<GraphQLTypes['vendas_TiposDePagamento']>;
    /** fetch aggregated fields from the table: "vendas.TiposDePagamento" */
    vendas_TiposDePagamento_aggregate: GraphQLTypes['vendas_TiposDePagamento_aggregate'];
    /** fetch data from the table: "vendas.TiposDePagamento" using primary key columns */
    vendas_TiposDePagamento_by_pk?: GraphQLTypes['vendas_TiposDePagamento'];
    /** fetch data from the table: "vendas.TiposDePrecos" */
    vendas_TiposDePrecos: Array<GraphQLTypes['vendas_TiposDePrecos']>;
    /** fetch aggregated fields from the table: "vendas.TiposDePrecos" */
    vendas_TiposDePrecos_aggregate: GraphQLTypes['vendas_TiposDePrecos_aggregate'];
    /** fetch data from the table: "vendas.TiposDePrecos" using primary key columns */
    vendas_TiposDePrecos_by_pk?: GraphQLTypes['vendas_TiposDePrecos'];
    /** fetch data from the table: "vendas.TiposDeRecorrencia" */
    vendas_TiposDeRecorrencia: Array<GraphQLTypes['vendas_TiposDeRecorrencia']>;
    /** fetch aggregated fields from the table: "vendas.TiposDeRecorrencia" */
    vendas_TiposDeRecorrencia_aggregate: GraphQLTypes['vendas_TiposDeRecorrencia_aggregate'];
    /** fetch data from the table: "vendas.TiposDeRecorrencia" using primary key columns */
    vendas_TiposDeRecorrencia_by_pk?: GraphQLTypes['vendas_TiposDeRecorrencia'];
  };
  ['subscription_root']: {
    __typename: 'subscription_root';
    /** fetch data from the table: "CategoriasDeVeiculos" */
    CategoriasDeVeiculos: Array<GraphQLTypes['CategoriasDeVeiculos']>;
    /** fetch aggregated fields from the table: "CategoriasDeVeiculos" */
    CategoriasDeVeiculos_aggregate: GraphQLTypes['CategoriasDeVeiculos_aggregate'];
    /** fetch data from the table: "CategoriasDeVeiculos" using primary key columns */
    CategoriasDeVeiculos_by_pk?: GraphQLTypes['CategoriasDeVeiculos'];
    /** fetch data from the table: "EstadosEMunicipios" */
    EstadosEMunicipios: Array<GraphQLTypes['EstadosEMunicipios']>;
    /** fetch aggregated fields from the table: "EstadosEMunicipios" */
    EstadosEMunicipios_aggregate: GraphQLTypes['EstadosEMunicipios_aggregate'];
    /** fetch data from the table: "EstadosEMunicipios" using primary key columns */
    EstadosEMunicipios_by_pk?: GraphQLTypes['EstadosEMunicipios'];
    /** fetch data from the table: "atendimentos.EtapasDosFluxos" */
    atendimentos_EtapasDosFluxos: Array<
      GraphQLTypes['atendimentos_EtapasDosFluxos']
    >;
    /** fetch aggregated fields from the table: "atendimentos.EtapasDosFluxos" */
    atendimentos_EtapasDosFluxos_aggregate: GraphQLTypes['atendimentos_EtapasDosFluxos_aggregate'];
    /** fetch data from the table: "atendimentos.EtapasDosFluxos" using primary key columns */
    atendimentos_EtapasDosFluxos_by_pk?: GraphQLTypes['atendimentos_EtapasDosFluxos'];
    /** fetch data from the table: "atendimentos.Fluxos" */
    atendimentos_Fluxos: Array<GraphQLTypes['atendimentos_Fluxos']>;
    /** fetch aggregated fields from the table: "atendimentos.Fluxos" */
    atendimentos_Fluxos_aggregate: GraphQLTypes['atendimentos_Fluxos_aggregate'];
    /** fetch data from the table: "atendimentos.Fluxos" using primary key columns */
    atendimentos_Fluxos_by_pk?: GraphQLTypes['atendimentos_Fluxos'];
    /** fetch data from the table: "atendimentos.Tickets" */
    atendimentos_Tickets: Array<GraphQLTypes['atendimentos_Tickets']>;
    /** fetch aggregated fields from the table: "atendimentos.Tickets" */
    atendimentos_Tickets_aggregate: GraphQLTypes['atendimentos_Tickets_aggregate'];
    /** fetch data from the table: "atendimentos.Tickets" using primary key columns */
    atendimentos_Tickets_by_pk?: GraphQLTypes['atendimentos_Tickets'];
    /** fetch data from the table: "atendimentos.TiposDeTickets" */
    atendimentos_TiposDeTickets: Array<
      GraphQLTypes['atendimentos_TiposDeTickets']
    >;
    /** fetch aggregated fields from the table: "atendimentos.TiposDeTickets" */
    atendimentos_TiposDeTickets_aggregate: GraphQLTypes['atendimentos_TiposDeTickets_aggregate'];
    /** fetch data from the table: "atendimentos.TiposDeTickets" using primary key columns */
    atendimentos_TiposDeTickets_by_pk?: GraphQLTypes['atendimentos_TiposDeTickets'];
    /** fetch data from the table: "comercial.Acoes" */
    comercial_Acoes: Array<GraphQLTypes['comercial_Acoes']>;
    /** fetch aggregated fields from the table: "comercial.Acoes" */
    comercial_Acoes_aggregate: GraphQLTypes['comercial_Acoes_aggregate'];
    /** fetch data from the table: "comercial.Acoes" using primary key columns */
    comercial_Acoes_by_pk?: GraphQLTypes['comercial_Acoes'];
    /** fetch data from the table: "comercial.Coberturas" */
    comercial_Coberturas: Array<GraphQLTypes['comercial_Coberturas']>;
    /** fetch aggregated fields from the table: "comercial.Coberturas" */
    comercial_Coberturas_aggregate: GraphQLTypes['comercial_Coberturas_aggregate'];
    /** fetch data from the table: "comercial.Coberturas" using primary key columns */
    comercial_Coberturas_by_pk?: GraphQLTypes['comercial_Coberturas'];
    /** fetch data from the table: "contatos.Emails" */
    contatos_Emails: Array<GraphQLTypes['contatos_Emails']>;
    /** fetch aggregated fields from the table: "contatos.Emails" */
    contatos_Emails_aggregate: GraphQLTypes['contatos_Emails_aggregate'];
    /** fetch data from the table: "contatos.Emails" using primary key columns */
    contatos_Emails_by_pk?: GraphQLTypes['contatos_Emails'];
    /** fetch data from the table: "contatos.Enderecos" */
    contatos_Enderecos: Array<GraphQLTypes['contatos_Enderecos']>;
    /** fetch aggregated fields from the table: "contatos.Enderecos" */
    contatos_Enderecos_aggregate: GraphQLTypes['contatos_Enderecos_aggregate'];
    /** fetch data from the table: "contatos.Enderecos" using primary key columns */
    contatos_Enderecos_by_pk?: GraphQLTypes['contatos_Enderecos'];
    /** fetch data from the table: "contatos.Logs" */
    contatos_Logs: Array<GraphQLTypes['contatos_Logs']>;
    /** fetch aggregated fields from the table: "contatos.Logs" */
    contatos_Logs_aggregate: GraphQLTypes['contatos_Logs_aggregate'];
    /** fetch data from the table: "contatos.Logs" using primary key columns */
    contatos_Logs_by_pk?: GraphQLTypes['contatos_Logs'];
    /** fetch data from the table: "contatos.Telefones" */
    contatos_Telefones: Array<GraphQLTypes['contatos_Telefones']>;
    /** fetch aggregated fields from the table: "contatos.Telefones" */
    contatos_Telefones_aggregate: GraphQLTypes['contatos_Telefones_aggregate'];
    /** fetch data from the table: "contatos.Telefones" using primary key columns */
    contatos_Telefones_by_pk?: GraphQLTypes['contatos_Telefones'];
    /** fetch data from the table: "vendas.GruposDePerguntas" */
    vendas_GruposDePerguntas: Array<GraphQLTypes['vendas_GruposDePerguntas']>;
    /** fetch data from the table: "vendas.GruposDePerguntas_Perguntas" */
    vendas_GruposDePerguntas_Perguntas: Array<
      GraphQLTypes['vendas_GruposDePerguntas_Perguntas']
    >;
    /** fetch aggregated fields from the table: "vendas.GruposDePerguntas_Perguntas" */
    vendas_GruposDePerguntas_Perguntas_aggregate: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_aggregate'];
    /** fetch data from the table: "vendas.GruposDePerguntas_Perguntas" using primary key columns */
    vendas_GruposDePerguntas_Perguntas_by_pk?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas'];
    /** fetch aggregated fields from the table: "vendas.GruposDePerguntas" */
    vendas_GruposDePerguntas_aggregate: GraphQLTypes['vendas_GruposDePerguntas_aggregate'];
    /** fetch data from the table: "vendas.GruposDePerguntas" using primary key columns */
    vendas_GruposDePerguntas_by_pk?: GraphQLTypes['vendas_GruposDePerguntas'];
    /** fetch data from the table: "vendas.Perguntas" */
    vendas_Perguntas: Array<GraphQLTypes['vendas_Perguntas']>;
    /** fetch aggregated fields from the table: "vendas.Perguntas" */
    vendas_Perguntas_aggregate: GraphQLTypes['vendas_Perguntas_aggregate'];
    /** fetch data from the table: "vendas.Perguntas" using primary key columns */
    vendas_Perguntas_by_pk?: GraphQLTypes['vendas_Perguntas'];
    /** fetch data from the table: "vendas.TiposDePagamento" */
    vendas_TiposDePagamento: Array<GraphQLTypes['vendas_TiposDePagamento']>;
    /** fetch aggregated fields from the table: "vendas.TiposDePagamento" */
    vendas_TiposDePagamento_aggregate: GraphQLTypes['vendas_TiposDePagamento_aggregate'];
    /** fetch data from the table: "vendas.TiposDePagamento" using primary key columns */
    vendas_TiposDePagamento_by_pk?: GraphQLTypes['vendas_TiposDePagamento'];
  };
  ['timestamptz']: any;
  /** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
  ['timestamptz_comparison_exp']: {
    _eq?: GraphQLTypes['timestamptz'];
    _gt?: GraphQLTypes['timestamptz'];
    _gte?: GraphQLTypes['timestamptz'];
    _in?: Array<GraphQLTypes['timestamptz']>;
    _is_null?: boolean;
    _lt?: GraphQLTypes['timestamptz'];
    _lte?: GraphQLTypes['timestamptz'];
    _neq?: GraphQLTypes['timestamptz'];
    _nin?: Array<GraphQLTypes['timestamptz']>;
  };
  ['uuid']: any;
  /** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
  ['uuid_comparison_exp']: {
    _eq?: GraphQLTypes['uuid'];
    _gt?: GraphQLTypes['uuid'];
    _gte?: GraphQLTypes['uuid'];
    _in?: Array<GraphQLTypes['uuid']>;
    _is_null?: boolean;
    _lt?: GraphQLTypes['uuid'];
    _lte?: GraphQLTypes['uuid'];
    _neq?: GraphQLTypes['uuid'];
    _nin?: Array<GraphQLTypes['uuid']>;
  };
  /** columns and relationships of "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas']: {
    __typename: 'vendas_GruposDePerguntas';
    Id: GraphQLTypes['uuid'];
    Nome: string;
    /** An array relationship */
    Perguntas: Array<GraphQLTypes['vendas_GruposDePerguntas_Perguntas']>;
    /** An aggregate relationship */
    Perguntas_aggregate: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_aggregate'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** columns and relationships of "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas']: {
    __typename: 'vendas_GruposDePerguntas_Perguntas';
    /** An object relationship */
    Grupo: GraphQLTypes['vendas_GruposDePerguntas'];
    Grupo_Id: GraphQLTypes['uuid'];
    Id: GraphQLTypes['uuid'];
    /** An object relationship */
    Pergunta: GraphQLTypes['vendas_Perguntas'];
    Pergunta_Id: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_aggregate']: {
    __typename: 'vendas_GruposDePerguntas_Perguntas_aggregate';
    aggregate?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_aggregate_fields'];
    nodes: Array<GraphQLTypes['vendas_GruposDePerguntas_Perguntas']>;
  };
  /** aggregate fields of "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_aggregate_fields']: {
    __typename: 'vendas_GruposDePerguntas_Perguntas_aggregate_fields';
    count: number;
    max?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_max_fields'];
    min?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_min_fields'];
  };
  /** order by aggregate values of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'];
    max?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_max_order_by'];
    min?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_min_order_by'];
  };
  /** input type for inserting array relation for remote table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_arr_rel_insert_input']: {
    data: Array<
      GraphQLTypes['vendas_GruposDePerguntas_Perguntas_insert_input']
    >;
    /** on conflict condition */
    on_conflict?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_on_conflict'];
  };
  /** Boolean expression to filter rows from the table "vendas.GruposDePerguntas_Perguntas". All fields are combined with a logical 'AND'. */
  ['vendas_GruposDePerguntas_Perguntas_bool_exp']: {
    Grupo?: GraphQLTypes['vendas_GruposDePerguntas_bool_exp'];
    Grupo_Id?: GraphQLTypes['uuid_comparison_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Pergunta?: GraphQLTypes['vendas_Perguntas_bool_exp'];
    Pergunta_Id?: GraphQLTypes['uuid_comparison_exp'];
    _and?: Array<GraphQLTypes['vendas_GruposDePerguntas_Perguntas_bool_exp']>;
    _not?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'];
    _or?: Array<GraphQLTypes['vendas_GruposDePerguntas_Perguntas_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_constraint']: vendas_GruposDePerguntas_Perguntas_constraint;
  /** input type for inserting data into table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_insert_input']: {
    Grupo?: GraphQLTypes['vendas_GruposDePerguntas_obj_rel_insert_input'];
    Grupo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Pergunta?: GraphQLTypes['vendas_Perguntas_obj_rel_insert_input'];
    Pergunta_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['vendas_GruposDePerguntas_Perguntas_max_fields']: {
    __typename: 'vendas_GruposDePerguntas_Perguntas_max_fields';
    Grupo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Pergunta_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by max() on columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_max_order_by']: {
    Grupo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Pergunta_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** aggregate min on columns */
  ['vendas_GruposDePerguntas_Perguntas_min_fields']: {
    __typename: 'vendas_GruposDePerguntas_Perguntas_min_fields';
    Grupo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Pergunta_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** order by min() on columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_min_order_by']: {
    Grupo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Pergunta_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** response of any mutation on the table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_mutation_response']: {
    __typename: 'vendas_GruposDePerguntas_Perguntas_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['vendas_GruposDePerguntas_Perguntas']>;
  };
  /** on conflict condition type for table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_on_conflict']: {
    constraint: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_constraint'];
    update_columns: Array<
      GraphQLTypes['vendas_GruposDePerguntas_Perguntas_update_column']
    >;
    where?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'];
  };
  /** Ordering options when selecting data from "vendas.GruposDePerguntas_Perguntas". */
  ['vendas_GruposDePerguntas_Perguntas_order_by']: {
    Grupo?: GraphQLTypes['vendas_GruposDePerguntas_order_by'];
    Grupo_Id?: GraphQLTypes['order_by'];
    Id?: GraphQLTypes['order_by'];
    Pergunta?: GraphQLTypes['vendas_Perguntas_order_by'];
    Pergunta_Id?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: vendas_GruposDePerguntas_Perguntas */
  ['vendas_GruposDePerguntas_Perguntas_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_select_column']: vendas_GruposDePerguntas_Perguntas_select_column;
  /** input type for updating data in table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_set_input']: {
    Grupo_Id?: GraphQLTypes['uuid'];
    Id?: GraphQLTypes['uuid'];
    Pergunta_Id?: GraphQLTypes['uuid'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "vendas.GruposDePerguntas_Perguntas" */
  ['vendas_GruposDePerguntas_Perguntas_update_column']: vendas_GruposDePerguntas_Perguntas_update_column;
  /** aggregated selection of "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_aggregate']: {
    __typename: 'vendas_GruposDePerguntas_aggregate';
    aggregate?: GraphQLTypes['vendas_GruposDePerguntas_aggregate_fields'];
    nodes: Array<GraphQLTypes['vendas_GruposDePerguntas']>;
  };
  /** aggregate fields of "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_aggregate_fields']: {
    __typename: 'vendas_GruposDePerguntas_aggregate_fields';
    count: number;
    max?: GraphQLTypes['vendas_GruposDePerguntas_max_fields'];
    min?: GraphQLTypes['vendas_GruposDePerguntas_min_fields'];
  };
  /** Boolean expression to filter rows from the table "vendas.GruposDePerguntas". All fields are combined with a logical 'AND'. */
  ['vendas_GruposDePerguntas_bool_exp']: {
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Nome?: GraphQLTypes['String_comparison_exp'];
    Perguntas?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'];
    _and?: Array<GraphQLTypes['vendas_GruposDePerguntas_bool_exp']>;
    _not?: GraphQLTypes['vendas_GruposDePerguntas_bool_exp'];
    _or?: Array<GraphQLTypes['vendas_GruposDePerguntas_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_constraint']: vendas_GruposDePerguntas_constraint;
  /** input type for inserting data into table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_insert_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    Perguntas?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_arr_rel_insert_input'];
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['vendas_GruposDePerguntas_max_fields']: {
    __typename: 'vendas_GruposDePerguntas_max_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['vendas_GruposDePerguntas_min_fields']: {
    __typename: 'vendas_GruposDePerguntas_min_fields';
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_mutation_response']: {
    __typename: 'vendas_GruposDePerguntas_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['vendas_GruposDePerguntas']>;
  };
  /** input type for inserting object relation for remote table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_obj_rel_insert_input']: {
    data: GraphQLTypes['vendas_GruposDePerguntas_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['vendas_GruposDePerguntas_on_conflict'];
  };
  /** on conflict condition type for table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_on_conflict']: {
    constraint: GraphQLTypes['vendas_GruposDePerguntas_constraint'];
    update_columns: Array<
      GraphQLTypes['vendas_GruposDePerguntas_update_column']
    >;
    where?: GraphQLTypes['vendas_GruposDePerguntas_bool_exp'];
  };
  /** Ordering options when selecting data from "vendas.GruposDePerguntas". */
  ['vendas_GruposDePerguntas_order_by']: {
    Id?: GraphQLTypes['order_by'];
    Nome?: GraphQLTypes['order_by'];
    Perguntas_aggregate?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_aggregate_order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: vendas_GruposDePerguntas */
  ['vendas_GruposDePerguntas_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_select_column']: vendas_GruposDePerguntas_select_column;
  /** input type for updating data in table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_set_input']: {
    Id?: GraphQLTypes['uuid'];
    Nome?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "vendas.GruposDePerguntas" */
  ['vendas_GruposDePerguntas_update_column']: vendas_GruposDePerguntas_update_column;
  /** columns and relationships of "vendas.Perguntas" */
  ['vendas_Perguntas']: {
    __typename: 'vendas_Perguntas';
    Descricao: string;
    /** An array relationship */
    Grupos: Array<GraphQLTypes['vendas_GruposDePerguntas_Perguntas']>;
    /** An aggregate relationship */
    Grupos_aggregate: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_aggregate'];
    Id: GraphQLTypes['uuid'];
    Titulo: string;
    created_at: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at: GraphQLTypes['timestamptz'];
  };
  /** aggregated selection of "vendas.Perguntas" */
  ['vendas_Perguntas_aggregate']: {
    __typename: 'vendas_Perguntas_aggregate';
    aggregate?: GraphQLTypes['vendas_Perguntas_aggregate_fields'];
    nodes: Array<GraphQLTypes['vendas_Perguntas']>;
  };
  /** aggregate fields of "vendas.Perguntas" */
  ['vendas_Perguntas_aggregate_fields']: {
    __typename: 'vendas_Perguntas_aggregate_fields';
    count: number;
    max?: GraphQLTypes['vendas_Perguntas_max_fields'];
    min?: GraphQLTypes['vendas_Perguntas_min_fields'];
  };
  /** Boolean expression to filter rows from the table "vendas.Perguntas". All fields are combined with a logical 'AND'. */
  ['vendas_Perguntas_bool_exp']: {
    Descricao?: GraphQLTypes['String_comparison_exp'];
    Grupos?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_bool_exp'];
    Id?: GraphQLTypes['uuid_comparison_exp'];
    Titulo?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['vendas_Perguntas_bool_exp']>;
    _not?: GraphQLTypes['vendas_Perguntas_bool_exp'];
    _or?: Array<GraphQLTypes['vendas_Perguntas_bool_exp']>;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'];
    deleted_at?: GraphQLTypes['timestamptz_comparison_exp'];
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'];
  };
  /** unique or primary key constraints on table "vendas.Perguntas" */
  ['vendas_Perguntas_constraint']: vendas_Perguntas_constraint;
  /** input type for inserting data into table "vendas.Perguntas" */
  ['vendas_Perguntas_insert_input']: {
    Descricao?: string;
    Grupos?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_arr_rel_insert_input'];
    Id?: GraphQLTypes['uuid'];
    Titulo?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate max on columns */
  ['vendas_Perguntas_max_fields']: {
    __typename: 'vendas_Perguntas_max_fields';
    Descricao?: string;
    Id?: GraphQLTypes['uuid'];
    Titulo?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** aggregate min on columns */
  ['vendas_Perguntas_min_fields']: {
    __typename: 'vendas_Perguntas_min_fields';
    Descricao?: string;
    Id?: GraphQLTypes['uuid'];
    Titulo?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** response of any mutation on the table "vendas.Perguntas" */
  ['vendas_Perguntas_mutation_response']: {
    __typename: 'vendas_Perguntas_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['vendas_Perguntas']>;
  };
  /** input type for inserting object relation for remote table "vendas.Perguntas" */
  ['vendas_Perguntas_obj_rel_insert_input']: {
    data: GraphQLTypes['vendas_Perguntas_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['vendas_Perguntas_on_conflict'];
  };
  /** on conflict condition type for table "vendas.Perguntas" */
  ['vendas_Perguntas_on_conflict']: {
    constraint: GraphQLTypes['vendas_Perguntas_constraint'];
    update_columns: Array<GraphQLTypes['vendas_Perguntas_update_column']>;
    where?: GraphQLTypes['vendas_Perguntas_bool_exp'];
  };
  /** Ordering options when selecting data from "vendas.Perguntas". */
  ['vendas_Perguntas_order_by']: {
    Descricao?: GraphQLTypes['order_by'];
    Grupos_aggregate?: GraphQLTypes['vendas_GruposDePerguntas_Perguntas_aggregate_order_by'];
    Id?: GraphQLTypes['order_by'];
    Titulo?: GraphQLTypes['order_by'];
    created_at?: GraphQLTypes['order_by'];
    deleted_at?: GraphQLTypes['order_by'];
    updated_at?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: vendas_Perguntas */
  ['vendas_Perguntas_pk_columns_input']: {
    Id: GraphQLTypes['uuid'];
  };
  /** select columns of table "vendas.Perguntas" */
  ['vendas_Perguntas_select_column']: vendas_Perguntas_select_column;
  /** input type for updating data in table "vendas.Perguntas" */
  ['vendas_Perguntas_set_input']: {
    Descricao?: string;
    Id?: GraphQLTypes['uuid'];
    Titulo?: string;
    created_at?: GraphQLTypes['timestamptz'];
    deleted_at?: GraphQLTypes['timestamptz'];
    updated_at?: GraphQLTypes['timestamptz'];
  };
  /** update columns of table "vendas.Perguntas" */
  ['vendas_Perguntas_update_column']: vendas_Perguntas_update_column;
  /** columns and relationships of "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento']: {
    __typename: 'vendas_TiposDePagamento';
    Comentario: string;
    Valor: string;
  };
  /** aggregated selection of "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_aggregate']: {
    __typename: 'vendas_TiposDePagamento_aggregate';
    aggregate?: GraphQLTypes['vendas_TiposDePagamento_aggregate_fields'];
    nodes: Array<GraphQLTypes['vendas_TiposDePagamento']>;
  };
  /** aggregate fields of "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_aggregate_fields']: {
    __typename: 'vendas_TiposDePagamento_aggregate_fields';
    count: number;
    max?: GraphQLTypes['vendas_TiposDePagamento_max_fields'];
    min?: GraphQLTypes['vendas_TiposDePagamento_min_fields'];
  };
  /** Boolean expression to filter rows from the table "vendas.TiposDePagamento". All fields are combined with a logical 'AND'. */
  ['vendas_TiposDePagamento_bool_exp']: {
    Comentario?: GraphQLTypes['String_comparison_exp'];
    Valor?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['vendas_TiposDePagamento_bool_exp']>;
    _not?: GraphQLTypes['vendas_TiposDePagamento_bool_exp'];
    _or?: Array<GraphQLTypes['vendas_TiposDePagamento_bool_exp']>;
  };
  /** unique or primary key constraints on table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_constraint']: vendas_TiposDePagamento_constraint;
  /** input type for inserting data into table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_insert_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate max on columns */
  ['vendas_TiposDePagamento_max_fields']: {
    __typename: 'vendas_TiposDePagamento_max_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['vendas_TiposDePagamento_min_fields']: {
    __typename: 'vendas_TiposDePagamento_min_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_mutation_response']: {
    __typename: 'vendas_TiposDePagamento_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['vendas_TiposDePagamento']>;
  };
  /** on conflict condition type for table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_on_conflict']: {
    constraint: GraphQLTypes['vendas_TiposDePagamento_constraint'];
    update_columns: Array<
      GraphQLTypes['vendas_TiposDePagamento_update_column']
    >;
    where?: GraphQLTypes['vendas_TiposDePagamento_bool_exp'];
  };
  /** Ordering options when selecting data from "vendas.TiposDePagamento". */
  ['vendas_TiposDePagamento_order_by']: {
    Comentario?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: vendas_TiposDePagamento */
  ['vendas_TiposDePagamento_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_select_column']: vendas_TiposDePagamento_select_column;
  /** input type for updating data in table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_set_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** update columns of table "vendas.TiposDePagamento" */
  ['vendas_TiposDePagamento_update_column']: vendas_TiposDePagamento_update_column;
  /** columns and relationships of "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos']: {
    __typename: 'vendas_TiposDePrecos';
    Comentario: string;
    /** An array relationship */
    PrestadoresDeServicos_Produtos_Precos: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos']
    >;
    /** An aggregate relationship */
    PrestadoresDeServicos_Produtos_Precos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate'];
    /** An array relationship */
    PrestadoresDeServicos_Servicos_Precos: Array<
      GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos']
    >;
    /** An aggregate relationship */
    PrestadoresDeServicos_Servicos_Precos_aggregate: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate'];
    Valor: string;
  };
  /** aggregated selection of "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_aggregate']: {
    __typename: 'vendas_TiposDePrecos_aggregate';
    aggregate?: GraphQLTypes['vendas_TiposDePrecos_aggregate_fields'];
    nodes: Array<GraphQLTypes['vendas_TiposDePrecos']>;
  };
  /** aggregate fields of "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_aggregate_fields']: {
    __typename: 'vendas_TiposDePrecos_aggregate_fields';
    count: number;
    max?: GraphQLTypes['vendas_TiposDePrecos_max_fields'];
    min?: GraphQLTypes['vendas_TiposDePrecos_min_fields'];
  };
  /** Boolean expression to filter rows from the table "vendas.TiposDePrecos". All fields are combined with a logical 'AND'. */
  ['vendas_TiposDePrecos_bool_exp']: {
    Comentario?: GraphQLTypes['String_comparison_exp'];
    PrestadoresDeServicos_Produtos_Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_bool_exp'];
    PrestadoresDeServicos_Servicos_Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_bool_exp'];
    Valor?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['vendas_TiposDePrecos_bool_exp']>;
    _not?: GraphQLTypes['vendas_TiposDePrecos_bool_exp'];
    _or?: Array<GraphQLTypes['vendas_TiposDePrecos_bool_exp']>;
  };
  /** unique or primary key constraints on table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_constraint']: vendas_TiposDePrecos_constraint;
  ['vendas_TiposDePrecos_enum']: vendas_TiposDePrecos_enum;
  /** Boolean expression to compare columns of type "vendas_TiposDePrecos_enum". All fields are combined with logical 'AND'. */
  ['vendas_TiposDePrecos_enum_comparison_exp']: {
    _eq?: GraphQLTypes['vendas_TiposDePrecos_enum'];
    _in?: Array<GraphQLTypes['vendas_TiposDePrecos_enum']>;
    _is_null?: boolean;
    _neq?: GraphQLTypes['vendas_TiposDePrecos_enum'];
    _nin?: Array<GraphQLTypes['vendas_TiposDePrecos_enum']>;
  };
  /** input type for inserting data into table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_insert_input']: {
    Comentario?: string;
    PrestadoresDeServicos_Produtos_Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_arr_rel_insert_input'];
    PrestadoresDeServicos_Servicos_Precos?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_arr_rel_insert_input'];
    Valor?: string;
  };
  /** aggregate max on columns */
  ['vendas_TiposDePrecos_max_fields']: {
    __typename: 'vendas_TiposDePrecos_max_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['vendas_TiposDePrecos_min_fields']: {
    __typename: 'vendas_TiposDePrecos_min_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_mutation_response']: {
    __typename: 'vendas_TiposDePrecos_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['vendas_TiposDePrecos']>;
  };
  /** input type for inserting object relation for remote table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_obj_rel_insert_input']: {
    data: GraphQLTypes['vendas_TiposDePrecos_insert_input'];
    /** on conflict condition */
    on_conflict?: GraphQLTypes['vendas_TiposDePrecos_on_conflict'];
  };
  /** on conflict condition type for table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_on_conflict']: {
    constraint: GraphQLTypes['vendas_TiposDePrecos_constraint'];
    update_columns: Array<GraphQLTypes['vendas_TiposDePrecos_update_column']>;
    where?: GraphQLTypes['vendas_TiposDePrecos_bool_exp'];
  };
  /** Ordering options when selecting data from "vendas.TiposDePrecos". */
  ['vendas_TiposDePrecos_order_by']: {
    Comentario?: GraphQLTypes['order_by'];
    PrestadoresDeServicos_Produtos_Precos_aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Produtos_Precos_aggregate_order_by'];
    PrestadoresDeServicos_Servicos_Precos_aggregate?: GraphQLTypes['comercial_PrestadoresDeServicos_Servicos_Precos_aggregate_order_by'];
    Valor?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: vendas_TiposDePrecos */
  ['vendas_TiposDePrecos_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_select_column']: vendas_TiposDePrecos_select_column;
  /** input type for updating data in table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_set_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** update columns of table "vendas.TiposDePrecos" */
  ['vendas_TiposDePrecos_update_column']: vendas_TiposDePrecos_update_column;
  /** columns and relationships of "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia']: {
    __typename: 'vendas_TiposDeRecorrencia';
    Comentario: string;
    Valor: string;
  };
  /** aggregated selection of "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_aggregate']: {
    __typename: 'vendas_TiposDeRecorrencia_aggregate';
    aggregate?: GraphQLTypes['vendas_TiposDeRecorrencia_aggregate_fields'];
    nodes: Array<GraphQLTypes['vendas_TiposDeRecorrencia']>;
  };
  /** aggregate fields of "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_aggregate_fields']: {
    __typename: 'vendas_TiposDeRecorrencia_aggregate_fields';
    count: number;
    max?: GraphQLTypes['vendas_TiposDeRecorrencia_max_fields'];
    min?: GraphQLTypes['vendas_TiposDeRecorrencia_min_fields'];
  };
  /** Boolean expression to filter rows from the table "vendas.TiposDeRecorrencia". All fields are combined with a logical 'AND'. */
  ['vendas_TiposDeRecorrencia_bool_exp']: {
    Comentario?: GraphQLTypes['String_comparison_exp'];
    Valor?: GraphQLTypes['String_comparison_exp'];
    _and?: Array<GraphQLTypes['vendas_TiposDeRecorrencia_bool_exp']>;
    _not?: GraphQLTypes['vendas_TiposDeRecorrencia_bool_exp'];
    _or?: Array<GraphQLTypes['vendas_TiposDeRecorrencia_bool_exp']>;
  };
  /** unique or primary key constraints on table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_constraint']: vendas_TiposDeRecorrencia_constraint;
  /** input type for inserting data into table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_insert_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate max on columns */
  ['vendas_TiposDeRecorrencia_max_fields']: {
    __typename: 'vendas_TiposDeRecorrencia_max_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** aggregate min on columns */
  ['vendas_TiposDeRecorrencia_min_fields']: {
    __typename: 'vendas_TiposDeRecorrencia_min_fields';
    Comentario?: string;
    Valor?: string;
  };
  /** response of any mutation on the table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_mutation_response']: {
    __typename: 'vendas_TiposDeRecorrencia_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['vendas_TiposDeRecorrencia']>;
  };
  /** on conflict condition type for table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_on_conflict']: {
    constraint: GraphQLTypes['vendas_TiposDeRecorrencia_constraint'];
    update_columns: Array<
      GraphQLTypes['vendas_TiposDeRecorrencia_update_column']
    >;
    where?: GraphQLTypes['vendas_TiposDeRecorrencia_bool_exp'];
  };
  /** Ordering options when selecting data from "vendas.TiposDeRecorrencia". */
  ['vendas_TiposDeRecorrencia_order_by']: {
    Comentario?: GraphQLTypes['order_by'];
    Valor?: GraphQLTypes['order_by'];
  };
  /** primary key columns input for table: vendas_TiposDeRecorrencia */
  ['vendas_TiposDeRecorrencia_pk_columns_input']: {
    Valor: string;
  };
  /** select columns of table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_select_column']: vendas_TiposDeRecorrencia_select_column;
  /** input type for updating data in table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_set_input']: {
    Comentario?: string;
    Valor?: string;
  };
  /** update columns of table "vendas.TiposDeRecorrencia" */
  ['vendas_TiposDeRecorrencia_update_column']: vendas_TiposDeRecorrencia_update_column;
};
/** unique or primary key constraints on table "CategoriasDeVeiculos" */
export const enum CategoriasDeVeiculos_constraint {
  CategoriasDeVeiculos_pkey = 'CategoriasDeVeiculos_pkey',
}
/** select columns of table "CategoriasDeVeiculos" */
export const enum CategoriasDeVeiculos_select_column {
  Id = 'Id',
  Nome = 'Nome',
}
/** update columns of table "CategoriasDeVeiculos" */
export const enum CategoriasDeVeiculos_update_column {
  Id = 'Id',
  Nome = 'Nome',
}
/** unique or primary key constraints on table "EstadosEMunicipios" */
export const enum EstadosEMunicipios_constraint {
  EstadosEMunicipios_Id_key = 'EstadosEMunicipios_Id_key',
  EstadosEMunicipios_pkey = 'EstadosEMunicipios_pkey',
}
/** select columns of table "EstadosEMunicipios" */
export const enum EstadosEMunicipios_select_column {
  CodigoIbge = 'CodigoIbge',
  Id = 'Id',
  Nome = 'Nome',
  Pai_Id = 'Pai_Id',
  Sigla = 'Sigla',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "EstadosEMunicipios" */
export const enum EstadosEMunicipios_update_column {
  CodigoIbge = 'CodigoIbge',
  Id = 'Id',
  Nome = 'Nome',
  Pai_Id = 'Pai_Id',
  Sigla = 'Sigla',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "atendimentos.EtapasDosFluxos" */
export const enum atendimentos_EtapasDosFluxos_constraint {
  EtapasDosFluxos_pkey = 'EtapasDosFluxos_pkey',
}
/** select columns of table "atendimentos.EtapasDosFluxos" */
export const enum atendimentos_EtapasDosFluxos_select_column {
  Fluxo_Id = 'Fluxo_Id',
  Id = 'Id',
  Nome = 'Nome',
  Posicao = 'Posicao',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "atendimentos.EtapasDosFluxos" */
export const enum atendimentos_EtapasDosFluxos_update_column {
  Fluxo_Id = 'Fluxo_Id',
  Id = 'Id',
  Nome = 'Nome',
  Posicao = 'Posicao',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "atendimentos.Fluxos" */
export const enum atendimentos_Fluxos_constraint {
  Fluxos_pkey = 'Fluxos_pkey',
}
/** select columns of table "atendimentos.Fluxos" */
export const enum atendimentos_Fluxos_select_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "atendimentos.Fluxos" */
export const enum atendimentos_Fluxos_update_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "atendimentos.Tickets" */
export const enum atendimentos_Tickets_constraint {
  Tickets_CodigoReferencia_key = 'Tickets_CodigoReferencia_key',
  Tickets_pkey = 'Tickets_pkey',
}
/** select columns of table "atendimentos.Tickets" */
export const enum atendimentos_Tickets_select_column {
  Cliente_Id = 'Cliente_Id',
  CodigoReferencia = 'CodigoReferencia',
  Etapa_Id = 'Etapa_Id',
  Fluxo_Id = 'Fluxo_Id',
  Id = 'Id',
  Lead_Id = 'Lead_Id',
  Tipo_Id = 'Tipo_Id',
  Usuario_Id = 'Usuario_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "atendimentos.Tickets" */
export const enum atendimentos_Tickets_update_column {
  Cliente_Id = 'Cliente_Id',
  CodigoReferencia = 'CodigoReferencia',
  Etapa_Id = 'Etapa_Id',
  Fluxo_Id = 'Fluxo_Id',
  Id = 'Id',
  Lead_Id = 'Lead_Id',
  Tipo_Id = 'Tipo_Id',
  Usuario_Id = 'Usuario_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "atendimentos.TiposDeTickets" */
export const enum atendimentos_TiposDeTickets_constraint {
  TiposDeTickets_pkey = 'TiposDeTickets_pkey',
}
export const enum atendimentos_TiposDeTickets_enum {
  comercial = 'comercial',
}
/** select columns of table "atendimentos.TiposDeTickets" */
export const enum atendimentos_TiposDeTickets_select_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** update columns of table "atendimentos.TiposDeTickets" */
export const enum atendimentos_TiposDeTickets_update_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** unique or primary key constraints on table "autenticacao.Atendentes" */
export const enum autenticacao_Atendentes_constraint {
  Atendentes_Usuario_Id_key = 'Atendentes_Usuario_Id_key',
  Atendentes_pkey = 'Atendentes_pkey',
}
/** select columns of table "autenticacao.Atendentes" */
export const enum autenticacao_Atendentes_select_column {
  Id = 'Id',
  Usuario_Id = 'Usuario_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "autenticacao.Atendentes" */
export const enum autenticacao_Atendentes_update_column {
  Id = 'Id',
  Usuario_Id = 'Usuario_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "autenticacao.Usuarios" */
export const enum autenticacao_Usuarios_constraint {
  Usuarios_Email_key = 'Usuarios_Email_key',
  Usuarios_Id_key = 'Usuarios_Id_key',
  usuarios_pkey = 'usuarios_pkey',
}
/** select columns of table "autenticacao.Usuarios" */
export const enum autenticacao_Usuarios_select_column {
  Cliente_Id = 'Cliente_Id',
  Colaborador_Id = 'Colaborador_Id',
  Email = 'Email',
  Id = 'Id',
  Senha = 'Senha',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "autenticacao.Usuarios" */
export const enum autenticacao_Usuarios_update_column {
  Cliente_Id = 'Cliente_Id',
  Colaborador_Id = 'Colaborador_Id',
  Email = 'Email',
  Id = 'Id',
  Senha = 'Senha',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "clientes.Leads" */
export const enum clientes_Leads_constraint {
  Leads_pkey = 'Leads_pkey',
}
/** select columns of table "clientes.Leads" */
export const enum clientes_Leads_select_column {
  Cliente_Id = 'Cliente_Id',
  Email = 'Email',
  Id = 'Id',
  Nome = 'Nome',
  Telefone = 'Telefone',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "clientes.Leads" */
export const enum clientes_Leads_update_column {
  Cliente_Id = 'Cliente_Id',
  Email = 'Email',
  Id = 'Id',
  Nome = 'Nome',
  Telefone = 'Telefone',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "clientes.PerfisComerciais" */
export const enum clientes_PerfisComerciais_constraint {
  PerfisComerciais_Id_key = 'PerfisComerciais_Id_key',
  PerfisComerciais_pkey = 'PerfisComerciais_pkey',
}
/** select columns of table "clientes.PerfisComerciais" */
export const enum clientes_PerfisComerciais_select_column {
  Grupo_Id = 'Grupo_Id',
  Id = 'Id',
  Lead_Id = 'Lead_Id',
  Pergunta_Id = 'Pergunta_Id',
  Resposta = 'Resposta',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "clientes.PerfisComerciais" */
export const enum clientes_PerfisComerciais_update_column {
  Grupo_Id = 'Grupo_Id',
  Id = 'Id',
  Lead_Id = 'Lead_Id',
  Pergunta_Id = 'Pergunta_Id',
  Resposta = 'Resposta',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "clientes.VeiculosAtivos_Beneficios" */
export const enum clientes_VeiculosAtivos_Beneficios_constraint {
  VeiculosAtivos_Beneficios_pkey = 'VeiculosAtivos_Beneficios_pkey',
}
/** select columns of table "clientes.VeiculosAtivos_Beneficios" */
export const enum clientes_VeiculosAtivos_Beneficios_select_column {
  Ativo = 'Ativo',
  Id = 'Id',
  PortfolioPreco_Id = 'PortfolioPreco_Id',
  Portfolio_Id = 'Portfolio_Id',
  TipoPortfolio = 'TipoPortfolio',
  VeiculoAtivo_Id = 'VeiculoAtivo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "clientes.VeiculosAtivos_Beneficios" */
export const enum clientes_VeiculosAtivos_Beneficios_update_column {
  Ativo = 'Ativo',
  Id = 'Id',
  PortfolioPreco_Id = 'PortfolioPreco_Id',
  Portfolio_Id = 'Portfolio_Id',
  TipoPortfolio = 'TipoPortfolio',
  VeiculoAtivo_Id = 'VeiculoAtivo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "clientes.VeiculosAtivos_Produtos" */
export const enum clientes_VeiculosAtivos_Produtos_constraint {
  VeiculosAtivos_Produtos_pkey = 'VeiculosAtivos_Produtos_pkey',
}
/** select columns of table "clientes.VeiculosAtivos_Produtos" */
export const enum clientes_VeiculosAtivos_Produtos_select_column {
  Ativo = 'Ativo',
  Id = 'Id',
  ProdutoPreco_Id = 'ProdutoPreco_Id',
  Produto_Id = 'Produto_Id',
  VeiculoAtivo_Id = 'VeiculoAtivo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "clientes.VeiculosAtivos_Produtos" */
export const enum clientes_VeiculosAtivos_Produtos_update_column {
  Ativo = 'Ativo',
  Id = 'Id',
  ProdutoPreco_Id = 'ProdutoPreco_Id',
  Produto_Id = 'Produto_Id',
  VeiculoAtivo_Id = 'VeiculoAtivo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "clientes.VeiculosAtivos_Servicos" */
export const enum clientes_VeiculosAtivos_Servicos_constraint {
  VeiculosAtivos_Servicos_pkey = 'VeiculosAtivos_Servicos_pkey',
}
/** select columns of table "clientes.VeiculosAtivos_Servicos" */
export const enum clientes_VeiculosAtivos_Servicos_select_column {
  Ativo = 'Ativo',
  Id = 'Id',
  ServicoPreco_Id = 'ServicoPreco_Id',
  Servico_Id = 'Servico_Id',
  VeiculoAtivo_Id = 'VeiculoAtivo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "clientes.VeiculosAtivos_Servicos" */
export const enum clientes_VeiculosAtivos_Servicos_update_column {
  Ativo = 'Ativo',
  Id = 'Id',
  ServicoPreco_Id = 'ServicoPreco_Id',
  Servico_Id = 'Servico_Id',
  VeiculoAtivo_Id = 'VeiculoAtivo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "clientes.VeiculosAtivos_Situacao" */
export const enum clientes_VeiculosAtivos_Situacao_constraint {
  VeiculosAtivos_Situacao_pkey = 'VeiculosAtivos_Situacao_pkey',
}
export const enum clientes_VeiculosAtivos_Situacao_enum {
  ativo = 'ativo',
  inativo = 'inativo',
}
/** select columns of table "clientes.VeiculosAtivos_Situacao" */
export const enum clientes_VeiculosAtivos_Situacao_select_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** update columns of table "clientes.VeiculosAtivos_Situacao" */
export const enum clientes_VeiculosAtivos_Situacao_update_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** unique or primary key constraints on table "clientes.VeiculosAtivos" */
export const enum clientes_VeiculosAtivos_constraint {
  VeiculosAtivos_pkey = 'VeiculosAtivos_pkey',
}
/** select columns of table "clientes.VeiculosAtivos" */
export const enum clientes_VeiculosAtivos_select_column {
  Cliente_Id = 'Cliente_Id',
  Franquia_Id = 'Franquia_Id',
  Id = 'Id',
  OS_Id = 'OS_Id',
  Situacao_Id = 'Situacao_Id',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "clientes.VeiculosAtivos" */
export const enum clientes_VeiculosAtivos_update_column {
  Cliente_Id = 'Cliente_Id',
  Franquia_Id = 'Franquia_Id',
  Id = 'Id',
  OS_Id = 'OS_Id',
  Situacao_Id = 'Situacao_Id',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "clientes.Veiculos" */
export const enum clientes_Veiculos_constraint {
  Veiculos_Id_key = 'Veiculos_Id_key',
  Veiculos_Placa_key = 'Veiculos_Placa_key',
  Veiculos_pkey = 'Veiculos_pkey',
}
/** select columns of table "clientes.Veiculos" */
export const enum clientes_Veiculos_select_column {
  Apelido = 'Apelido',
  Categoria_Id = 'Categoria_Id',
  Cliente_Id = 'Cliente_Id',
  DadosDaApi = 'DadosDaApi',
  Id = 'Id',
  NumeroDoChassi = 'NumeroDoChassi',
  Placa = 'Placa',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "clientes.Veiculos" */
export const enum clientes_Veiculos_update_column {
  Apelido = 'Apelido',
  Categoria_Id = 'Categoria_Id',
  Cliente_Id = 'Cliente_Id',
  DadosDaApi = 'DadosDaApi',
  Id = 'Id',
  NumeroDoChassi = 'NumeroDoChassi',
  Placa = 'Placa',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Acoes" */
export const enum comercial_Acoes_constraint {
  Acoes_pkey = 'Acoes_pkey',
}
/** select columns of table "comercial.Acoes" */
export const enum comercial_Acoes_select_column {
  Etapas_Id = 'Etapas_Id',
  Id = 'Id',
  Titulo = 'Titulo',
  Url = 'Url',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Acoes" */
export const enum comercial_Acoes_update_column {
  Etapas_Id = 'Etapas_Id',
  Id = 'Id',
  Titulo = 'Titulo',
  Url = 'Url',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Atributos" */
export const enum comercial_Atributos_constraint {
  Atributos_pkey = 'Atributos_pkey',
}
/** select columns of table "comercial.Atributos" */
export const enum comercial_Atributos_select_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Atributos" */
export const enum comercial_Atributos_update_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Coberturas" */
export const enum comercial_Coberturas_constraint {
  Coberturas_pkey = 'Coberturas_pkey',
}
/** select columns of table "comercial.Coberturas" */
export const enum comercial_Coberturas_select_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Coberturas" */
export const enum comercial_Coberturas_update_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Combos_Combos" */
export const enum comercial_Combos_Combos_constraint {
  Combos_Combos_pkey = 'Combos_Combos_pkey',
}
/** select columns of table "comercial.Combos_Combos" */
export const enum comercial_Combos_Combos_select_column {
  ComboPertencente_Id = 'ComboPertencente_Id',
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Combos_Combos" */
export const enum comercial_Combos_Combos_update_column {
  ComboPertencente_Id = 'ComboPertencente_Id',
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Combos_Planos" */
export const enum comercial_Combos_Planos_constraint {
  Combos_Planos_pkey = 'Combos_Planos_pkey',
}
/** select columns of table "comercial.Combos_Planos" */
export const enum comercial_Combos_Planos_select_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  PlanoPreco_Id = 'PlanoPreco_Id',
  Plano_Id = 'Plano_Id',
  ValorPraticado = 'ValorPraticado',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Combos_Planos" */
export const enum comercial_Combos_Planos_update_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  PlanoPreco_Id = 'PlanoPreco_Id',
  Plano_Id = 'Plano_Id',
  ValorPraticado = 'ValorPraticado',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Combos_Precos" */
export const enum comercial_Combos_Precos_constraint {
  Combos_Precos_pkey = 'Combos_Precos_pkey',
}
/** select columns of table "comercial.Combos_Precos" */
export const enum comercial_Combos_Precos_select_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  ValorBase = 'ValorBase',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Combos_Precos" */
export const enum comercial_Combos_Precos_update_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  ValorBase = 'ValorBase',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Combos_Produtos" */
export const enum comercial_Combos_Produtos_constraint {
  Combos_Produtos_pkey = 'Combos_Produtos_pkey',
}
/** select columns of table "comercial.Combos_Produtos" */
export const enum comercial_Combos_Produtos_select_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  ProdutoPreco_Id = 'ProdutoPreco_Id',
  Produto_Id = 'Produto_Id',
  ValorPraticado = 'ValorPraticado',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Combos_Produtos" */
export const enum comercial_Combos_Produtos_update_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  ProdutoPreco_Id = 'ProdutoPreco_Id',
  Produto_Id = 'Produto_Id',
  ValorPraticado = 'ValorPraticado',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Combos_Servicos" */
export const enum comercial_Combos_Servicos_constraint {
  Combos_Servicos_pkey = 'Combos_Servicos_pkey',
}
/** select columns of table "comercial.Combos_Servicos" */
export const enum comercial_Combos_Servicos_select_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  ServicoPreco_Id = 'ServicoPreco_Id',
  Servico_Id = 'Servico_Id',
  ValorPraticado = 'ValorPraticado',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Combos_Servicos" */
export const enum comercial_Combos_Servicos_update_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  ServicoPreco_Id = 'ServicoPreco_Id',
  Servico_Id = 'Servico_Id',
  ValorPraticado = 'ValorPraticado',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Combos" */
export const enum comercial_Combos_constraint {
  Combos_pkey = 'Combos_pkey',
}
/** select columns of table "comercial.Combos" */
export const enum comercial_Combos_select_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Combos" */
export const enum comercial_Combos_update_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.CondicionaisSituacoes" */
export const enum comercial_CondicionaisSituacoes_constraint {
  CondicionaisSituacoes_pkey = 'CondicionaisSituacoes_pkey',
}
export const enum comercial_CondicionaisSituacoes_enum {
  km = 'km',
  qtd = 'qtd',
}
/** select columns of table "comercial.CondicionaisSituacoes" */
export const enum comercial_CondicionaisSituacoes_select_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** update columns of table "comercial.CondicionaisSituacoes" */
export const enum comercial_CondicionaisSituacoes_update_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** unique or primary key constraints on table "comercial.Condicionais" */
export const enum comercial_Condicionais_constraint {
  Condicionais_pkey = 'Condicionais_pkey',
}
/** select columns of table "comercial.Condicionais" */
export const enum comercial_Condicionais_select_column {
  Id = 'Id',
  Nome = 'Nome',
  Situacao_Id = 'Situacao_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Condicionais" */
export const enum comercial_Condicionais_update_column {
  Id = 'Id',
  Nome = 'Nome',
  Situacao_Id = 'Situacao_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.ContratosBase_Versoes" */
export const enum comercial_ContratosBase_Versoes_constraint {
  ContratosBase_Versoes_pkey = 'ContratosBase_Versoes_pkey',
}
/** select columns of table "comercial.ContratosBase_Versoes" */
export const enum comercial_ContratosBase_Versoes_select_column {
  ContratoBase_Id = 'ContratoBase_Id',
  Id = 'Id',
  Versao = 'Versao',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.ContratosBase_Versoes" */
export const enum comercial_ContratosBase_Versoes_update_column {
  ContratoBase_Id = 'ContratoBase_Id',
  Id = 'Id',
  Versao = 'Versao',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.ContratosBase" */
export const enum comercial_ContratosBase_constraint {
  ContratosBase_pkey = 'ContratosBase_pkey',
}
/** select columns of table "comercial.ContratosBase" */
export const enum comercial_ContratosBase_select_column {
  CodigoReferencia = 'CodigoReferencia',
  Id = 'Id',
  Nome = 'Nome',
  Parceiro_Id = 'Parceiro_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.ContratosBase" */
export const enum comercial_ContratosBase_update_column {
  CodigoReferencia = 'CodigoReferencia',
  Id = 'Id',
  Nome = 'Nome',
  Parceiro_Id = 'Parceiro_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Planos_Condicionais" */
export const enum comercial_Planos_Condicionais_constraint {
  Planos_Condicionais_pkey = 'Planos_Condicionais_pkey',
}
/** select columns of table "comercial.Planos_Condicionais" */
export const enum comercial_Planos_Condicionais_select_column {
  Condicional_Id = 'Condicional_Id',
  Id = 'Id',
  Plano_Id = 'Plano_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Planos_Condicionais" */
export const enum comercial_Planos_Condicionais_update_column {
  Condicional_Id = 'Condicional_Id',
  Id = 'Id',
  Plano_Id = 'Plano_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Planos_Precos" */
export const enum comercial_Planos_Precos_constraint {
  Planos_Precos_pkey = 'Planos_Precos_pkey',
}
/** select columns of table "comercial.Planos_Precos" */
export const enum comercial_Planos_Precos_select_column {
  Id = 'Id',
  Plano_Id = 'Plano_Id',
  ServicoPreco_Id = 'ServicoPreco_Id',
  ValorBase = 'ValorBase',
  ValorPraticado = 'ValorPraticado',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Planos_Precos" */
export const enum comercial_Planos_Precos_update_column {
  Id = 'Id',
  Plano_Id = 'Plano_Id',
  ServicoPreco_Id = 'ServicoPreco_Id',
  ValorBase = 'ValorBase',
  ValorPraticado = 'ValorPraticado',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Planos" */
export const enum comercial_Planos_constraint {
  Planos_pkey = 'Planos_pkey',
}
/** select columns of table "comercial.Planos" */
export const enum comercial_Planos_select_column {
  Id = 'Id',
  Nome = 'Nome',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Planos" */
export const enum comercial_Planos_update_column {
  Id = 'Id',
  Nome = 'Nome',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos_Itens" */
export const enum comercial_PrestadoresDeServicos_Produtos_Itens_constraint {
  PrestadoresDeServicos_Produtos_Itens_pkey = 'PrestadoresDeServicos_Produtos_Itens_pkey',
}
/** select columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
export const enum comercial_PrestadoresDeServicos_Produtos_Itens_select_column {
  Id = 'Id',
  Item_Id = 'Item_Id',
  PrestadoresDeServicos_Produtos_Id = 'PrestadoresDeServicos_Produtos_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.PrestadoresDeServicos_Produtos_Itens" */
export const enum comercial_PrestadoresDeServicos_Produtos_Itens_update_column {
  Id = 'Id',
  Item_Id = 'Item_Id',
  PrestadoresDeServicos_Produtos_Id = 'PrestadoresDeServicos_Produtos_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos_Precos" */
export const enum comercial_PrestadoresDeServicos_Produtos_Precos_constraint {
  Fornecedores_Produtos_Precos_pkey = 'Fornecedores_Produtos_Precos_pkey',
}
/** select columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
export const enum comercial_PrestadoresDeServicos_Produtos_Precos_select_column {
  Fornecedor_Produto_Id = 'Fornecedor_Produto_Id',
  Id = 'Id',
  TipoDePreco_Id = 'TipoDePreco_Id',
  TipoDeRecorrencia_Id = 'TipoDeRecorrencia_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.PrestadoresDeServicos_Produtos_Precos" */
export const enum comercial_PrestadoresDeServicos_Produtos_Precos_update_column {
  Fornecedor_Produto_Id = 'Fornecedor_Produto_Id',
  Id = 'Id',
  TipoDePreco_Id = 'TipoDePreco_Id',
  TipoDeRecorrencia_Id = 'TipoDeRecorrencia_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Produtos" */
export const enum comercial_PrestadoresDeServicos_Produtos_constraint {
  Fornecedores_Produtos_pkey = 'Fornecedores_Produtos_pkey',
}
/** select columns of table "comercial.PrestadoresDeServicos_Produtos" */
export const enum comercial_PrestadoresDeServicos_Produtos_select_column {
  Fornecedor_Id = 'Fornecedor_Id',
  Id = 'Id',
  Produto_Id = 'Produto_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.PrestadoresDeServicos_Produtos" */
export const enum comercial_PrestadoresDeServicos_Produtos_update_column {
  Fornecedor_Id = 'Fornecedor_Id',
  Id = 'Id',
  Produto_Id = 'Produto_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos_Precos" */
export const enum comercial_PrestadoresDeServicos_Servicos_Precos_constraint {
  Fornecedores_Servicos_Precos_pkey = 'Fornecedores_Servicos_Precos_pkey',
}
/** select columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
export const enum comercial_PrestadoresDeServicos_Servicos_Precos_select_column {
  Fornecedor_Servico_Id = 'Fornecedor_Servico_Id',
  Id = 'Id',
  TipoDePreco_Id = 'TipoDePreco_Id',
  TipoDeRecorrencia_Id = 'TipoDeRecorrencia_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.PrestadoresDeServicos_Servicos_Precos" */
export const enum comercial_PrestadoresDeServicos_Servicos_Precos_update_column {
  Fornecedor_Servico_Id = 'Fornecedor_Servico_Id',
  Id = 'Id',
  TipoDePreco_Id = 'TipoDePreco_Id',
  TipoDeRecorrencia_Id = 'TipoDeRecorrencia_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
export const enum comercial_PrestadoresDeServicos_Servicos_Tarifas_constraint {
  Fornecedores_Servicos_Tarifas_pkey = 'Fornecedores_Servicos_Tarifas_pkey',
}
/** select columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
export const enum comercial_PrestadoresDeServicos_Servicos_Tarifas_select_column {
  Fornecedor_Servico_Id = 'Fornecedor_Servico_Id',
  Id = 'Id',
  Tarifa_Id = 'Tarifa_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.PrestadoresDeServicos_Servicos_Tarifas" */
export const enum comercial_PrestadoresDeServicos_Servicos_Tarifas_update_column {
  Fornecedor_Servico_Id = 'Fornecedor_Servico_Id',
  Id = 'Id',
  Tarifa_Id = 'Tarifa_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.PrestadoresDeServicos_Servicos" */
export const enum comercial_PrestadoresDeServicos_Servicos_constraint {
  Fornecedores_Servicos_pkey = 'Fornecedores_Servicos_pkey',
}
/** select columns of table "comercial.PrestadoresDeServicos_Servicos" */
export const enum comercial_PrestadoresDeServicos_Servicos_select_column {
  Id = 'Id',
  Prestador_Id = 'Prestador_Id',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.PrestadoresDeServicos_Servicos" */
export const enum comercial_PrestadoresDeServicos_Servicos_update_column {
  Id = 'Id',
  Prestador_Id = 'Prestador_Id',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.PrestadoresDeServicos" */
export const enum comercial_PrestadoresDeServicos_constraint {
  Fornecedores_pkey = 'Fornecedores_pkey',
}
/** select columns of table "comercial.PrestadoresDeServicos" */
export const enum comercial_PrestadoresDeServicos_select_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.PrestadoresDeServicos" */
export const enum comercial_PrestadoresDeServicos_update_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Produtos_Atributos" */
export const enum comercial_Produtos_Atributos_constraint {
  Produtos_Atributos_pkey = 'Produtos_Atributos_pkey',
}
/** select columns of table "comercial.Produtos_Atributos" */
export const enum comercial_Produtos_Atributos_select_column {
  Atributo_Id = 'Atributo_Id',
  Id = 'Id',
  Produto_Id = 'Produto_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Produtos_Atributos" */
export const enum comercial_Produtos_Atributos_update_column {
  Atributo_Id = 'Atributo_Id',
  Id = 'Id',
  Produto_Id = 'Produto_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Produtos_Oportunidades" */
export const enum comercial_Produtos_Oportunidades_constraint {
  Produtos_Oportunidades_pkey = 'Produtos_Oportunidades_pkey',
}
/** select columns of table "comercial.Produtos_Oportunidades" */
export const enum comercial_Produtos_Oportunidades_select_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  Nome = 'Nome',
  Produto_Id = 'Produto_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Produtos_Oportunidades" */
export const enum comercial_Produtos_Oportunidades_update_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  Nome = 'Nome',
  Produto_Id = 'Produto_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Produtos_Produtos" */
export const enum comercial_Produtos_Produtos_constraint {
  Produtos_Produtos_pkey = 'Produtos_Produtos_pkey',
}
/** select columns of table "comercial.Produtos_Produtos" */
export const enum comercial_Produtos_Produtos_select_column {
  Id = 'Id',
  ProdutoDependente_Id = 'ProdutoDependente_Id',
  Produto_Id = 'Produto_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Produtos_Produtos" */
export const enum comercial_Produtos_Produtos_update_column {
  Id = 'Id',
  ProdutoDependente_Id = 'ProdutoDependente_Id',
  Produto_Id = 'Produto_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Produtos_Servicos" */
export const enum comercial_Produtos_Servicos_constraint {
  Produtos_Servicos_pkey = 'Produtos_Servicos_pkey',
}
/** select columns of table "comercial.Produtos_Servicos" */
export const enum comercial_Produtos_Servicos_select_column {
  Id = 'Id',
  Produto_Id = 'Produto_Id',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Produtos_Servicos" */
export const enum comercial_Produtos_Servicos_update_column {
  Id = 'Id',
  Produto_Id = 'Produto_Id',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Produtos_Tipos" */
export const enum comercial_Produtos_Tipos_constraint {
  Produtos_Tipos_pkey = 'Produtos_Tipos_pkey',
}
export const enum comercial_Produtos_Tipos_enum {
  assistencia = 'assistencia',
  monitoramento = 'monitoramento',
  protecao = 'protecao',
}
/** select columns of table "comercial.Produtos_Tipos" */
export const enum comercial_Produtos_Tipos_select_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** update columns of table "comercial.Produtos_Tipos" */
export const enum comercial_Produtos_Tipos_update_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** unique or primary key constraints on table "comercial.Produtos" */
export const enum comercial_Produtos_constraint {
  Produtos_pkey = 'Produtos_pkey',
}
/** select columns of table "comercial.Produtos" */
export const enum comercial_Produtos_select_column {
  Categorias = 'Categorias',
  Id = 'Id',
  Nome = 'Nome',
  ServicoDeDesinstalacao_Id = 'ServicoDeDesinstalacao_Id',
  ServicoDeInstalacao_Id = 'ServicoDeInstalacao_Id',
  Tipo_Id = 'Tipo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Produtos" */
export const enum comercial_Produtos_update_column {
  Categorias = 'Categorias',
  Id = 'Id',
  Nome = 'Nome',
  ServicoDeDesinstalacao_Id = 'ServicoDeDesinstalacao_Id',
  ServicoDeInstalacao_Id = 'ServicoDeInstalacao_Id',
  Tipo_Id = 'Tipo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Servicos_Atributos" */
export const enum comercial_Servicos_Atributos_constraint {
  Servicos_Atributos_pkey = 'Servicos_Atributos_pkey',
}
/** select columns of table "comercial.Servicos_Atributos" */
export const enum comercial_Servicos_Atributos_select_column {
  Atributo_Id = 'Atributo_Id',
  Id = 'Id',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Servicos_Atributos" */
export const enum comercial_Servicos_Atributos_update_column {
  Atributo_Id = 'Atributo_Id',
  Id = 'Id',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Servicos_Oportunidades" */
export const enum comercial_Servicos_Oportunidades_constraint {
  Servicos_Oportunidades_pkey = 'Servicos_Oportunidades_pkey',
}
/** select columns of table "comercial.Servicos_Oportunidades" */
export const enum comercial_Servicos_Oportunidades_select_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  Nome = 'Nome',
  Servico_Id = 'Servico_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Servicos_Oportunidades" */
export const enum comercial_Servicos_Oportunidades_update_column {
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  Nome = 'Nome',
  Servico_Id = 'Servico_Id',
  Valor = 'Valor',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Servicos_Produtos" */
export const enum comercial_Servicos_Produtos_constraint {
  Servicos_Produtos_pkey = 'Servicos_Produtos_pkey',
}
/** select columns of table "comercial.Servicos_Produtos" */
export const enum comercial_Servicos_Produtos_select_column {
  Id = 'Id',
  Produto_Id = 'Produto_Id',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Servicos_Produtos" */
export const enum comercial_Servicos_Produtos_update_column {
  Id = 'Id',
  Produto_Id = 'Produto_Id',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Servicos_Servicos" */
export const enum comercial_Servicos_Servicos_constraint {
  Servicos_Servicos_pkey = 'Servicos_Servicos_pkey',
}
/** select columns of table "comercial.Servicos_Servicos" */
export const enum comercial_Servicos_Servicos_select_column {
  Id = 'Id',
  ServicoDependente_Id = 'ServicoDependente_Id',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Servicos_Servicos" */
export const enum comercial_Servicos_Servicos_update_column {
  Id = 'Id',
  ServicoDependente_Id = 'ServicoDependente_Id',
  Servico_Id = 'Servico_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Servicos_Tarifas" */
export const enum comercial_Servicos_Tarifas_constraint {
  Servicos_Tarifas_pkey = 'Servicos_Tarifas_pkey',
}
/** select columns of table "comercial.Servicos_Tarifas" */
export const enum comercial_Servicos_Tarifas_select_column {
  Id = 'Id',
  Servico_Id = 'Servico_Id',
  Tarifa_Id = 'Tarifa_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Servicos_Tarifas" */
export const enum comercial_Servicos_Tarifas_update_column {
  Id = 'Id',
  Servico_Id = 'Servico_Id',
  Tarifa_Id = 'Tarifa_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Servicos_Tipos" */
export const enum comercial_Servicos_Tipos_constraint {
  Servicos_Tipos_pkey = 'Servicos_Tipos_pkey',
}
export const enum comercial_Servicos_Tipos_enum {
  assistencia = 'assistencia',
  monitoramento = 'monitoramento',
  protecao = 'protecao',
}
/** select columns of table "comercial.Servicos_Tipos" */
export const enum comercial_Servicos_Tipos_select_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** update columns of table "comercial.Servicos_Tipos" */
export const enum comercial_Servicos_Tipos_update_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** unique or primary key constraints on table "comercial.Servicos" */
export const enum comercial_Servicos_constraint {
  Servicos_pkey = 'Servicos_pkey',
}
/** select columns of table "comercial.Servicos" */
export const enum comercial_Servicos_select_column {
  Categorias = 'Categorias',
  GeraOS = 'GeraOS',
  Id = 'Id',
  Nome = 'Nome',
  Tipo_Id = 'Tipo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Servicos" */
export const enum comercial_Servicos_update_column {
  Categorias = 'Categorias',
  GeraOS = 'GeraOS',
  Id = 'Id',
  Nome = 'Nome',
  Tipo_Id = 'Tipo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "comercial.Tarifas" */
export const enum comercial_Tarifas_constraint {
  Tarifas_pkey = 'Tarifas_pkey',
}
/** select columns of table "comercial.Tarifas" */
export const enum comercial_Tarifas_select_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "comercial.Tarifas" */
export const enum comercial_Tarifas_update_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "contatos.Emails" */
export const enum contatos_Emails_constraint {
  Emails_Email_key = 'Emails_Email_key',
  Emails_pkey = 'Emails_pkey',
}
/** select columns of table "contatos.Emails" */
export const enum contatos_Emails_select_column {
  Categorias = 'Categorias',
  Email = 'Email',
  Id = 'Id',
  Identidades = 'Identidades',
  NomeDoResponsavel = 'NomeDoResponsavel',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "contatos.Emails" */
export const enum contatos_Emails_update_column {
  Categorias = 'Categorias',
  Email = 'Email',
  Id = 'Id',
  Identidades = 'Identidades',
  NomeDoResponsavel = 'NomeDoResponsavel',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "contatos.Enderecos" */
export const enum contatos_Enderecos_constraint {
  Enderecos_pkey = 'Enderecos_pkey',
}
/** select columns of table "contatos.Enderecos" */
export const enum contatos_Enderecos_select_column {
  Bairro = 'Bairro',
  Categorias = 'Categorias',
  Cep = 'Cep',
  Cidade_Id = 'Cidade_Id',
  Complemento = 'Complemento',
  Estado_Id = 'Estado_Id',
  Id = 'Id',
  Identidades = 'Identidades',
  Logradouro = 'Logradouro',
  Numero = 'Numero',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "contatos.Enderecos" */
export const enum contatos_Enderecos_update_column {
  Bairro = 'Bairro',
  Categorias = 'Categorias',
  Cep = 'Cep',
  Cidade_Id = 'Cidade_Id',
  Complemento = 'Complemento',
  Estado_Id = 'Estado_Id',
  Id = 'Id',
  Identidades = 'Identidades',
  Logradouro = 'Logradouro',
  Numero = 'Numero',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "contatos.Logs" */
export const enum contatos_Logs_constraint {
  Logs_pkey = 'Logs_pkey',
}
/** select columns of table "contatos.Logs" */
export const enum contatos_Logs_select_column {
  DadosAntigos = 'DadosAntigos',
  DadosNovos = 'DadosNovos',
  Id = 'Id',
  Operacao = 'Operacao',
  Tipo = 'Tipo',
  Tipo_Id = 'Tipo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "contatos.Logs" */
export const enum contatos_Logs_update_column {
  DadosAntigos = 'DadosAntigos',
  DadosNovos = 'DadosNovos',
  Id = 'Id',
  Operacao = 'Operacao',
  Tipo = 'Tipo',
  Tipo_Id = 'Tipo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "contatos.Telefones" */
export const enum contatos_Telefones_constraint {
  Telefones_Telefone_key = 'Telefones_Telefone_key',
  Telefones_pkey = 'Telefones_pkey',
}
/** select columns of table "contatos.Telefones" */
export const enum contatos_Telefones_select_column {
  Categorias = 'Categorias',
  Id = 'Id',
  Identidades = 'Identidades',
  NomeDoResponsavel = 'NomeDoResponsavel',
  Telefone = 'Telefone',
  Tipos = 'Tipos',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "contatos.Telefones" */
export const enum contatos_Telefones_update_column {
  Categorias = 'Categorias',
  Id = 'Id',
  Identidades = 'Identidades',
  NomeDoResponsavel = 'NomeDoResponsavel',
  Telefone = 'Telefone',
  Tipos = 'Tipos',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "identidades.Clientes_Documentos_Situacoes" */
export const enum identidades_Clientes_Documentos_Situacoes_constraint {
  Clientes_Documentos_Situacoes_pkey = 'Clientes_Documentos_Situacoes_pkey',
}
export const enum identidades_Clientes_Documentos_Situacoes_enum {
  anexado = 'anexado',
  aprovado = 'aprovado',
  recusado = 'recusado',
}
/** select columns of table "identidades.Clientes_Documentos_Situacoes" */
export const enum identidades_Clientes_Documentos_Situacoes_select_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** update columns of table "identidades.Clientes_Documentos_Situacoes" */
export const enum identidades_Clientes_Documentos_Situacoes_update_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** unique or primary key constraints on table "identidades.Clientes_Documentos" */
export const enum identidades_Clientes_Documentos_constraint {
  Clientes_Documentos_Nome_Pessoa_Id_key = 'Clientes_Documentos_Nome_Pessoa_Id_key',
  Clientes_Documentos_pkey = 'Clientes_Documentos_pkey',
}
/** select columns of table "identidades.Clientes_Documentos" */
export const enum identidades_Clientes_Documentos_select_column {
  DataAprovado = 'DataAprovado',
  DataRecusado = 'DataRecusado',
  Id = 'Id',
  MotivoRecusa = 'MotivoRecusa',
  Nome = 'Nome',
  Pessoa_Id = 'Pessoa_Id',
  Situacao_Id = 'Situacao_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "identidades.Clientes_Documentos" */
export const enum identidades_Clientes_Documentos_update_column {
  DataAprovado = 'DataAprovado',
  DataRecusado = 'DataRecusado',
  Id = 'Id',
  MotivoRecusa = 'MotivoRecusa',
  Nome = 'Nome',
  Pessoa_Id = 'Pessoa_Id',
  Situacao_Id = 'Situacao_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "identidades.Clientes" */
export const enum identidades_Clientes_constraint {
  Clientes_Pessoa_Id_key = 'Clientes_Pessoa_Id_key',
  Clientes_pkey = 'Clientes_pkey',
}
/** select columns of table "identidades.Clientes" */
export const enum identidades_Clientes_select_column {
  Id = 'Id',
  Pessoa_Id = 'Pessoa_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "identidades.Clientes" */
export const enum identidades_Clientes_update_column {
  Id = 'Id',
  Pessoa_Id = 'Pessoa_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "identidades.Colaboradores" */
export const enum identidades_Colaboradores_constraint {
  Colaboradores_pkey = 'Colaboradores_pkey',
}
/** select columns of table "identidades.Colaboradores" */
export const enum identidades_Colaboradores_select_column {
  Id = 'Id',
  Pessoa_Id = 'Pessoa_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "identidades.Colaboradores" */
export const enum identidades_Colaboradores_update_column {
  Id = 'Id',
  Pessoa_Id = 'Pessoa_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "identidades.Fornecedores" */
export const enum identidades_Fornecedores_constraint {
  Fornecedores_Pessoa_Id_key = 'Fornecedores_Pessoa_Id_key',
  Fornecedores_pkey = 'Fornecedores_pkey',
}
/** select columns of table "identidades.Fornecedores" */
export const enum identidades_Fornecedores_select_column {
  Id = 'Id',
  Pessoa_Id = 'Pessoa_Id',
  PrecoDoKm = 'PrecoDoKm',
  PrestadorDeServico = 'PrestadorDeServico',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "identidades.Fornecedores" */
export const enum identidades_Fornecedores_update_column {
  Id = 'Id',
  Pessoa_Id = 'Pessoa_Id',
  PrecoDoKm = 'PrecoDoKm',
  PrestadorDeServico = 'PrestadorDeServico',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "identidades.Logs" */
export const enum identidades_Logs_constraint {
  Logs_pkey = 'Logs_pkey',
}
/** select columns of table "identidades.Logs" */
export const enum identidades_Logs_select_column {
  DadosAntigos = 'DadosAntigos',
  DadosNovos = 'DadosNovos',
  Id = 'Id',
  Operacao = 'Operacao',
  Tipo = 'Tipo',
  Tipo_Id = 'Tipo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "identidades.Logs" */
export const enum identidades_Logs_update_column {
  DadosAntigos = 'DadosAntigos',
  DadosNovos = 'DadosNovos',
  Id = 'Id',
  Operacao = 'Operacao',
  Tipo = 'Tipo',
  Tipo_Id = 'Tipo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "identidades.Pessoas" */
export const enum identidades_Pessoas_constraint {
  Pessoa_pkey = 'Pessoa_pkey',
  Pessoas_Identificador_key = 'Pessoas_Identificador_key',
}
/** select columns of table "identidades.Pessoas" */
export const enum identidades_Pessoas_select_column {
  DadosDaApi = 'DadosDaApi',
  Id = 'Id',
  Identificador = 'Identificador',
  Nome = 'Nome',
  PessoaJuridica = 'PessoaJuridica',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "identidades.Pessoas" */
export const enum identidades_Pessoas_update_column {
  DadosDaApi = 'DadosDaApi',
  Id = 'Id',
  Identificador = 'Identificador',
  Nome = 'Nome',
  PessoaJuridica = 'PessoaJuridica',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "identidades.Representantes" */
export const enum identidades_Representantes_constraint {
  Representantes_Pessoa_Id_PessoaRepresentada_Id_key = 'Representantes_Pessoa_Id_PessoaRepresentada_Id_key',
  Representantes_pkey = 'Representantes_pkey',
}
/** select columns of table "identidades.Representantes" */
export const enum identidades_Representantes_select_column {
  Id = 'Id',
  PessoaRepresentada_Id = 'PessoaRepresentada_Id',
  Pessoa_Id = 'Pessoa_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "identidades.Representantes" */
export const enum identidades_Representantes_update_column {
  Id = 'Id',
  PessoaRepresentada_Id = 'PessoaRepresentada_Id',
  Pessoa_Id = 'Pessoa_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "identidades.Vendedores" */
export const enum identidades_Vendedores_constraint {
  Vendedores_pkey = 'Vendedores_pkey',
}
/** select columns of table "identidades.Vendedores" */
export const enum identidades_Vendedores_select_column {
  Emails = 'Emails',
  Fornecedor_Id = 'Fornecedor_Id',
  Id = 'Id',
  Nome = 'Nome',
  Telefones = 'Telefones',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "identidades.Vendedores" */
export const enum identidades_Vendedores_update_column {
  Emails = 'Emails',
  Fornecedor_Id = 'Fornecedor_Id',
  Id = 'Id',
  Nome = 'Nome',
  Telefones = 'Telefones',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** column ordering options */
export const enum order_by {
  asc = 'asc',
  asc_nulls_first = 'asc_nulls_first',
  asc_nulls_last = 'asc_nulls_last',
  desc = 'desc',
  desc_nulls_first = 'desc_nulls_first',
  desc_nulls_last = 'desc_nulls_last',
}
/** unique or primary key constraints on table "propostas.Propostas_Combos" */
export const enum propostas_Propostas_Combos_constraint {
  Propostas_Combos_pkey = 'Propostas_Combos_pkey',
}
/** select columns of table "propostas.Propostas_Combos" */
export const enum propostas_Propostas_Combos_select_column {
  ComboPreco_Id = 'ComboPreco_Id',
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  Proposta_Id = 'Proposta_Id',
  Veiculo = 'Veiculo',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "propostas.Propostas_Combos" */
export const enum propostas_Propostas_Combos_update_column {
  ComboPreco_Id = 'ComboPreco_Id',
  Combo_Id = 'Combo_Id',
  Id = 'Id',
  Proposta_Id = 'Proposta_Id',
  Veiculo = 'Veiculo',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "propostas.Propostas_Instalacoes" */
export const enum propostas_Propostas_Instalacoes_constraint {
  Propostas_Instalacoes_pkey = 'Propostas_Instalacoes_pkey',
}
/** select columns of table "propostas.Propostas_Instalacoes" */
export const enum propostas_Propostas_Instalacoes_select_column {
  Endereco = 'Endereco',
  Id = 'Id',
  PosicaoDoVeiculo = 'PosicaoDoVeiculo',
  Proposta_Id = 'Proposta_Id',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "propostas.Propostas_Instalacoes" */
export const enum propostas_Propostas_Instalacoes_update_column {
  Endereco = 'Endereco',
  Id = 'Id',
  PosicaoDoVeiculo = 'PosicaoDoVeiculo',
  Proposta_Id = 'Proposta_Id',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "propostas.Propostas_Oportunidades" */
export const enum propostas_Propostas_Oportunidades_constraint {
  Propostas_Oportunidades_pkey = 'Propostas_Oportunidades_pkey',
}
/** select columns of table "propostas.Propostas_Oportunidades" */
export const enum propostas_Propostas_Oportunidades_select_column {
  Id = 'Id',
  OportunidadeProduto_Id = 'OportunidadeProduto_Id',
  OportunidadeServico_Id = 'OportunidadeServico_Id',
  Proposta_Id = 'Proposta_Id',
  Veiculo = 'Veiculo',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "propostas.Propostas_Oportunidades" */
export const enum propostas_Propostas_Oportunidades_update_column {
  Id = 'Id',
  OportunidadeProduto_Id = 'OportunidadeProduto_Id',
  OportunidadeServico_Id = 'OportunidadeServico_Id',
  Proposta_Id = 'Proposta_Id',
  Veiculo = 'Veiculo',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "propostas.Propostas_Planos" */
export const enum propostas_Propostas_Planos_constraint {
  Propostas_Planos_pkey = 'Propostas_Planos_pkey',
}
/** select columns of table "propostas.Propostas_Planos" */
export const enum propostas_Propostas_Planos_select_column {
  Id = 'Id',
  PlanoPreco_Id = 'PlanoPreco_Id',
  Plano_Id = 'Plano_Id',
  Proposta_Id = 'Proposta_Id',
  Veiculo = 'Veiculo',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "propostas.Propostas_Planos" */
export const enum propostas_Propostas_Planos_update_column {
  Id = 'Id',
  PlanoPreco_Id = 'PlanoPreco_Id',
  Plano_Id = 'Plano_Id',
  Proposta_Id = 'Proposta_Id',
  Veiculo = 'Veiculo',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "propostas.Propostas_Produtos" */
export const enum propostas_Propostas_Produtos_constraint {
  Propostas_Produtos_pkey = 'Propostas_Produtos_pkey',
}
/** select columns of table "propostas.Propostas_Produtos" */
export const enum propostas_Propostas_Produtos_select_column {
  Id = 'Id',
  ProdutoPreco_Id = 'ProdutoPreco_Id',
  Produto_Id = 'Produto_Id',
  Proposta_Id = 'Proposta_Id',
  Veiculo = 'Veiculo',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "propostas.Propostas_Produtos" */
export const enum propostas_Propostas_Produtos_update_column {
  Id = 'Id',
  ProdutoPreco_Id = 'ProdutoPreco_Id',
  Produto_Id = 'Produto_Id',
  Proposta_Id = 'Proposta_Id',
  Veiculo = 'Veiculo',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "propostas.Propostas_Servicos" */
export const enum propostas_Propostas_Servicos_constraint {
  Propostas_Servicos_pkey = 'Propostas_Servicos_pkey',
}
/** select columns of table "propostas.Propostas_Servicos" */
export const enum propostas_Propostas_Servicos_select_column {
  Id = 'Id',
  Proposta_Id = 'Proposta_Id',
  Servico_Id = 'Servico_Id',
  ServicosPreco_Id = 'ServicosPreco_Id',
  Veiculo = 'Veiculo',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "propostas.Propostas_Servicos" */
export const enum propostas_Propostas_Servicos_update_column {
  Id = 'Id',
  Proposta_Id = 'Proposta_Id',
  Servico_Id = 'Servico_Id',
  ServicosPreco_Id = 'ServicosPreco_Id',
  Veiculo = 'Veiculo',
  Veiculo_Id = 'Veiculo_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "propostas.Propostas_Situacoes" */
export const enum propostas_Propostas_Situacoes_constraint {
  Propostas_Situacoes_pkey = 'Propostas_Situacoes_pkey',
}
export const enum propostas_Propostas_Situacoes_enum {
  aceito = 'aceito',
  criado = 'criado',
  recusado = 'recusado',
}
/** select columns of table "propostas.Propostas_Situacoes" */
export const enum propostas_Propostas_Situacoes_select_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** update columns of table "propostas.Propostas_Situacoes" */
export const enum propostas_Propostas_Situacoes_update_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** unique or primary key constraints on table "propostas.Propostas" */
export const enum propostas_Propostas_constraint {
  Propostas_pkey = 'Propostas_pkey',
}
/** select columns of table "propostas.Propostas" */
export const enum propostas_Propostas_select_column {
  Cliente_Id = 'Cliente_Id',
  DataAceito = 'DataAceito',
  Id = 'Id',
  Lead_Id = 'Lead_Id',
  Situacao_Id = 'Situacao_Id',
  Ticket_Id = 'Ticket_Id',
  TipoDePagamento_Id = 'TipoDePagamento_Id',
  TipoDeRecorrencia_Id = 'TipoDeRecorrencia_Id',
  Usuario_Id = 'Usuario_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "propostas.Propostas" */
export const enum propostas_Propostas_update_column {
  Cliente_Id = 'Cliente_Id',
  DataAceito = 'DataAceito',
  Id = 'Id',
  Lead_Id = 'Lead_Id',
  Situacao_Id = 'Situacao_Id',
  Ticket_Id = 'Ticket_Id',
  TipoDePagamento_Id = 'TipoDePagamento_Id',
  TipoDeRecorrencia_Id = 'TipoDeRecorrencia_Id',
  Usuario_Id = 'Usuario_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "vendas.GruposDePerguntas_Perguntas" */
export const enum vendas_GruposDePerguntas_Perguntas_constraint {
  GruposDePerguntas_Perguntas_pkey = 'GruposDePerguntas_Perguntas_pkey',
}
/** select columns of table "vendas.GruposDePerguntas_Perguntas" */
export const enum vendas_GruposDePerguntas_Perguntas_select_column {
  Grupo_Id = 'Grupo_Id',
  Id = 'Id',
  Pergunta_Id = 'Pergunta_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "vendas.GruposDePerguntas_Perguntas" */
export const enum vendas_GruposDePerguntas_Perguntas_update_column {
  Grupo_Id = 'Grupo_Id',
  Id = 'Id',
  Pergunta_Id = 'Pergunta_Id',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "vendas.GruposDePerguntas" */
export const enum vendas_GruposDePerguntas_constraint {
  GruposDePerguntas_pkey = 'GruposDePerguntas_pkey',
}
/** select columns of table "vendas.GruposDePerguntas" */
export const enum vendas_GruposDePerguntas_select_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "vendas.GruposDePerguntas" */
export const enum vendas_GruposDePerguntas_update_column {
  Id = 'Id',
  Nome = 'Nome',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "vendas.Perguntas" */
export const enum vendas_Perguntas_constraint {
  Perguntas_pkey = 'Perguntas_pkey',
}
/** select columns of table "vendas.Perguntas" */
export const enum vendas_Perguntas_select_column {
  Descricao = 'Descricao',
  Id = 'Id',
  Titulo = 'Titulo',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** update columns of table "vendas.Perguntas" */
export const enum vendas_Perguntas_update_column {
  Descricao = 'Descricao',
  Id = 'Id',
  Titulo = 'Titulo',
  created_at = 'created_at',
  deleted_at = 'deleted_at',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "vendas.TiposDePagamento" */
export const enum vendas_TiposDePagamento_constraint {
  TiposDePagamento_pkey = 'TiposDePagamento_pkey',
}
/** select columns of table "vendas.TiposDePagamento" */
export const enum vendas_TiposDePagamento_select_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** update columns of table "vendas.TiposDePagamento" */
export const enum vendas_TiposDePagamento_update_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** unique or primary key constraints on table "vendas.TiposDePrecos" */
export const enum vendas_TiposDePrecos_constraint {
  TiposDePrecos_pkey = 'TiposDePrecos_pkey',
}
export const enum vendas_TiposDePrecos_enum {
  adesao = 'adesao',
  instalacao = 'instalacao',
  recorrencia = 'recorrencia',
  vendas = 'vendas',
}
/** select columns of table "vendas.TiposDePrecos" */
export const enum vendas_TiposDePrecos_select_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** update columns of table "vendas.TiposDePrecos" */
export const enum vendas_TiposDePrecos_update_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** unique or primary key constraints on table "vendas.TiposDeRecorrencia" */
export const enum vendas_TiposDeRecorrencia_constraint {
  TiposDeRecorrencia_pkey = 'TiposDeRecorrencia_pkey',
}
/** select columns of table "vendas.TiposDeRecorrencia" */
export const enum vendas_TiposDeRecorrencia_select_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
/** update columns of table "vendas.TiposDeRecorrencia" */
export const enum vendas_TiposDeRecorrencia_update_column {
  Comentario = 'Comentario',
  Valor = 'Valor',
}
export class GraphQLError extends Error {
  constructor(public response: GraphQLResponse) {
    super('');
    console.error(response);
  }
  toString() {
    return 'GraphQL Response Error';
  }
}

export type UnwrapPromise<T> = T extends Promise<infer R> ? R : T;
export type ZeusState<T extends (...args: any[]) => Promise<any>> = NonNullable<
  UnwrapPromise<ReturnType<T>>
>;
export type ZeusHook<
  T extends (
    ...args: any[]
  ) => Record<string, (...args: any[]) => Promise<any>>,
  N extends keyof ReturnType<T>
> = ZeusState<ReturnType<T>[N]>;

type WithTypeNameValue<T> = T & {
  __typename?: true;
};
type AliasType<T> = WithTypeNameValue<T> & {
  __alias?: Record<string, WithTypeNameValue<T>>;
};
export interface GraphQLResponse {
  data?: Record<string, any>;
  errors?: Array<{
    message: string;
  }>;
}
type DeepAnify<T> = {
  [P in keyof T]?: any;
};
type IsPayLoad<T> = T extends [any, infer PayLoad] ? PayLoad : T;
type IsArray<T, U> = T extends Array<infer R>
  ? InputType<R, U>[]
  : InputType<T, U>;
type FlattenArray<T> = T extends Array<infer R> ? R : T;

type IsInterfaced<SRC extends DeepAnify<DST>, DST> = FlattenArray<SRC> extends
  | ZEUS_INTERFACES
  | ZEUS_UNIONS
  ? {
      [P in keyof SRC]: SRC[P] extends '__union' & infer R
        ? P extends keyof DST
          ? IsArray<
              R,
              '__typename' extends keyof DST
                ? DST[P] & { __typename: true }
                : DST[P]
            >
          : {}
        : never;
    }[keyof DST] & {
      [P in keyof Omit<
        Pick<
          SRC,
          {
            [P in keyof DST]: SRC[P] extends '__union' & infer R ? never : P;
          }[keyof DST]
        >,
        '__typename'
      >]: IsPayLoad<DST[P]> extends true ? SRC[P] : IsArray<SRC[P], DST[P]>;
    }
  : {
      [P in keyof Pick<SRC, keyof DST>]: IsPayLoad<DST[P]> extends true
        ? SRC[P]
        : IsArray<SRC[P], DST[P]>;
    };

export type MapType<SRC, DST> = SRC extends DeepAnify<DST>
  ? IsInterfaced<SRC, DST>
  : never;
export type InputType<SRC, DST> = IsPayLoad<DST> extends { __alias: infer R }
  ? {
      [P in keyof R]: MapType<SRC, R[P]>;
    } & MapType<SRC, Omit<IsPayLoad<DST>, '__alias'>>
  : MapType<SRC, IsPayLoad<DST>>;
type Func<P extends any[], R> = (...args: P) => R;
type AnyFunc = Func<any, any>;
export type ArgsType<F extends AnyFunc> = F extends Func<infer P, any>
  ? P
  : never;
export type OperationOptions = {
  variables?: Record<string, any>;
  operationName?: string;
};
export type OperationToGraphQL<V, T> = <Z extends V>(
  o: Z | V,
  options?: OperationOptions
) => Promise<InputType<T, Z>>;
export type SubscriptionToGraphQL<V, T> = <Z extends V>(
  o: Z | V,
  options?: OperationOptions
) => {
  ws: WebSocket;
  on: (fn: (args: InputType<T, Z>) => void) => void;
  off: (
    fn: (e: {
      data?: InputType<T, Z>;
      code?: number;
      reason?: string;
      message?: string;
    }) => void
  ) => void;
  error: (
    fn: (e: { data?: InputType<T, Z>; errors?: string[] }) => void
  ) => void;
  open: () => void;
};
export type SelectionFunction<V> = <T>(t: T | V) => T;
export type fetchOptions = ArgsType<typeof fetch>;
type websocketOptions = typeof WebSocket extends new (
  ...args: infer R
) => WebSocket
  ? R
  : never;
export type chainOptions =
  | [fetchOptions[0], fetchOptions[1] & { websocket?: websocketOptions }]
  | [fetchOptions[0]];
export type FetchFunction = (
  query: string,
  variables?: Record<string, any>
) => Promise<any>;
export type SubscriptionFunction = (query: string) => void;
type NotUndefined<T> = T extends undefined ? never : T;
export type ResolverType<F> = NotUndefined<
  F extends [infer ARGS, any] ? ARGS : undefined
>;

export const ZeusSelect = <T>() => ((t: any) => t) as SelectionFunction<T>;

export const ScalarResolver = (scalar: string, value: any) => {
  switch (scalar) {
    case 'String':
      return `${JSON.stringify(value)}`;
    case 'Int':
      return `${value}`;
    case 'Float':
      return `${value}`;
    case 'Boolean':
      return `${value}`;
    case 'ID':
      return `"${value}"`;
    case 'enum':
      return `${value}`;
    case 'scalar':
      return `${value}`;
    default:
      return false;
  }
};

export const TypesPropsResolver = ({
  value,
  type,
  name,
  key,
  blockArrays,
}: {
  value: any;
  type: string;
  name: string;
  key?: string;
  blockArrays?: boolean;
}): string => {
  if (value === null) {
    return `null`;
  }
  let resolvedValue = AllTypesProps[type][name];
  if (key) {
    resolvedValue = resolvedValue[key];
  }
  if (!resolvedValue) {
    throw new Error(`Cannot resolve ${type} ${name}${key ? ` ${key}` : ''}`);
  }
  const typeResolved = resolvedValue.type;
  const isArray = resolvedValue.array;
  const isArrayRequired = resolvedValue.arrayRequired;
  if (typeof value === 'string' && value.startsWith(`ZEUS_VAR$`)) {
    const isRequired = resolvedValue.required ? '!' : '';
    let t = `${typeResolved}`;
    if (isArray) {
      if (isRequired) {
        t = `${t}!`;
      }
      t = `[${t}]`;
      if (isArrayRequired) {
        t = `${t}!`;
      }
    } else {
      if (isRequired) {
        t = `${t}!`;
      }
    }
    return `\$${value.split(`ZEUS_VAR$`)[1]}__ZEUS_VAR__${t}`;
  }
  if (isArray && !blockArrays) {
    return `[${value
      .map((v: any) =>
        TypesPropsResolver({ value: v, type, name, key, blockArrays: true })
      )
      .join(',')}]`;
  }
  const reslovedScalar = ScalarResolver(typeResolved, value);
  if (!reslovedScalar) {
    const resolvedType = AllTypesProps[typeResolved];
    if (typeof resolvedType === 'object') {
      const argsKeys = Object.keys(resolvedType);
      return `{${argsKeys
        .filter((ak) => value[ak] !== undefined)
        .map(
          (ak) =>
            `${ak}:${TypesPropsResolver({
              value: value[ak],
              type: typeResolved,
              name: ak,
            })}`
        )}}`;
    }
    return ScalarResolver(AllTypesProps[typeResolved], value) as string;
  }
  return reslovedScalar;
};

const isArrayFunction = (parent: string[], a: any[]) => {
  const [values, r] = a;
  const [mainKey, key, ...keys] = parent;
  const keyValues = Object.keys(values).filter(
    (k) => typeof values[k] !== 'undefined'
  );

  if (!keys.length) {
    return keyValues.length > 0
      ? `(${keyValues
          .map(
            (v) =>
              `${v}:${TypesPropsResolver({
                value: values[v],
                type: mainKey,
                name: key,
                key: v,
              })}`
          )
          .join(',')})${r ? traverseToSeekArrays(parent, r) : ''}`
      : traverseToSeekArrays(parent, r);
  }

  const [typeResolverKey] = keys.splice(keys.length - 1, 1);
  let valueToResolve = ReturnTypes[mainKey][key];
  for (const k of keys) {
    valueToResolve = ReturnTypes[valueToResolve][k];
  }

  const argumentString =
    keyValues.length > 0
      ? `(${keyValues
          .map(
            (v) =>
              `${v}:${TypesPropsResolver({
                value: values[v],
                type: valueToResolve,
                name: typeResolverKey,
                key: v,
              })}`
          )
          .join(',')})${r ? traverseToSeekArrays(parent, r) : ''}`
      : traverseToSeekArrays(parent, r);
  return argumentString;
};

const resolveKV = (
  k: string,
  v: boolean | string | { [x: string]: boolean | string }
) =>
  typeof v === 'boolean'
    ? k
    : typeof v === 'object'
    ? `${k}{${objectToTree(v)}}`
    : `${k}${v}`;

const objectToTree = (o: { [x: string]: boolean | string }): string =>
  `{${Object.keys(o)
    .map((k) => `${resolveKV(k, o[k])}`)
    .join(' ')}}`;

const traverseToSeekArrays = (parent: string[], a?: any): string => {
  if (!a) return '';
  if (Object.keys(a).length === 0) {
    return '';
  }
  let b: Record<string, any> = {};
  if (Array.isArray(a)) {
    return isArrayFunction([...parent], a);
  } else {
    if (typeof a === 'object') {
      Object.keys(a)
        .filter((k) => typeof a[k] !== 'undefined')
        .forEach((k) => {
          if (k === '__alias') {
            Object.keys(a[k]).forEach((aliasKey) => {
              const aliasOperations = a[k][aliasKey];
              const aliasOperationName = Object.keys(aliasOperations)[0];
              const aliasOperation = aliasOperations[aliasOperationName];
              b[
                `${aliasOperationName}__alias__${aliasKey}: ${aliasOperationName}`
              ] = traverseToSeekArrays(
                [...parent, aliasOperationName],
                aliasOperation
              );
            });
          } else {
            b[k] = traverseToSeekArrays([...parent, k], a[k]);
          }
        });
    } else {
      return '';
    }
  }
  return objectToTree(b);
};

const buildQuery = (type: string, a?: Record<any, any>) =>
  traverseToSeekArrays([type], a);

const inspectVariables = (query: string) => {
  const regex = /\$\b\w*__ZEUS_VAR__\[?[^!^\]^\s^,^\)^\}]*[!]?[\]]?[!]?/g;
  let result;
  const AllVariables: string[] = [];
  while ((result = regex.exec(query))) {
    if (AllVariables.includes(result[0])) {
      continue;
    }
    AllVariables.push(result[0]);
  }
  if (!AllVariables.length) {
    return query;
  }
  let filteredQuery = query;
  AllVariables.forEach((variable) => {
    while (filteredQuery.includes(variable)) {
      filteredQuery = filteredQuery.replace(
        variable,
        variable.split('__ZEUS_VAR__')[0]
      );
    }
  });
  return `(${AllVariables.map((a) => a.split('__ZEUS_VAR__'))
    .map(([variableName, variableType]) => `${variableName}:${variableType}`)
    .join(', ')})${filteredQuery}`;
};

export const queryConstruct =
  (
    t: 'query' | 'mutation' | 'subscription',
    tName: string,
    operationName?: string
  ) =>
  (o: Record<any, any>) =>
    `${t.toLowerCase()}${
      operationName ? ' ' + operationName : ''
    }${inspectVariables(buildQuery(tName, o))}`;

const fullChainConstruct =
  (fn: FetchFunction) =>
  (t: 'query' | 'mutation' | 'subscription', tName: string) =>
  (o: Record<any, any>, options?: OperationOptions) =>
    fn(
      queryConstruct(t, tName, options?.operationName)(o),
      options?.variables
    ).then((r: any) => {
      seekForAliases(r);
      return r;
    });

export const fullChainConstructor = <
  F extends FetchFunction,
  R extends keyof ValueTypes
>(
  fn: F,
  operation: 'query' | 'mutation' | 'subscription',
  key: R
) =>
  ((o, options) =>
    fullChainConstruct(fn)(operation, key)(
      o as any,
      options
    )) as OperationToGraphQL<ValueTypes[R], GraphQLTypes[R]>;

const fullSubscriptionConstruct =
  (fn: SubscriptionFunction) =>
  (t: 'query' | 'mutation' | 'subscription', tName: string) =>
  (o: Record<any, any>, options?: OperationOptions) =>
    fn(queryConstruct(t, tName, options?.operationName)(o));

export const fullSubscriptionConstructor = <
  F extends SubscriptionFunction,
  R extends keyof ValueTypes
>(
  fn: F,
  operation: 'query' | 'mutation' | 'subscription',
  key: R
) =>
  ((o, options) =>
    fullSubscriptionConstruct(fn)(operation, key)(
      o as any,
      options
    )) as SubscriptionToGraphQL<ValueTypes[R], GraphQLTypes[R]>;

const seekForAliases = (response: any) => {
  const traverseAlias = (value: any) => {
    if (Array.isArray(value)) {
      value.forEach(seekForAliases);
    } else {
      if (typeof value === 'object') {
        seekForAliases(value);
      }
    }
  };
  if (typeof response === 'object' && response) {
    const keys = Object.keys(response);
    if (keys.length < 1) {
      return;
    }
    keys.forEach((k) => {
      const value = response[k];
      if (k.indexOf('__alias__') !== -1) {
        const [operation, alias] = k.split('__alias__');
        response[alias] = {
          [operation]: value,
        };
        delete response[k];
      }
      traverseAlias(value);
    });
  }
};

export const $ = (t: TemplateStringsArray): any => `ZEUS_VAR$${t.join('')}`;

export const resolverFor = <
  X,
  T extends keyof ValueTypes,
  Z extends keyof ValueTypes[T]
>(
  type: T,
  field: Z,
  fn: (
    args: Required<ValueTypes[T]>[Z] extends [infer Input, any] ? Input : any,
    source: any
  ) => Z extends keyof ModelTypes[T]
    ? ModelTypes[T][Z] | Promise<ModelTypes[T][Z]> | X
    : any
) => fn as (args?: any, source?: any) => any;

const handleFetchResponse = (
  response: Parameters<
    Extract<Parameters<ReturnType<typeof fetch>['then']>[0], Function>
  >[0]
): Promise<GraphQLResponse> => {
  if (!response.ok) {
    return new Promise((_, reject) => {
      response
        .text()
        .then((text) => {
          try {
            reject(JSON.parse(text));
          } catch (err) {
            reject(text);
          }
        })
        .catch(reject);
    });
  }
  return response.json();
};

export const apiFetch =
  (options: fetchOptions) =>
  (query: string, variables: Record<string, any> = {}) => {
    let fetchFunction = fetch;
    let queryString = query;
    let fetchOptions = options[1] || {};
    if (fetchOptions.method && fetchOptions.method === 'GET') {
      queryString = encodeURIComponent(query);
      return fetchFunction(`${options[0]}?query=${queryString}`, fetchOptions)
        .then(handleFetchResponse)
        .then((response: GraphQLResponse) => {
          if (response.errors) {
            throw new GraphQLError(response);
          }
          return response.data;
        });
    }
    return fetchFunction(`${options[0]}`, {
      body: JSON.stringify({ query: queryString, variables }),
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      ...fetchOptions,
    })
      .then(handleFetchResponse)
      .then((response: GraphQLResponse) => {
        if (response.errors) {
          throw new GraphQLError(response);
        }
        return response.data;
      });
  };

export const apiSubscription = (options: chainOptions) => (query: string) => {
  try {
    const queryString = options[0] + '?query=' + encodeURIComponent(query);
    const wsString = queryString.replace('http', 'ws');
    const host = (options.length > 1 && options[1]?.websocket?.[0]) || wsString;
    const webSocketOptions = options[1]?.websocket || [host];
    const ws = new WebSocket(...webSocketOptions);
    return {
      ws,
      on: (e: (args: any) => void) => {
        ws.onmessage = (event: any) => {
          if (event.data) {
            const parsed = JSON.parse(event.data);
            const data = parsed.data;
            if (data) {
              seekForAliases(data);
            }
            return e(data);
          }
        };
      },
      off: (e: (args: any) => void) => {
        ws.onclose = e;
      },
      error: (e: (args: any) => void) => {
        ws.onerror = e;
      },
      open: (e: () => void) => {
        ws.onopen = e;
      },
    };
  } catch {
    throw new Error('No websockets implemented');
  }
};

export const Thunder = (
  fn: FetchFunction,
  subscriptionFn: SubscriptionFunction
) => ({
  query: fullChainConstructor(fn, 'query', 'query_root'),
  mutation: fullChainConstructor(fn, 'mutation', 'mutation_root'),
  subscription: fullSubscriptionConstructor(
    subscriptionFn,
    'subscription',
    'subscription_root'
  ),
});

export const Chain = (...options: chainOptions) => ({
  query: fullChainConstructor(apiFetch(options), 'query', 'query_root'),
  mutation: fullChainConstructor(
    apiFetch(options),
    'mutation',
    'mutation_root'
  ),
  subscription: fullSubscriptionConstructor(
    apiSubscription(options),
    'subscription',
    'subscription_root'
  ),
});
export const Zeus = {
  query: (o: ValueTypes['query_root'], operationName?: string) =>
    queryConstruct('query', 'query_root', operationName)(o),
  mutation: (o: ValueTypes['mutation_root'], operationName?: string) =>
    queryConstruct('mutation', 'mutation_root', operationName)(o),
  subscription: (o: ValueTypes['subscription_root'], operationName?: string) =>
    queryConstruct('subscription', 'subscription_root', operationName)(o),
};
export const Selectors = {
  query: ZeusSelect<ValueTypes['query_root']>(),
  mutation: ZeusSelect<ValueTypes['mutation_root']>(),
  subscription: ZeusSelect<ValueTypes['subscription_root']>(),
};

export const Gql = Chain(
  'http://ec2-54-207-246-124.sa-east-1.compute.amazonaws.com:9002/v1/graphql'
);
